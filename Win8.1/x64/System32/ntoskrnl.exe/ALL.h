enum _PP_NPAGED_LOOKASIDE_NUMBER;
enum _HV_CPUID_FUNCTION;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum _NT_PRODUCT_TYPE;
struct _LIST_ENTRY;
struct _CM_RM;
enum _HARDWARE_COUNTER_TYPE;
struct _COUNTER_READING;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
struct _POP_FX_IDLE_STATE;
enum _TP_CALLBACK_PRIORITY;
enum _MODE;
struct _POP_FX_ACCOUNTING;
enum _EVENT_TYPE;
struct _GROUP_AFFINITY;
enum _SYSTEM_POWER_STATE;
enum _POOL_TYPE;
struct _SINGLE_LIST_ENTRY;
struct _M128A;
struct _XSAVE_FORMAT;
struct _CONTEXT;
struct _RTL_UMS_CONTEXT;
enum _EX_GEN_RANDOM_DOMAIN;
enum _FILE_INFORMATION_CLASS;
enum _FSINFOCLASS;
enum _DEVICE_RELATION_TYPE;
enum BUS_QUERY_ID_TYPE;
struct _POP_FX_PROVIDER;
enum DEVICE_TEXT_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
struct _IO_CACHE_INFO;
enum _INTERFACE_TYPE;
union _LARGE_INTEGER;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
enum _POWER_STATE_TYPE;
enum POWER_ACTION;
enum _IO_PRIORITY_HINT;
struct _COLORED_PAGE_INFO;
enum _MEMORY_CACHING_TYPE;
enum _MM_PAGE_ACCESS_TYPE;
enum _PF_FILE_ACCESS_TYPE;
union _ULARGE_INTEGER;
struct _KTIMER_TABLE_ENTRY;
enum _DEVICE_POWER_STATE;
struct _RTL_AVL_TREE;
struct _MMSUBSECTION_FLAGS;
struct _SUBSECTION;
enum _DEVICE_WAKE_DEPTH;
enum _WHEA_ERROR_TYPE;
enum _WHEA_ERROR_SEVERITY;
struct _MI_VAD_SEQUENTIAL_INFO;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _MMLISTS;
struct _SCSI_REQUEST_BLOCK;
enum _MI_PFN_CACHE_ATTRIBUTE;
struct _MMPTE_SOFTWARE;
enum _MI_SYSTEM_VA_TYPE;
enum _MI_STORE_BIT_TYPE;
enum _CM_LOAD_FAILURE_TYPE;
enum _PCW_CALLBACK_TYPE;
struct _MMPTE_LIST;
enum _TOKEN_INFORMATION_CLASS;
enum _PNP_DEVNODE_STATE;
struct _PCW_COUNTER_DESCRIPTOR;
enum _OB_OPEN_REASON;
struct _KDESCRIPTOR;
struct _KSPECIAL_REGISTERS;
struct _KPROCESSOR_STATE;
struct _IO_STATUS_BLOCK;
struct _KDEVICE_QUEUE_ENTRY;
struct _KAPC;
struct _IRP;
enum PROFILE_STATUS;
enum _ARBITER_REQUEST_SOURCE;
enum _POWER_REQUEST_TYPE;
enum _POWER_REQUEST_TYPE_INTERNAL;
union _XPF_MCE_FLAGS;
union _XPF_MC_BANK_FLAGS;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_MCE_DESCRIPTOR;
union _WHEA_NOTIFICATION_FLAGS;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WHEA_IPF_MCA_DESCRIPTOR;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_PCI_SLOT_NUMBER;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
union _AER_BRIDGE_DESCRIPTOR_FLAGS;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
enum _SECURITY_OPERATION_CODE;
enum _PROC_HYPERVISOR_STATE;
struct _THERMAL_ZONE_COUNTERS;
enum _POP_SPM_STATUS;
enum _HEAP_FAILURE_TYPE;
struct _ETW_PERF_COUNTERS;
enum _BLOB_ID;
enum _KWAIT_REASON;
enum _EX_POOL_PRIORITY;
enum _LOCK_OPERATION;
enum _IOP_PRIORITY_HINT;
struct _RTL_BALANCED_NODE;
struct _KLOCK_ENTRY_LOCK_STATE;
struct _RTL_RB_TREE;
struct _KLOCK_ENTRY;
enum _TRANSFER_TYPE;
enum _CREATE_FILE_TYPE;
struct _KSPIN_LOCK_QUEUE;
enum _ETW_RT_EVENT_LOSS;
enum _KPROFILE_SOURCE;
struct _XSTATE_CONTEXT;
enum _TOKEN_TYPE;
enum _SECURITY_IMPERSONATION_LEVEL;
struct _PROCESSOR_NUMBER;
struct _THREAD_PERFORMANCE_DATA;
struct _SYSTEM_POWER_STATE_CONTEXT;
union _POWER_STATE;
struct _IO_STACK_LOCATION;
enum _KTIMER2_TYPE;
enum IRPLOCK;
struct _flags;
struct _KNODE;
enum _PNP_DEVICE_DELETE_TYPE;
enum _TRACE_INFORMATION_CLASS;
enum _PS_ATTRIBUTE_NUM;
enum _KINTERRUPT_MODE;
union _SLIST_HEADER;
struct _GENERAL_LOOKASIDE_POOL;
enum _KINTERRUPT_POLARITY;
enum _USER_ACTIVITY_PRESENCE;
enum _WHEA_ERROR_SOURCE_STATE;
enum _TAG_UNNAMED_1;
struct _KTRANSACTION_HISTORY;
enum _DMA_WIDTH;
struct _DBGKD_SET_SPECIAL_CALL32;
enum _DMA_SPEED;
enum _PS_RESOURCE_TYPE;
struct _DBGKD_WRITE_BREAKPOINT64;
enum _ETW_HEADER_TYPE;
enum _PNP_VETO_TYPE;
enum _JOBOBJECTINFOCLASS;
enum _CM_SHARE_DISPOSITION;
enum _MM_PREEMPTIVE_TRIMS;
enum _ETW_BUFFER_STATE;
struct _DBGKD_SET_CONTEXT;
enum PROFILE_DEPARTURE_STYLE;
enum LSA_FOREST_TRUST_RECORD_TYPE;
struct _DBGKD_SET_INTERNAL_BREAKPOINT32;
enum SYSTEM_POWER_CONDITION;
struct _KDPC_LIST;
struct _KDPC_DATA;
struct _SID_AND_ATTRIBUTES_HASH;
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
struct _DISPATCHER_HEADER;
struct _KEVENT;
struct _FAST_MUTEX;
struct _CLIENT_ID;
struct _HANDLE_TRACE_DB_ENTRY;
struct _HANDLE_TRACE_DEBUG_INFO;
enum _TYPE_OF_MEMORY;
enum PPM_IDLE_BUCKET_TIME_TYPE;
struct _HMAP_DIRECTORY;
enum _DEVPROP_OPERATOR;
struct _TOKEN_AUDIT_POLICY;
enum _IRQ_PRIORITY;
enum _CM_DIRTY_VECTOR_OPERATION;
struct _CM_DIRTY_VECTOR_LOG_ENTRY;
enum POWER_POLICY_DEVICE_TYPE;
struct _GUID;
enum PS_CREATE_STATE;
enum _PLUGPLAY_EVENT_CATEGORY;
enum _MI_MEMORY_HIGHLOW;
struct _RTL_BITMAP;
struct _FREE_DISPLAY;
struct _DUAL;
struct _EX_PUSH_LOCK;
struct _MMSUPPORT_FLAGS;
struct _MMSUPPORT;
enum _ETW_STRING_TOKEN_TYPE;
enum _MM_POOL_TYPES;
enum _KWAIT_STATE;
enum _PROCESSOR_CACHE_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _EXCEPTION_DISPOSITION;
enum _EXQUEUEINDEX;
enum _MM_POOL_PRIORITIES;
enum _POP_DEVICE_IDLE_TYPE;
enum _KENLISTMENT_STATE;
enum HAL_APIC_DESTINATION_MODE;
struct _KTIMER_TABLE;
enum _ARBITER_ACTION;
struct _KTIMER;
struct _KDPC;
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO;
struct _INVERTED_FUNCTION_TABLE_ENTRY;
struct _INVERTED_FUNCTION_TABLE;
enum _HV_HYPERVISOR_INTERFACE;
struct _KAFFINITY_EX;
struct _PROCESSOR_IDLE_CONSTRAINTS;
struct _PROCESSOR_IDLE_PREPARE_INFO;
struct _PPM_VETO_ACCOUNTING;
struct _PPM_IDLE_STATE;
struct _PPM_IDLE_STATES;
struct PEPHANDLE__;
enum _KTHREAD_STATE;
enum _IO_ALLOCATION_ACTION;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
enum _INTERLOCKED_RESULT;
enum _PROC_PERF_UTILITY_TYPE;
enum _PS_PROTECTED_TYPE;
union _KSTACK_COUNT;
struct _PROC_IDLE_POLICY;
union _PPM_IDLE_SYNCHRONIZATION_STATE;
struct _PROC_FEEDBACK;
struct _PPM_FFH_THROTTLE_STATE_INFO;
struct _PROC_IDLE_SNAP;
struct _PROC_PERF_SNAP;
struct _PROC_PERF_UTILITY;
struct _PROCESSOR_POWER_STATE;
enum _KOBJECTS;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
struct _PROCESSOR_IDLE_DEPENDENCY;
enum _POLICY_AUDIT_EVENT_TYPE;
struct _POP_FX_DRIVER_CALLBACKS;
enum _PS_PROTECTED_SIGNER;
enum _PROCESS_VA_TYPE;
enum _PS_STD_HANDLE_STATE;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
enum _IO_SESSION_STATE;
enum _VI_DEADLOCK_RESOURCE_TYPE;
enum _EX_BALANCE_OBJECT;
struct _EXCEPTION_RECORD64;
struct _DBGKM_EXCEPTION64;
enum ReplacesCorHdrNumericDefines;
enum _FUNCTION_TABLE_TYPE;
struct _DEVICE_RELATIONS;
enum _PROCESS_SECTION_TYPE;
enum _REQUESTER_TYPE;
enum _PNP_DEVICE_ACTION_REQUEST;
struct _PP_LOOKASIDE_LIST;
enum _ARBITER_RESULT;
enum _ETW_PERFECT_HASH_FUNCTION_TYPE;
struct _DBGKD_WRITE_MEMORY64;
enum _LDR_DLL_LOAD_REASON;
enum _LDR_DDAG_STATE;
struct _X86_KTRAP_FRAME;
enum _PS_WAKE_REASON;
enum _OBJECT_INFORMATION_CLASS;
enum _KWAIT_BLOCK_STATE;
enum _KRESOURCEMANAGER_STATE;
struct _ECP_LIST;
enum _MM_POOL_FAILURE_REASONS;
enum _KPROCESS_STATE;
struct _KDEVICE_QUEUE;
enum _WORKING_SET_TYPE;
enum _KERNEL_STACK_LIMITS;
struct _IMAGE_DOS_HEADER;
enum _MI_CFG_BITMAP_TYPE;
struct CMP_OFFSET_ARRAY;
enum KTM_STATE;
enum _KTRANSACTION_STATE;
enum _KTRANSACTION_OUTCOME;
struct _EVENT_DESCRIPTOR;
struct _EVENT_HEADER;
struct _ETW_BUFFER_CONTEXT;
struct _EVENT_RECORD;
enum UoWActionType;
struct _EXHANDLE;
enum HSTORAGE_TYPE;
struct _GENERIC_MAPPING;
struct _ACCESS_REASONS;
struct _AUX_ACCESS_DATA;
enum _WOW64_SHARED_INFORMATION;
enum _REG_NOTIFY_CLASS;
enum _PERFINFO_MM_STAT;
enum _FILE_OBJECT_EXTENSION_TYPE;
enum _MI_DYNAMICBASE_BITMAP;
struct _HV_HYPERVISOR_VERSION_INFO;
enum _FS_FILTER_SECTION_SYNC_TYPE;
enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE;
struct _SEGMENT_FLAGS;
enum _DEVICE_RELATION_LEVEL;
struct _TXN_PARAMETER_BLOCK;
enum _POP_IO_STATUS;
enum INTERRUPT_CONNECTION_TYPE;
struct _HV_VENDOR_AND_MAX_FUNCTION;
enum _DUMP_EVENTS;
enum _ETW_NOTIFICATION_TYPE;
enum _RTL_GENERIC_COMPARE_RESULTS;
struct _MI_EXTRA_IMAGE_INFORMATION;
struct LIST_ENTRY64;
struct LIST_ENTRY32;
struct _MCGEN_TRACE_CONTEXT;
struct _MI_ACTIVE_WSLE_LISTHEAD;
struct _KSYSTEM_TIME;
struct _XSTATE_FEATURE;
struct _XSTATE_CONFIGURATION;
struct _KUSER_SHARED_DATA;
struct _MMWSLENTRY;
struct _MMWSLE_FREE_ENTRY;
struct _DEVICE_OBJECT_LIST_ENTRY;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _MI_CFG_BITMAP_INFO;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _SEP_LOWBOX_HANDLES_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _MMVAD_FLAGS;
struct _MMVAD_FLAGS1;
struct _MMVAD_SHORT;
struct _CM_DIRTY_VECTOR_LOG;
struct DOCK_INTERFACE;
struct _RTL_SPLAY_LINKS;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _OBJECT_CREATE_INFORMATION;
struct _IMAGE_FILE_HEADER;
struct _HHIVE;
struct _LUID;
struct _ETW_BUFFER_QUEUE;
struct _EX_FAST_REF;
struct _UNICODE_STRING;
struct _ETW_REF_CLOCK;
struct _KMUTANT;
struct _TOKEN_SOURCE;
struct _TOKEN_CONTROL;
struct _SECURITY_CLIENT_CONTEXT;
struct _WMI_LOGGER_CONTEXT;
struct _TP_POOL;
struct _IMAGE_DATA_DIRECTORY;
struct _WAIT_CONTEXT_BLOCK;
struct _TP_CLEANUP_GROUP;
struct _ACTIVATION_CONTEXT;
struct _TP_CALLBACK_INSTANCE;
struct _MMPTE_TIMESTAMP;
struct _TP_CALLBACK_ENVIRON_V3;
struct tagSWITCH_CONTEXT_DATA;
struct _PCW_INSTANCE;
struct _VACB;
union _KGDTENTRY64;
union _KWAIT_STATUS_REGISTER;
struct _KAPC_STATE;
struct _KWAIT_BLOCK;
struct _KTHREAD;
struct _CHILD_LIST;
struct _CM_KEY_REFERENCE;
struct _CM_KEY_NODE;
struct _CM_KEY_VALUE;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _CM_KEY_SECURITY;
struct _CM_KEY_INDEX;
struct _CM_BIG_DATA;
union _u;
struct _KTSS64;
struct _NT_TIB;
struct _KGATE;
struct _CACHE_DESCRIPTOR;
struct _SYNCH_COUNTERS;
struct _FILESYSTEM_DISK_COUNTERS;
struct _KENTROPY_TIMING_STATE;
struct _KREQUEST_PACKET;
struct _REQUEST_MAILBOX;
struct _KPRCB;
struct _KPCR;
struct _ETW_SESSION_PERF_COUNTERS;
struct _BITMAP_RANGE;
struct _GDI_TEB_BATCH;
struct _TEB;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _MBCB;
struct _LOGGED_STREAM_CALLBACK_V2;
struct _EXCEPTION_RECORD;
struct _CM_INDEX_HINT_BLOCK;
union _WHEA_REVISION;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_TIMESTAMP;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_PERSISTENCE_INFO;
struct _WHEA_ERROR_RECORD_HEADER;
struct _PROC_FEEDBACK_COUNTER;
struct _LOGGED_STREAM_CALLBACK_V1;
struct _PO_DEVICE_NOTIFY;
struct _PO_IRP_QUEUE;
struct _PO_IRP_MANAGER;
struct _DEVICE_NODE;
union _KEXECUTE_OPTIONS;
struct _KPROCESS;
struct _MDL;
struct _PEB;
struct _MMIO_TRACKER;
struct _PEB_LDR_DATA;
struct _CURDIR;
struct _STRING;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _OBJECT_HANDLE_COUNT_ENTRY;
struct _OBJECT_HANDLE_COUNT_DATABASE;
struct _KQUEUE;
struct _RTL_BITMAP_EX;
struct _MI_SYSTEM_PTE_TYPE;
struct _MMSECURE_FLAGS;
struct _MMADDRESS_LIST;
struct _WHEAP_INFO_BLOCK;
struct _RTL_CRITICAL_SECTION;
struct _MMPTE_HARDWARE;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _PCW_COUNTER_INFORMATION;
struct _IO_COMPLETION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ASSEMBLY_STORAGE_MAP;
struct _FLS_CALLBACK_INFO;
struct _OWNER_ENTRY;
struct _ACTIVATION_CONTEXT_STACK;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _ALPC_HANDLE_TABLE;
struct _QUAD;
struct _EXT_DELETE_PARAMETERS;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct VACB_LEVEL_ALLOCATION_LIST;
struct _PROC_PERF_HISTORY_ENTRY;
struct _HIVE_WRITE_WAIT_QUEUE;
struct _KSHARED_READY_QUEUE;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _IMAGE_OPTIONAL_HEADER64;
struct _IMAGE_NT_HEADERS64;
struct _HANDLE_TABLE_ENTRY_INFO;
struct _OB_DUPLICATE_OBJECT_STATE;
struct _IO_CLIENT_EXTENSION;
struct _KSCB;
struct _KSCHEDULING_GROUP;
struct _LUID_AND_ATTRIBUTES;
struct _PRIVILEGE_SET;
struct _PRIVATE_CACHE_MAP_FLAGS;
struct _PRIVATE_CACHE_MAP;
struct _SHARED_CACHE_MAP;
union _MM_PAGE_ACCESS_INFO_FLAGS;
struct _KTRAP_FRAME;
struct _KPRIQUEUE;
struct _EX_WORK_QUEUE;
struct _KSEMAPHORE;
union _PS_CLIENT_SECURITY_CONTEXT;
struct _EX_RUNDOWN_REF;
struct _ETHREAD;
struct _KALPC_REGION;
struct _DRIVER_OBJECT;
struct _KTHREAD_COUNTERS;
struct _PERFINFO_PPM_STATE_SELECTION;
struct _DBGKD_SWITCH_PARTITION;
struct _XSTATE_SAVE;
struct _PPM_SELECTION_STATISTICS;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_AREA;
struct _SECURITY_SUBJECT_CONTEXT;
struct _INITIAL_PRIVILEGE_SET;
struct _ACCESS_STATE;
union _POP_FX_COMPONENT_FLAGS;
struct _UMS_CONTROL_BLOCK;
struct _PEBS_DS_SAVE_AREA;
struct _KUMS_CONTEXT_HEADER;
struct _KEXCEPTION_FRAME;
struct _HEAP_ENTRY;
struct _HEAP_SEGMENT;
struct _PROC_PERF_DOMAIN;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _EX_PUSH_LOCK_CACHE_AWARE;
struct _AMD64_DBGKD_CONTROL_SET;
struct _DBGKD_GET_VERSION64;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
struct _PROC_PERF_LOAD;
struct _SID_AND_ATTRIBUTES;
struct _VACB_LEVEL_REFERENCE;
struct _GENERAL_LOOKASIDE;
struct _OBJECT_DIRECTORY;
struct _LOOKASIDE_LIST_EX;
struct _ALPC_COMPLETION_LIST_STATE;
struct _RTL_SRWLOCK;
struct _ALPC_COMPLETION_LIST_HEADER;
struct _FILE_OBJECT;
struct _PORT_MESSAGE;
struct _KERNEL_STACK_SEGMENT;
struct _KSTACK_CONTROL;
struct _WORK_QUEUE_ENTRY;
struct _CM_CELL_REMAP_BLOCK;
struct _CM_KEY_SECURITY_CACHE_ENTRY;
struct _INTERRUPT_REMAPPING_INFO;
struct _PROC_IDLE_STATE_BUCKET;
struct _PROC_IDLE_STATE_ACCOUNTING;
struct _PROC_IDLE_ACCOUNTING;
struct _ISRDPCSTATS;
struct _PF_KERNEL_GLOBALS;
struct _PCW_PROCESSOR_INFO;
struct PROCESSOR_PERFSTATE_POLICY;
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;
struct _STRING32;
struct _PEB32;
struct _MM_PAGE_ACCESS_INFO;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _PROC_PERF_CONSTRAINT;
struct _OBJECT_HEADER_PADDING_INFO;
struct _CM_KEY_HASH;
struct _CELL_DATA;
struct _CM_CACHED_VALUE_INDEX;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_REMOVE_LOCK;
struct _CACHED_CHILD_LIST;
struct _DBGKD_WRITE_BREAKPOINT32;
struct _KENLISTMENT_HISTORY;
struct _RTL_BALANCED_LINKS;
struct _KTMOBJECT_NAMESPACE_LINK;
union _CLS_LSN;
struct _WORK_QUEUE_ITEM;
struct _KTRANSACTION;
struct _DBGKD_SET_INTERNAL_BREAKPOINT64;
struct _CM_NOTIFY_BLOCK;
struct _PPM_CONCURRENCY_ACCOUNTING;
struct _CM_INTENT_LOCK;
struct _PROC_PERF_HISTORY;
struct _PENDING_RELATIONS_LIST_ENTRY;
struct _HMAP_ENTRY;
struct _HIVE_WAIT_PACKET;
struct _DEVICE_MAP;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
struct _VI_POOL_PAGE_HEADER;
struct _LPCP_MESSAGE;
union _KIDTENTRY64;
struct _KFLOATING_SAVE;
struct _SINGLE_LIST_ENTRY32;
struct _X86_KTRAP_FRAME_BLUE;
struct _EXT_SET_PARAMETERS_V0;
struct _KRESOURCEMANAGER_COMPLETION_BINDING;
struct _SLIST_ENTRY;
struct _NPAGED_LOOKASIDE_LIST;
struct _PAGED_LOOKASIDE_LIST;
struct _ETW_REALTIME_CONSUMER;
struct _ENODE;
struct _TERMINATION_PORT;
struct _DEVICE_OBJECT;
struct _HV_HYPERVISOR_HARDWARE_FEATURES;
struct _DRIVER_EXTENSION;
struct _RELATION_LIST;
struct _FS_FILTER_CALLBACKS;
struct _RTL_AVL_TABLE;
struct _KTMOBJECT_NAMESPACE;
struct _KRESOURCEMANAGER;
union _FS_FILTER_PARAMETERS;
struct _FS_FILTER_CALLBACK_DATA;
struct _VPB;
struct _TIME_FIELDS;
struct _SECTION_OBJECT_POINTERS;
struct _ERESOURCE;
struct _POOL_TRACKER_TABLE;
struct _WHEA_ERROR_RECORD;
struct _WHEAP_ERROR_RECORD_WRAPPER;
struct _SEP_LOWBOX_NUMBER_MAPPING;
struct _WHEAP_ERROR_SOURCE;
struct _SEGMENT_OBJECT;
struct _FAST_IO_DISPATCH;
struct _SESSION_LOWBOX_MAP;
struct _MM_DRIVER_VERIFIER_DATA;
struct _STRING64;
struct _CM_NAME_HASH;
struct _CM_NAME_CONTROL_BLOCK;
struct _VI_FAULT_TRACE;
struct _KINTERRUPT;
struct _PNP_DEVICE_COMPLETION_QUEUE;
struct _FILE_BASIC_INFORMATION;
struct _KSECONDARY_IDT_ENTRY;
struct _FILE_STANDARD_INFORMATION;
struct _OBJECT_HEADER_NAME_INFO;
struct _PCW_REGISTRATION_INFORMATION;
struct _SE_AUDIT_PROCESS_CREATION_INFO;
struct _ALPC_PROCESS_CONTEXT;
struct _PS_PROTECTION;
struct _EPROCESS;
struct _PCW_MASK_INFORMATION;
union _PCW_CALLBACK_INFORMATION;
struct _PROCESS_DISK_COUNTERS;
struct _WNF_STATE_NAME;
struct _PS_WAKE_INFORMATION;
struct _JOBOBJECT_WAKE_FILTER;
struct _EPROCESS_VALUES;
struct _EJOB;
struct _JOB_ACCESS_STATE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OBJECT_TYPE;
struct _JOB_NOTIFICATION_INFORMATION;
struct _CALLBACK_OBJECT;
struct _IO_MINI_COMPLETION_PACKET_USER;
struct _IO_PRIORITY_INFO;
struct _JOB_CPU_RATE_CONTROL;
struct _PAGEFAULT_HISTORY;
struct _EPROCESS_QUOTA_BLOCK;
struct _ALPC_COMMUNICATION_INFO;
struct _HANDLE_TABLE_FREE_LIST;
struct _HANDLE_TABLE;
struct _HANDLE_TABLE_ENTRY;
struct _KALPC_MESSAGE_ATTRIBUTES;
struct _KALPC_MESSAGE;
struct _HEAP_COUNTERS;
struct _HEAP_TUNING_PARAMETERS;
struct _HEAP;
struct _OBJECT_NAME_INFORMATION;
struct _MI_USER_VA_INFO;
struct _MMWSL;
struct _HEAP_PSEUDO_TAG_ENTRY;
struct _MMWSLE_NONDIRECT_HASH;
struct _MMWSLE_HASH;
struct _MMWSLE;
struct _ALPC_PORT_ATTRIBUTES;
struct _KALPC_HANDLE_DATA;
struct _MMVAD_FLAGS2;
struct _MMVAD;
struct _ALPC_COMPLETION_LIST;
struct _MI_PHYSMEM_BLOCK;
struct _MI_VAD_EVENT_BLOCK;
struct _IOP_IRP_EXTENSION;
struct _HARDWARE_PTE;
struct _MMPTE_PROTOTYPE;
struct _MMPTE_TRANSITION;
struct _MMPTE_SUBSECTION;
struct _MMPTE;
struct _MMINPAGE_FLAGS;
struct _MMINPAGE_SUPPORT;
struct _RELATIVE_SYMLINK_INFO;
struct _MMPFNENTRY;
struct _MMPFN;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MMSECTION_FLAGS;
struct _CONTROL_AREA;
struct _SEGMENT;
struct _MMEXTEND_INFO;
struct _SECTION_IMAGE_INFORMATION;
struct _MI_SECTION_IMAGE_INFORMATION;
struct _MI_CONTROL_AREA_WAIT_BLOCK;
struct _MI_CACHED_PTE;
struct _IMAGE_SECURITY_CONTEXT;
struct _MI_IMAGE_SECURITY_REFERENCE;
union _MM_STORE_KEY;
struct _DBGKD_READ_MEMORY32;
struct _DBGKD_WRITE_MEMORY32;
struct _DBGKD_READ_MEMORY64;
struct _DBGKD_GET_CONTEXT;
struct _DBGKD_RESTORE_BREAKPOINT;
struct _DBGKD_CONTINUE;
struct _X86_DBGKD_CONTROL_SET;
struct _IA64_DBGKD_CONTROL_SET;
struct _ARM_DBGKD_CONTROL_SET;
struct _ARMCE_DBGKD_CONTROL_SET;
struct _PPC_DBGKD_CONTROL_SET;
struct _DBGKD_ANY_CONTROL_SET;
struct _DBGKD_CONTINUE2;
struct _DBGKD_READ_WRITE_IO32;
struct _DBGKD_READ_WRITE_IO_EXTENDED32;
struct _DBGKD_QUERY_SPECIAL_CALLS;
struct _DBGKD_GET_INTERNAL_BREAKPOINT32;
struct _DBGKD_GET_VERSION32;
struct _DBGKD_BREAKPOINTEX;
struct _DBGKD_READ_WRITE_MSR;
struct _DBGKD_SEARCH_MEMORY;
struct _DBGKD_CONTEXT_EX;
struct _MI_LARGEPAGE_MEMORY_INFO;
struct _POP_RW_LOCK;
union _POP_FX_DEVICE_STATUS;
struct _PO_DIAG_STACK_RECORD;
struct _HEAP_FREE_ENTRY;
struct _DYNAMIC_FUNCTION_TABLE;
struct _HEAP_ENTRY_EXTRA;
struct _HEAP_VIRTUAL_ALLOC_ENTRY;
struct _PO_HIBER_PERF;
struct PO_MEMORY_IMAGE;
struct _HEAP_LIST_LOOKUP;
struct _HEAP_TAG_ENTRY;
struct _VF_POOL_TRACE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
struct POWER_ACTION_POLICY;
struct SYSTEM_POWER_LEVEL;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE;
struct _DEVOBJ_EXTENSION;
struct _SYSTEM_POWER_POLICY;
struct _BLOB_TYPE;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _COMPRESSED_DATA_INFO;
struct _DIRTY_PAGE_STATISTICS;
struct _CC_EXTERNAL_CACHE_INFO;
struct _CM_TRANS;
struct _CM_WORKITEM;
struct _CMHIVE;
struct _LDRP_DLL_SNAP_CONTEXT;
struct _IO_SECURITY_CONTEXT;
struct _INTERRUPT_HT_INTR_INFO;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _CM_KEY_CONTROL_BLOCK;
struct _CM_KEY_SECURITY_CACHE;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SID;
struct _FILE_GET_QUOTA_INFORMATION;
struct _INTERFACE;
struct _DEVICE_CAPABILITIES;
struct _CM_KCB_UOW;
struct _SEP_TOKEN_PRIVILEGES;
struct _KENLISTMENT;
struct _MI_VERIFIER_POOL_HEADER;
struct _POWER_SEQUENCE;
struct _VI_POOL_ENTRY_INUSE;
struct _CM_RESOURCE_LIST;
struct _ETW_PMC_SUPPORT;
struct _HAL_PMC_COUNTERS;
struct _ETW_LAST_ENABLE_INFO;
struct _TRACE_ENABLE_INFO;
struct _ETW_GUID_ENTRY;
struct _IO_TIMER;
struct PROCESSOR_IDLESTATE_INFO;
struct _OBJECT_DIRECTORY_ENTRY;
struct _SEP_LOWBOX_NUMBER_ENTRY;
struct _LOCK_HEADER;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _KTM;
struct _OBJECT_HEADER;
struct _ETW_SYSTEMTIME;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _RTL_TIME_ZONE_INFORMATION;
struct _OBJECT_HANDLE_INFORMATION;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
struct _PERFINFO_GROUPMASK;
struct _MM_PAGE_ACCESS_INFO_HEADER;
struct _POP_ACTION_TRIGGER;
union _WHEA_ERROR_PACKET_FLAGS;
struct _WHEA_ERROR_PACKET_V2;
struct _PHYSICAL_MEMORY_RUN;
struct _PHYSICAL_MEMORY_DESCRIPTOR;
struct _VF_ADDRESS_RANGE;
struct _VI_DEADLOCK_GLOBALS;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _HEAP_FREE_ENTRY_EXTRA;
struct _iobuf;
struct _KLOCK_QUEUE_HANDLE;
struct _MMPFNLIST;
struct _EVENT_PAYLOAD_PREDICATE;
struct _AGGREGATED_PAYLOAD_FILTER;
struct _MMPAGING_FILE;
struct _ETW_FILTER_STRING_TOKEN_ELEMENT;
struct _MODWRITER_FLAGS;
struct _MMMOD_WRITER_MDL_ENTRY;
struct _OBJECT_HEADER_HANDLE_INFO;
struct _MI_PAGING_FILE_SPACE_BITMAPS;
struct tagSWITCH_CONTEXT_ATTRIBUTE;
struct tagSWITCH_CONTEXT;
struct _OBP_LOOKUP_CONTEXT;
union _WHEA_ERROR_STATUS;
struct _WHEAP_ERROR_SOURCE_TABLE;
struct _MI_SESSION_DRIVER_UNLOAD;
struct _VF_AVL_TREE_NODE;
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;
struct _VF_TARGET_DRIVER;
struct _KALPC_SECTION;
struct _HBASE_BLOCK;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _HMAP_TABLE;
struct _HBIN;
struct _HCELL;
struct _HIVE_LOAD_FAILURE;
struct _PCW_REGISTRATION;
struct _CLIENT_ID32;
struct _DUMP_INITIALIZATION_CONTEXT;
union _FILE_SEGMENT_ELEMENT;
struct _PCW_BUFFER;
struct _PCW_DATA;
struct _CONTEXT32_UPDATE;
struct _KALPC_SECURITY_DATA;
struct _HV_HYPERVISOR_INTERFACE_INFO;
union _HV_PARTITION_PRIVILEGE_MASK;
struct _HV_HYPERVISOR_FEATURES;
struct _HV_ENLIGHTENMENT_INFORMATION;
struct _HV_IMPLEMENTATION_LIMITS;
union _HV_CPUID_RESULT;
struct _KALPC_VIEW;
struct _EVENT_FILTER_DESCRIPTOR;
struct _DIAGNOSTIC_BUFFER;
struct _POP_FX_WORK_ORDER;
struct _POP_FX_DEVICE;
struct _POP_IRP_DATA;
struct _DBGKD_FILL_MEMORY;
struct _DBGKD_READ_WRITE_IO64;
struct _DBGKD_READ_WRITE_IO_EXTENDED64;
struct _DBGKD_SET_SPECIAL_CALL64;
struct _DBGKD_GET_INTERNAL_BREAKPOINT64;
struct _DBGKD_GET_SET_BUS_DATA;
struct _DBGKD_QUERY_MEMORY;
struct _DBGKD_MANIPULATE_STATE64;
struct _POP_FX_PLUGIN;
union _CPU_INFO;
struct _LAZY_WRITER;
struct _HEAP_LOCK;
struct _ARBITER_LIST_ENTRY;
struct _MI_TRIAGE_DUMP_DATA;
struct _GDI_TEB_BATCH64;
struct _PEP_CRASHDUMP_INFORMATION;
struct _POP_FX_COMPONENT;
struct _OBJECT_REF_STACK_INFO;
struct _POP_FX_DEPENDENT;
struct _PLUGPLAY_EVENT_BLOCK;
struct _PNP_DEVICE_EVENT_ENTRY;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
struct _RELATION_LIST_ENTRY;
struct _PNP_ASSIGN_RESOURCES_CONTEXT;
struct _PNP_RESOURCE_REQUEST;
struct _ALPC_HANDLE_ENTRY;
struct _EXCEPTION_RECORD32;
struct _DBGKM_EXCEPTION32;
struct _DBGKD_LOAD_SYMBOLS64;
struct _DBGKD_LOAD_SYMBOLS32;
struct _BLOB;
struct _CACHE_UNINITIALIZE_EVENT;
struct _ARBITER_INTERFACE;
struct _LPCP_PORT_QUEUE;
struct _LPCP_PORT_OBJECT;
struct _DBGKD_MANIPULATE_STATE32;
struct _DIRTY_PAGE_THRESHOLDS;
struct _LOG_HANDLE_CONTEXT;
struct _VOLUME_CACHE_MAP;
struct _DELAY_ACK_FO;
struct _VACB_ARRAY_HEADER;
struct _CACHE_MANAGER_CALLBACKS;
struct _BLOB_COUNTERS;
struct _ALPC_PORT;
struct _KALPC_RESERVE;
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_DUMP_CONTROL;
struct _RSDS;
struct _ETW_PAYLOAD_FILTER;
struct _PORT_MESSAGE32;
struct _ALPC_DISPATCH_CONTEXT;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
struct _REMOTE_PORT_VIEW;
struct _IOP_FILE_OBJECT_EXTENSION;
struct _OPEN_PACKET;
struct _DUMMY_FILE_OBJECT;
struct _POP_THERMAL_ZONE_METRICS;
struct _TRACE_LOGFILE_HEADER;
struct _ETW_STACK_CACHE;
struct _WMI_BUFFER_HEADER;
struct _ETW_LOGGER_HANDLE;
struct _SEP_AUDIT_POLICY;
struct _TOKEN;
struct _ACL;
struct _SEP_LOWBOX_HANDLES_TABLE;
struct _SEP_LOGON_SESSION_REFERENCES;
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
struct _OBJECT_HEADER_QUOTA_INFO;
struct _OBJECT_HEADER_PROCESS_INFO;
struct _PO_NOTIFY_ORDER_LEVEL;
struct _OBJECT_HEADER_CREATOR_INFO;
struct _OBJECT_HEADER_AUDIT_INFO;
struct _WHEAP_WORK_QUEUE;
struct _RTL_ATOM_TABLE;
struct _INTERRUPT_VECTOR_DATA;
struct _INTERRUPT_CONNECTION_DATA;
struct _VI_POOL_ENTRY;
struct _SYSPTES_HEADER;
struct _POOL_TRACKER_BIG_PAGES;
struct _CM_KEY_BODY;
struct _CM_KEY_HASH_TABLE_ENTRY;
struct _POP_PER_PROCESSOR_CONTEXT;
struct _MM_SESSION_SPACE_FLAGS;
struct _KTMNOTIFICATION_PACKET;
struct _THERMAL_INFORMATION_EX;
struct _VI_VERIFIER_ISSUE;
struct _EXCEPTION_POINTERS;
struct _OBJECT_REF_INFO;
struct _LEARNING_MODE_DATA;
struct _HEAP_UCR_DESCRIPTOR;
struct _POOL_DESCRIPTOR;
struct _HIVE_LIST_ENTRY;
struct _IOV_FORCED_PENDING_TRACE;
struct _IOP_IRP_EXTENSION_STATUS;
struct _PI_BUS_EXTENSION;
struct _DEVICE_DESCRIPTION;
struct _IO_WORKITEM;
struct _UNEXPECTED_INTERRUPT;
struct _HEAP_STOP_ON_TAG;
struct _HEAP_STOP_ON_VALUES;
struct _CALL_HASH_ENTRY;
struct _VF_TRACKER_STAMP;
struct _VI_TRACK_IRQL;
struct _RH_OP_CONTEXT;
struct _MEMORY_ALLOCATION_DESCRIPTOR;
struct _THERMAL_INFORMATION;
struct _MAPPED_FILE_SEGMENT;
struct _NT_TIB64;
struct _CLIENT_ID64;
struct _TEB64;
struct _ETIMER;
struct _DIAGNOSTIC_CONTEXT;
struct _LOCK_TRACKER;
struct _POOL_HEADER;
struct _POOL_BLOCK_HEAD;
struct _ARBITER_ORDERING_LIST;
struct _ARBITER_INSTANCE;
struct _RTL_RANGE_LIST;
struct _ARBITER_ORDERING;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
struct _ARBITER_PARAMETERS;
struct _ARBITER_CONFLICT_INFO;
struct _ARBITER_ALLOCATION_STATE;
struct _ARBITER_ALTERNATIVE;
struct _RTL_RANGE;
struct _POP_POLICY_DEVICE;
struct _THERMAL_POLICY;
struct _POP_THERMAL_ZONE;
struct _POOL_HACKER;
struct _VERIFIER_SHARED_EXPORT_THUNK;
struct _VF_TARGET_VERIFIED_DRIVER_DATA;
struct _VF_SUSPECT_DRIVER_ENTRY;
struct _BUS_EXTENSION_LIST;
struct _WAITING_IRP;
struct _POP_SYSTEM_IDLE;
struct _POP_IRP_WORKER_ENTRY;
struct _IMAGE_SECTION_HEADER;
struct _IMAGE_DEBUG_DIRECTORY;
struct _ETW_WMITRACE_WORK;
struct _PNP_DEVICE_COMPLETION_REQUEST;
struct _SECTION_OBJECT;
struct _HEAP_LOOKASIDE;
struct _RTL_ATOM_TABLE_REFERENCE;
struct _RTL_ATOM_TABLE_ENTRY;
struct BATTERY_REPORTING_SCALE;
struct SYSTEM_POWER_CAPABILITIES;
struct _POP_POWER_ACTION;
struct _POP_SHUTDOWN_BUG_CHECK;
struct _PO_DEVICE_NOTIFY_ORDER;
struct _POP_DEVICE_SYS_STATE;
struct _POP_IO_INFO;
struct _POP_HIBER_CONTEXT;
struct _DUMP_STACK_CONTEXT;
struct _ADAPTER_OBJECT;
struct _PI_RESOURCE_ARBITER_ENTRY;
struct _SECURITY_DESCRIPTOR;
struct _PEB64;
struct _MMSESSION;
struct _MM_PAGED_POOL_INFO;
struct _MI_PTE_CHAIN_HEAD;
struct _MI_SPECIAL_POOL;
struct _MM_SESSION_SPACE;
union _MMVIEW_CONTROL_AREA;
struct _MMVIEW;
struct _NONOPAQUE_OPLOCK;
struct _WHEA_MEMORY_ERROR_SECTION;
struct _VI_DEADLOCK_RESOURCE;
struct _VI_DEADLOCK_THREAD;
struct _VI_DEADLOCK_NODE;
struct _MI_REVERSE_VIEW_MAP;
struct _POP_CURRENT_BROADCAST;
struct _PNP_DEVICE_EVENT_LIST;
struct _IOV_IRP_TRACE;
struct _POP_TRIGGER_WAIT;
struct _RTLP_RANGE_LIST_ENTRY;
struct PROCESSOR_IDLESTATE_POLICY;
struct _PTE_TRACKER;
struct _SHARED_CACHE_MAP_LIST_CURSOR;
struct _PNP_DEVICE_ACTION_ENTRY;
struct _ETW_REG_ENTRY;
struct _ETW_FILTER_HEADER;
struct _ETW_FILTER_PID;
struct _ETW_FILTER_STRING_TOKEN;
struct _ETW_PERFECT_HASH_FUNCTION;
struct _EVENT_FILTER_HEADER;
struct _ETW_REPLY_QUEUE;
struct _ETW_QUEUE_ENTRY;
struct _ETWP_NOTIFICATION_HEADER;
struct _LPCP_NONPAGED_PORT_QUEUE;
struct _LDR_DATA_TABLE_ENTRY;
struct _LDRP_CSLIST;
struct _LDR_DDAG_NODE;
struct _LDR_SERVICE_TAG_RECORD;
struct _VF_KE_CRITICAL_REGION_TRACE;
struct _NT_TIB32;
struct _GDI_TEB_BATCH32;
struct _TEB32;
struct _VF_AVL_TREE;
struct _VF_AVL_TABLE;
struct _NB10;
union _CVDD;
struct _PROVIDER_BINARY_ENTRY;
struct _VF_WATCHDOG_IRP;
struct _OBJECT_SYMBOLIC_LINK;
struct _VF_TRACKER;
struct _CALL_PERFORMANCE_DATA;
struct _STACK_TABLE;
struct _OBJECT_REF_TRACE;
struct _DEFERRED_WRITE;

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER
{
  LookasideSmallIrpList = 0,
  LookasideMediumIrpList = 1,
  LookasideLargeIrpList = 2,
  LookasideMdlList = 3,
  LookasideCreateInfoList = 4,
  LookasideNameBufferList = 5,
  LookasideTwilightList = 6,
  LookasideCompletionList = 7,
  LookasideScratchBufferList = 8,
  LookasideMaximumList = 9,
} PP_NPAGED_LOOKASIDE_NUMBER, *PPP_NPAGED_LOOKASIDE_NUMBER;

typedef enum _HV_CPUID_FUNCTION
{
  HvCpuIdFunctionVersionAndFeatures = 1,
  HvCpuIdFunctionHvVendorAndMaxFunction = 0x40000000,
  HvCpuIdFunctionHvInterface = 0x40000001,
  HvCpuIdFunctionMsHvVersion = 0x40000002,
  HvCpuIdFunctionMsHvFeatures = 0x40000003,
  HvCpuIdFunctionMsHvEnlightenmentInformation = 0x40000004,
  HvCpuIdFunctionMsHvImplementationLimits = 0x40000005,
  HvCpuIdFunctionMsHvHardwareFeatures = 0x40000006,
  HvCpuIdFunctionMaxReserved = 0x40000006,
} HV_CPUID_FUNCTION, *PHV_CPUID_FUNCTION;

enum SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
};

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0008 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0010 */

typedef struct _CM_RM
{
  /* 0x0000 */ struct _LIST_ENTRY RmListEntry;
  /* 0x0010 */ struct _LIST_ENTRY TransactionListHead;
  /* 0x0020 */ void* TmHandle;
  /* 0x0028 */ void* Tm;
  /* 0x0030 */ void* RmHandle;
  /* 0x0038 */ void* KtmRm;
  /* 0x0040 */ unsigned long RefCount;
  /* 0x0044 */ unsigned long ContainerNum;
  /* 0x0048 */ unsigned __int64 ContainerSize;
  /* 0x0050 */ struct _CMHIVE* CmHive;
  /* 0x0058 */ void* LogFileObject;
  /* 0x0060 */ void* MarshallingContext;
  /* 0x0068 */ unsigned long RmFlags;
  /* 0x006c */ long LogStartStatus1;
  /* 0x0070 */ long LogStartStatus2;
  /* 0x0074 */ long Padding_0;
  /* 0x0078 */ unsigned __int64 BaseLsn;
  /* 0x0080 */ struct _ERESOURCE* RmLock;
} CM_RM, *PCM_RM; /* size: 0x0088 */

typedef enum _HARDWARE_COUNTER_TYPE
{
  PMCCounter = 0,
  MaxHardwareCounterType = 1,
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef struct _COUNTER_READING
{
  /* 0x0000 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* 0x0004 */ unsigned long Index;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 Total;
} COUNTER_READING, *PCOUNTER_READING; /* size: 0x0018 */

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef struct _POP_FX_IDLE_STATE
{
  /* 0x0000 */ unsigned __int64 TransitionLatency;
  /* 0x0008 */ unsigned __int64 ResidencyRequirement;
  /* 0x0010 */ unsigned long NominalPower;
  /* 0x0014 */ long __PADDING__[1];
} POP_FX_IDLE_STATE, *PPOP_FX_IDLE_STATE; /* size: 0x0018 */

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
} MODE, *PMODE;

typedef struct _POP_FX_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned char Active;
  /* 0x0009 */ char Padding_1[3];
  /* 0x000c */ unsigned long DripsRequiredState;
  /* 0x0010 */ long Level;
  /* 0x0014 */ long Padding_2;
  /* 0x0018 */ __int64 ActiveStamp;
  /* 0x0020 */ unsigned __int64 CsActiveTime;
  /* 0x0028 */ __int64 CriticalActiveTime;
} POP_FX_ACCOUNTING, *PPOP_FX_ACCOUNTING; /* size: 0x0030 */

typedef enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

typedef struct _GROUP_AFFINITY
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned short Group;
  /* 0x000a */ unsigned short Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; /* size: 0x0010 */

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolBase = 0,
  NonPagedPoolBaseMustSucceed = 2,
  NonPagedPoolBaseCacheAligned = 4,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
} POOL_TYPE, *PPOOL_TYPE;

typedef struct _SINGLE_LIST_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; /* size: 0x0008 */

typedef struct _M128A
{
  /* 0x0000 */ unsigned __int64 Low;
  /* 0x0008 */ __int64 High;
} M128A, *PM128A; /* size: 0x0010 */

typedef struct _XSAVE_FORMAT
{
  /* 0x0000 */ unsigned short ControlWord;
  /* 0x0002 */ unsigned short StatusWord;
  /* 0x0004 */ unsigned char TagWord;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short ErrorOpcode;
  /* 0x0008 */ unsigned long ErrorOffset;
  /* 0x000c */ unsigned short ErrorSelector;
  /* 0x000e */ unsigned short Reserved2;
  /* 0x0010 */ unsigned long DataOffset;
  /* 0x0014 */ unsigned short DataSelector;
  /* 0x0016 */ unsigned short Reserved3;
  /* 0x0018 */ unsigned long MxCsr;
  /* 0x001c */ unsigned long MxCsr_Mask;
  /* 0x0020 */ struct _M128A FloatRegisters[8];
  /* 0x00a0 */ struct _M128A XmmRegisters[16];
  /* 0x01a0 */ unsigned char Reserved4[96];
} XSAVE_FORMAT, *PXSAVE_FORMAT; /* size: 0x0200 */

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5Home;
  /* 0x0028 */ unsigned __int64 P6Home;
  /* 0x0030 */ unsigned long ContextFlags;
  /* 0x0034 */ unsigned long MxCsr;
  /* 0x0038 */ unsigned short SegCs;
  /* 0x003a */ unsigned short SegDs;
  /* 0x003c */ unsigned short SegEs;
  /* 0x003e */ unsigned short SegFs;
  /* 0x0040 */ unsigned short SegGs;
  /* 0x0042 */ unsigned short SegSs;
  /* 0x0044 */ unsigned long EFlags;
  /* 0x0048 */ unsigned __int64 Dr0;
  /* 0x0050 */ unsigned __int64 Dr1;
  /* 0x0058 */ unsigned __int64 Dr2;
  /* 0x0060 */ unsigned __int64 Dr3;
  /* 0x0068 */ unsigned __int64 Dr6;
  /* 0x0070 */ unsigned __int64 Dr7;
  /* 0x0078 */ unsigned __int64 Rax;
  /* 0x0080 */ unsigned __int64 Rcx;
  /* 0x0088 */ unsigned __int64 Rdx;
  /* 0x0090 */ unsigned __int64 Rbx;
  /* 0x0098 */ unsigned __int64 Rsp;
  /* 0x00a0 */ unsigned __int64 Rbp;
  /* 0x00a8 */ unsigned __int64 Rsi;
  /* 0x00b0 */ unsigned __int64 Rdi;
  /* 0x00b8 */ unsigned __int64 R8;
  /* 0x00c0 */ unsigned __int64 R9;
  /* 0x00c8 */ unsigned __int64 R10;
  /* 0x00d0 */ unsigned __int64 R11;
  /* 0x00d8 */ unsigned __int64 R12;
  /* 0x00e0 */ unsigned __int64 R13;
  /* 0x00e8 */ unsigned __int64 R14;
  /* 0x00f0 */ unsigned __int64 R15;
  /* 0x00f8 */ unsigned __int64 Rip;
  union
  {
    /* 0x0100 */ struct _XSAVE_FORMAT FltSave;
    struct
    {
      /* 0x0100 */ struct _M128A Header[2];
      /* 0x0120 */ struct _M128A Legacy[8];
      /* 0x01a0 */ struct _M128A Xmm0;
      /* 0x01b0 */ struct _M128A Xmm1;
      /* 0x01c0 */ struct _M128A Xmm2;
      /* 0x01d0 */ struct _M128A Xmm3;
      /* 0x01e0 */ struct _M128A Xmm4;
      /* 0x01f0 */ struct _M128A Xmm5;
      /* 0x0200 */ struct _M128A Xmm6;
      /* 0x0210 */ struct _M128A Xmm7;
      /* 0x0220 */ struct _M128A Xmm8;
      /* 0x0230 */ struct _M128A Xmm9;
      /* 0x0240 */ struct _M128A Xmm10;
      /* 0x0250 */ struct _M128A Xmm11;
      /* 0x0260 */ struct _M128A Xmm12;
      /* 0x0270 */ struct _M128A Xmm13;
      /* 0x0280 */ struct _M128A Xmm14;
      /* 0x0290 */ struct _M128A Xmm15;
    }; /* size: 0x01a0 */
  }; /* size: 0x0200 */
  /* 0x0300 */ struct _M128A VectorRegister[26];
  /* 0x04a0 */ unsigned __int64 VectorControl;
  /* 0x04a8 */ unsigned __int64 DebugControl;
  /* 0x04b0 */ unsigned __int64 LastBranchToRip;
  /* 0x04b8 */ unsigned __int64 LastBranchFromRip;
  /* 0x04c0 */ unsigned __int64 LastExceptionToRip;
  /* 0x04c8 */ unsigned __int64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT; /* size: 0x04d0 */

typedef struct _RTL_UMS_CONTEXT
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0008 */ long Padding_3[2];
  /* 0x0010 */ struct _CONTEXT Context;
  /* 0x04e0 */ void* Teb;
  /* 0x04e8 */ void* UserContext;
  union
  {
    struct /* bitfield */
    {
      /* 0x04f0 */ volatile unsigned long ScheduledThread : 1; /* bit position: 0 */
      /* 0x04f0 */ volatile unsigned long Suspended : 1; /* bit position: 1 */
      /* 0x04f0 */ volatile unsigned long VolatileContext : 1; /* bit position: 2 */
      /* 0x04f0 */ volatile unsigned long Terminated : 1; /* bit position: 3 */
      /* 0x04f0 */ volatile unsigned long DebugActive : 1; /* bit position: 4 */
      /* 0x04f0 */ volatile unsigned long RunningOnSelfThread : 1; /* bit position: 5 */
      /* 0x04f0 */ volatile unsigned long DenyRunningOnSelfThread : 1; /* bit position: 6 */
    }; /* bitfield */
    /* 0x04f0 */ volatile long Flags;
  }; /* size: 0x0004 */
  /* 0x04f4 */ long Padding_4;
  union
  {
    struct /* bitfield */
    {
      /* 0x04f8 */ volatile unsigned __int64 KernelUpdateLock : 2; /* bit position: 0 */
      /* 0x04f8 */ volatile unsigned __int64 PrimaryClientID : 62; /* bit position: 2 */
    }; /* bitfield */
    /* 0x04f8 */ volatile unsigned __int64 ContextLock;
  }; /* size: 0x0008 */
  /* 0x0500 */ struct _RTL_UMS_CONTEXT* PrimaryUmsContext;
  /* 0x0508 */ unsigned long SwitchCount;
  /* 0x050c */ unsigned long KernelYieldCount;
  /* 0x0510 */ unsigned long MixedYieldCount;
  /* 0x0514 */ unsigned long YieldCount;
  /* 0x0518 */ long __PADDING__[2];
} RTL_UMS_CONTEXT, *PRTL_UMS_CONTEXT; /* size: 0x0520 */

typedef enum _EX_GEN_RANDOM_DOMAIN
{
  ExGenRandomDomainKernel = 0,
  ExGenRandomDomainFirst = 0,
  ExGenRandomDomainUserVisible = 1,
  ExGenRandomDomainMax = 2,
} EX_GEN_RANDOM_DOMAIN, *PEX_GEN_RANDOM_DOMAIN;

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileMaximumInformation = 63,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMaximumInformation = 13,
} FSINFOCLASS, *PFSINFOCLASS;

typedef enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

enum BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

typedef struct _POP_FX_PROVIDER
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned char Activating;
  /* 0x0005 */ char __PADDING__[3];
} POP_FX_PROVIDER, *PPOP_FX_PROVIDER; /* size: 0x0008 */

enum DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
} DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef struct _IO_CACHE_INFO
{
  /* 0x0000 */ unsigned char CacheAttribute;
} IO_CACHE_INFO, *PIO_CACHE_INFO; /* size: 0x0001 */

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char ShareDisposition;
  /* 0x0002 */ unsigned short Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Generic;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Port;
      struct
      {
        /* 0x0004 */ unsigned short Level;
        /* 0x0006 */ unsigned short Group;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned __int64 Affinity;
      } /* size: 0x0010 */ Interrupt;
      struct
      {
        union
        {
          struct
          {
            /* 0x0004 */ unsigned short Group;
            /* 0x0006 */ unsigned short MessageCount;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Raw;
          struct
          {
            /* 0x0004 */ unsigned short Level;
            /* 0x0006 */ unsigned short Group;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Translated;
        }; /* size: 0x0010 */
      } /* size: 0x0010 */ MessageInterrupt;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Memory;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long Port;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ Dma;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned char TransferWidth;
        /* 0x000d */ unsigned char Reserved1;
        /* 0x000e */ unsigned char Reserved2;
        /* 0x000f */ unsigned char Reserved3;
      } /* size: 0x000c */ DmaV3;
      struct
      {
        /* 0x0004 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0004 */ unsigned long Start;
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Reserved;
      } /* size: 0x000c */ BusNumber;
      struct
      {
        /* 0x0004 */ unsigned long DataSize;
        /* 0x0008 */ unsigned long Reserved1;
        /* 0x000c */ unsigned long Reserved2;
      } /* size: 0x000c */ DeviceSpecificData;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length40;
      } /* size: 0x000c */ Memory40;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length48;
      } /* size: 0x000c */ Memory48;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length64;
      } /* size: 0x000c */ Memory64;
      struct
      {
        /* 0x0004 */ unsigned char Class;
        /* 0x0005 */ unsigned char Type;
        /* 0x0006 */ unsigned char Reserved1;
        /* 0x0007 */ unsigned char Reserved2;
        /* 0x0008 */ unsigned long IdLowPart;
        /* 0x000c */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR; /* size: 0x0014 */

typedef struct _CM_PARTIAL_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST; /* size: 0x001c */

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR; /* size: 0x0024 */

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
};

typedef enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
} IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef struct _COLORED_PAGE_INFO
{
  /* 0x0000 */ volatile long BeingZeroed;
  /* 0x0004 */ unsigned long Processor;
  /* 0x0008 */ unsigned __int64 PagesQueued;
  /* 0x0010 */ struct _MMPFN* PfnAllocation;
} COLORED_PAGE_INFO, *PCOLORED_PAGE_INFO; /* size: 0x0018 */

typedef enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
} MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef enum _MM_PAGE_ACCESS_TYPE
{
  MmPteAccessType = 0,
  MmCcReadAheadType = 1,
  MmPfnRepurposeType = 2,
  MmMaximumPageAccessType = 3,
} MM_PAGE_ACCESS_TYPE, *PMM_PAGE_ACCESS_TYPE;

typedef enum _PF_FILE_ACCESS_TYPE
{
  PfFileAccessTypeRead = 0,
  PfFileAccessTypeWrite = 1,
  PfFileAccessTypeMax = 2,
} PF_FILE_ACCESS_TYPE, *PPF_FILE_ACCESS_TYPE;

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

typedef struct _KTIMER_TABLE_ENTRY
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ struct _LIST_ENTRY Entry;
  /* 0x0018 */ union _ULARGE_INTEGER Time;
} KTIMER_TABLE_ENTRY, *PKTIMER_TABLE_ENTRY; /* size: 0x0020 */

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef struct _RTL_AVL_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; /* size: 0x0008 */

typedef struct _MMSUBSECTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short SubsectionAccessed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned short Protection : 5; /* bit position: 1 */
    /* 0x0000 */ unsigned short StartingSector4132 : 10; /* bit position: 6 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned short SubsectionStatic : 1; /* bit position: 0 */
    /* 0x0002 */ unsigned short GlobalMemory : 1; /* bit position: 1 */
    /* 0x0002 */ unsigned short DirtyPages : 1; /* bit position: 2 */
    /* 0x0002 */ unsigned short OnDereferenceList : 1; /* bit position: 3 */
    /* 0x0002 */ unsigned short SectorEndOffset : 12; /* bit position: 4 */
  }; /* bitfield */
} MMSUBSECTION_FLAGS, *PMMSUBSECTION_FLAGS; /* size: 0x0004 */

typedef struct _SUBSECTION
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0008 */ struct _MMPTE* SubsectionBase;
  /* 0x0010 */ struct _SUBSECTION* NextSubsection;
  /* 0x0018 */ unsigned long PtesInSubsection;
  /* 0x001c */ long Padding_5;
  union
  {
    /* 0x0020 */ unsigned long UnusedPtes;
    /* 0x0020 */ struct _RTL_AVL_TREE GlobalPerSessionHead;
  }; /* size: 0x0008 */
  union
  {
    union
    {
      /* 0x0028 */ unsigned long LongFlags;
      /* 0x0028 */ struct _MMSUBSECTION_FLAGS SubsectionFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x002c */ unsigned long StartingSector;
  /* 0x0030 */ unsigned long NumberOfFullSectors;
  /* 0x0034 */ long __PADDING__[1];
} SUBSECTION, *PSUBSECTION; /* size: 0x0038 */

typedef enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
} DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
} WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
} WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef struct _MI_VAD_SEQUENTIAL_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Length : 12; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Vpn : 52; /* bit position: 12 */
  }; /* bitfield */
} MI_VAD_SEQUENTIAL_INFO, *PMI_VAD_SEQUENTIAL_INFO; /* size: 0x0008 */

typedef enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeMax = 12,
} WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
} WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef enum _MMLISTS
{
  ZeroedPageList = 0,
  FreePageList = 1,
  StandbyPageList = 2,
  ModifiedPageList = 3,
  ModifiedNoWritePageList = 4,
  BadPageList = 5,
  ActiveAndValid = 6,
  TransitionPage = 7,
} MMLISTS, *PMMLISTS;

struct _SCSI_REQUEST_BLOCK;

typedef enum _MI_PFN_CACHE_ATTRIBUTE
{
  MiNonCached = 0,
  MiCached = 1,
  MiWriteCombined = 2,
  MiNotMapped = 3,
} MI_PFN_CACHE_ATTRIBUTE, *PMI_PFN_CACHE_ATTRIBUTE;

typedef struct _MMPTE_SOFTWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 InStore : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 PageFileReserved : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned __int64 PageFileAllocated : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned __int64 UsedPageTableEntries : 10; /* bit position: 15 */
    /* 0x0000 */ unsigned __int64 Unused : 7; /* bit position: 25 */
    /* 0x0000 */ unsigned __int64 PageFileHigh : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; /* size: 0x0008 */

typedef enum _MI_SYSTEM_VA_TYPE
{
  MiVaUnused = 0,
  MiVaSessionSpace = 1,
  MiVaProcessSpace = 2,
  MiVaBootLoaded = 3,
  MiVaPfnDatabase = 4,
  MiVaNonPagedPool = 5,
  MiVaPagedPool = 6,
  MiVaSpecialPoolPaged = 7,
  MiVaSystemCache = 8,
  MiVaSystemPtes = 9,
  MiVaHal = 10,
  MiVaSessionGlobalSpace = 11,
  MiVaDriverImages = 12,
  MiVaSpecialPoolNonPaged = 13,
  MiVaMaximumType = 14,
  MiVaSystemPtesLarge = 15,
} MI_SYSTEM_VA_TYPE, *PMI_SYSTEM_VA_TYPE;

typedef enum _MI_STORE_BIT_TYPE
{
  MiStoreBitTypeInStore = 0,
  MiStoreBitTypeEvicted = 1,
  MiStoreBitTypeMax = 2,
} MI_STORE_BIT_TYPE, *PMI_STORE_BIT_TYPE;

typedef enum _CM_LOAD_FAILURE_TYPE
{
  _None = 0,
  _CmInitializeHive = 1,
  _HvInitializeHive = 2,
  _HvpBuildMap = 3,
  _HvpBuildMapForLoaderHive = 4,
  _HvpInitMap = 5,
  _HvLoadHive = 6,
  _HvpMapHiveImage = 7,
  _HvpRecoverData = 8,
  _CmpValidateHiveSecurityDescriptors = 9,
  _HvpEnlistBinInMap = 10,
  _CmCheckRegistry = 11,
  _CmRegistryIO = 12,
  _CmCheckRegistry2 = 13,
  _CmpCheckKey = 14,
  _CmpCheckValueList = 15,
  _HvCheckHive = 16,
  _HvCheckBin = 17,
  _HvpGetLogEntryDirtyVector = 18,
  _HvpReadLogEntryHeader = 19,
  _HvpReadLogEntry = 20,
} CM_LOAD_FAILURE_TYPE, *PCM_LOAD_FAILURE_TYPE;

typedef enum _PCW_CALLBACK_TYPE
{
  PcwCallbackAddCounter = 0,
  PcwCallbackRemoveCounter = 1,
  PcwCallbackEnumerateInstances = 2,
  PcwCallbackCollectData = 3,
} PCW_CALLBACK_TYPE, *PPCW_CALLBACK_TYPE;

typedef struct _MMPTE_LIST
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 OneEntry : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 filler0 : 3; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 filler1 : 16; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 NextEntry : 36; /* bit position: 28 */
  }; /* bitfield */
} MMPTE_LIST, *PMMPTE_LIST; /* size: 0x0008 */

typedef enum _TOKEN_INFORMATION_CLASS
{
  TokenUser = 1,
  TokenGroups = 2,
  TokenPrivileges = 3,
  TokenOwner = 4,
  TokenPrimaryGroup = 5,
  TokenDefaultDacl = 6,
  TokenSource = 7,
  TokenType = 8,
  TokenImpersonationLevel = 9,
  TokenStatistics = 10,
  TokenRestrictedSids = 11,
  TokenSessionId = 12,
  TokenGroupsAndPrivileges = 13,
  TokenSessionReference = 14,
  TokenSandBoxInert = 15,
  TokenAuditPolicy = 16,
  TokenOrigin = 17,
  TokenElevationType = 18,
  TokenLinkedToken = 19,
  TokenElevation = 20,
  TokenHasRestrictions = 21,
  TokenAccessInformation = 22,
  TokenVirtualizationAllowed = 23,
  TokenVirtualizationEnabled = 24,
  TokenIntegrityLevel = 25,
  TokenUIAccess = 26,
  TokenMandatoryPolicy = 27,
  TokenLogonSid = 28,
  TokenIsAppContainer = 29,
  TokenCapabilities = 30,
  TokenAppContainerSid = 31,
  TokenAppContainerNumber = 32,
  TokenUserClaimAttributes = 33,
  TokenDeviceClaimAttributes = 34,
  TokenRestrictedUserClaimAttributes = 35,
  TokenRestrictedDeviceClaimAttributes = 36,
  TokenDeviceGroups = 37,
  TokenRestrictedDeviceGroups = 38,
  TokenSecurityAttributes = 39,
  TokenIsRestricted = 40,
  TokenProcessTrustLevel = 41,
  MaxTokenInfoClass = 42,
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;

typedef enum _PNP_DEVNODE_STATE
{
  DeviceNodeUnspecified = 768,
  DeviceNodeUninitialized = 769,
  DeviceNodeInitialized = 770,
  DeviceNodeDriversAdded = 771,
  DeviceNodeResourcesAssigned = 772,
  DeviceNodeStartPending = 773,
  DeviceNodeStartCompletion = 774,
  DeviceNodeStartPostWork = 775,
  DeviceNodeStarted = 776,
  DeviceNodeQueryStopped = 777,
  DeviceNodeStopped = 778,
  DeviceNodeRestartCompletion = 779,
  DeviceNodeEnumeratePending = 780,
  DeviceNodeEnumerateCompletion = 781,
  DeviceNodeAwaitingQueuedDeletion = 782,
  DeviceNodeAwaitingQueuedRemoval = 783,
  DeviceNodeQueryRemoved = 784,
  DeviceNodeRemovePendingCloses = 785,
  DeviceNodeRemoved = 786,
  DeviceNodeDeletePendingCloses = 787,
  DeviceNodeDeleted = 788,
  MaxDeviceNodeState = 789,
} PNP_DEVNODE_STATE, *PPNP_DEVNODE_STATE;

typedef struct _PCW_COUNTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned short StructIndex;
  /* 0x0004 */ unsigned short Offset;
  /* 0x0006 */ unsigned short Size;
} PCW_COUNTER_DESCRIPTOR, *PPCW_COUNTER_DESCRIPTOR; /* size: 0x0008 */

typedef enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
} OB_OPEN_REASON, *POB_OPEN_REASON;

typedef struct _KDESCRIPTOR
{
  /* 0x0000 */ unsigned short Pad[3];
  /* 0x0006 */ unsigned short Limit;
  /* 0x0008 */ void* Base;
} KDESCRIPTOR, *PKDESCRIPTOR; /* size: 0x0010 */

typedef struct _KSPECIAL_REGISTERS
{
  /* 0x0000 */ unsigned __int64 Cr0;
  /* 0x0008 */ unsigned __int64 Cr2;
  /* 0x0010 */ unsigned __int64 Cr3;
  /* 0x0018 */ unsigned __int64 Cr4;
  /* 0x0020 */ unsigned __int64 KernelDr0;
  /* 0x0028 */ unsigned __int64 KernelDr1;
  /* 0x0030 */ unsigned __int64 KernelDr2;
  /* 0x0038 */ unsigned __int64 KernelDr3;
  /* 0x0040 */ unsigned __int64 KernelDr6;
  /* 0x0048 */ unsigned __int64 KernelDr7;
  /* 0x0050 */ struct _KDESCRIPTOR Gdtr;
  /* 0x0060 */ struct _KDESCRIPTOR Idtr;
  /* 0x0070 */ unsigned short Tr;
  /* 0x0072 */ unsigned short Ldtr;
  /* 0x0074 */ unsigned long MxCsr;
  /* 0x0078 */ unsigned __int64 DebugControl;
  /* 0x0080 */ unsigned __int64 LastBranchToRip;
  /* 0x0088 */ unsigned __int64 LastBranchFromRip;
  /* 0x0090 */ unsigned __int64 LastExceptionToRip;
  /* 0x0098 */ unsigned __int64 LastExceptionFromRip;
  /* 0x00a0 */ unsigned __int64 Cr8;
  /* 0x00a8 */ unsigned __int64 MsrGsBase;
  /* 0x00b0 */ unsigned __int64 MsrGsSwap;
  /* 0x00b8 */ unsigned __int64 MsrStar;
  /* 0x00c0 */ unsigned __int64 MsrLStar;
  /* 0x00c8 */ unsigned __int64 MsrCStar;
  /* 0x00d0 */ unsigned __int64 MsrSyscallMask;
  /* 0x00d8 */ unsigned __int64 Xcr0;
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS; /* size: 0x00e0 */

typedef struct _KPROCESSOR_STATE
{
  /* 0x0000 */ struct _KSPECIAL_REGISTERS SpecialRegisters;
  /* 0x00e0 */ struct _CONTEXT ContextFrame;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE; /* size: 0x05b0 */

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    /* 0x0000 */ long Status;
    /* 0x0000 */ void* Pointer;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; /* size: 0x0010 */

typedef struct _KDEVICE_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceListEntry;
  /* 0x0010 */ unsigned long SortKey;
  /* 0x0014 */ unsigned char Inserted;
  /* 0x0015 */ char __PADDING__[3];
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY; /* size: 0x0018 */

typedef struct _KAPC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char SpareByte0;
  /* 0x0002 */ unsigned char Size;
  /* 0x0003 */ unsigned char SpareByte1;
  /* 0x0004 */ unsigned long SpareLong0;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x0010 */ struct _LIST_ENTRY ApcListEntry;
  union
  {
    struct
    {
      /* 0x0020 */ void* KernelRoutine /* function */;
      /* 0x0028 */ void* RundownRoutine /* function */;
      /* 0x0030 */ void* NormalRoutine /* function */;
    }; /* size: 0x0018 */
    /* 0x0020 */ void* Reserved[3];
  }; /* size: 0x0018 */
  /* 0x0038 */ void* NormalContext;
  /* 0x0040 */ void* SystemArgument1;
  /* 0x0048 */ void* SystemArgument2;
  /* 0x0050 */ char ApcStateIndex;
  /* 0x0051 */ char ApcMode;
  /* 0x0052 */ unsigned char Inserted;
  /* 0x0053 */ char __PADDING__[5];
} KAPC, *PKAPC; /* size: 0x0058 */

typedef struct _IRP
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short AllocationProcessorNumber;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ struct _MDL* MdlAddress;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long Padding_6;
  union
  {
    union
    {
      /* 0x0018 */ struct _IRP* MasterIrp;
      /* 0x0018 */ long IrpCount;
      /* 0x0018 */ void* SystemBuffer;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ AssociatedIrp;
  /* 0x0020 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0030 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0040 */ char RequestorMode;
  /* 0x0041 */ unsigned char PendingReturned;
  /* 0x0042 */ char StackCount;
  /* 0x0043 */ char CurrentLocation;
  /* 0x0044 */ unsigned char Cancel;
  /* 0x0045 */ unsigned char CancelIrql;
  /* 0x0046 */ char ApcEnvironment;
  /* 0x0047 */ unsigned char AllocationFlags;
  /* 0x0048 */ struct _IO_STATUS_BLOCK* UserIosb;
  /* 0x0050 */ struct _KEVENT* UserEvent;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0058 */ void* UserApcRoutine /* function */;
          /* 0x0058 */ void* IssuingProcess;
        }; /* size: 0x0008 */
        /* 0x0060 */ void* UserApcContext;
      } /* size: 0x0010 */ AsynchronousParameters;
      /* 0x0058 */ union _LARGE_INTEGER AllocationSize;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Overlay;
  /* 0x0068 */ void* CancelRoutine /* function */;
  /* 0x0070 */ void* UserBuffer;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0078 */ struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
          /* 0x0078 */ void* DriverContext[4];
        }; /* size: 0x0020 */
        /* 0x0098 */ struct _ETHREAD* Thread;
        /* 0x00a0 */ char* AuxiliaryBuffer;
        /* 0x00a8 */ struct _LIST_ENTRY ListEntry;
        union
        {
          /* 0x00b8 */ struct _IO_STACK_LOCATION* CurrentStackLocation;
          /* 0x00b8 */ unsigned long PacketType;
        }; /* size: 0x0008 */
        /* 0x00c0 */ struct _FILE_OBJECT* OriginalFileObject;
        /* 0x00c8 */ void* IrpExtension;
      } /* size: 0x0058 */ Overlay;
      /* 0x0078 */ struct _KAPC Apc;
      /* 0x0078 */ void* CompletionKey;
    }; /* size: 0x0058 */
  } /* size: 0x0058 */ Tail;
} IRP, *PIRP; /* size: 0x00d0 */

enum PROFILE_STATUS
{
  DOCK_NOTDOCKDEVICE = 0,
  DOCK_QUIESCENT = 1,
  DOCK_ARRIVING = 2,
  DOCK_DEPARTING = 3,
  DOCK_EJECTIRP_COMPLETED = 4,
};

typedef enum _ARBITER_REQUEST_SOURCE
{
  ArbiterRequestUndefined = -1,
  ArbiterRequestLegacyReported = 0,
  ArbiterRequestHalReported = 1,
  ArbiterRequestLegacyAssigned = 2,
  ArbiterRequestPnpDetected = 3,
  ArbiterRequestPnpEnumerated = 4,
} ARBITER_REQUEST_SOURCE, *PARBITER_REQUEST_SOURCE;

typedef enum _POWER_REQUEST_TYPE
{
  PowerRequestDisplayRequired = 0,
  PowerRequestSystemRequired = 1,
  PowerRequestAwayModeRequired = 2,
  PowerRequestExecutionRequired = 3,
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;

typedef enum _POWER_REQUEST_TYPE_INTERNAL
{
  PowerRequestDisplayRequiredInternal = 0,
  PowerRequestSystemRequiredInternal = 1,
  PowerRequestAwayModeRequiredInternal = 2,
  PowerRequestExecutionRequiredInternal = 3,
  PowerRequestPerfBoostRequiredInternal = 4,
  PowerRequestInternalInvalid = 5,
} POWER_REQUEST_TYPE_INTERNAL, *PPOWER_REQUEST_TYPE_INTERNAL;

typedef union _XPF_MCE_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long MCG_CapabilityRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long MCG_GlobalControlRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} XPF_MCE_FLAGS, *PXPF_MCE_FLAGS; /* size: 0x0004 */

typedef union _XPF_MC_BANK_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ClearOnInitializationRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ControlDataRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} XPF_MC_BANK_FLAGS, *PXPF_MC_BANK_FLAGS; /* size: 0x0001 */

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR
{
  /* 0x0000 */ unsigned char BankNumber;
  /* 0x0001 */ unsigned char ClearOnInitialization;
  /* 0x0002 */ unsigned char StatusDataFormat;
  /* 0x0003 */ union _XPF_MC_BANK_FLAGS Flags;
  /* 0x0004 */ unsigned long ControlMsr;
  /* 0x0008 */ unsigned long StatusMsr;
  /* 0x000c */ unsigned long AddressMsr;
  /* 0x0010 */ unsigned long MiscMsr;
  /* 0x0014 */ unsigned __int64 ControlData;
} WHEA_XPF_MC_BANK_DESCRIPTOR, *PWHEA_XPF_MC_BANK_DESCRIPTOR; /* size: 0x001c */

typedef struct _WHEA_XPF_MCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ union _XPF_MCE_FLAGS Flags;
  /* 0x0008 */ unsigned __int64 MCG_Capability;
  /* 0x0010 */ unsigned __int64 MCG_GlobalControl;
  /* 0x0018 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_MCE_DESCRIPTOR, *PWHEA_XPF_MCE_DESCRIPTOR; /* size: 0x0398 */

typedef union _WHEA_NOTIFICATION_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short PollIntervalRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short SwitchToPollingThresholdRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short SwitchToPollingWindowRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short ErrorThresholdRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short ErrorThresholdWindowRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_NOTIFICATION_FLAGS, *PWHEA_NOTIFICATION_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ union _WHEA_NOTIFICATION_FLAGS Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
      } /* size: 0x0004 */ Polled;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Interrupt;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ LocalInterrupt;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sci;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Nmi;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} WHEA_NOTIFICATION_DESCRIPTOR, *PWHEA_NOTIFICATION_DESCRIPTOR; /* size: 0x001c */

typedef struct _WHEA_XPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  /* 0x0024 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_CMC_DESCRIPTOR, *PWHEA_XPF_CMC_DESCRIPTOR; /* size: 0x03a4 */

typedef struct _WHEA_XPF_NMI_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
} WHEA_XPF_NMI_DESCRIPTOR, *PWHEA_XPF_NMI_DESCRIPTOR; /* size: 0x0003 */

typedef struct _WHEA_IPF_MCA_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_MCA_DESCRIPTOR, *PWHEA_IPF_MCA_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_IPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CMC_DESCRIPTOR, *PWHEA_IPF_CMC_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_IPF_CPE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CPE_DESCRIPTOR, *PWHEA_IPF_CPE_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_PCI_SLOT_NUMBER
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long DeviceNumber : 5; /* bit position: 0 */
          /* 0x0000 */ unsigned long FunctionNumber : 3; /* bit position: 5 */
          /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 8 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
} WHEA_PCI_SLOT_NUMBER, *PWHEA_PCI_SLOT_NUMBER; /* size: 0x0004 */

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short RootErrorCommandRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ROOTPORT_DESCRIPTOR_FLAGS, *PAER_ROOTPORT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long RootErrorCommand;
} WHEA_AER_ROOTPORT_DESCRIPTOR, *PWHEA_AER_ROOTPORT_DESCRIPTOR; /* size: 0x0024 */

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short Reserved : 12; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ENDPOINT_DESCRIPTOR_FLAGS, *PAER_ENDPOINT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
} WHEA_AER_ENDPOINT_DESCRIPTOR, *PWHEA_AER_ENDPOINT_DESCRIPTOR; /* size: 0x0020 */

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorMaskRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorSevRW : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned short SecondaryCapsAndControlRW : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned short Reserved : 9; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_BRIDGE_DESCRIPTOR_FLAGS, *PAER_BRIDGE_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long SecondaryUncorrectableErrorMask;
  /* 0x0024 */ unsigned long SecondaryUncorrectableErrorSev;
  /* 0x0028 */ unsigned long SecondaryCapsAndControl;
} WHEA_AER_BRIDGE_DESCRIPTOR, *PWHEA_AER_BRIDGE_DESCRIPTOR; /* size: 0x002c */

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Reserved;
  /* 0x0003 */ unsigned char Enabled;
  /* 0x0004 */ unsigned long ErrStatusBlockLength;
  /* 0x0008 */ unsigned long RelatedErrorSourceId;
  /* 0x000c */ unsigned char ErrStatusAddressSpaceID;
  /* 0x000d */ unsigned char ErrStatusAddressBitWidth;
  /* 0x000e */ unsigned char ErrStatusAddressBitOffset;
  /* 0x000f */ unsigned char ErrStatusAddressAccessSize;
  /* 0x0010 */ union _LARGE_INTEGER ErrStatusAddress;
  /* 0x0018 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
} WHEA_GENERIC_ERROR_DESCRIPTOR, *PWHEA_GENERIC_ERROR_DESCRIPTOR; /* size: 0x0034 */

typedef enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef enum _PROC_HYPERVISOR_STATE
{
  ProcHypervisorNone = 0,
  ProcHypervisorPresent = 1,
  ProcHypervisorPower = 2,
} PROC_HYPERVISOR_STATE, *PPROC_HYPERVISOR_STATE;

typedef struct _THERMAL_ZONE_COUNTERS
{
  /* 0x0000 */ unsigned long Temperature;
  /* 0x0004 */ unsigned long ThrottleLimit;
  /* 0x0008 */ unsigned long ThrottleReasons;
} THERMAL_ZONE_COUNTERS, *PTHERMAL_ZONE_COUNTERS; /* size: 0x000c */

typedef enum _POP_SPM_STATUS
{
  PopSpmStatusUninitialized = 0,
  PopSpmStatusFailedNoMemory = 1,
  PopSpmStatusFailedNoPoliciesFound = 2,
  PopSpmStatusFailedToOpenExtHandle = 3,
  PopSpmStatusFailedToOpenIntHandle = 4,
  PopSpmStatusWaitingForRegistration = 5,
  PopSpmStatusInitialized = 6,
  PopSpmStatusInvalid = 7,
} POP_SPM_STATUS, *PPOP_SPM_STATUS;

typedef enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_usage_after_free = 10,
  heap_failure_cross_heap_operation = 11,
  heap_failure_freelists_corruption = 12,
  heap_failure_listentry_corruption = 13,
  heap_failure_lfh_bitmap_mismatch = 14,
  heap_failure_segment_lfh_bitmap_corruption = 15,
  heap_failure_segment_lfh_double_free = 16,
} HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef struct _ETW_PERF_COUNTERS
{
  /* 0x0000 */ long TotalActiveSessions;
  /* 0x0004 */ long TotalBufferMemoryNonPagedPool;
  /* 0x0008 */ long TotalBufferMemoryPagedPool;
  /* 0x000c */ long TotalGuidsEnabled;
  /* 0x0010 */ long TotalGuidsNotEnabled;
  /* 0x0014 */ long TotalGuidsPreEnabled;
} ETW_PERF_COUNTERS, *PETW_PERF_COUNTERS; /* size: 0x0018 */

typedef enum _BLOB_ID
{
  BLOB_TYPE_UNKNOWN = 0,
  BLOB_TYPE_CONNECTION_INFO = 1,
  BLOB_TYPE_MESSAGE = 2,
  BLOB_TYPE_SECURITY_CONTEXT = 3,
  BLOB_TYPE_SECTION = 4,
  BLOB_TYPE_REGION = 5,
  BLOB_TYPE_VIEW = 6,
  BLOB_TYPE_RESERVE = 7,
  BLOB_TYPE_DIRECT_TRANSFER = 8,
  BLOB_TYPE_HANDLE_DATA = 9,
  BLOB_TYPE_MAX_ID = 10,
} BLOB_ID, *PBLOB_ID;

typedef enum _KWAIT_REASON
{
  Executive = 0,
  FreePage = 1,
  PageIn = 2,
  PoolAllocation = 3,
  DelayExecution = 4,
  Suspended = 5,
  UserRequest = 6,
  WrExecutive = 7,
  WrFreePage = 8,
  WrPageIn = 9,
  WrPoolAllocation = 10,
  WrDelayExecution = 11,
  WrSuspended = 12,
  WrUserRequest = 13,
  WrSpare0 = 14,
  WrQueue = 15,
  WrLpcReceive = 16,
  WrLpcReply = 17,
  WrVirtualMemory = 18,
  WrPageOut = 19,
  WrRendezvous = 20,
  WrKeyedEvent = 21,
  WrTerminated = 22,
  WrProcessInSwap = 23,
  WrCpuRateControl = 24,
  WrCalloutStack = 25,
  WrKernel = 26,
  WrResource = 27,
  WrPushLock = 28,
  WrMutex = 29,
  WrQuantumEnd = 30,
  WrDispatchInt = 31,
  WrPreempted = 32,
  WrYieldExecution = 33,
  WrFastMutex = 34,
  WrGuardedMutex = 35,
  WrRundown = 36,
  WrAlertByThreadId = 37,
  WrDeferredPreempt = 38,
  MaximumWaitReason = 39,
} KWAIT_REASON, *PKWAIT_REASON;

typedef enum _EX_POOL_PRIORITY
{
  LowPoolPriority = 0,
  LowPoolPrioritySpecialPoolOverrun = 8,
  LowPoolPrioritySpecialPoolUnderrun = 9,
  NormalPoolPriority = 16,
  NormalPoolPrioritySpecialPoolOverrun = 24,
  NormalPoolPrioritySpecialPoolUnderrun = 25,
  HighPoolPriority = 32,
  HighPoolPrioritySpecialPoolOverrun = 40,
  HighPoolPrioritySpecialPoolUnderrun = 41,
} EX_POOL_PRIORITY, *PEX_POOL_PRIORITY;

typedef enum _LOCK_OPERATION
{
  IoReadAccess = 0,
  IoWriteAccess = 1,
  IoModifyAccess = 2,
} LOCK_OPERATION, *PLOCK_OPERATION;

typedef enum _IOP_PRIORITY_HINT
{
  IopIoPriorityNotSet = 0,
  IopIoPriorityVeryLow = 1,
  IopIoPriorityLow = 2,
  IopIoPriorityNormal = 3,
  IopIoPriorityHigh = 4,
  IopIoPriorityCritical = 5,
  MaxIopIoPriorityTypes = 6,
} IOP_PRIORITY_HINT, *PIOP_PRIORITY_HINT;

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE* Left;
      /* 0x0008 */ struct _RTL_BALANCED_NODE* Right;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0010 */ unsigned char Red : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned char Balance : 2; /* bit position: 0 */
    /* 0x0010 */ unsigned __int64 ParentValue;
  }; /* size: 0x0008 */
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; /* size: 0x0018 */

typedef struct _KLOCK_ENTRY_LOCK_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Waiting : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Busy : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Spare : 61; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 InTree : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ void* LockState;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0008 */ void* SessionState;
    struct
    {
      /* 0x0008 */ unsigned long SessionId;
      /* 0x000c */ unsigned long SessionPad;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE; /* size: 0x0010 */

typedef struct _RTL_RB_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
  /* 0x0008 */ struct _RTL_BALANCED_NODE* Min;
} RTL_RB_TREE, *PRTL_RB_TREE; /* size: 0x0010 */

typedef struct _KLOCK_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeListEntry;
  }; /* size: 0x0018 */
  union
  {
    /* 0x0018 */ void* ThreadUnsafe;
    struct
    {
      /* 0x0018 */ volatile unsigned char HeadNodeByte;
      /* 0x0019 */ unsigned char Reserved1[6];
      /* 0x001f */ volatile unsigned char AcquiredByte;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0020 */ struct _KLOCK_ENTRY_LOCK_STATE LockState;
    /* 0x0020 */ void* volatile LockUnsafe;
    struct
    {
      /* 0x0020 */ volatile unsigned char WaitingAndBusyByte;
      /* 0x0021 */ unsigned char Reserved[6];
      /* 0x0027 */ volatile unsigned char InTreeByte;
      union
      {
        /* 0x0028 */ void* SessionState;
        struct
        {
          /* 0x0028 */ unsigned long SessionId;
          /* 0x002c */ unsigned long SessionPad;
        }; /* size: 0x0008 */
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    struct
    {
      /* 0x0030 */ struct _RTL_RB_TREE OwnerTree;
      /* 0x0040 */ struct _RTL_RB_TREE WaiterTree;
    }; /* size: 0x0020 */
    /* 0x0030 */ char CpuPriorityKey;
  }; /* size: 0x0020 */
  /* 0x0050 */ unsigned __int64 EntryLock;
  union
  {
    /* 0x0058 */ unsigned short AllBoosts;
    struct /* bitfield */
    {
      /* 0x0058 */ unsigned short IoBoost : 1; /* bit position: 0 */
      /* 0x0058 */ unsigned short CpuBoostsBitmap : 15; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x005a */ unsigned short IoNormalPriorityWaiterCount;
  struct /* bitfield */
  {
    /* 0x005c */ unsigned char IoPriorityBit : 1; /* bit position: 0 */
    /* 0x005c */ unsigned char AbSpare : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x005d */ unsigned char SparePad[3];
} KLOCK_ENTRY, *PKLOCK_ENTRY; /* size: 0x0060 */

typedef enum _TRANSFER_TYPE
{
  ReadTransfer = 0,
  WriteTransfer = 1,
  OtherTransfer = 2,
} TRANSFER_TYPE, *PTRANSFER_TYPE;

typedef enum _CREATE_FILE_TYPE
{
  CreateFileTypeNone = 0,
  CreateFileTypeNamedPipe = 1,
  CreateFileTypeMailslot = 2,
} CREATE_FILE_TYPE, *PCREATE_FILE_TYPE;

typedef struct _KSPIN_LOCK_QUEUE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE* volatile Next;
  /* 0x0008 */ unsigned __int64* volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE; /* size: 0x0010 */

typedef enum _ETW_RT_EVENT_LOSS
{
  EtwRtEventNoLoss = 0,
  EtwRtEventLost = 1,
  EtwRtBufferLost = 2,
  EtwRtBackupLost = 3,
  EtwRtEventLossMax = 4,
} ETW_RT_EVENT_LOSS, *PETW_RT_EVENT_LOSS;

typedef enum _KPROFILE_SOURCE
{
  ProfileTime = 0,
  ProfileAlignmentFixup = 1,
  ProfileTotalIssues = 2,
  ProfilePipelineDry = 3,
  ProfileLoadInstructions = 4,
  ProfilePipelineFrozen = 5,
  ProfileBranchInstructions = 6,
  ProfileTotalNonissues = 7,
  ProfileDcacheMisses = 8,
  ProfileIcacheMisses = 9,
  ProfileCacheMisses = 10,
  ProfileBranchMispredictions = 11,
  ProfileStoreInstructions = 12,
  ProfileFpInstructions = 13,
  ProfileIntegerInstructions = 14,
  Profile2Issue = 15,
  Profile3Issue = 16,
  Profile4Issue = 17,
  ProfileSpecialInstructions = 18,
  ProfileTotalCycles = 19,
  ProfileIcacheIssues = 20,
  ProfileDcacheAccesses = 21,
  ProfileMemoryBarrierCycles = 22,
  ProfileLoadLinkedIssues = 23,
  ProfileMaximum = 24,
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef struct _XSTATE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long Reserved1;
  /* 0x0010 */ struct _XSAVE_AREA* Area;
  /* 0x0018 */ void* Buffer;
} XSTATE_CONTEXT, *PXSTATE_CONTEXT; /* size: 0x0020 */

typedef enum _TOKEN_TYPE
{
  TokenPrimary = 1,
  TokenImpersonation = 2,
} TOKEN_TYPE, *PTOKEN_TYPE;

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef struct _PROCESSOR_NUMBER
{
  /* 0x0000 */ unsigned short Group;
  /* 0x0002 */ unsigned char Number;
  /* 0x0003 */ unsigned char Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; /* size: 0x0004 */

typedef struct _THREAD_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ struct _PROCESSOR_NUMBER ProcessorNumber;
  /* 0x0008 */ unsigned long ContextSwitches;
  /* 0x000c */ unsigned long HwCountersCount;
  /* 0x0010 */ volatile unsigned __int64 UpdateCount;
  /* 0x0018 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING CycleTime;
  /* 0x0040 */ struct _COUNTER_READING HwCounters[16];
} THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA; /* size: 0x01c0 */

typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long TargetSystemState : 4; /* bit position: 8 */
      /* 0x0000 */ unsigned long EffectiveSystemState : 4; /* bit position: 12 */
      /* 0x0000 */ unsigned long CurrentSystemState : 4; /* bit position: 16 */
      /* 0x0000 */ unsigned long IgnoreHibernationPath : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long PseudoTransition : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long Reserved2 : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long ContextAsUlong;
  }; /* size: 0x0004 */
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT; /* size: 0x0004 */

typedef union _POWER_STATE
{
  union
  {
    /* 0x0000 */ enum _SYSTEM_POWER_STATE SystemState;
    /* 0x0000 */ enum _DEVICE_POWER_STATE DeviceState;
  }; /* size: 0x0004 */
} POWER_STATE, *PPOWER_STATE; /* size: 0x0004 */

typedef struct _IO_STACK_LOCATION
{
  /* 0x0000 */ unsigned char MajorFunction;
  /* 0x0001 */ unsigned char MinorFunction;
  /* 0x0002 */ unsigned char Flags;
  /* 0x0003 */ unsigned char Control;
  /* 0x0004 */ long Padding_7;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x000c */ long Padding_8;
        /* 0x0018 */ unsigned short FileAttributes;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0014 */ long Padding_9;
        /* 0x0020 */ unsigned long EaLength;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ Create;
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x000c */ long Padding_10;
        /* 0x0018 */ unsigned short Reserved;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0014 */ long Padding_11;
        /* 0x0020 */ struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0020 */ CreatePipe;
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x000c */ long Padding_12;
        /* 0x0018 */ unsigned short Reserved;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0014 */ long Padding_13;
        /* 0x0020 */ struct _MAILSLOT_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0020 */ CreateMailslot;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_14;
        /* 0x0010 */ unsigned long Key;
        /* 0x000c */ long Padding_15;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ Read;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_16;
        /* 0x0010 */ unsigned long Key;
        /* 0x000c */ long Padding_17;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ Write;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_18;
        /* 0x0010 */ struct _UNICODE_STRING* FileName;
        /* 0x0018 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0014 */ long Padding_19;
        /* 0x0020 */ unsigned long FileIndex;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ QueryDirectory;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_20;
        /* 0x0010 */ unsigned long CompletionFilter;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ NotifyDirectory;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_21;
        /* 0x0010 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryFile;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_22;
        /* 0x0010 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x000c */ long Padding_23;
        /* 0x0018 */ struct _FILE_OBJECT* FileObject;
        union
        {
          struct
          {
            /* 0x0020 */ unsigned char ReplaceIfExists;
            /* 0x0021 */ unsigned char AdvanceOnly;
          }; /* size: 0x0002 */
          /* 0x0020 */ unsigned long ClusterCount;
          /* 0x0020 */ void* DeleteHandle;
        }; /* size: 0x0008 */
      } /* size: 0x0020 */ SetFile;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_24;
        /* 0x0010 */ void* EaList;
        /* 0x0018 */ unsigned long EaListLength;
        /* 0x0014 */ long Padding_25;
        /* 0x0020 */ unsigned long EaIndex;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ QueryEa;
      struct
      {
        /* 0x0008 */ unsigned long Length;
      } /* size: 0x0004 */ SetEa;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_26;
        /* 0x0010 */ enum _FSINFOCLASS FsInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryVolume;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_27;
        /* 0x0010 */ enum _FSINFOCLASS FsInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ SetVolume;
      struct
      {
        /* 0x0008 */ unsigned long OutputBufferLength;
        /* 0x0004 */ long Padding_28;
        /* 0x0010 */ unsigned long InputBufferLength;
        /* 0x000c */ long Padding_29;
        /* 0x0018 */ unsigned long FsControlCode;
        /* 0x0014 */ long Padding_30;
        /* 0x0020 */ void* Type3InputBuffer;
      } /* size: 0x0020 */ FileSystemControl;
      struct
      {
        /* 0x0008 */ union _LARGE_INTEGER* Length;
        /* 0x0010 */ unsigned long Key;
        /* 0x000c */ long Padding_31;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ LockControl;
      struct
      {
        /* 0x0008 */ unsigned long OutputBufferLength;
        /* 0x0004 */ long Padding_32;
        /* 0x0010 */ unsigned long InputBufferLength;
        /* 0x000c */ long Padding_33;
        /* 0x0018 */ unsigned long IoControlCode;
        /* 0x0014 */ long Padding_34;
        /* 0x0020 */ void* Type3InputBuffer;
      } /* size: 0x0020 */ DeviceIoControl;
      struct
      {
        /* 0x0008 */ unsigned long SecurityInformation;
        /* 0x0004 */ long Padding_35;
        /* 0x0010 */ unsigned long Length;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QuerySecurity;
      struct
      {
        /* 0x0008 */ unsigned long SecurityInformation;
        /* 0x0004 */ long Padding_36;
        /* 0x0010 */ void* SecurityDescriptor;
      } /* size: 0x0010 */ SetSecurity;
      struct
      {
        /* 0x0008 */ struct _VPB* Vpb;
        /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0010 */ MountVolume;
      struct
      {
        /* 0x0008 */ struct _VPB* Vpb;
        /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0010 */ VerifyVolume;
      struct
      {
        /* 0x0008 */ struct _SCSI_REQUEST_BLOCK* Srb;
      } /* size: 0x0008 */ Scsi;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_37;
        /* 0x0010 */ void* StartSid;
        /* 0x0018 */ struct _FILE_GET_QUOTA_INFORMATION* SidList;
        /* 0x0020 */ unsigned long SidListLength;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ QueryQuota;
      struct
      {
        /* 0x0008 */ unsigned long Length;
      } /* size: 0x0004 */ SetQuota;
      struct
      {
        /* 0x0008 */ enum _DEVICE_RELATION_TYPE Type;
      } /* size: 0x0004 */ QueryDeviceRelations;
      struct
      {
        /* 0x0008 */ const struct _GUID* InterfaceType;
        /* 0x0010 */ unsigned short Size;
        /* 0x0012 */ unsigned short Version;
        /* 0x000c */ long Padding_38;
        /* 0x0018 */ struct _INTERFACE* Interface;
        /* 0x0020 */ void* InterfaceSpecificData;
      } /* size: 0x0020 */ QueryInterface;
      struct
      {
        /* 0x0008 */ struct _DEVICE_CAPABILITIES* Capabilities;
      } /* size: 0x0008 */ DeviceCapabilities;
      struct
      {
        /* 0x0008 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;
      } /* size: 0x0008 */ FilterResourceRequirements;
      struct
      {
        /* 0x0008 */ unsigned long WhichSpace;
        /* 0x0004 */ long Padding_39;
        /* 0x0010 */ void* Buffer;
        /* 0x0018 */ unsigned long Offset;
        /* 0x0014 */ long Padding_40;
        /* 0x0020 */ unsigned long Length;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ ReadWriteConfig;
      struct
      {
        /* 0x0008 */ unsigned char Lock;
      } /* size: 0x0001 */ SetLock;
      struct
      {
        /* 0x0008 */ enum BUS_QUERY_ID_TYPE IdType;
      } /* size: 0x0004 */ QueryId;
      struct
      {
        /* 0x0008 */ enum DEVICE_TEXT_TYPE DeviceTextType;
        /* 0x0004 */ long Padding_41;
        /* 0x0010 */ unsigned long LocaleId;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryDeviceText;
      struct
      {
        /* 0x0008 */ unsigned char InPath;
        /* 0x0009 */ unsigned char Reserved[3];
        /* 0x0004 */ long Padding_42;
        /* 0x0010 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ UsageNotification;
      struct
      {
        /* 0x0008 */ enum _SYSTEM_POWER_STATE PowerState;
      } /* size: 0x0004 */ WaitWake;
      struct
      {
        /* 0x0008 */ struct _POWER_SEQUENCE* PowerSequence;
      } /* size: 0x0008 */ PowerSequence;
      struct
      {
        union
        {
          /* 0x0008 */ unsigned long SystemContext;
          /* 0x0008 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
        }; /* size: 0x0004 */
        /* 0x0004 */ long Padding_43;
        /* 0x0010 */ enum _POWER_STATE_TYPE Type;
        /* 0x000c */ long Padding_44;
        /* 0x0018 */ union _POWER_STATE State;
        /* 0x0014 */ long Padding_45;
        /* 0x0020 */ enum POWER_ACTION ShutdownType;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ Power;
      struct
      {
        /* 0x0008 */ struct _CM_RESOURCE_LIST* AllocatedResources;
        /* 0x0010 */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
      } /* size: 0x0010 */ StartDevice;
      struct
      {
        /* 0x0008 */ unsigned __int64 ProviderId;
        /* 0x0010 */ void* DataPath;
        /* 0x0018 */ unsigned long BufferSize;
        /* 0x0014 */ long Padding_46;
        /* 0x0020 */ void* Buffer;
      } /* size: 0x0020 */ WMI;
      struct
      {
        /* 0x0008 */ void* Argument1;
        /* 0x0010 */ void* Argument2;
        /* 0x0018 */ void* Argument3;
        /* 0x0020 */ void* Argument4;
      } /* size: 0x0020 */ Others;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ Parameters;
  /* 0x0028 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0030 */ struct _FILE_OBJECT* FileObject;
  /* 0x0038 */ void* CompletionRoutine /* function */;
  /* 0x0040 */ void* Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION; /* size: 0x0048 */

typedef enum _KTIMER2_TYPE
{
  KTimer2TypeMin = 0,
  KTimer2Plain = 0,
  KTimer2IdleResilient = 1,
  KTimer2HighResolution = 2,
  KTimer2NoWake = 3,
  KTimer2NoWakeFinite = 4,
  KTimer2TypeMax = 5,
} KTIMER2_TYPE, *PKTIMER2_TYPE;

enum IRPLOCK
{
  IRPLOCK_CANCELABLE = 0,
  IRPLOCK_CANCEL_STARTED = 1,
  IRPLOCK_CANCEL_COMPLETE = 2,
  IRPLOCK_COMPLETED = 3,
};

typedef struct _flags
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Removable : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char GroupAssigned : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned char GroupCommitted : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned char GroupAssignmentFixed : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char Fill : 4; /* bit position: 4 */
  }; /* bitfield */
} flags, *Pflags; /* size: 0x0001 */

typedef struct _KNODE
{
  /* 0x0000 */ unsigned __int64 DeepIdleSet;
  /* 0x0008 */ unsigned __int64 SharedReadyQueueLeaders;
  /* 0x0010 */ long Padding_47[12];
  /* 0x0040 */ unsigned long ProximityId;
  /* 0x0044 */ unsigned short NodeNumber;
  /* 0x0046 */ unsigned short PrimaryNodeNumber;
  /* 0x0048 */ unsigned char MaximumProcessors;
  /* 0x0049 */ struct _flags Flags;
  /* 0x004a */ unsigned char Stride;
  /* 0x004b */ unsigned char LowIndex;
  /* 0x004c */ long Padding_48;
  /* 0x0050 */ struct _GROUP_AFFINITY Affinity;
  /* 0x0060 */ unsigned __int64 IdleCpuSet;
  /* 0x0068 */ unsigned __int64 IdleSmtSet;
  /* 0x0070 */ long Padding_49[4];
  /* 0x0080 */ unsigned __int64 NonParkedSet;
  /* 0x0088 */ unsigned long Seed;
  /* 0x008c */ unsigned long Lowest;
  /* 0x0090 */ unsigned long Highest;
  /* 0x0094 */ long ParkLock;
  /* 0x0098 */ long __PADDING__[10];
} KNODE, *PKNODE; /* size: 0x00c0 */

typedef enum _PNP_DEVICE_DELETE_TYPE
{
  QueryRemoveDevice = 0,
  CancelRemoveDevice = 1,
  RemoveDevice = 2,
  SurpriseRemoveDevice = 3,
  EjectDevice = 4,
  RemoveFailedDevice = 5,
  RemoveUnstartedFailedDevice = 6,
  MaxDeviceDeleteType = 7,
} PNP_DEVICE_DELETE_TYPE, *PPNP_DEVICE_DELETE_TYPE;

typedef enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
} TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef enum _PS_ATTRIBUTE_NUM
{
  PsAttributeParentProcess = 0,
  PsAttributeDebugObject = 1,
  PsAttributeToken = 2,
  PsAttributeClientId = 3,
  PsAttributeTebAddress = 4,
  PsAttributeImageName = 5,
  PsAttributeImageInfo = 6,
  PsAttributeMemoryReserve = 7,
  PsAttributePriorityClass = 8,
  PsAttributeErrorMode = 9,
  PsAttributeStdHandleInfo = 10,
  PsAttributeHandleList = 11,
  PsAttributeGroupAffinity = 12,
  PsAttributePreferredNode = 13,
  PsAttributeIdealProcessor = 14,
  PsAttributeUmsThread = 15,
  PsAttributeMitigationOptions = 16,
  PsAttributeProtectionLevel = 17,
  PsAttributeMax = 18,
} PS_ATTRIBUTE_NUM, *PPS_ATTRIBUTE_NUM;

typedef enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
} KINTERRUPT_MODE, *PKINTERRUPT_MODE;

typedef union _SLIST_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 Alignment;
      /* 0x0008 */ unsigned __int64 Region;
    }; /* size: 0x0010 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Depth : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Sequence : 48; /* bit position: 16 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 Reserved : 4; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 NextEntry : 60; /* bit position: 4 */
      }; /* bitfield */
    } /* size: 0x0010 */ HeaderX64;
  }; /* size: 0x0010 */
} SLIST_HEADER, *PSLIST_HEADER; /* size: 0x0010 */

typedef struct _GENERAL_LOOKASIDE_POOL
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  union
  {
    /* 0x0018 */ unsigned long AllocateMisses;
    /* 0x0018 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long TotalFrees;
  union
  {
    /* 0x0020 */ unsigned long FreeMisses;
    /* 0x0020 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x0024 */ enum _POOL_TYPE Type;
  /* 0x0028 */ unsigned long Tag;
  /* 0x002c */ unsigned long Size;
  union
  {
    /* 0x0030 */ void* AllocateEx /* function */;
    /* 0x0030 */ void* Allocate /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0038 */ void* FreeEx /* function */;
    /* 0x0038 */ void* Free /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _LIST_ENTRY ListEntry;
  /* 0x0050 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x0054 */ unsigned long LastAllocateMisses;
    /* 0x0054 */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0058 */ unsigned long Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL; /* size: 0x0060 */

typedef enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
  InterruptActiveBothTriggerLow = 3,
  InterruptActiveBothTriggerHigh = 4,
} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef enum _WHEA_ERROR_SOURCE_STATE
{
  WheaErrSrcStateStopped = 1,
  WheaErrSrcStateStarted = 2,
} WHEA_ERROR_SOURCE_STATE, *PWHEA_ERROR_SOURCE_STATE;

typedef enum
{
  KTMOH_CommitTransaction_Result = 1,
  KTMOH_RollbackTransaction_Result = 2,
} TAG_UNNAMED_1, *PTAG_UNNAMED_1;

typedef struct _KTRANSACTION_HISTORY
{
  /* 0x0000 */ enum _TAG_UNNAMED_1 RecordType;
  /* 0x0004 */ unsigned long Payload;
} KTRANSACTION_HISTORY, *PKTRANSACTION_HISTORY; /* size: 0x0008 */

typedef enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
} DMA_WIDTH, *PDMA_WIDTH;

typedef struct _DBGKD_SET_SPECIAL_CALL32
{
  /* 0x0000 */ unsigned long SpecialCall;
} DBGKD_SET_SPECIAL_CALL32, *PDBGKD_SET_SPECIAL_CALL32; /* size: 0x0004 */

typedef enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
} DMA_SPEED, *PDMA_SPEED;

typedef enum _PS_RESOURCE_TYPE
{
  PsResourceNonPagedPool = 0,
  PsResourcePagedPool = 1,
  PsResourcePageFile = 2,
  PsResourceWorkingSet = 3,
  PsResourceMax = 4,
} PS_RESOURCE_TYPE, *PPS_RESOURCE_TYPE;

typedef struct _DBGKD_WRITE_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakPointAddress;
  /* 0x0008 */ unsigned long BreakPointHandle;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_WRITE_BREAKPOINT64, *PDBGKD_WRITE_BREAKPOINT64; /* size: 0x0010 */

typedef enum _ETW_HEADER_TYPE
{
  EtwHeaderTypeNative = 0,
  EtwHeaderTypeWow = 1,
  EtwHeaderTypeMax = 2,
} ETW_HEADER_TYPE, *PETW_HEADER_TYPE;

typedef enum _PNP_VETO_TYPE
{
  PNP_VetoTypeUnknown = 0,
  PNP_VetoLegacyDevice = 1,
  PNP_VetoPendingClose = 2,
  PNP_VetoWindowsApp = 3,
  PNP_VetoWindowsService = 4,
  PNP_VetoOutstandingOpen = 5,
  PNP_VetoDevice = 6,
  PNP_VetoDriver = 7,
  PNP_VetoIllegalDeviceRequest = 8,
  PNP_VetoInsufficientPower = 9,
  PNP_VetoNonDisableable = 10,
  PNP_VetoLegacyDriver = 11,
  PNP_VetoInsufficientRights = 12,
} PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectWakeInformation = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectClearEvent = 25,
  JobObjectInterferenceInformation = 26,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  JobObjectReserved8Information = 25,
  JobObjectReserved9Information = 26,
  MaxJobObjectInfoClass = 27,
} JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef enum _CM_SHARE_DISPOSITION
{
  CmResourceShareUndetermined = 0,
  CmResourceShareDeviceExclusive = 1,
  CmResourceShareDriverExclusive = 2,
  CmResourceShareShared = 3,
} CM_SHARE_DISPOSITION, *PCM_SHARE_DISPOSITION;

typedef enum _MM_PREEMPTIVE_TRIMS
{
  MmPreemptForNonPaged = 0,
  MmPreemptForPaged = 1,
  MmPreemptForNonPagedPriority = 2,
  MmPreemptForPagedPriority = 3,
  MmMaximumPreempt = 4,
} MM_PREEMPTIVE_TRIMS, *PMM_PREEMPTIVE_TRIMS;

typedef enum _ETW_BUFFER_STATE
{
  EtwBufferStateFree = 0,
  EtwBufferStateGeneralLogging = 1,
  EtwBufferStateCSwitch = 2,
  EtwBufferStateFlush = 3,
  EtwBufferStateMaximum = 4,
} ETW_BUFFER_STATE, *PETW_BUFFER_STATE;

typedef struct _DBGKD_SET_CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
} DBGKD_SET_CONTEXT, *PDBGKD_SET_CONTEXT; /* size: 0x0004 */

enum PROFILE_DEPARTURE_STYLE
{
  PDS_UPDATE_DEFAULT = 1,
  PDS_UPDATE_ON_REMOVE = 2,
  PDS_UPDATE_ON_INTERFACE = 3,
  PDS_UPDATE_ON_EJECT = 4,
};

enum LSA_FOREST_TRUST_RECORD_TYPE
{
  ForestTrustTopLevelName = 0,
  ForestTrustTopLevelNameEx = 1,
  ForestTrustDomainInfo = 2,
  ForestTrustRecordTypeLast = 2,
};

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
} DBGKD_SET_INTERNAL_BREAKPOINT32, *PDBGKD_SET_INTERNAL_BREAKPOINT32; /* size: 0x0008 */

enum SYSTEM_POWER_CONDITION
{
  PoAc = 0,
  PoDc = 1,
  PoHot = 2,
  PoConditionMaximum = 3,
};

typedef struct _KDPC_LIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListHead;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY* LastEntry;
} KDPC_LIST, *PKDPC_LIST; /* size: 0x0010 */

typedef struct _KDPC_DATA
{
  /* 0x0000 */ struct _KDPC_LIST DpcList;
  /* 0x0010 */ unsigned __int64 DpcLock;
  /* 0x0018 */ volatile long DpcQueueDepth;
  /* 0x001c */ unsigned long DpcCount;
  /* 0x0020 */ struct _KDPC* volatile ActiveDpc;
} KDPC_DATA, *PKDPC_DATA; /* size: 0x0028 */

typedef struct _SID_AND_ATTRIBUTES_HASH
{
  /* 0x0000 */ unsigned long SidCount;
  /* 0x0004 */ long Padding_50;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES* SidAttr;
  /* 0x0010 */ unsigned __int64 Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH; /* size: 0x0110 */

typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
{
  /* 0x0000 */ unsigned long DeviceGroupsCount;
  /* 0x0004 */ long Padding_51;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES* pDeviceGroups;
  /* 0x0010 */ unsigned long RestrictedDeviceGroupsCount;
  /* 0x0014 */ long Padding_52;
  /* 0x0018 */ struct _SID_AND_ATTRIBUTES* pRestrictedDeviceGroups;
  /* 0x0020 */ struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;
  /* 0x0130 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;
  /* 0x0240 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pUserSecurityAttributes;
  /* 0x0248 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pDeviceSecurityAttributes;
  /* 0x0250 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedUserSecurityAttributes;
  /* 0x0258 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedDeviceSecurityAttributes;
} AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION, *PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION; /* size: 0x0260 */

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char Type;
      union
      {
        /* 0x0001 */ unsigned char TimerControlFlags;
        struct /* bitfield */
        {
          /* 0x0001 */ unsigned char Absolute : 1; /* bit position: 0 */
          /* 0x0001 */ unsigned char Wake : 1; /* bit position: 1 */
          /* 0x0001 */ unsigned char EncodedTolerableDelay : 6; /* bit position: 2 */
        }; /* bitfield */
        /* 0x0001 */ unsigned char QueueControlFlags;
        struct /* bitfield */
        {
          /* 0x0001 */ unsigned char Abandoned : 1; /* bit position: 0 */
          /* 0x0001 */ unsigned char DisableIncrement : 1; /* bit position: 1 */
        }; /* bitfield */
        /* 0x0001 */ unsigned char Signalling;
        /* 0x0001 */ unsigned char Timer2Flags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Timer2Inserted : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Timer2Expiring : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char Timer2CancelPending : 1; /* bit position: 2 */
            /* 0x0001 */ unsigned char Timer2SetPending : 1; /* bit position: 3 */
            /* 0x0001 */ unsigned char Timer2Running : 1; /* bit position: 4 */
            /* 0x0001 */ unsigned char Timer2Disabled : 1; /* bit position: 5 */
            /* 0x0001 */ unsigned char Reserved1 : 2; /* bit position: 6 */
          }; /* bitfield */
          union
          {
            /* 0x0002 */ unsigned char ThreadControlFlags;
            struct /* bitfield */
            {
              /* 0x0002 */ unsigned char CycleProfiling : 1; /* bit position: 0 */
              /* 0x0002 */ unsigned char CounterProfiling : 1; /* bit position: 1 */
              /* 0x0002 */ unsigned char GroupScheduling : 1; /* bit position: 2 */
              /* 0x0002 */ unsigned char AffinitySet : 1; /* bit position: 3 */
              /* 0x0002 */ unsigned char Reserved2 : 4; /* bit position: 4 */
            }; /* bitfield */
            /* 0x0002 */ unsigned char Hand;
            /* 0x0002 */ unsigned char Reserved3;
            struct
            {
              /* 0x0002 */ unsigned char Size;
              union
              {
                /* 0x0003 */ unsigned char TimerMiscFlags;
                struct /* bitfield */
                {
                  /* 0x0003 */ unsigned char Index : 6; /* bit position: 0 */
                  /* 0x0003 */ unsigned char Inserted : 1; /* bit position: 6 */
                  /* 0x0003 */ volatile unsigned char Expired : 1; /* bit position: 7 */
                }; /* bitfield */
                /* 0x0003 */ unsigned char DebugActive;
                struct /* bitfield */
                {
                  /* 0x0003 */ unsigned char ActiveDR7 : 1; /* bit position: 0 */
                  /* 0x0003 */ unsigned char Instrumented : 1; /* bit position: 1 */
                  /* 0x0003 */ unsigned char Minimal : 1; /* bit position: 2 */
                  /* 0x0003 */ unsigned char Reserved4 : 3; /* bit position: 3 */
                  /* 0x0003 */ unsigned char UmsScheduled : 1; /* bit position: 6 */
                  /* 0x0003 */ unsigned char UmsPrimary : 1; /* bit position: 7 */
                }; /* bitfield */
                /* 0x0003 */ unsigned char DpcActive;
                /* 0x0003 */ unsigned char Reserved5;
              }; /* size: 0x0001 */
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    /* 0x0000 */ volatile long Lock;
    /* 0x0000 */ long LockNV;
  }; /* size: 0x0004 */
  /* 0x0004 */ long SignalState;
  /* 0x0008 */ struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; /* size: 0x0018 */

typedef struct _KEVENT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; /* size: 0x0018 */

typedef struct _FAST_MUTEX
{
  /* 0x0000 */ long Count;
  /* 0x0004 */ long Padding_53;
  /* 0x0008 */ void* Owner;
  /* 0x0010 */ unsigned long Contention;
  /* 0x0014 */ long Padding_54;
  /* 0x0018 */ struct _KEVENT Event;
  /* 0x0030 */ unsigned long OldIrql;
  /* 0x0034 */ long __PADDING__[1];
} FAST_MUTEX, *PFAST_MUTEX; /* size: 0x0038 */

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0008 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0010 */

typedef struct _HANDLE_TRACE_DB_ENTRY
{
  /* 0x0000 */ struct _CLIENT_ID ClientId;
  /* 0x0010 */ void* Handle;
  /* 0x0018 */ unsigned long Type;
  /* 0x001c */ long Padding_55;
  /* 0x0020 */ void* StackTrace[16];
} HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY; /* size: 0x00a0 */

typedef struct _HANDLE_TRACE_DEBUG_INFO
{
  /* 0x0000 */ long RefCount;
  /* 0x0004 */ unsigned long TableSize;
  /* 0x0008 */ unsigned long BitMaskFlags;
  /* 0x000c */ long Padding_56;
  /* 0x0010 */ struct _FAST_MUTEX CloseCompactionLock;
  /* 0x0048 */ unsigned long CurrentStackIndex;
  /* 0x004c */ long Padding_57;
  /* 0x0050 */ struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];
} HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO; /* size: 0x00f0 */

typedef enum _TYPE_OF_MEMORY
{
  LoaderExceptionBlock = 0,
  LoaderSystemBlock = 1,
  LoaderFree = 2,
  LoaderBad = 3,
  LoaderLoadedProgram = 4,
  LoaderFirmwareTemporary = 5,
  LoaderFirmwarePermanent = 6,
  LoaderOsloaderHeap = 7,
  LoaderOsloaderStack = 8,
  LoaderSystemCode = 9,
  LoaderHalCode = 10,
  LoaderBootDriver = 11,
  LoaderConsoleInDriver = 12,
  LoaderConsoleOutDriver = 13,
  LoaderStartupDpcStack = 14,
  LoaderStartupKernelStack = 15,
  LoaderStartupPanicStack = 16,
  LoaderStartupPcrPage = 17,
  LoaderStartupPdrPage = 18,
  LoaderRegistryData = 19,
  LoaderMemoryData = 20,
  LoaderNlsData = 21,
  LoaderSpecialMemory = 22,
  LoaderBBTMemory = 23,
  LoaderReserve = 24,
  LoaderXIPRom = 25,
  LoaderHALCachedMemory = 26,
  LoaderLargePageFiller = 27,
  LoaderErrorLogMemory = 28,
  LoaderMaximum = 29,
} TYPE_OF_MEMORY, *PTYPE_OF_MEMORY;

enum PPM_IDLE_BUCKET_TIME_TYPE
{
  PpmIdleBucketTimeInQpc = 0,
  PpmIdleBucketTimeIn100ns = 1,
  PpmIdleBucketTimeMaximum = 2,
};

typedef struct _HMAP_DIRECTORY
{
  /* 0x0000 */ struct _HMAP_TABLE* Directory[1024];
} HMAP_DIRECTORY, *PHMAP_DIRECTORY; /* size: 0x2000 */

typedef enum _DEVPROP_OPERATOR
{
  DEVPROP_OPERATOR_MODIFIER_NOT = 0x10000,
  DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 0x20000,
  DEVPROP_OPERATOR_NONE = 0,
  DEVPROP_OPERATOR_EXISTS = 1,
  DEVPROP_OPERATOR_EQUALS = 2,
  DEVPROP_OPERATOR_NOT_EQUALS = 0x10002,
  DEVPROP_OPERATOR_GREATER_THAN = 3,
  DEVPROP_OPERATOR_LESS_THAN = 4,
  DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
  DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
  DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 0x20002,
  DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 0x30002,
  DEVPROP_OPERATOR_BITWISE_AND = 7,
  DEVPROP_OPERATOR_BITWISE_OR = 8,
  DEVPROP_OPERATOR_BEGINS_WITH = 9,
  DEVPROP_OPERATOR_ENDS_WITH = 10,
  DEVPROP_OPERATOR_CONTAINS = 11,
  DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 0x20009,
  DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 0x2000a,
  DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 0x2000b,
  DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
  DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 0x21000,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 0x22000,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 0x23000,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 0x24000,
  DEVPROP_OPERATOR_AND_OPEN = 0x100000,
  DEVPROP_OPERATOR_AND_CLOSE = 0x200000,
  DEVPROP_OPERATOR_OR_OPEN = 0x300000,
  DEVPROP_OPERATOR_OR_CLOSE = 0x400000,
  DEVPROP_OPERATOR_NOT_OPEN = 0x500000,
  DEVPROP_OPERATOR_NOT_CLOSE = 0x600000,
  DEVPROP_OPERATOR_MASK_EVAL = 4095,
  DEVPROP_OPERATOR_MASK_LIST = 0xfffff000,
  DEVPROP_OPERATOR_MASK_MODIFIER = 0xf0000,
  DEVPROP_OPERATOR_MASK_NOT_LOGICAL = 0xfffff,
  DEVPROP_OPERATOR_MASK_LOGICAL = -1048576,
} DEVPROP_OPERATOR, *PDEVPROP_OPERATOR;

typedef struct _TOKEN_AUDIT_POLICY
{
  /* 0x0000 */ unsigned char PerUserPolicy[29];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY; /* size: 0x001d */

typedef enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
} IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef enum _CM_DIRTY_VECTOR_OPERATION
{
  DirtyVectorModified = 0,
  DirtyDataCaptureStart = 1,
  DirtyDataCaptureEnd = 2,
} CM_DIRTY_VECTOR_OPERATION, *PCM_DIRTY_VECTOR_OPERATION;

typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0008 */ enum _CM_DIRTY_VECTOR_OPERATION Operation;
  union
  {
    union
    {
      struct
      {
        /* 0x000c */ unsigned long Start;
        /* 0x0010 */ unsigned long Length;
      } /* size: 0x0008 */ DirtyVectorModifiedContext;
      struct
      {
        /* 0x000c */ unsigned long RangeCount;
        /* 0x0010 */ unsigned long SetBitCount;
      } /* size: 0x0008 */ DirtyDataCaptureContext;
      struct
      {
        /* 0x000c */ unsigned long Context1;
        /* 0x0010 */ unsigned long Context2;
      } /* size: 0x0008 */ Raw;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Data;
  /* 0x0014 */ long Padding_58;
  /* 0x0018 */ void* Stack[7];
} CM_DIRTY_VECTOR_LOG_ENTRY, *PCM_DIRTY_VECTOR_LOG_ENTRY; /* size: 0x0050 */

enum POWER_POLICY_DEVICE_TYPE
{
  PolicyDeviceSystemButton = 0,
  PolicyDeviceThermalZone = 1,
  PolicyDeviceBattery = 2,
  PolicyDeviceMemory = 3,
  PolicyInitiatePowerActionAPI = 4,
  PolicySetPowerStateAPI = 5,
  PolicyImmediateDozeS4 = 6,
  PolicySystemIdle = 7,
  PolicyDeviceWakeAlarm = 8,
  PolicyDeviceFan = 9,
  PolicyDeviceMax = 10,
};

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

enum PS_CREATE_STATE
{
  PsCreateInitialState = 0,
  PsCreateFailOnFileOpen = 1,
  PsCreateFailOnSectionCreate = 2,
  PsCreateFailExeFormat = 3,
  PsCreateFailMachineMismatch = 4,
  PsCreateFailExeName = 5,
  PsCreateSuccess = 6,
  PsCreateMaximumStates = 7,
};

typedef enum _PLUGPLAY_EVENT_CATEGORY
{
  HardwareProfileChangeEvent = 0,
  TargetDeviceChangeEvent = 1,
  DeviceClassChangeEvent = 2,
  CustomDeviceEvent = 3,
  DeviceInstallEvent = 4,
  DeviceArrivalEvent = 5,
  VetoEvent = 6,
  BlockedDriverEvent = 7,
  InvalidIDEvent = 8,
  DevicePropertyChangeEvent = 9,
  DeviceInstanceRemovalEvent = 10,
  DeviceInstanceStartedEvent = 11,
  MaxPlugEventCategory = 12,
} PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef enum _MI_MEMORY_HIGHLOW
{
  MiMemoryHigh = 0,
  MiMemoryLow = 1,
  MiMemoryHighLow = 2,
} MI_MEMORY_HIGHLOW, *PMI_MEMORY_HIGHLOW;

typedef struct _RTL_BITMAP
{
  /* 0x0000 */ unsigned long SizeOfBitMap;
  /* 0x0004 */ long Padding_59;
  /* 0x0008 */ unsigned long* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; /* size: 0x0010 */

typedef struct _FREE_DISPLAY
{
  /* 0x0000 */ unsigned long RealVectorSize;
  /* 0x0004 */ unsigned long Hint;
  /* 0x0008 */ struct _RTL_BITMAP Display;
} FREE_DISPLAY, *PFREE_DISPLAY; /* size: 0x0018 */

typedef struct _DUAL
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_60;
  /* 0x0008 */ struct _HMAP_DIRECTORY* Map;
  /* 0x0010 */ struct _HMAP_TABLE* SmallDir;
  /* 0x0018 */ unsigned long Guard;
  /* 0x001c */ long Padding_61;
  /* 0x0020 */ struct _FREE_DISPLAY FreeDisplay[24];
  /* 0x0260 */ struct _LIST_ENTRY FreeBins;
  /* 0x0270 */ unsigned long FreeSummary;
  /* 0x0274 */ long __PADDING__[1];
} DUAL, *PDUAL; /* size: 0x0278 */

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Shared : 60; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0008 */
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; /* size: 0x0008 */

typedef struct _MMSUPPORT_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char WorkingSetType : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char ForceCredits : 3; /* bit position: 3 */
    /* 0x0000 */ unsigned char MaximumWorkingSetHard : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char MinimumWorkingSetHard : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char SessionMaster : 1; /* bit position: 0 */
    /* 0x0001 */ unsigned char TrimmerState : 2; /* bit position: 1 */
    /* 0x0001 */ unsigned char Reserved : 1; /* bit position: 3 */
    /* 0x0001 */ unsigned char PageStealers : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0002 */ unsigned char MemoryPriority;
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char WsleDeleted : 1; /* bit position: 0 */
    /* 0x0003 */ unsigned char VmExiting : 1; /* bit position: 1 */
    /* 0x0003 */ unsigned char ExpansionFailed : 1; /* bit position: 2 */
    /* 0x0003 */ unsigned char SvmEnabled : 1; /* bit position: 3 */
    /* 0x0003 */ unsigned char Available : 4; /* bit position: 4 */
  }; /* bitfield */
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS; /* size: 0x0004 */

typedef struct _MMSUPPORT
{
  /* 0x0000 */ struct _EX_PUSH_LOCK WorkingSetMutex;
  /* 0x0008 */ struct _KGATE* ExitGate;
  /* 0x0010 */ void* AccessLog;
  /* 0x0018 */ struct _LIST_ENTRY WorkingSetExpansionLinks;
  /* 0x0028 */ unsigned __int64 AgeDistribution[7];
  /* 0x0060 */ unsigned __int64 MinimumWorkingSetSize;
  /* 0x0068 */ unsigned __int64 WorkingSetSize;
  /* 0x0070 */ unsigned __int64 WorkingSetPrivateSize;
  /* 0x0078 */ unsigned __int64 MaximumWorkingSetSize;
  /* 0x0080 */ unsigned __int64 ChargedWslePages;
  /* 0x0088 */ unsigned __int64 ActualWslePages;
  /* 0x0090 */ unsigned __int64 WorkingSetSizeOverhead;
  /* 0x0098 */ unsigned __int64 PeakWorkingSetSize;
  /* 0x00a0 */ unsigned long HardFaultCount;
  /* 0x00a4 */ long Padding_62;
  /* 0x00a8 */ struct _MMWSL* VmWorkingSetList;
  /* 0x00b0 */ unsigned short NextPageColor;
  /* 0x00b2 */ unsigned short LastTrimStamp;
  /* 0x00b4 */ unsigned long PageFaultCount;
  /* 0x00b8 */ unsigned __int64 TrimmedPageCount;
  /* 0x00c0 */ unsigned __int64 ForceTrimPages;
  /* 0x00c8 */ struct _MMSUPPORT_FLAGS Flags;
  /* 0x00cc */ long Padding_63;
  /* 0x00d0 */ void* WsSwapSupport;
} MMSUPPORT, *PMMSUPPORT; /* size: 0x00d8 */

typedef enum _ETW_STRING_TOKEN_TYPE
{
  ETW_STRING_TOKEN_EXE = 0,
  ETW_STRING_TOKEN_PACKAGE_ID = 1,
  ETW_STRING_TOKEN_PKG_APP_ID = 2,
  ETW_STRING_TOKEN_MAX_COUNT = 3,
} ETW_STRING_TOKEN_TYPE, *PETW_STRING_TOKEN_TYPE;

typedef enum _MM_POOL_TYPES
{
  MmNonPagedPool = 0,
  MmPagedPool = 1,
  MmSessionPagedPool = 2,
  MmMaximumPoolType = 3,
} MM_POOL_TYPES, *PMM_POOL_TYPES;

typedef enum _KWAIT_STATE
{
  WaitInProgress = 0,
  WaitCommitted = 1,
  WaitAborted = 2,
  MaximumWaitState = 3,
} KWAIT_STATE, *PKWAIT_STATE;

typedef enum _PROCESSOR_CACHE_TYPE
{
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3,
} PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
} MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef enum _EXQUEUEINDEX
{
  ExPoolUntrusted = 0,
  ExPoolTrusted = 1,
  ExPoolMax = 2,
} EXQUEUEINDEX, *PEXQUEUEINDEX;

typedef enum _MM_POOL_PRIORITIES
{
  MmHighPriority = 0,
  MmNormalPriority = 1,
  MmLowPriority = 2,
  MmMaximumPoolPriority = 3,
} MM_POOL_PRIORITIES, *PMM_POOL_PRIORITIES;

typedef enum _POP_DEVICE_IDLE_TYPE
{
  DeviceIdleNormal = 0,
  DeviceIdleDisk = 1,
} POP_DEVICE_IDLE_TYPE, *PPOP_DEVICE_IDLE_TYPE;

typedef enum _KENLISTMENT_STATE
{
  KEnlistmentUninitialized = 0,
  KEnlistmentActive = 256,
  KEnlistmentPreparing = 257,
  KEnlistmentPrepared = 258,
  KEnlistmentInDoubt = 259,
  KEnlistmentCommitted = 260,
  KEnlistmentCommittedNotify = 261,
  KEnlistmentCommitRequested = 262,
  KEnlistmentAborted = 263,
  KEnlistmentDelegated = 264,
  KEnlistmentDelegatedDisconnected = 265,
  KEnlistmentPrePreparing = 266,
  KEnlistmentForgotten = 267,
  KEnlistmentRecovering = 268,
  KEnlistmentAborting = 269,
  KEnlistmentReadOnly = 270,
  KEnlistmentOutcomeUnavailable = 271,
  KEnlistmentOffline = 272,
  KEnlistmentPrePrepared = 273,
  KEnlistmentInitialized = 274,
} KENLISTMENT_STATE, *PKENLISTMENT_STATE;

enum HAL_APIC_DESTINATION_MODE
{
  ApicDestinationModePhysical = 1,
  ApicDestinationModeLogicalFlat = 2,
  ApicDestinationModeLogicalClustered = 3,
  ApicDestinationModeUnknown = 4,
};

typedef struct _KTIMER_TABLE
{
  /* 0x0000 */ struct _KTIMER* TimerExpiry[64];
  /* 0x0200 */ struct _KTIMER_TABLE_ENTRY TimerEntries[256];
} KTIMER_TABLE, *PKTIMER_TABLE; /* size: 0x2200 */

typedef enum _ARBITER_ACTION
{
  ArbiterActionTestAllocation = 0,
  ArbiterActionRetestAllocation = 1,
  ArbiterActionCommitAllocation = 2,
  ArbiterActionRollbackAllocation = 3,
  ArbiterActionQueryAllocatedResources = 4,
  ArbiterActionWriteReservedResources = 5,
  ArbiterActionQueryConflict = 6,
  ArbiterActionQueryArbitrate = 7,
  ArbiterActionAddReserved = 8,
  ArbiterActionBootAllocation = 9,
} ARBITER_ACTION, *PARBITER_ACTION;

typedef struct _KTIMER
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ union _ULARGE_INTEGER DueTime;
  /* 0x0020 */ struct _LIST_ENTRY TimerListEntry;
  /* 0x0030 */ struct _KDPC* Dpc;
  /* 0x0038 */ unsigned long Processor;
  /* 0x003c */ unsigned long Period;
} KTIMER, *PKTIMER; /* size: 0x0040 */

typedef struct _KDPC
{
  union
  {
    /* 0x0000 */ unsigned long TargetInfoAsUlong;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Importance;
      /* 0x0002 */ volatile unsigned short Number;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_64;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY DpcListEntry;
  /* 0x0010 */ unsigned __int64 ProcessorHistory;
  /* 0x0018 */ void* DeferredRoutine /* function */;
  /* 0x0020 */ void* DeferredContext;
  /* 0x0028 */ void* SystemArgument1;
  /* 0x0030 */ void* SystemArgument2;
  /* 0x0038 */ void* DpcData;
} KDPC, *PKDPC; /* size: 0x0040 */

typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
{
  /* 0x0000 */ struct _KTIMER Timer;
  /* 0x0040 */ struct _KDPC Dpc;
  /* 0x0080 */ struct _POP_FX_WORK_ORDER* WorkOrder;
} POP_FX_WORK_ORDER_WATCHDOG_INFO, *PPOP_FX_WORK_ORDER_WATCHDOG_INFO; /* size: 0x0088 */

typedef struct _INVERTED_FUNCTION_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;
    /* 0x0000 */ struct _DYNAMIC_FUNCTION_TABLE* DynamicTable;
  }; /* size: 0x0008 */
  /* 0x0008 */ void* ImageBase;
  /* 0x0010 */ unsigned long SizeOfImage;
  /* 0x0014 */ unsigned long SizeOfTable;
} INVERTED_FUNCTION_TABLE_ENTRY, *PINVERTED_FUNCTION_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _INVERTED_FUNCTION_TABLE
{
  /* 0x0000 */ unsigned long CurrentSize;
  /* 0x0004 */ unsigned long MaximumSize;
  /* 0x0008 */ volatile unsigned long Epoch;
  /* 0x000c */ unsigned char Overflow;
  /* 0x000d */ char Padding_65[3];
  /* 0x0010 */ struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[256];
} INVERTED_FUNCTION_TABLE, *PINVERTED_FUNCTION_TABLE; /* size: 0x1810 */

typedef enum _HV_HYPERVISOR_INTERFACE
{
  HvMicrosoftHypervisorInterface = 0x31237648,
} HV_HYPERVISOR_INTERFACE, *PHV_HYPERVISOR_INTERFACE;

typedef struct _KAFFINITY_EX
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned __int64 Bitmap[20];
} KAFFINITY_EX, *PKAFFINITY_EX; /* size: 0x00a8 */

typedef struct _PROCESSOR_IDLE_CONSTRAINTS
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 IdleTime;
  /* 0x0010 */ unsigned __int64 ExpectedIdleDuration;
  /* 0x0018 */ unsigned __int64 MaxIdleDuration;
  /* 0x0020 */ unsigned long OverrideState;
  /* 0x0024 */ unsigned long TimeCheck;
  /* 0x0028 */ unsigned char PromotePercent;
  /* 0x0029 */ unsigned char DemotePercent;
  /* 0x002a */ unsigned char Parked;
  /* 0x002b */ unsigned char Interruptible;
  /* 0x002c */ unsigned char PlatformIdle;
  /* 0x002d */ char Padding_66[3];
  /* 0x0030 */ unsigned long IRHints;
  /* 0x0034 */ unsigned long IRTruncatedHints;
  /* 0x0038 */ unsigned char ExpectedWakeReason;
  /* 0x0039 */ char __PADDING__[7];
} PROCESSOR_IDLE_CONSTRAINTS, *PPROCESSOR_IDLE_CONSTRAINTS; /* size: 0x0040 */

typedef struct _PROCESSOR_IDLE_PREPARE_INFO
{
  /* 0x0000 */ void* Context;
  /* 0x0008 */ struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;
  /* 0x0048 */ unsigned long DependencyCount;
  /* 0x004c */ unsigned long DependencyUsed;
  /* 0x0050 */ struct _PROCESSOR_IDLE_DEPENDENCY* DependencyArray;
  /* 0x0058 */ unsigned long PlatformIdleStateIndex;
  /* 0x005c */ unsigned long ProcessorIdleStateIndex;
  /* 0x0060 */ unsigned long IdleSelectFailureMask;
  /* 0x0064 */ long __PADDING__[1];
} PROCESSOR_IDLE_PREPARE_INFO, *PPROCESSOR_IDLE_PREPARE_INFO; /* size: 0x0068 */

typedef struct _PPM_VETO_ACCOUNTING
{
  /* 0x0000 */ volatile long VetoPresent;
  /* 0x0004 */ long Padding_67;
  /* 0x0008 */ struct _LIST_ENTRY VetoListHead;
} PPM_VETO_ACCOUNTING, *PPPM_VETO_ACCOUNTING; /* size: 0x0018 */

typedef struct _PPM_IDLE_STATE
{
  /* 0x0000 */ struct _KAFFINITY_EX DomainMembers;
  /* 0x00a8 */ unsigned long Latency;
  /* 0x00ac */ unsigned long BreakEvenDuration;
  /* 0x00b0 */ unsigned long Power;
  /* 0x00b4 */ unsigned long StateFlags;
  /* 0x00b8 */ struct _PPM_VETO_ACCOUNTING VetoAccounting;
  /* 0x00d0 */ unsigned char StateType;
  /* 0x00d1 */ unsigned char InterruptsEnabled;
  /* 0x00d2 */ unsigned char Interruptible;
  /* 0x00d3 */ unsigned char ContextRetained;
  /* 0x00d4 */ unsigned char CacheCoherent;
  /* 0x00d5 */ unsigned char WakesSpuriously;
  /* 0x00d6 */ unsigned char PlatformOnly;
  /* 0x00d7 */ unsigned char NoCState;
} PPM_IDLE_STATE, *PPPM_IDLE_STATE; /* size: 0x00d8 */

typedef struct _PPM_IDLE_STATES
{
  /* 0x0000 */ unsigned char InterfaceVersion;
  /* 0x0001 */ unsigned char ForceIdle;
  /* 0x0002 */ unsigned char EstimateIdleDuration;
  /* 0x0003 */ unsigned char ExitLatencyTraceEnabled;
  /* 0x0004 */ unsigned char NonInterruptibleTransition;
  /* 0x0005 */ char Padding_68[3];
  /* 0x0008 */ unsigned long ExitLatencyCountdown;
  /* 0x000c */ unsigned long TargetState;
  /* 0x0010 */ unsigned long ActualState;
  /* 0x0014 */ unsigned long OldState;
  /* 0x0018 */ unsigned long OverrideIndex;
  /* 0x001c */ unsigned long ProcessorIdleCount;
  /* 0x0020 */ unsigned long Type;
  /* 0x0024 */ unsigned short ReasonFlags;
  /* 0x0026 */ char Padding_69[2];
  /* 0x0028 */ volatile unsigned __int64 InitiateWakeStamp;
  /* 0x0030 */ long PreviousStatus;
  /* 0x0034 */ unsigned long PreviousCancelReason;
  /* 0x0038 */ struct _KAFFINITY_EX PrimaryProcessorMask;
  /* 0x00e0 */ struct _KAFFINITY_EX SecondaryProcessorMask;
  /* 0x0188 */ void* IdlePrepare /* function */;
  /* 0x0190 */ void* IdleExecute /* function */;
  /* 0x0198 */ void* IdlePreselect /* function */;
  /* 0x01a0 */ void* IdleTest /* function */;
  /* 0x01a8 */ void* IdleComplete /* function */;
  /* 0x01b0 */ void* IdleCancel /* function */;
  /* 0x01b8 */ void* IdleIsHalted /* function */;
  /* 0x01c0 */ void* IdleInitiateWake /* function */;
  /* 0x01c8 */ void* QueryPlatformStateResidency /* function */;
  /* 0x01d0 */ struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;
  /* 0x0238 */ struct _PERFINFO_PPM_STATE_SELECTION* Tracing;
  /* 0x0240 */ struct _PPM_IDLE_STATE State[1];
} PPM_IDLE_STATES, *PPPM_IDLE_STATES; /* size: 0x0318 */

struct PEPHANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum _KTHREAD_STATE
{
  Initialized = 0,
  Ready = 1,
  Running = 2,
  Standby = 3,
  Terminated = 4,
  Waiting = 5,
  Transition = 6,
  DeferredReady = 7,
  GateWaitObsolete = 8,
} KTHREAD_STATE, *PKTHREAD_STATE;

typedef enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned long BeginAddress;
  /* 0x0004 */ unsigned long EndAddress;
  union
  {
    /* 0x0008 */ unsigned long UnwindInfoAddress;
    /* 0x0008 */ unsigned long UnwindData;
  }; /* size: 0x0004 */
} IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY; /* size: 0x000c */

typedef enum _INTERLOCKED_RESULT
{
  ResultNegative = 1,
  ResultZero = 0,
  ResultPositive = 2,
} INTERLOCKED_RESULT, *PINTERLOCKED_RESULT;

typedef enum _PROC_PERF_UTILITY_TYPE
{
  ProcPerfUtilityTypeIncrease = 0,
  ProcPerfUtilityTypeDecrease = 1,
  ProcPerfUtilityTypeCoreParking = 2,
  ProcPerfUtilityTypeMax = 3,
} PROC_PERF_UTILITY_TYPE, *PPROC_PERF_UTILITY_TYPE;

typedef enum _PS_PROTECTED_TYPE
{
  PsProtectedTypeNone = 0,
  PsProtectedTypeProtectedLight = 1,
  PsProtectedTypeProtected = 2,
  PsProtectedTypeMax = 3,
} PS_PROTECTED_TYPE, *PPS_PROTECTED_TYPE;

typedef union _KSTACK_COUNT
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long State : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long StackCount : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KSTACK_COUNT, *PKSTACK_COUNT; /* size: 0x0004 */

typedef struct _PROC_IDLE_POLICY
{
  /* 0x0000 */ unsigned char PromotePercent;
  /* 0x0001 */ unsigned char DemotePercent;
  /* 0x0002 */ unsigned char PromotePercentBase;
  /* 0x0003 */ unsigned char DemotePercentBase;
  /* 0x0004 */ unsigned char AllowScaling;
} PROC_IDLE_POLICY, *PPROC_IDLE_POLICY; /* size: 0x0005 */

typedef union _PPM_IDLE_SYNCHRONIZATION_STATE
{
  union
  {
    /* 0x0000 */ long AsLong;
    struct /* bitfield */
    {
      /* 0x0000 */ long RefCount : 24; /* bit position: 0 */
      /* 0x0000 */ unsigned long State : 8; /* bit position: 24 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PPM_IDLE_SYNCHRONIZATION_STATE, *PPPM_IDLE_SYNCHRONIZATION_STATE; /* size: 0x0004 */

typedef struct _PROC_FEEDBACK
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned __int64 CyclesLast;
  /* 0x0010 */ unsigned __int64 CyclesActive;
  /* 0x0018 */ struct _PROC_FEEDBACK_COUNTER* Counters[2];
  /* 0x0028 */ unsigned __int64 LastUpdateTime;
  /* 0x0030 */ unsigned __int64 UnscaledTime;
  /* 0x0038 */ volatile __int64 UnaccountedTime;
  /* 0x0040 */ unsigned __int64 ScaledTime[2];
  /* 0x0050 */ unsigned __int64 UnaccountedKernelTime;
  /* 0x0058 */ unsigned __int64 PerformanceScaledKernelTime;
  /* 0x0060 */ unsigned long UserTimeLast;
  /* 0x0064 */ unsigned long KernelTimeLast;
  /* 0x0068 */ unsigned char KernelTimesIndex;
  /* 0x0069 */ char __PADDING__[7];
} PROC_FEEDBACK, *PPROC_FEEDBACK; /* size: 0x0070 */

typedef struct _PPM_FFH_THROTTLE_STATE_INFO
{
  /* 0x0000 */ unsigned char EnableLogging;
  /* 0x0001 */ char Padding_70[3];
  /* 0x0004 */ unsigned long MismatchCount;
  /* 0x0008 */ unsigned char Initialized;
  /* 0x0009 */ char Padding_71[7];
  /* 0x0010 */ unsigned __int64 LastValue;
  /* 0x0018 */ union _LARGE_INTEGER LastLogTickCount;
} PPM_FFH_THROTTLE_STATE_INFO, *PPPM_FFH_THROTTLE_STATE_INFO; /* size: 0x0020 */

typedef struct _PROC_IDLE_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 Idle;
} PROC_IDLE_SNAP, *PPROC_IDLE_SNAP; /* size: 0x0010 */

typedef struct _PROC_PERF_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 LastTime;
  /* 0x0010 */ unsigned __int64 Active;
  /* 0x0018 */ unsigned __int64 LastActive;
  /* 0x0020 */ unsigned __int64 FrequencyScaledActive;
  /* 0x0028 */ unsigned __int64 PerformanceScaledActive;
  /* 0x0030 */ unsigned __int64 CyclesActive;
  /* 0x0038 */ unsigned __int64 CyclesAffinitized;
} PROC_PERF_SNAP, *PPROC_PERF_SNAP; /* size: 0x0040 */

typedef struct _PROC_PERF_UTILITY
{
  /* 0x0000 */ unsigned long Affinitized;
  /* 0x0004 */ unsigned long Performance;
  /* 0x0008 */ unsigned long Total;
} PROC_PERF_UTILITY, *PPROC_PERF_UTILITY; /* size: 0x000c */

typedef struct _PROCESSOR_POWER_STATE
{
  /* 0x0000 */ struct _PPM_IDLE_STATES* IdleStates;
  /* 0x0008 */ struct _PROC_IDLE_ACCOUNTING* IdleAccounting;
  /* 0x0010 */ unsigned __int64 IdleTimeLast;
  /* 0x0018 */ unsigned __int64 IdleTimeTotal;
  /* 0x0020 */ unsigned __int64 IdleTimeEntry;
  /* 0x0028 */ unsigned __int64 Reserved;
  /* 0x0030 */ struct _PROC_IDLE_POLICY IdlePolicy;
  /* 0x0035 */ char Padding_72[3];
  /* 0x0038 */ volatile union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
  /* 0x003c */ long Padding_73;
  /* 0x0040 */ struct _PROC_FEEDBACK PerfFeedback;
  /* 0x00b0 */ enum _PROC_HYPERVISOR_STATE Hypervisor;
  /* 0x00b4 */ unsigned long LastSysTime;
  /* 0x00b8 */ unsigned __int64 WmiDispatchPtr;
  /* 0x00c0 */ long WmiInterfaceEnabled;
  /* 0x00c4 */ long Padding_74;
  /* 0x00c8 */ struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
  /* 0x00e8 */ struct _KDPC PerfActionDpc;
  /* 0x0128 */ volatile long PerfActionMask;
  /* 0x012c */ long Padding_75;
  /* 0x0130 */ struct _PROC_IDLE_SNAP HvIdleCheck;
  /* 0x0140 */ struct _PROC_PERF_SNAP PerfCheck;
  /* 0x0180 */ struct _PROC_PERF_DOMAIN* Domain;
  /* 0x0188 */ struct _PROC_PERF_CONSTRAINT* PerfConstraint;
  /* 0x0190 */ struct _PPM_CONCURRENCY_ACCOUNTING* Concurrency;
  /* 0x0198 */ struct _PROC_PERF_LOAD* Load;
  /* 0x01a0 */ struct _PROC_PERF_HISTORY* PerfHistory;
  /* 0x01a8 */ unsigned char GuaranteedPerformancePercent;
  /* 0x01a9 */ unsigned char HvTargetState;
  /* 0x01aa */ unsigned char Parked;
  /* 0x01ab */ unsigned char OverUtilized;
  /* 0x01ac */ unsigned long LatestPerformancePercent;
  /* 0x01b0 */ unsigned long LatestAffinitizedPercent;
  /* 0x01b4 */ unsigned long ExpectedUtility;
  /* 0x01b8 */ struct _PROC_PERF_UTILITY Utility[3];
  /* 0x01dc */ long __PADDING__[1];
} PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE; /* size: 0x01e0 */

typedef enum _KOBJECTS
{
  EventNotificationObject = 0,
  EventSynchronizationObject = 1,
  MutantObject = 2,
  ProcessObject = 3,
  QueueObject = 4,
  SemaphoreObject = 5,
  ThreadObject = 6,
  GateObject = 7,
  TimerNotificationObject = 8,
  TimerSynchronizationObject = 9,
  Spare2Object = 10,
  Spare3Object = 11,
  Spare4Object = 12,
  Spare5Object = 13,
  Spare6Object = 14,
  Spare7Object = 15,
  Spare8Object = 16,
  ProfileCallbackObject = 17,
  ApcObject = 18,
  DpcObject = 19,
  DeviceQueueObject = 20,
  PriQueueObject = 21,
  InterruptObject = 22,
  ProfileObject = 23,
  Timer2NotificationObject = 24,
  Timer2SynchronizationObject = 25,
  ThreadedDpcObject = 26,
  MaximumKernelObject = 27,
} KOBJECTS, *PKOBJECTS;

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
} PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef struct _PROCESSOR_IDLE_DEPENDENCY
{
  /* 0x0000 */ unsigned long ProcessorIndex;
  /* 0x0004 */ unsigned char ExpectedState;
  /* 0x0005 */ unsigned char AllowDeeperStates;
  /* 0x0006 */ unsigned char LooseDependency;
  /* 0x0007 */ char __PADDING__[1];
} PROCESSOR_IDLE_DEPENDENCY, *PPROCESSOR_IDLE_DEPENDENCY; /* size: 0x0008 */

typedef enum _POLICY_AUDIT_EVENT_TYPE
{
  AuditCategorySystem = 0,
  AuditCategoryLogon = 1,
  AuditCategoryObjectAccess = 2,
  AuditCategoryPrivilegeUse = 3,
  AuditCategoryDetailedTracking = 4,
  AuditCategoryPolicyChange = 5,
  AuditCategoryAccountManagement = 6,
  AuditCategoryDirectoryServiceAccess = 7,
  AuditCategoryAccountLogon = 8,
} POLICY_AUDIT_EVENT_TYPE, *PPOLICY_AUDIT_EVENT_TYPE;

typedef struct _POP_FX_DRIVER_CALLBACKS
{
  /* 0x0000 */ void* ComponentActive /* function */;
  /* 0x0008 */ void* ComponentIdle /* function */;
  /* 0x0010 */ void* ComponentIdleState /* function */;
  /* 0x0018 */ void* DevicePowerRequired /* function */;
  /* 0x0020 */ void* DevicePowerNotRequired /* function */;
  /* 0x0028 */ void* PowerControl /* function */;
  /* 0x0030 */ void* ComponentCriticalTransition /* function */;
} POP_FX_DRIVER_CALLBACKS, *PPOP_FX_DRIVER_CALLBACKS; /* size: 0x0038 */

typedef enum _PS_PROTECTED_SIGNER
{
  PsProtectedSignerNone = 0,
  PsProtectedSignerAuthenticode = 1,
  PsProtectedSignerCodeGen = 2,
  PsProtectedSignerAntimalware = 3,
  PsProtectedSignerLsa = 4,
  PsProtectedSignerWindows = 5,
  PsProtectedSignerWinTcb = 6,
  PsProtectedSignerMax = 7,
} PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER;

typedef enum _PROCESS_VA_TYPE
{
  ProcessVAImage = 0,
  ProcessVASection = 1,
  ProcessVAPrivate = 2,
  ProcessVAMax = 3,
} PROCESS_VA_TYPE, *PPROCESS_VA_TYPE;

typedef enum _PS_STD_HANDLE_STATE
{
  PsNeverDuplicate = 0,
  PsRequestDuplicate = 1,
  PsAlwaysDuplicate = 2,
  PsMaxStdHandleStates = 3,
} PS_STD_HANDLE_STATE, *PPS_STD_HANDLE_STATE;

typedef struct _IO_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Option;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char ShareDisposition;
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short Spare2;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Port;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory;
      struct
      {
        /* 0x0008 */ unsigned long MinimumVector;
        /* 0x000c */ unsigned long MaximumVector;
        /* 0x0010 */ unsigned short AffinityPolicy;
        /* 0x0012 */ unsigned short Group;
        /* 0x0014 */ enum _IRQ_PRIORITY PriorityPolicy;
        /* 0x0018 */ unsigned __int64 TargetedProcessors;
      } /* size: 0x0018 */ Interrupt;
      struct
      {
        /* 0x0008 */ unsigned long MinimumChannel;
        /* 0x000c */ unsigned long MaximumChannel;
      } /* size: 0x0008 */ Dma;
      struct
      {
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved;
        /* 0x0010 */ unsigned long Channel;
        /* 0x0014 */ unsigned long TransferWidth;
      } /* size: 0x0010 */ DmaV3;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Generic;
      struct
      {
        /* 0x0008 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long MinBusNumber;
        /* 0x0010 */ unsigned long MaxBusNumber;
        /* 0x0014 */ unsigned long Reserved;
      } /* size: 0x0010 */ BusNumber;
      struct
      {
        /* 0x0008 */ unsigned long Priority;
        /* 0x000c */ unsigned long Reserved1;
        /* 0x0010 */ unsigned long Reserved2;
      } /* size: 0x000c */ ConfigData;
      struct
      {
        /* 0x0008 */ unsigned long Length40;
        /* 0x000c */ unsigned long Alignment40;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory40;
      struct
      {
        /* 0x0008 */ unsigned long Length48;
        /* 0x000c */ unsigned long Alignment48;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory48;
      struct
      {
        /* 0x0008 */ unsigned long Length64;
        /* 0x000c */ unsigned long Alignment64;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory64;
      struct
      {
        /* 0x0008 */ unsigned char Class;
        /* 0x0009 */ unsigned char Type;
        /* 0x000a */ unsigned char Reserved1;
        /* 0x000b */ unsigned char Reserved2;
        /* 0x000c */ unsigned long IdLowPart;
        /* 0x0010 */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _IO_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  /* 0x0000 */ unsigned long ListSize;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long SlotNumber;
  /* 0x0010 */ unsigned long Reserved[3];
  /* 0x001c */ unsigned long AlternativeLists;
  /* 0x0020 */ struct _IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST; /* size: 0x0048 */

typedef enum _IO_SESSION_STATE
{
  IoSessionStateCreated = 1,
  IoSessionStateInitialized = 2,
  IoSessionStateConnected = 3,
  IoSessionStateDisconnected = 4,
  IoSessionStateDisconnectedLoggedOn = 5,
  IoSessionStateLoggedOn = 6,
  IoSessionStateLoggedOff = 7,
  IoSessionStateTerminated = 8,
  IoSessionStateMax = 9,
} IO_SESSION_STATE, *PIO_SESSION_STATE;

typedef enum _VI_DEADLOCK_RESOURCE_TYPE
{
  VfDeadlockUnknown = 0,
  VfDeadlockMutex = 1,
  VfDeadlockMutexAbandoned = 2,
  VfDeadlockFastMutex = 3,
  VfDeadlockFastMutexUnsafe = 4,
  VfDeadlockSpinLock = 5,
  VfDeadlockInStackQueuedSpinLock = 6,
  VfDeadlockUnusedSpinLock = 7,
  VfDeadlockEresource = 8,
  VfDeadlockTypeMaximum = 9,
} VI_DEADLOCK_RESOURCE_TYPE, *PVI_DEADLOCK_RESOURCE_TYPE;

typedef enum _EX_BALANCE_OBJECT
{
  ExTimerExpiration = 0,
  ExThreadSetManagerEvent = 1,
  ExThreadReaperEvent = 2,
  ExBalancerExitEvent = 3,
  ExMaximumBalanceObject = 4,
} EX_BALANCE_OBJECT, *PEX_BALANCE_OBJECT;

typedef struct _EXCEPTION_RECORD64
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned __int64 ExceptionRecord;
  /* 0x0010 */ unsigned __int64 ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ unsigned long __unusedAlignment;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64; /* size: 0x0098 */

typedef struct _DBGKM_EXCEPTION64
{
  /* 0x0000 */ struct _EXCEPTION_RECORD64 ExceptionRecord;
  /* 0x0098 */ unsigned long FirstChance;
  /* 0x009c */ long __PADDING__[1];
} DBGKM_EXCEPTION64, *PDBGKM_EXCEPTION64; /* size: 0x00a0 */

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 5,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

typedef enum _FUNCTION_TABLE_TYPE
{
  RF_SORTED = 0,
  RF_UNSORTED = 1,
  RF_CALLBACK = 2,
  RF_KERNEL_DYNAMIC = 3,
} FUNCTION_TABLE_TYPE, *PFUNCTION_TABLE_TYPE;

typedef struct _DEVICE_RELATIONS
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_76;
  /* 0x0008 */ struct _DEVICE_OBJECT* Objects[1];
} DEVICE_RELATIONS, *PDEVICE_RELATIONS; /* size: 0x0010 */

typedef enum _PROCESS_SECTION_TYPE
{
  ProcessSectionData = 0,
  ProcessSectionImage = 1,
  ProcessSectionImageNx = 2,
  ProcessSectionPagefileBacked = 3,
  ProcessSectionMax = 4,
} PROCESS_SECTION_TYPE, *PPROCESS_SECTION_TYPE;

typedef enum _REQUESTER_TYPE
{
  KernelRequester = 0,
  UserProcessRequester = 1,
  UserSharedServiceRequester = 2,
} REQUESTER_TYPE, *PREQUESTER_TYPE;

typedef enum _PNP_DEVICE_ACTION_REQUEST
{
  AssignResources = 0,
  ClearDeviceProblem = 1,
  ClearProblem = 2,
  ClearEjectProblem = 3,
  HaltDevice = 4,
  QueryPowerRelations = 5,
  Rebalance = 6,
  ReenumerateBootDevices = 7,
  ReenumerateDeviceOnly = 8,
  ReenumerateDeviceTree = 9,
  ReenumerateRootDevices = 10,
  RequeryDeviceState = 11,
  ResetDevice = 12,
  ResourceRequirementsChanged = 13,
  RestartEnumeration = 14,
  SetDeviceProblem = 15,
  StartDevice = 16,
  StartSystemDevicesPass0 = 17,
  StartSystemDevicesPass1 = 18,
  NotifyTransportRelationsChange = 19,
  NotifyEjectionRelationsChange = 20,
  ConfigureDevice = 21,
  ConfigureDeviceClass = 22,
  ConfigureDeviceExtensions = 23,
} PNP_DEVICE_ACTION_REQUEST, *PPNP_DEVICE_ACTION_REQUEST;

typedef struct _PP_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE* P;
  /* 0x0008 */ struct _GENERAL_LOOKASIDE* L;
} PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST; /* size: 0x0010 */

typedef enum _ARBITER_RESULT
{
  ArbiterResultUndefined = -1,
  ArbiterResultSuccess = 0,
  ArbiterResultExternalConflict = 1,
  ArbiterResultNullRequest = 2,
} ARBITER_RESULT, *PARBITER_RESULT;

typedef enum _ETW_PERFECT_HASH_FUNCTION_TYPE
{
  ETW_PHF_EVENT_ID = 0,
  ETW_PHF_STACK_WALK = 1,
  ETW_PHF_MAX_COUNT = 2,
} ETW_PERFECT_HASH_FUNCTION_TYPE, *PETW_PERFECT_HASH_FUNCTION_TYPE;

typedef struct _DBGKD_WRITE_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY64, *PDBGKD_WRITE_MEMORY64; /* size: 0x0010 */

typedef enum _LDR_DLL_LOAD_REASON
{
  LoadReasonStaticDependency = 0,
  LoadReasonStaticForwarderDependency = 1,
  LoadReasonDynamicForwarderDependency = 2,
  LoadReasonDelayloadDependency = 3,
  LoadReasonDynamicLoad = 4,
  LoadReasonAsImageLoad = 5,
  LoadReasonAsDataLoad = 6,
  LoadReasonUnknown = -1,
} LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef enum _LDR_DDAG_STATE
{
  LdrModulesMerged = -5,
  LdrModulesInitError = -4,
  LdrModulesSnapError = -3,
  LdrModulesUnloaded = -2,
  LdrModulesUnloading = -1,
  LdrModulesPlaceHolder = 0,
  LdrModulesMapping = 1,
  LdrModulesMapped = 2,
  LdrModulesWaitingForDependencies = 3,
  LdrModulesSnapping = 4,
  LdrModulesSnapped = 5,
  LdrModulesCondensed = 6,
  LdrModulesReadyToInit = 7,
  LdrModulesInitializing = 8,
  LdrModulesReadyToRun = 9,
} LDR_DDAG_STATE, *PLDR_DDAG_STATE;

typedef struct _X86_KTRAP_FRAME
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned long DbgArgPointer;
  /* 0x0010 */ unsigned long TempSegCs;
  /* 0x0014 */ unsigned long TempEsp;
  /* 0x0018 */ unsigned long Dr0;
  /* 0x001c */ unsigned long Dr1;
  /* 0x0020 */ unsigned long Dr2;
  /* 0x0024 */ unsigned long Dr3;
  /* 0x0028 */ unsigned long Dr6;
  /* 0x002c */ unsigned long Dr7;
  /* 0x0030 */ unsigned long SegGs;
  /* 0x0034 */ unsigned long SegEs;
  /* 0x0038 */ unsigned long SegDs;
  /* 0x003c */ unsigned long Edx;
  /* 0x0040 */ unsigned long Ecx;
  /* 0x0044 */ unsigned long Eax;
  /* 0x0048 */ unsigned char PreviousPreviousMode;
  /* 0x0049 */ unsigned char EntropyQueueDpc;
  /* 0x004a */ unsigned char Reserved[2];
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME, *PX86_KTRAP_FRAME; /* size: 0x008c */

typedef enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsWakeReasonPreserveProcess = 4,
  PsMaxWakeReasons = 5,
} PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef enum _OBJECT_INFORMATION_CLASS
{
  ObjectBasicInformation = 0,
  ObjectNameInformation = 1,
  ObjectTypeInformation = 2,
  ObjectTypesInformation = 3,
  ObjectHandleFlagInformation = 4,
  ObjectSessionInformation = 5,
  MaxObjectInfoClass = 6,
} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

typedef enum _KWAIT_BLOCK_STATE
{
  WaitBlockBypassStart = 0,
  WaitBlockBypassComplete = 1,
  WaitBlockActive = 2,
  WaitBlockInactive = 3,
  WaitBlockAllStates = 4,
} KWAIT_BLOCK_STATE, *PKWAIT_BLOCK_STATE;

typedef enum _KRESOURCEMANAGER_STATE
{
  KResourceManagerUninitialized = 0,
  KResourceManagerOffline = 1,
  KResourceManagerOnline = 2,
} KRESOURCEMANAGER_STATE, *PKRESOURCEMANAGER_STATE;

typedef struct _ECP_LIST
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _LIST_ENTRY EcpList;
} ECP_LIST, *PECP_LIST; /* size: 0x0018 */

typedef enum _MM_POOL_FAILURE_REASONS
{
  MmNonPagedNoPtes = 0,
  MmPriorityTooLow = 1,
  MmNonPagedNoPagesAvailable = 2,
  MmPagedNoPtes = 3,
  MmSessionPagedNoPtes = 4,
  MmPagedNoPagesAvailable = 5,
  MmSessionPagedNoPagesAvailable = 6,
  MmPagedNoCommit = 7,
  MmSessionPagedNoCommit = 8,
  MmNonPagedNoResidentAvailable = 9,
  MmNonPagedNoCommit = 10,
  MmMaximumFailureReason = 11,
} MM_POOL_FAILURE_REASONS, *PMM_POOL_FAILURE_REASONS;

typedef enum _KPROCESS_STATE
{
  ProcessInMemory = 0,
  ProcessOutOfMemory = 1,
  ProcessInTransition = 2,
  ProcessOutTransition = 3,
  ProcessInSwap = 4,
  ProcessOutSwap = 5,
  ProcessAllSwapStates = 6,
} KPROCESS_STATE, *PKPROCESS_STATE;

typedef struct _KDEVICE_QUEUE
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_77;
  /* 0x0008 */ struct _LIST_ENTRY DeviceListHead;
  /* 0x0018 */ unsigned __int64 Lock;
  union
  {
    /* 0x0020 */ unsigned char Busy;
    struct /* bitfield */
    {
      /* 0x0020 */ __int64 Reserved : 8; /* bit position: 0 */
      /* 0x0020 */ __int64 Hint : 56; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} KDEVICE_QUEUE, *PKDEVICE_QUEUE; /* size: 0x0028 */

typedef enum _WORKING_SET_TYPE
{
  WorkingSetTypeUser = 0,
  WorkingSetTypeSession = 1,
  WorkingSetTypeSystemTypes = 2,
  WorkingSetTypeSystemCache = 2,
  WorkingSetTypePagedPool = 3,
  WorkingSetTypeSystemPtes = 4,
  WorkingSetTypeMaximum = 5,
} WORKING_SET_TYPE, *PWORKING_SET_TYPE;

typedef enum _KERNEL_STACK_LIMITS
{
  BugcheckStackLimits = 0,
  DPCStackLimits = 1,
  ExpandedStackLimits = 2,
  NormalStackLimits = 3,
  Win32kStackLimits = 4,
  SwapBusyStackLimits = 5,
  IsrStackLimits = 6,
  MaximumStackLimits = 7,
} KERNEL_STACK_LIMITS, *PKERNEL_STACK_LIMITS;

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

typedef enum _MI_CFG_BITMAP_TYPE
{
  CfgBitMapNative = 0,
  CfgBitMapWow64 = 1,
  CfgBitMapWow64NativeLow = 2,
  CfgBitMapMax = 3,
} MI_CFG_BITMAP_TYPE, *PMI_CFG_BITMAP_TYPE;

struct CMP_OFFSET_ARRAY
{
  /* 0x0000 */ unsigned long FileOffset;
  /* 0x0004 */ long Padding_78;
  /* 0x0008 */ void* DataBuffer;
  /* 0x0010 */ unsigned long DataLength;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

enum KTM_STATE
{
  KKtmUninitialized = 0,
  KKtmInitialized = 1,
  KKtmRecovering = 2,
  KKtmOnline = 3,
  KKtmRecoveryFailed = 4,
  KKtmOffline = 5,
};

typedef enum _KTRANSACTION_STATE
{
  KTransactionUninitialized = 0,
  KTransactionActive = 1,
  KTransactionPreparing = 2,
  KTransactionPrepared = 3,
  KTransactionInDoubt = 4,
  KTransactionCommitted = 5,
  KTransactionAborted = 6,
  KTransactionDelegated = 7,
  KTransactionPrePreparing = 8,
  KTransactionForgotten = 9,
  KTransactionRecovering = 10,
  KTransactionPrePrepared = 11,
} KTRANSACTION_STATE, *PKTRANSACTION_STATE;

typedef enum _KTRANSACTION_OUTCOME
{
  KTxOutcomeUninitialized = 0,
  KTxOutcomeUndetermined = 1,
  KTxOutcomeCommitted = 2,
  KTxOutcomeAborted = 3,
  KTxOutcomeUnavailable = 4,
} KTRANSACTION_OUTCOME, *PKTRANSACTION_OUTCOME;

typedef struct _EVENT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Channel;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Opcode;
  /* 0x0006 */ unsigned short Task;
  /* 0x0008 */ unsigned __int64 Keyword;
} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_HEADER
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short HeaderType;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short EventProperty;
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _GUID ProviderId;
  /* 0x0028 */ struct _EVENT_DESCRIPTOR EventDescriptor;
  union
  {
    struct
    {
      /* 0x0038 */ unsigned long KernelTime;
      /* 0x003c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0038 */ unsigned __int64 ProcessorTime;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _GUID ActivityId;
} EVENT_HEADER, *PEVENT_HEADER; /* size: 0x0050 */

typedef struct _ETW_BUFFER_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char ProcessorNumber;
      /* 0x0001 */ unsigned char Alignment;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short ProcessorIndex;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short LoggerId;
} ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT; /* size: 0x0004 */

typedef struct _EVENT_RECORD
{
  /* 0x0000 */ struct _EVENT_HEADER EventHeader;
  /* 0x0050 */ struct _ETW_BUFFER_CONTEXT BufferContext;
  /* 0x0054 */ unsigned short ExtendedDataCount;
  /* 0x0056 */ unsigned short UserDataLength;
  /* 0x0058 */ struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
  /* 0x0060 */ void* UserData;
  /* 0x0068 */ void* UserContext;
} EVENT_RECORD, *PEVENT_RECORD; /* size: 0x0070 */

enum UoWActionType
{
  UoWAddThisKey = 0,
  UoWAddChildKey = 1,
  UoWDeleteThisKey = 2,
  UoWDeleteChildKey = 3,
  UoWSetValueNew = 4,
  UoWSetValueExisting = 5,
  UoWDeleteValue = 6,
  UoWSetKeyUserFlags = 7,
  UoWSetLastWriteTime = 8,
  UoWSetSecurityDescriptor = 9,
  UoWRenameSubKey = 10,
  UoWRenameOldSubKey = 11,
  UoWRenameNewSubKey = 12,
  UoWIsolation = 13,
  UoWInvalid = 14,
};

typedef struct _EXHANDLE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long TagBits : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long Index : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ void* GenericHandleOverlay;
    /* 0x0000 */ unsigned __int64 Value;
  }; /* size: 0x0008 */
} EXHANDLE, *PEXHANDLE; /* size: 0x0008 */

enum HSTORAGE_TYPE
{
  Stable = 0,
  Volatile = 1,
  InvalidStorage = 2,
};

typedef struct _GENERIC_MAPPING
{
  /* 0x0000 */ unsigned long GenericRead;
  /* 0x0004 */ unsigned long GenericWrite;
  /* 0x0008 */ unsigned long GenericExecute;
  /* 0x000c */ unsigned long GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING; /* size: 0x0010 */

typedef struct _ACCESS_REASONS
{
  /* 0x0000 */ unsigned long Data[32];
} ACCESS_REASONS, *PACCESS_REASONS; /* size: 0x0080 */

typedef struct _AUX_ACCESS_DATA
{
  /* 0x0000 */ struct _PRIVILEGE_SET* PrivilegesUsed;
  /* 0x0008 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0018 */ unsigned long AccessesToAudit;
  /* 0x001c */ unsigned long MaximumAuditMask;
  /* 0x0020 */ struct _GUID TransactionId;
  /* 0x0030 */ void* NewSecurityDescriptor;
  /* 0x0038 */ void* ExistingSecurityDescriptor;
  /* 0x0040 */ void* ParentSecurityDescriptor;
  /* 0x0048 */ void* DeRefSecurityDescriptor /* function */;
  /* 0x0050 */ void* SDLock;
  /* 0x0058 */ struct _ACCESS_REASONS AccessReasons;
  /* 0x00d8 */ unsigned char GenerateStagingEvents;
  /* 0x00d9 */ char __PADDING__[7];
} AUX_ACCESS_DATA, *PAUX_ACCESS_DATA; /* size: 0x00e0 */

typedef enum _WOW64_SHARED_INFORMATION
{
  SharedNtdll32LdrInitializeThunk = 0,
  SharedNtdll32KiUserExceptionDispatcher = 1,
  SharedNtdll32KiUserApcDispatcher = 2,
  SharedNtdll32KiUserCallbackDispatcher = 3,
  SharedNtdll32ExpInterlockedPopEntrySListFault = 4,
  SharedNtdll32ExpInterlockedPopEntrySListResume = 5,
  SharedNtdll32ExpInterlockedPopEntrySListEnd = 6,
  SharedNtdll32RtlUserThreadStart = 7,
  SharedNtdll32pQueryProcessDebugInformationRemote = 8,
  SharedNtdll32BaseAddress = 9,
  SharedNtdll32LdrSystemDllInitBlock = 10,
  Wow64SharedPageEntriesCount = 11,
} WOW64_SHARED_INFORMATION, *PWOW64_SHARED_INFORMATION;

typedef enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  MaxRegNtNotifyClass = 47,
} REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
} PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef enum _FILE_OBJECT_EXTENSION_TYPE
{
  FoExtTypeTransactionParams = 0,
  FoExtTypeInternal = 1,
  FoExtTypeIosbRange = 2,
  FoExtTypeGeneric = 3,
  FoExtTypeSfio = 4,
  FoExtTypeSymlink = 5,
  FoExtTypeOplockKey = 6,
  MaxFoExtTypes = 7,
} FILE_OBJECT_EXTENSION_TYPE, *PFILE_OBJECT_EXTENSION_TYPE;

typedef enum _MI_DYNAMICBASE_BITMAP
{
  DynamicBaseBitMap32 = 0,
  DynamicBaseBitMap64Low = 1,
  DynamicBaseBitMap64High = 2,
  LastDynamicBaseBitMap = 3,
} MI_DYNAMICBASE_BITMAP, *PMI_DYNAMICBASE_BITMAP;

typedef struct _HV_HYPERVISOR_VERSION_INFO
{
  /* 0x0000 */ unsigned int BuildNumber;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int MinorVersion : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned int MajorVersion : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int ServicePack;
  struct /* bitfield */
  {
    /* 0x000c */ unsigned int ServiceNumber : 24; /* bit position: 0 */
    /* 0x000c */ unsigned int ServiceBranch : 8; /* bit position: 24 */
  }; /* bitfield */
} HV_HYPERVISOR_VERSION_INFO, *PHV_HYPERVISOR_VERSION_INFO; /* size: 0x0010 */

typedef enum _FS_FILTER_SECTION_SYNC_TYPE
{
  SyncTypeOther = 0,
  SyncTypeCreateSection = 1,
} FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;

typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE
{
  NotifyTypeCreate = 0,
  NotifyTypeRetired = 1,
} FS_FILTER_STREAM_FO_NOTIFICATION_TYPE, *PFS_FILTER_STREAM_FO_NOTIFICATION_TYPE;

typedef struct _SEGMENT_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short TotalNumberOfPtes4132 : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned short Spare0 : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned short LargePages : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned short LockedPages : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned short DebugSymbolsLoaded : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned short WriteCombined : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short NoCache : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short Short0;
  }; /* size: 0x0002 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned char FloppyMedia : 1; /* bit position: 0 */
      /* 0x0002 */ unsigned char DefaultProtectionMask : 5; /* bit position: 1 */
      /* 0x0002 */ unsigned char Binary32 : 1; /* bit position: 6 */
      /* 0x0002 */ unsigned char ContainsDebug : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0002 */ unsigned char UChar1;
  }; /* size: 0x0001 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ILOnly : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char ImageSigningType : 3; /* bit position: 1 */
      /* 0x0003 */ unsigned char ImageSigningLevel : 4; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0003 */ unsigned char UChar2;
  }; /* size: 0x0001 */
} SEGMENT_FLAGS, *PSEGMENT_FLAGS; /* size: 0x0004 */

typedef enum _DEVICE_RELATION_LEVEL
{
  DeviceRelation = 0,
  Dependent = 1,
  DirectDescendant = 2,
} DEVICE_RELATION_LEVEL, *PDEVICE_RELATION_LEVEL;

typedef struct _TXN_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short TxFsContext;
  /* 0x0004 */ long Padding_79;
  /* 0x0008 */ void* TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK; /* size: 0x0010 */

typedef enum _POP_IO_STATUS
{
  IoReady = 0,
  IoPending = 1,
  IoDone = 2,
} POP_IO_STATUS, *PPOP_IO_STATUS;

enum INTERRUPT_CONNECTION_TYPE
{
  InterruptTypeControllerInput = 0,
  InterruptTypeXapicMessage = 1,
  InterruptTypeHypertransport = 2,
  InterruptTypeMessageRequest = 3,
};

typedef struct _HV_VENDOR_AND_MAX_FUNCTION
{
  /* 0x0000 */ unsigned int MaxFunction;
  /* 0x0004 */ unsigned char VendorName[12];
} HV_VENDOR_AND_MAX_FUNCTION, *PHV_VENDOR_AND_MAX_FUNCTION; /* size: 0x0010 */

typedef enum _DUMP_EVENTS
{
  DUMP_EVENT_NONE = 0,
  DUMP_EVENT_HIBER_RESUME = 1,
  DUMP_EVENT_HIBER_RESUME_END = 2,
} DUMP_EVENTS, *PDUMP_EVENTS;

typedef enum _ETW_NOTIFICATION_TYPE
{
  EtwNotificationTypeNoReply = 1,
  EtwNotificationTypeLegacyEnable = 2,
  EtwNotificationTypeEnable = 3,
  EtwNotificationTypePrivateLogger = 4,
  EtwNotificationTypePerflib = 5,
  EtwNotificationTypeAudio = 6,
  EtwNotificationTypeSession = 7,
  EtwNotificationTypeReserved = 8,
  EtwNotificationTypeCredentialUI = 9,
  EtwNotificationTypeInProcSession = 10,
  EtwNotificationTypeMax = 11,
} ETW_NOTIFICATION_TYPE, *PETW_NOTIFICATION_TYPE;

typedef enum _RTL_GENERIC_COMPARE_RESULTS
{
  GenericLessThan = 0,
  GenericGreaterThan = 1,
  GenericEqual = 2,
} RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef struct _MI_EXTRA_IMAGE_INFORMATION
{
  /* 0x0000 */ unsigned long SizeOfHeaders;
  /* 0x0004 */ unsigned long SizeOfImage;
} MI_EXTRA_IMAGE_INFORMATION, *PMI_EXTRA_IMAGE_INFORMATION; /* size: 0x0008 */

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

typedef struct _MCGEN_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 RegistrationHandle;
  /* 0x0008 */ unsigned __int64 Logger;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long IsEnabled;
  /* 0x0028 */ unsigned char Level;
  /* 0x0029 */ unsigned char Reserve;
  /* 0x002a */ unsigned short EnableBitsCount;
  /* 0x002c */ long Padding_80;
  /* 0x0030 */ unsigned long* EnableBitMask;
  /* 0x0038 */ const unsigned __int64* EnableKeyWords;
  /* 0x0040 */ const unsigned char* EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT; /* size: 0x0048 */

typedef struct _MI_ACTIVE_WSLE_LISTHEAD
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
} MI_ACTIVE_WSLE_LISTHEAD, *PMI_ACTIVE_WSLE_LISTHEAD; /* size: 0x0010 */

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

typedef struct _XSTATE_FEATURE
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE; /* size: 0x0008 */

typedef struct _XSTATE_CONFIGURATION
{
  /* 0x0000 */ unsigned __int64 EnabledFeatures;
  /* 0x0008 */ unsigned __int64 EnabledVolatileFeatures;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long OptimizedSave : 1; /* bit position: 0 */
  /* 0x0018 */ struct _XSTATE_FEATURE Features[64];
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; /* size: 0x0218 */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long AitSamplingValue;
  /* 0x024c */ unsigned long AppCompatFlag;
  /* 0x0250 */ unsigned __int64 RNGSeedVersion;
  /* 0x0258 */ unsigned long GlobalValidationRunlevel;
  /* 0x025c */ volatile long TimeZoneBiasStamp;
  /* 0x0260 */ unsigned long Reserved2;
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ unsigned char Reserved0[1];
  /* 0x026a */ unsigned short NativeProcessorArchitecture;
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ unsigned long AltArchitecturePad[1];
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  union
  {
    /* 0x02d5 */ unsigned char MitigationPolicies;
    struct /* bitfield */
    {
      /* 0x02d5 */ unsigned char NXSupportPolicy : 2; /* bit position: 0 */
      /* 0x02d5 */ unsigned char SEHValidationPolicy : 2; /* bit position: 2 */
      /* 0x02d5 */ unsigned char CurDirDevicesSkippedForDlls : 2; /* bit position: 4 */
      /* 0x02d5 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x02d6 */ unsigned char Reserved6[2];
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ unsigned char Reserved12[3];
  union
  {
    /* 0x02f0 */ unsigned long SharedDataFlags;
    struct /* bitfield */
    {
      /* 0x02f0 */ unsigned long DbgErrorPortPresent : 1; /* bit position: 0 */
      /* 0x02f0 */ unsigned long DbgElevationEnabled : 1; /* bit position: 1 */
      /* 0x02f0 */ unsigned long DbgVirtEnabled : 1; /* bit position: 2 */
      /* 0x02f0 */ unsigned long DbgInstallerDetectEnabled : 1; /* bit position: 3 */
      /* 0x02f0 */ unsigned long DbgLkgEnabled : 1; /* bit position: 4 */
      /* 0x02f0 */ unsigned long DbgDynProcessorEnabled : 1; /* bit position: 5 */
      /* 0x02f0 */ unsigned long DbgConsoleBrokerEnabled : 1; /* bit position: 6 */
      /* 0x02f0 */ unsigned long DbgSecureBootEnabled : 1; /* bit position: 7 */
      /* 0x02f0 */ unsigned long SpareBits : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02f4 */ unsigned long DataFlagsPad[1];
  /* 0x02f8 */ unsigned __int64 TestRetInstruction;
  /* 0x0300 */ __int64 QpcFrequency;
  /* 0x0308 */ unsigned __int64 SystemCallPad[3];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
    /* 0x0320 */ unsigned long ReservedTickCountOverlay[3];
  }; /* size: 0x000c */
  /* 0x032c */ unsigned long TickCountPad[1];
  /* 0x0330 */ unsigned long Cookie;
  /* 0x0334 */ unsigned long CookiePad[1];
  /* 0x0338 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0340 */ unsigned __int64 TimeUpdateLock;
  /* 0x0348 */ unsigned __int64 BaselineSystemTimeQpc;
  /* 0x0350 */ unsigned __int64 BaselineInterruptTimeQpc;
  /* 0x0358 */ unsigned __int64 QpcSystemTimeIncrement;
  /* 0x0360 */ unsigned __int64 QpcInterruptTimeIncrement;
  /* 0x0368 */ unsigned long QpcSystemTimeIncrement32;
  /* 0x036c */ unsigned long QpcInterruptTimeIncrement32;
  /* 0x0370 */ unsigned char QpcSystemTimeIncrementShift;
  /* 0x0371 */ unsigned char QpcInterruptTimeIncrementShift;
  /* 0x0372 */ unsigned char Reserved8[14];
  /* 0x0380 */ unsigned short UserModeGlobalLogger[16];
  /* 0x03a0 */ unsigned long ImageFileExecutionOptions;
  /* 0x03a4 */ unsigned long LangGenerationCount;
  /* 0x03a8 */ unsigned __int64 Reserved4;
  /* 0x03b0 */ volatile unsigned __int64 InterruptTimeBias;
  /* 0x03b8 */ volatile unsigned __int64 QpcBias;
  /* 0x03c0 */ volatile unsigned long ActiveProcessorCount;
  /* 0x03c4 */ volatile unsigned char ActiveGroupCount;
  /* 0x03c5 */ unsigned char Reserved9;
  union
  {
    /* 0x03c6 */ unsigned short QpcData;
    struct
    {
      /* 0x03c6 */ volatile unsigned char QpcBypassEnabled;
      /* 0x03c7 */ unsigned char QpcShift;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x03c8 */ union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  /* 0x03d0 */ union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  /* 0x03d8 */ struct _XSTATE_CONFIGURATION XState;
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x05f0 */

typedef struct _MMWSLENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Spare : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Hashed : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 Direct : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Age : 3; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 VirtualPageNumber : 36; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 HighActiveFlink : 4; /* bit position: 48 */
    /* 0x0000 */ unsigned __int64 HighActiveBlink : 4; /* bit position: 52 */
    /* 0x0000 */ unsigned __int64 Unused : 8; /* bit position: 56 */
  }; /* bitfield */
} MMWSLENTRY, *PMMWSLENTRY; /* size: 0x0008 */

typedef struct _MMWSLE_FREE_ENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 MustBeZero : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PreviousFree : 27; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 NextFree : 36; /* bit position: 28 */
  }; /* bitfield */
} MMWSLE_FREE_ENTRY, *PMMWSLE_FREE_ENTRY; /* size: 0x0008 */

typedef struct _DEVICE_OBJECT_LIST_ENTRY
{
  /* 0x0000 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ enum _DEVICE_RELATION_LEVEL RelationLevel;
  /* 0x000c */ unsigned long Flags;
} DEVICE_OBJECT_LIST_ENTRY, *PDEVICE_OBJECT_LIST_ENTRY; /* size: 0x0010 */

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ unsigned long FileAttributes;
  /* 0x0034 */ long __PADDING__[1];
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION; /* size: 0x0038 */

typedef struct _MI_CFG_BITMAP_INFO
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ unsigned __int64 RegionSize;
  /* 0x0010 */ void* VadBaseAddress;
  /* 0x0018 */ struct _MMVAD* BitmapVad;
} MI_CFG_BITMAP_INFO, *PMI_CFG_BITMAP_INFO; /* size: 0x0020 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _SEP_LOWBOX_HANDLES_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ void* PackageSid;
  /* 0x0028 */ unsigned long HandleCount;
  /* 0x002c */ long Padding_81;
  /* 0x0030 */ void** Handles;
} SEP_LOWBOX_HANDLES_ENTRY, *PSEP_LOWBOX_HANDLES_ENTRY; /* size: 0x0038 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0008 */ struct _LIST_ENTRY* PrevLinkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT; /* size: 0x0018 */

typedef struct _MMVAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 3 */
    /* 0x0000 */ unsigned long PreferredNode : 6; /* bit position: 8 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned long PrivateMemory : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned long Teb : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long PrivateFixup : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long Spare : 13; /* bit position: 18 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 31 */
  }; /* bitfield */
} MMVAD_FLAGS, *PMMVAD_FLAGS; /* size: 0x0004 */

typedef struct _MMVAD_FLAGS1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long CommitCharge : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long MemCommit : 1; /* bit position: 31 */
  }; /* bitfield */
} MMVAD_FLAGS1, *PMMVAD_FLAGS1; /* size: 0x0004 */

typedef struct _MMVAD_SHORT
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE VadNode;
    /* 0x0000 */ struct _MMVAD_SHORT* NextVad;
  }; /* size: 0x0018 */
  /* 0x0018 */ unsigned long StartingVpn;
  /* 0x001c */ unsigned long EndingVpn;
  /* 0x0020 */ unsigned char StartingVpnHigh;
  /* 0x0021 */ unsigned char EndingVpnHigh;
  /* 0x0022 */ unsigned char CommitChargeHigh;
  /* 0x0023 */ unsigned char LargeImageBias;
  /* 0x0024 */ long ReferenceCount;
  /* 0x0028 */ struct _EX_PUSH_LOCK PushLock;
  union
  {
    union
    {
      /* 0x0030 */ unsigned long LongFlags;
      /* 0x0030 */ struct _MMVAD_FLAGS VadFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  union
  {
    union
    {
      /* 0x0034 */ unsigned long LongFlags1;
      /* 0x0034 */ struct _MMVAD_FLAGS1 VadFlags1;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0038 */ struct _MI_VAD_EVENT_BLOCK* EventList;
} MMVAD_SHORT, *PMMVAD_SHORT; /* size: 0x0040 */

typedef struct _CM_DIRTY_VECTOR_LOG
{
  /* 0x0000 */ volatile unsigned long Next;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];
} CM_DIRTY_VECTOR_LOG, *PCM_DIRTY_VECTOR_LOG; /* size: 0x0508 */

struct DOCK_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_82;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
  /* 0x0020 */ void* ProfileDepartureSetMode /* function */;
  /* 0x0028 */ void* ProfileDepartureUpdate /* function */;
}; /* size: 0x0030 */

typedef struct _RTL_SPLAY_LINKS
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* Parent;
  /* 0x0008 */ struct _RTL_SPLAY_LINKS* LeftChild;
  /* 0x0010 */ struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS; /* size: 0x0018 */

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ unsigned char ContextTrackingMode;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; /* size: 0x000c */

typedef struct _OBJECT_CREATE_INFORMATION
{
  /* 0x0000 */ unsigned long Attributes;
  /* 0x0004 */ long Padding_83;
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ char ProbeMode;
  /* 0x0011 */ char Padding_84[3];
  /* 0x0014 */ unsigned long PagedPoolCharge;
  /* 0x0018 */ unsigned long NonPagedPoolCharge;
  /* 0x001c */ unsigned long SecurityDescriptorCharge;
  /* 0x0020 */ void* SecurityDescriptor;
  /* 0x0028 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0030 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
  /* 0x003c */ long __PADDING__[1];
} OBJECT_CREATE_INFORMATION, *POBJECT_CREATE_INFORMATION; /* size: 0x0040 */

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef struct _HHIVE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Padding_85;
  /* 0x0008 */ void* GetCellRoutine /* function */;
  /* 0x0010 */ void* Allocate /* function */;
  /* 0x0018 */ void* Free /* function */;
  /* 0x0020 */ void* FileWrite /* function */;
  /* 0x0028 */ void* FileRead /* function */;
  /* 0x0030 */ void* HiveLoadFailure;
  /* 0x0038 */ struct _HBASE_BLOCK* BaseBlock;
  /* 0x0040 */ struct _RTL_BITMAP DirtyVector;
  /* 0x0050 */ unsigned long DirtyCount;
  /* 0x0054 */ unsigned long DirtyAlloc;
  /* 0x0058 */ struct _RTL_BITMAP UnreconciledVector;
  /* 0x0068 */ unsigned long UnreconciledCount;
  /* 0x006c */ unsigned long BaseBlockAlloc;
  /* 0x0070 */ unsigned long Cluster;
  struct /* bitfield */
  {
    /* 0x0074 */ unsigned char Flat : 1; /* bit position: 0 */
    /* 0x0074 */ unsigned char ReadOnly : 1; /* bit position: 1 */
    /* 0x0074 */ unsigned char Reserved : 6; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0075 */ unsigned char DirtyFlag;
  /* 0x0076 */ char Padding_86[2];
  /* 0x0078 */ unsigned long HvBinHeadersUse;
  /* 0x007c */ unsigned long HvFreeCellsUse;
  /* 0x0080 */ unsigned long HvUsedCellsUse;
  /* 0x0084 */ unsigned long CmUsedCellsUse;
  /* 0x0088 */ unsigned long HiveFlags;
  /* 0x008c */ unsigned long CurrentLog;
  /* 0x0090 */ unsigned long CurrentLogSequence;
  /* 0x0094 */ unsigned long CurrentLogOffset;
  /* 0x0098 */ unsigned long MinimumLogSequence;
  /* 0x009c */ unsigned char LogDataPresent[2];
  /* 0x009e */ unsigned char PrimaryFileValid;
  /* 0x009f */ unsigned char BaseBlockDirty;
  union
  {
    struct /* bitfield */
    {
      /* 0x00a0 */ unsigned short FirstLogFile : 3; /* bit position: 0 */
      /* 0x00a0 */ unsigned short SecondLogFile : 3; /* bit position: 3 */
      /* 0x00a0 */ unsigned short HeaderRecovered : 1; /* bit position: 6 */
      /* 0x00a0 */ unsigned short LegacyRecoveryIndicated : 1; /* bit position: 7 */
      /* 0x00a0 */ unsigned short RecoveryInformationReserved : 8; /* bit position: 8 */
    }; /* bitfield */
    /* 0x00a0 */ unsigned short RecoveryInformation;
  }; /* size: 0x0002 */
  /* 0x00a2 */ unsigned char LogEntriesRecovered[2];
  /* 0x00a4 */ unsigned long RefreshCount;
  /* 0x00a8 */ unsigned long StorageTypeCount;
  /* 0x00ac */ unsigned long Version;
  /* 0x00b0 */ struct _DUAL Storage[2];
} HHIVE, *PHHIVE; /* size: 0x05a0 */

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

typedef struct _ETW_BUFFER_QUEUE
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* QueueHead;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY* QueueTail;
  /* 0x0010 */ struct _SINGLE_LIST_ENTRY QueueEntry;
} ETW_BUFFER_QUEUE, *PETW_BUFFER_QUEUE; /* size: 0x0018 */

typedef struct _EX_FAST_REF
{
  union
  {
    /* 0x0000 */ void* Object;
    /* 0x0000 */ unsigned __int64 RefCnt : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Value;
  }; /* size: 0x0008 */
} EX_FAST_REF, *PEX_FAST_REF; /* size: 0x0008 */

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_87;
  /* 0x0008 */ unsigned short* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0010 */

typedef struct _ETW_REF_CLOCK
{
  /* 0x0000 */ union _LARGE_INTEGER StartTime;
  /* 0x0008 */ union _LARGE_INTEGER StartPerfClock;
} ETW_REF_CLOCK, *PETW_REF_CLOCK; /* size: 0x0010 */

typedef struct _KMUTANT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY MutantListEntry;
  /* 0x0028 */ struct _KTHREAD* OwnerThread;
  /* 0x0030 */ unsigned char Abandoned;
  /* 0x0031 */ unsigned char ApcDisable;
  /* 0x0032 */ char __PADDING__[6];
} KMUTANT, *PKMUTANT; /* size: 0x0038 */

typedef struct _TOKEN_SOURCE
{
  /* 0x0000 */ char SourceName[8];
  /* 0x0008 */ struct _LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE; /* size: 0x0010 */

typedef struct _TOKEN_CONTROL
{
  /* 0x0000 */ struct _LUID TokenId;
  /* 0x0008 */ struct _LUID AuthenticationId;
  /* 0x0010 */ struct _LUID ModifiedId;
  /* 0x0018 */ struct _TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL; /* size: 0x0028 */

typedef struct _SECURITY_CLIENT_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x000c */ long Padding_88;
  /* 0x0010 */ void* ClientToken;
  /* 0x0018 */ unsigned char DirectlyAccessClientToken;
  /* 0x0019 */ unsigned char DirectAccessEffectiveOnly;
  /* 0x001a */ unsigned char ServerIsRemote;
  /* 0x001b */ char Padding_89;
  /* 0x001c */ struct _TOKEN_CONTROL ClientTokenControl;
  /* 0x0044 */ long __PADDING__[1];
} SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT; /* size: 0x0048 */

typedef struct _WMI_LOGGER_CONTEXT
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long BufferSize;
  /* 0x0008 */ unsigned long MaximumEventSize;
  /* 0x000c */ unsigned long LoggerMode;
  /* 0x0010 */ long AcceptNewEvents;
  /* 0x0014 */ unsigned long EventMarker[2];
  /* 0x001c */ unsigned long ErrorMarker;
  /* 0x0020 */ unsigned long SizeMask;
  /* 0x0024 */ long Padding_90;
  /* 0x0028 */ void* GetCpuClock /* function */;
  /* 0x0030 */ struct _ETHREAD* LoggerThread;
  /* 0x0038 */ long LoggerStatus;
  /* 0x003c */ unsigned long FailureReason;
  /* 0x0040 */ struct _ETW_BUFFER_QUEUE BufferQueue;
  /* 0x0058 */ struct _ETW_BUFFER_QUEUE OverflowQueue;
  /* 0x0070 */ struct _LIST_ENTRY GlobalList;
  /* 0x0080 */ struct _LIST_ENTRY ProviderBinaryList;
  union
  {
    /* 0x0090 */ struct _WMI_BUFFER_HEADER* BatchedBufferList;
    /* 0x0090 */ struct _EX_FAST_REF CurrentBuffer;
  }; /* size: 0x0008 */
  /* 0x0098 */ struct _UNICODE_STRING LoggerName;
  /* 0x00a8 */ struct _UNICODE_STRING LogFileName;
  /* 0x00b8 */ struct _UNICODE_STRING LogFilePattern;
  /* 0x00c8 */ struct _UNICODE_STRING NewLogFileName;
  /* 0x00d8 */ unsigned long ClockType;
  /* 0x00dc */ unsigned long LastFlushedBuffer;
  /* 0x00e0 */ unsigned long FlushTimer;
  /* 0x00e4 */ unsigned long FlushThreshold;
  /* 0x00e8 */ union _LARGE_INTEGER ByteOffset;
  /* 0x00f0 */ unsigned long MinimumBuffers;
  /* 0x00f4 */ volatile long BuffersAvailable;
  /* 0x00f8 */ volatile long NumberOfBuffers;
  /* 0x00fc */ unsigned long MaximumBuffers;
  /* 0x0100 */ volatile unsigned long EventsLost;
  /* 0x0104 */ volatile long PeakBuffersCount;
  /* 0x0108 */ unsigned long BuffersWritten;
  /* 0x010c */ unsigned long LogBuffersLost;
  /* 0x0110 */ unsigned long RealTimeBuffersDelivered;
  /* 0x0114 */ unsigned long RealTimeBuffersLost;
  /* 0x0118 */ long* SequencePtr;
  /* 0x0120 */ unsigned long LocalSequence;
  /* 0x0124 */ struct _GUID InstanceGuid;
  /* 0x0134 */ unsigned long MaximumFileSize;
  /* 0x0138 */ long FileCounter;
  /* 0x013c */ enum _POOL_TYPE PoolType;
  /* 0x0140 */ struct _ETW_REF_CLOCK ReferenceTime;
  /* 0x0150 */ long CollectionOn;
  /* 0x0154 */ unsigned long ProviderInfoSize;
  /* 0x0158 */ struct _LIST_ENTRY Consumers;
  /* 0x0168 */ unsigned long NumConsumers;
  /* 0x016c */ long Padding_91;
  /* 0x0170 */ struct _ETW_REALTIME_CONSUMER* TransitionConsumer;
  /* 0x0178 */ void* RealtimeLogfileHandle;
  /* 0x0180 */ struct _UNICODE_STRING RealtimeLogfileName;
  /* 0x0190 */ union _LARGE_INTEGER RealtimeWriteOffset;
  /* 0x0198 */ union _LARGE_INTEGER RealtimeReadOffset;
  /* 0x01a0 */ union _LARGE_INTEGER RealtimeLogfileSize;
  /* 0x01a8 */ unsigned __int64 RealtimeLogfileUsage;
  /* 0x01b0 */ unsigned __int64 RealtimeMaximumFileSize;
  /* 0x01b8 */ unsigned long RealtimeBuffersSaved;
  /* 0x01bc */ long Padding_92;
  /* 0x01c0 */ struct _ETW_REF_CLOCK RealtimeReferenceTime;
  /* 0x01d0 */ enum _ETW_RT_EVENT_LOSS NewRTEventsLost;
  /* 0x01d4 */ long Padding_93;
  /* 0x01d8 */ struct _KEVENT LoggerEvent;
  /* 0x01f0 */ struct _KEVENT FlushEvent;
  /* 0x0208 */ struct _KTIMER FlushTimeOutTimer;
  /* 0x0248 */ struct _KDPC LoggerDpc;
  /* 0x0288 */ struct _KMUTANT LoggerMutex;
  /* 0x02c0 */ struct _EX_PUSH_LOCK LoggerLock;
  union
  {
    /* 0x02c8 */ unsigned __int64 BufferListSpinLock;
    /* 0x02c8 */ struct _EX_PUSH_LOCK BufferListPushLock;
  }; /* size: 0x0008 */
  /* 0x02d0 */ struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;
  /* 0x0318 */ struct _EX_FAST_REF SecurityDescriptor;
  /* 0x0320 */ union _LARGE_INTEGER StartTime;
  /* 0x0328 */ void* LogFileHandle;
  /* 0x0330 */ __int64 BufferSequenceNumber;
  union
  {
    /* 0x0338 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0338 */ unsigned long Persistent : 1; /* bit position: 0 */
      /* 0x0338 */ unsigned long AutoLogger : 1; /* bit position: 1 */
      /* 0x0338 */ unsigned long FsReady : 1; /* bit position: 2 */
      /* 0x0338 */ unsigned long RealTime : 1; /* bit position: 3 */
      /* 0x0338 */ unsigned long Wow : 1; /* bit position: 4 */
      /* 0x0338 */ unsigned long KernelTrace : 1; /* bit position: 5 */
      /* 0x0338 */ unsigned long NoMoreEnable : 1; /* bit position: 6 */
      /* 0x0338 */ unsigned long StackTracing : 1; /* bit position: 7 */
      /* 0x0338 */ unsigned long ErrorLogged : 1; /* bit position: 8 */
      /* 0x0338 */ unsigned long RealtimeLoggerContextFreed : 1; /* bit position: 9 */
      /* 0x0338 */ unsigned long PebsTracing : 1; /* bit position: 10 */
      /* 0x0338 */ unsigned long PmcCounters : 1; /* bit position: 11 */
      /* 0x0338 */ unsigned long PageAlignBuffers : 1; /* bit position: 12 */
      /* 0x0338 */ unsigned long SpareFlags1 : 3; /* bit position: 13 */
      /* 0x0338 */ unsigned long SystemLoggerIndex : 8; /* bit position: 16 */
      /* 0x0338 */ unsigned long StackCaching : 1; /* bit position: 24 */
      /* 0x0338 */ unsigned long SpareFlags2 : 7; /* bit position: 25 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x033c */ volatile unsigned long RequestFlag;
    struct /* bitfield */
    {
      /* 0x033c */ unsigned long DbgRequestNewFie : 1; /* bit position: 0 */
      /* 0x033c */ unsigned long DbgRequestUpdateFile : 1; /* bit position: 1 */
      /* 0x033c */ unsigned long DbgRequestFlush : 1; /* bit position: 2 */
      /* 0x033c */ unsigned long DbgRequestDisableRealtime : 1; /* bit position: 3 */
      /* 0x033c */ unsigned long DbgRequestDisconnectConsumer : 1; /* bit position: 4 */
      /* 0x033c */ unsigned long DbgRequestConnectConsumer : 1; /* bit position: 5 */
      /* 0x033c */ unsigned long DbgRequestNotifyConsumer : 1; /* bit position: 6 */
      /* 0x033c */ unsigned long DbgRequestUpdateHeader : 1; /* bit position: 7 */
      /* 0x033c */ unsigned long DbgRequestDefferdFlush : 1; /* bit position: 8 */
      /* 0x033c */ unsigned long DbgRequestDefferdFlushTimer : 1; /* bit position: 9 */
      /* 0x033c */ unsigned long DbgRequestFlushTimer : 1; /* bit position: 10 */
      /* 0x033c */ unsigned long DbgRequestUpdateDebugger : 1; /* bit position: 11 */
      /* 0x033c */ unsigned long DbgSpareRequestFlags : 20; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0340 */ struct _RTL_BITMAP HookIdMap;
  /* 0x0350 */ struct _ETW_STACK_CACHE* StackCache;
  /* 0x0358 */ struct _ETW_PMC_SUPPORT* PmcData;
  /* 0x0360 */ struct _LIST_ENTRY WinRtProviderBinaryList;
  /* 0x0370 */ struct _WMI_BUFFER_HEADER** ScratchArray;
} WMI_LOGGER_CONTEXT, *PWMI_LOGGER_CONTEXT; /* size: 0x0378 */

struct _TP_POOL;

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

typedef struct _WAIT_CONTEXT_BLOCK
{
  union
  {
    /* 0x0000 */ struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY DmaWaitEntry;
      /* 0x0010 */ unsigned long NumberOfChannels;
      struct /* bitfield */
      {
        /* 0x0014 */ unsigned long SyncCallback : 1; /* bit position: 0 */
        /* 0x0014 */ unsigned long DmaContext : 1; /* bit position: 1 */
        /* 0x0014 */ unsigned long Reserved : 30; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0018 */ void* DeviceRoutine /* function */;
  /* 0x0020 */ void* DeviceContext;
  /* 0x0028 */ unsigned long NumberOfMapRegisters;
  /* 0x002c */ long Padding_94;
  /* 0x0030 */ void* DeviceObject;
  /* 0x0038 */ void* CurrentIrp;
  /* 0x0040 */ struct _KDPC* BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK; /* size: 0x0048 */

struct _TP_CLEANUP_GROUP;

struct _ACTIVATION_CONTEXT;

struct _TP_CALLBACK_INSTANCE;

typedef struct _MMPTE_TIMESTAMP
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 MustBeZero : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 Reserved : 20; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 GlobalTimeStamp : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP; /* size: 0x0008 */

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_95;
  /* 0x0008 */ struct _TP_POOL* Pool;
  /* 0x0010 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x0018 */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0020 */ void* RaceDll;
  /* 0x0028 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0030 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0038 */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x0038 */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x0038 */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x003c */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0040 */ unsigned long Size;
  /* 0x0044 */ long __PADDING__[1];
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0048 */

struct tagSWITCH_CONTEXT_DATA
{
  /* 0x0000 */ unsigned __int64 ullOsMaxVersionTested;
  /* 0x0008 */ unsigned __int64 ullContextMinimum;
  /* 0x0010 */ struct _GUID guPlatform;
  /* 0x0020 */ struct _GUID guMinPlatform;
  /* 0x0030 */ unsigned long ulContextSource;
  /* 0x0034 */ unsigned long ulElementCount;
  /* 0x0038 */ struct _GUID guElements[1];
}; /* size: 0x0048 */

struct _PCW_INSTANCE;

typedef struct _VACB
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
  union
  {
    union
    {
      /* 0x0010 */ union _LARGE_INTEGER FileOffset;
      /* 0x0010 */ unsigned short ActiveCount;
      /* 0x0010 */ struct _LIST_ENTRY Links;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Overlay;
  /* 0x0020 */ struct _VACB_ARRAY_HEADER* ArrayHead;
} VACB, *PVACB; /* size: 0x0028 */

typedef union _KGDTENTRY64
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short LimitLow;
      /* 0x0002 */ unsigned short BaseLow;
      union
      {
        struct
        {
          /* 0x0004 */ unsigned char BaseMiddle;
          /* 0x0005 */ unsigned char Flags1;
          /* 0x0006 */ unsigned char Flags2;
          /* 0x0007 */ unsigned char BaseHigh;
        } /* size: 0x0004 */ Bytes;
        struct
        {
          struct
          {
            struct /* bitfield */
            {
              /* 0x0004 */ unsigned long BaseMiddle : 8; /* bit position: 0 */
              /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
              /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
              /* 0x0004 */ unsigned long Present : 1; /* bit position: 15 */
              /* 0x0004 */ unsigned long LimitHigh : 4; /* bit position: 16 */
              /* 0x0004 */ unsigned long System : 1; /* bit position: 20 */
              /* 0x0004 */ unsigned long LongMode : 1; /* bit position: 21 */
              /* 0x0004 */ unsigned long DefaultBig : 1; /* bit position: 22 */
              /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
              /* 0x0004 */ unsigned long BaseHigh : 8; /* bit position: 24 */
            }; /* bitfield */
          } /* size: 0x0004 */ Bits;
          /* 0x0008 */ unsigned long BaseUpper;
          /* 0x000c */ unsigned long MustBeZero;
        }; /* size: 0x000c */
      }; /* size: 0x000c */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ __int64 DataLow;
      /* 0x0008 */ __int64 DataHigh;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} KGDTENTRY64, *PKGDTENTRY64; /* size: 0x0010 */

typedef union _KWAIT_STATUS_REGISTER
{
  union
  {
    /* 0x0000 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char State : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned char Affinity : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char Priority : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Apc : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char UserApc : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char Alert : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Unused : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER; /* size: 0x0001 */

typedef struct _KAPC_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY ApcListHead[2];
  /* 0x0020 */ struct _KPROCESS* Process;
  union
  {
    /* 0x0028 */ unsigned char InProgressFlags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned char KernelApcInProgress : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned char SpecialApcInProgress : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0029 */ unsigned char KernelApcPending;
  /* 0x002a */ unsigned char UserApcPending;
  /* 0x002b */ char __PADDING__[5];
} KAPC_STATE, *PKAPC_STATE; /* size: 0x0030 */

typedef struct _KWAIT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY WaitListEntry;
  /* 0x0010 */ unsigned char WaitType;
  /* 0x0011 */ volatile unsigned char BlockState;
  /* 0x0012 */ unsigned short WaitKey;
  /* 0x0014 */ long SpareLong;
  union
  {
    /* 0x0018 */ struct _KTHREAD* Thread;
    /* 0x0018 */ struct _KQUEUE* NotificationQueue;
  }; /* size: 0x0008 */
  /* 0x0020 */ void* Object;
  /* 0x0028 */ void* SparePtr;
} KWAIT_BLOCK, *PKWAIT_BLOCK; /* size: 0x0030 */

typedef struct _KTHREAD
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ void* SListFaultAddress;
  /* 0x0020 */ unsigned __int64 QuantumTarget;
  /* 0x0028 */ void* InitialStack;
  /* 0x0030 */ void* volatile StackLimit;
  /* 0x0038 */ void* StackBase;
  /* 0x0040 */ unsigned __int64 ThreadLock;
  /* 0x0048 */ volatile unsigned __int64 CycleTime;
  /* 0x0050 */ unsigned long CurrentRunTime;
  /* 0x0054 */ unsigned long ExpectedRunTime;
  /* 0x0058 */ void* KernelStack;
  /* 0x0060 */ struct _XSAVE_FORMAT* StateSaveArea;
  /* 0x0068 */ struct _KSCHEDULING_GROUP* volatile SchedulingGroup;
  /* 0x0070 */ union _KWAIT_STATUS_REGISTER WaitRegister;
  /* 0x0071 */ volatile unsigned char Running;
  /* 0x0072 */ unsigned char Alerted[2];
  union
  {
    struct /* bitfield */
    {
      /* 0x0074 */ unsigned long KernelStackResident : 1; /* bit position: 0 */
      /* 0x0074 */ unsigned long ReadyTransition : 1; /* bit position: 1 */
      /* 0x0074 */ unsigned long ProcessReadyQueue : 1; /* bit position: 2 */
      /* 0x0074 */ unsigned long WaitNext : 1; /* bit position: 3 */
      /* 0x0074 */ unsigned long SystemAffinityActive : 1; /* bit position: 4 */
      /* 0x0074 */ unsigned long Alertable : 1; /* bit position: 5 */
      /* 0x0074 */ unsigned long UserStackWalkActive : 1; /* bit position: 6 */
      /* 0x0074 */ unsigned long ApcInterruptRequest : 1; /* bit position: 7 */
      /* 0x0074 */ unsigned long QuantumEndMigrate : 1; /* bit position: 8 */
      /* 0x0074 */ unsigned long UmsDirectedSwitchEnable : 1; /* bit position: 9 */
      /* 0x0074 */ unsigned long TimerActive : 1; /* bit position: 10 */
      /* 0x0074 */ unsigned long SystemThread : 1; /* bit position: 11 */
      /* 0x0074 */ unsigned long ProcessDetachActive : 1; /* bit position: 12 */
      /* 0x0074 */ unsigned long CalloutActive : 1; /* bit position: 13 */
      /* 0x0074 */ unsigned long ScbReadyQueue : 1; /* bit position: 14 */
      /* 0x0074 */ unsigned long ApcQueueable : 1; /* bit position: 15 */
      /* 0x0074 */ unsigned long ReservedStackInUse : 1; /* bit position: 16 */
      /* 0x0074 */ unsigned long UmsPerformingSyscall : 1; /* bit position: 17 */
      /* 0x0074 */ unsigned long ApcPendingReload : 1; /* bit position: 18 */
      /* 0x0074 */ unsigned long Reserved : 13; /* bit position: 19 */
    }; /* bitfield */
    /* 0x0074 */ long MiscFlags;
  }; /* size: 0x0004 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0078 */ unsigned long AutoAlignment : 1; /* bit position: 0 */
      /* 0x0078 */ unsigned long DisableBoost : 1; /* bit position: 1 */
      /* 0x0078 */ unsigned long UserAffinitySet : 1; /* bit position: 2 */
      /* 0x0078 */ unsigned long AlertedByThreadId : 1; /* bit position: 3 */
      /* 0x0078 */ unsigned long QuantumDonation : 1; /* bit position: 4 */
      /* 0x0078 */ unsigned long EnableStackSwap : 1; /* bit position: 5 */
      /* 0x0078 */ unsigned long GuiThread : 1; /* bit position: 6 */
      /* 0x0078 */ unsigned long DisableQuantum : 1; /* bit position: 7 */
      /* 0x0078 */ unsigned long ChargeOnlySchedulingGroup : 1; /* bit position: 8 */
      /* 0x0078 */ unsigned long DeferPreemption : 1; /* bit position: 9 */
      /* 0x0078 */ unsigned long QueueDeferPreemption : 1; /* bit position: 10 */
      /* 0x0078 */ unsigned long ForceDeferSchedule : 1; /* bit position: 11 */
      /* 0x0078 */ unsigned long SharedReadyQueueAffinity : 1; /* bit position: 12 */
      /* 0x0078 */ unsigned long FreezeCount : 1; /* bit position: 13 */
      /* 0x0078 */ unsigned long TerminationApcRequest : 1; /* bit position: 14 */
      /* 0x0078 */ unsigned long AutoBoostEntriesExhausted : 1; /* bit position: 15 */
      /* 0x0078 */ unsigned long EtwStackTraceApcInserted : 8; /* bit position: 16 */
      /* 0x0078 */ unsigned long ReservedFlags : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0078 */ volatile long ThreadFlags;
  }; /* size: 0x0004 */
  /* 0x007c */ unsigned long Spare0;
  /* 0x0080 */ unsigned long SystemCallNumber;
  /* 0x0084 */ unsigned long Spare1;
  /* 0x0088 */ void* FirstArgument;
  /* 0x0090 */ struct _KTRAP_FRAME* TrapFrame;
  union
  {
    /* 0x0098 */ struct _KAPC_STATE ApcState;
    struct
    {
      /* 0x0098 */ unsigned char ApcStateFill[43];
      /* 0x00c3 */ char Priority;
      /* 0x00c4 */ unsigned long UserIdealProcessor;
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
  /* 0x00c8 */ volatile __int64 WaitStatus;
  /* 0x00d0 */ struct _KWAIT_BLOCK* WaitBlockList;
  union
  {
    /* 0x00d8 */ struct _LIST_ENTRY WaitListEntry;
    /* 0x00d8 */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  }; /* size: 0x0010 */
  /* 0x00e8 */ struct _DISPATCHER_HEADER* volatile Queue;
  /* 0x00f0 */ void* Teb;
  /* 0x00f8 */ unsigned __int64 RelativeTimerBias;
  /* 0x0100 */ struct _KTIMER Timer;
  union
  {
    /* 0x0140 */ struct _KWAIT_BLOCK WaitBlock[4];
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill4[20];
      /* 0x0154 */ unsigned long ContextSwitches;
    }; /* size: 0x0018 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill5[68];
      /* 0x0184 */ volatile unsigned char State;
      /* 0x0185 */ char NpxState;
      /* 0x0186 */ unsigned char WaitIrql;
      /* 0x0187 */ char WaitMode;
    }; /* size: 0x0048 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill6[116];
      /* 0x01b4 */ unsigned long WaitTime;
    }; /* size: 0x0078 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill7[164];
      union
      {
        struct
        {
          /* 0x01e4 */ short KernelApcDisable;
          /* 0x01e6 */ short SpecialApcDisable;
        }; /* size: 0x0004 */
        /* 0x01e4 */ unsigned long CombinedApcDisable;
      }; /* size: 0x0004 */
    }; /* size: 0x00a8 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill8[40];
      /* 0x0168 */ struct _KTHREAD_COUNTERS* ThreadCounters;
    }; /* size: 0x0030 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill9[88];
      /* 0x0198 */ struct _XSTATE_SAVE* XStateSave;
    }; /* size: 0x0060 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill10[136];
      /* 0x01c8 */ void* volatile Win32Thread;
    }; /* size: 0x0090 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill11[176];
      /* 0x01f0 */ struct _UMS_CONTROL_BLOCK* Ucb;
      /* 0x01f8 */ struct _KUMS_CONTEXT_HEADER* volatile Uch;
    }; /* size: 0x00c0 */
  }; /* size: 0x00c0 */
  /* 0x0200 */ void* TebMappedLowVa;
  /* 0x0208 */ struct _LIST_ENTRY QueueListEntry;
  union
  {
    /* 0x0218 */ volatile unsigned long NextProcessor;
    struct /* bitfield */
    {
      /* 0x0218 */ unsigned long NextProcessorNumber : 31; /* bit position: 0 */
      /* 0x0218 */ unsigned long SharedReadyQueue : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x021c */ long QueuePriority;
  /* 0x0220 */ struct _KPROCESS* Process;
  union
  {
    /* 0x0228 */ struct _GROUP_AFFINITY UserAffinity;
    struct
    {
      /* 0x0228 */ unsigned char UserAffinityFill[10];
      /* 0x0232 */ char PreviousMode;
      /* 0x0233 */ char BasePriority;
      union
      {
        /* 0x0234 */ char PriorityDecrement;
        struct /* bitfield */
        {
          /* 0x0234 */ unsigned char ForegroundBoost : 4; /* bit position: 0 */
          /* 0x0234 */ unsigned char UnusualBoost : 4; /* bit position: 4 */
        }; /* bitfield */
      }; /* size: 0x0001 */
      /* 0x0235 */ unsigned char Preempted;
      /* 0x0236 */ unsigned char AdjustReason;
      /* 0x0237 */ char AdjustIncrement;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0238 */ struct _GROUP_AFFINITY Affinity;
    struct
    {
      /* 0x0238 */ unsigned char AffinityFill[10];
      /* 0x0242 */ unsigned char ApcStateIndex;
      /* 0x0243 */ unsigned char WaitBlockCount;
      /* 0x0244 */ unsigned long IdealProcessor;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0248 */ struct _KAPC_STATE* ApcStatePointer[2];
  union
  {
    /* 0x0258 */ struct _KAPC_STATE SavedApcState;
    struct
    {
      /* 0x0258 */ unsigned char SavedApcStateFill[43];
      /* 0x0283 */ unsigned char WaitReason;
      /* 0x0284 */ char SuspendCount;
      /* 0x0285 */ char Saturation;
      /* 0x0286 */ unsigned short SListFaultCount;
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
  union
  {
    /* 0x0288 */ struct _KAPC SchedulerApc;
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill0[1];
      /* 0x0289 */ unsigned char ResourceIndex;
    }; /* size: 0x0002 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill1[3];
      /* 0x028b */ unsigned char QuantumReset;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill2[4];
      /* 0x028c */ unsigned long KernelTime;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill3[64];
      /* 0x02c8 */ struct _KPRCB* volatile WaitPrcb;
    }; /* size: 0x0048 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill4[72];
      /* 0x02d0 */ void* LegoData;
    }; /* size: 0x0050 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill5[83];
      /* 0x02db */ unsigned char CallbackNestingLevel;
      /* 0x02dc */ unsigned long UserTime;
    }; /* size: 0x0058 */
  }; /* size: 0x0058 */
  /* 0x02e0 */ struct _KEVENT SuspendEvent;
  /* 0x02f8 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0308 */ struct _LIST_ENTRY MutantListHead;
  /* 0x0318 */ struct _SINGLE_LIST_ENTRY LockEntriesFreeList;
  /* 0x0320 */ struct _KLOCK_ENTRY LockEntries[6];
  /* 0x0560 */ struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;
  /* 0x0568 */ struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
  /* 0x0570 */ unsigned char PriorityFloorCounts[16];
  /* 0x0580 */ unsigned long PriorityFloorSummary;
  /* 0x0584 */ volatile long AbCompletedIoBoostCount;
  /* 0x0588 */ volatile short AbReferenceCount;
  /* 0x058a */ unsigned char AbFreeEntryCount;
  /* 0x058b */ unsigned char AbWaitEntryCount;
  /* 0x058c */ unsigned long ForegroundLossTime;
  union
  {
    /* 0x0590 */ struct _LIST_ENTRY GlobalForegroundListEntry;
    struct
    {
      /* 0x0590 */ struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
      /* 0x0598 */ unsigned __int64 InGlobalForegroundList;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x05a0 */ __int64 ReadOperationCount;
  /* 0x05a8 */ __int64 WriteOperationCount;
  /* 0x05b0 */ __int64 OtherOperationCount;
  /* 0x05b8 */ __int64 ReadTransferCount;
  /* 0x05c0 */ __int64 WriteTransferCount;
  /* 0x05c8 */ __int64 OtherTransferCount;
} KTHREAD, *PKTHREAD; /* size: 0x05d0 */

typedef struct _CHILD_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long List;
} CHILD_LIST, *PCHILD_LIST; /* size: 0x0008 */

typedef struct _CM_KEY_REFERENCE
{
  /* 0x0000 */ unsigned long KeyCell;
  /* 0x0004 */ long Padding_96;
  /* 0x0008 */ struct _HHIVE* KeyHive;
} CM_KEY_REFERENCE, *PCM_KEY_REFERENCE; /* size: 0x0010 */

typedef struct _CM_KEY_NODE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x000c */ unsigned long AccessBits;
  /* 0x0010 */ unsigned long Parent;
  /* 0x0014 */ unsigned long SubKeyCounts[2];
  union
  {
    struct
    {
      /* 0x001c */ unsigned long SubKeyLists[2];
      /* 0x0024 */ struct _CHILD_LIST ValueList;
    }; /* size: 0x0010 */
    /* 0x001c */ struct _CM_KEY_REFERENCE ChildHiveReference;
  }; /* size: 0x0010 */
  /* 0x002c */ unsigned long Security;
  /* 0x0030 */ unsigned long Class;
  struct /* bitfield */
  {
    /* 0x0034 */ unsigned long MaxNameLen : 16; /* bit position: 0 */
    /* 0x0034 */ unsigned long UserFlags : 4; /* bit position: 16 */
    /* 0x0034 */ unsigned long VirtControlFlags : 4; /* bit position: 20 */
    /* 0x0034 */ unsigned long Debug : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x0038 */ unsigned long MaxClassLen;
  /* 0x003c */ unsigned long MaxValueNameLen;
  /* 0x0040 */ unsigned long MaxValueDataLen;
  /* 0x0044 */ unsigned long WorkVar;
  /* 0x0048 */ unsigned short NameLength;
  /* 0x004a */ unsigned short ClassLength;
  /* 0x004c */ wchar_t Name[1];
  /* 0x004e */ char __PADDING__[2];
} CM_KEY_NODE, *PCM_KEY_NODE; /* size: 0x0050 */

typedef struct _CM_KEY_VALUE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short NameLength;
  /* 0x0004 */ unsigned long DataLength;
  /* 0x0008 */ unsigned long Data;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned short Flags;
  /* 0x0012 */ unsigned short Spare;
  /* 0x0014 */ wchar_t Name[1];
  /* 0x0016 */ char __PADDING__[2];
} CM_KEY_VALUE, *PCM_KEY_VALUE; /* size: 0x0018 */

typedef struct _SECURITY_DESCRIPTOR_RELATIVE
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ unsigned long Owner;
  /* 0x0008 */ unsigned long Group;
  /* 0x000c */ unsigned long Sacl;
  /* 0x0010 */ unsigned long Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PSECURITY_DESCRIPTOR_RELATIVE; /* size: 0x0014 */

typedef struct _CM_KEY_SECURITY
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long Flink;
  /* 0x0008 */ unsigned long Blink;
  /* 0x000c */ unsigned long ReferenceCount;
  /* 0x0010 */ unsigned long DescriptorLength;
  /* 0x0014 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
} CM_KEY_SECURITY, *PCM_KEY_SECURITY; /* size: 0x0028 */

typedef struct _CM_KEY_INDEX
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List[1];
} CM_KEY_INDEX, *PCM_KEY_INDEX; /* size: 0x0008 */

typedef struct _CM_BIG_DATA
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List;
} CM_BIG_DATA, *PCM_BIG_DATA; /* size: 0x0008 */

typedef union _u
{
  union
  {
    /* 0x0000 */ struct _CM_KEY_NODE KeyNode;
    /* 0x0000 */ struct _CM_KEY_VALUE KeyValue;
    /* 0x0000 */ struct _CM_KEY_SECURITY KeySecurity;
    /* 0x0000 */ struct _CM_KEY_INDEX KeyIndex;
    /* 0x0000 */ struct _CM_BIG_DATA ValueData;
    /* 0x0000 */ unsigned long KeyList[1];
    /* 0x0000 */ wchar_t KeyString[1];
  }; /* size: 0x0050 */
} u, *Pu; /* size: 0x0050 */

typedef struct _KTSS64
{
  /* 0x0000 */ unsigned long Reserved0;
  /* 0x0004 */ unsigned __int64 Rsp0;
  /* 0x000c */ unsigned __int64 Rsp1;
  /* 0x0014 */ unsigned __int64 Rsp2;
  /* 0x001c */ unsigned __int64 Ist[8];
  /* 0x005c */ unsigned __int64 Reserved1;
  /* 0x0064 */ unsigned short Reserved2;
  /* 0x0066 */ unsigned short IoMapBase;
} KTSS64, *PKTSS64; /* size: 0x0068 */

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0008 */ void* StackBase;
  /* 0x0010 */ void* StackLimit;
  /* 0x0018 */ void* SubSystemTib;
  union
  {
    /* 0x0020 */ void* FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* ArbitraryUserPointer;
  /* 0x0030 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x0038 */

typedef struct _KGATE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KGATE, *PKGATE; /* size: 0x0018 */

typedef struct _CACHE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char Associativity;
  /* 0x0002 */ unsigned short LineSize;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ enum _PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR; /* size: 0x000c */

typedef struct _SYNCH_COUNTERS
{
  /* 0x0000 */ unsigned long SpinLockAcquireCount;
  /* 0x0004 */ unsigned long SpinLockContentionCount;
  /* 0x0008 */ unsigned long SpinLockSpinCount;
  /* 0x000c */ unsigned long IpiSendRequestBroadcastCount;
  /* 0x0010 */ unsigned long IpiSendRequestRoutineCount;
  /* 0x0014 */ unsigned long IpiSendSoftwareInterruptCount;
  /* 0x0018 */ unsigned long ExInitializeResourceCount;
  /* 0x001c */ unsigned long ExReInitializeResourceCount;
  /* 0x0020 */ unsigned long ExDeleteResourceCount;
  /* 0x0024 */ unsigned long ExecutiveResourceAcquiresCount;
  /* 0x0028 */ unsigned long ExecutiveResourceContentionsCount;
  /* 0x002c */ unsigned long ExecutiveResourceReleaseExclusiveCount;
  /* 0x0030 */ unsigned long ExecutiveResourceReleaseSharedCount;
  /* 0x0034 */ unsigned long ExecutiveResourceConvertsCount;
  /* 0x0038 */ unsigned long ExAcqResExclusiveAttempts;
  /* 0x003c */ unsigned long ExAcqResExclusiveAcquiresExclusive;
  /* 0x0040 */ unsigned long ExAcqResExclusiveAcquiresExclusiveRecursive;
  /* 0x0044 */ unsigned long ExAcqResExclusiveWaits;
  /* 0x0048 */ unsigned long ExAcqResExclusiveNotAcquires;
  /* 0x004c */ unsigned long ExAcqResSharedAttempts;
  /* 0x0050 */ unsigned long ExAcqResSharedAcquiresExclusive;
  /* 0x0054 */ unsigned long ExAcqResSharedAcquiresShared;
  /* 0x0058 */ unsigned long ExAcqResSharedAcquiresSharedRecursive;
  /* 0x005c */ unsigned long ExAcqResSharedWaits;
  /* 0x0060 */ unsigned long ExAcqResSharedNotAcquires;
  /* 0x0064 */ unsigned long ExAcqResSharedStarveExclusiveAttempts;
  /* 0x0068 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresExclusive;
  /* 0x006c */ unsigned long ExAcqResSharedStarveExclusiveAcquiresShared;
  /* 0x0070 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
  /* 0x0074 */ unsigned long ExAcqResSharedStarveExclusiveWaits;
  /* 0x0078 */ unsigned long ExAcqResSharedStarveExclusiveNotAcquires;
  /* 0x007c */ unsigned long ExAcqResSharedWaitForExclusiveAttempts;
  /* 0x0080 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresExclusive;
  /* 0x0084 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresShared;
  /* 0x0088 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
  /* 0x008c */ unsigned long ExAcqResSharedWaitForExclusiveWaits;
  /* 0x0090 */ unsigned long ExAcqResSharedWaitForExclusiveNotAcquires;
  /* 0x0094 */ unsigned long ExSetResOwnerPointerExclusive;
  /* 0x0098 */ unsigned long ExSetResOwnerPointerSharedNew;
  /* 0x009c */ unsigned long ExSetResOwnerPointerSharedOld;
  /* 0x00a0 */ unsigned long ExTryToAcqExclusiveAttempts;
  /* 0x00a4 */ unsigned long ExTryToAcqExclusiveAcquires;
  /* 0x00a8 */ unsigned long ExBoostExclusiveOwner;
  /* 0x00ac */ unsigned long ExBoostSharedOwners;
  /* 0x00b0 */ unsigned long ExEtwSynchTrackingNotificationsCount;
  /* 0x00b4 */ unsigned long ExEtwSynchTrackingNotificationsAccountedCount;
} SYNCH_COUNTERS, *PSYNCH_COUNTERS; /* size: 0x00b8 */

typedef struct _FILESYSTEM_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 FsBytesRead;
  /* 0x0008 */ unsigned __int64 FsBytesWritten;
} FILESYSTEM_DISK_COUNTERS, *PFILESYSTEM_DISK_COUNTERS; /* size: 0x0010 */

typedef struct _KENTROPY_TIMING_STATE
{
  /* 0x0000 */ unsigned long EntropyCount;
  /* 0x0004 */ unsigned long Buffer[64];
  /* 0x0104 */ long Padding_97;
  /* 0x0108 */ struct _KDPC Dpc;
  /* 0x0148 */ unsigned long LastDeliveredBuffer;
  /* 0x014c */ long __PADDING__[1];
} KENTROPY_TIMING_STATE, *PKENTROPY_TIMING_STATE; /* size: 0x0150 */

typedef struct _KREQUEST_PACKET
{
  /* 0x0000 */ void* CurrentPacket[3];
  /* 0x0018 */ void* WorkerRoutine /* function */;
} KREQUEST_PACKET, *PKREQUEST_PACKET; /* size: 0x0020 */

typedef struct _REQUEST_MAILBOX
{
  /* 0x0000 */ struct _REQUEST_MAILBOX* Next;
  /* 0x0008 */ __int64 RequestSummary;
  /* 0x0010 */ struct _KREQUEST_PACKET RequestPacket;
  /* 0x0030 */ volatile long* NodeTargetCountAddr;
  /* 0x0038 */ volatile long NodeTargetCount;
  /* 0x003c */ long __PADDING__[1];
} REQUEST_MAILBOX, *PREQUEST_MAILBOX; /* size: 0x0040 */

typedef struct _KPRCB
{
  /* 0x0000 */ unsigned long MxCsr;
  /* 0x0004 */ unsigned char LegacyNumber;
  /* 0x0005 */ unsigned char ReservedMustBeZero;
  /* 0x0006 */ unsigned char InterruptRequest;
  /* 0x0007 */ unsigned char IdleHalt;
  /* 0x0008 */ struct _KTHREAD* CurrentThread;
  /* 0x0010 */ struct _KTHREAD* NextThread;
  /* 0x0018 */ struct _KTHREAD* IdleThread;
  /* 0x0020 */ unsigned char NestingLevel;
  /* 0x0021 */ unsigned char ClockOwner;
  union
  {
    /* 0x0022 */ unsigned char PendingTickFlags;
    struct /* bitfield */
    {
      /* 0x0022 */ unsigned char PendingTick : 1; /* bit position: 0 */
      /* 0x0022 */ unsigned char PendingBackupTick : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0023 */ unsigned char PrcbPad00[1];
  /* 0x0024 */ unsigned long Number;
  /* 0x0028 */ unsigned __int64 RspBase;
  /* 0x0030 */ unsigned __int64 PrcbLock;
  /* 0x0038 */ char* PriorityState;
  /* 0x0040 */ struct _KPROCESSOR_STATE ProcessorState;
  /* 0x05f0 */ char CpuType;
  /* 0x05f1 */ char CpuID;
  union
  {
    /* 0x05f2 */ unsigned short CpuStep;
    struct
    {
      /* 0x05f2 */ unsigned char CpuStepping;
      /* 0x05f3 */ unsigned char CpuModel;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x05f4 */ unsigned long MHz;
  /* 0x05f8 */ unsigned __int64 HalReserved[8];
  /* 0x0638 */ unsigned short MinorVersion;
  /* 0x063a */ unsigned short MajorVersion;
  /* 0x063c */ unsigned char BuildType;
  /* 0x063d */ unsigned char CpuVendor;
  /* 0x063e */ unsigned char CoresPerPhysicalProcessor;
  /* 0x063f */ unsigned char LogicalProcessorsPerCore;
  /* 0x0640 */ struct _KNODE* ParentNode;
  /* 0x0648 */ unsigned __int64 GroupSetMember;
  /* 0x0650 */ unsigned char Group;
  /* 0x0651 */ unsigned char GroupIndex;
  /* 0x0652 */ unsigned char PrcbPad05[2];
  /* 0x0654 */ unsigned long ApicMask;
  /* 0x0658 */ unsigned long CFlushSize;
  /* 0x065c */ long Padding_98;
  /* 0x0660 */ void* AcpiReserved;
  /* 0x0668 */ unsigned long InitialApicId;
  /* 0x066c */ long Padding_99;
  /* 0x0670 */ struct _KSPIN_LOCK_QUEUE LockQueue[17];
  /* 0x0780 */ struct _PP_LOOKASIDE_LIST PPLookasideList[16];
  /* 0x0880 */ struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
  /* 0x1480 */ struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
  /* 0x2080 */ struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
  /* 0x2c80 */ unsigned __int64 PrcbPad20;
  /* 0x2c88 */ struct _SINGLE_LIST_ENTRY DeferredReadyListHead;
  /* 0x2c90 */ volatile long MmPageFaultCount;
  /* 0x2c94 */ volatile long MmCopyOnWriteCount;
  /* 0x2c98 */ volatile long MmTransitionCount;
  /* 0x2c9c */ volatile long MmDemandZeroCount;
  /* 0x2ca0 */ volatile long MmPageReadCount;
  /* 0x2ca4 */ volatile long MmPageReadIoCount;
  /* 0x2ca8 */ volatile long MmDirtyPagesWriteCount;
  /* 0x2cac */ volatile long MmDirtyWriteIoCount;
  /* 0x2cb0 */ volatile long MmMappedPagesWriteCount;
  /* 0x2cb4 */ volatile long MmMappedWriteIoCount;
  /* 0x2cb8 */ unsigned long KeSystemCalls;
  /* 0x2cbc */ unsigned long KeContextSwitches;
  /* 0x2cc0 */ unsigned short LdtSelector;
  /* 0x2cc2 */ unsigned short PrcbPad40;
  /* 0x2cc4 */ unsigned long CcFastReadNoWait;
  /* 0x2cc8 */ unsigned long CcFastReadWait;
  /* 0x2ccc */ unsigned long CcFastReadNotPossible;
  /* 0x2cd0 */ unsigned long CcCopyReadNoWait;
  /* 0x2cd4 */ unsigned long CcCopyReadWait;
  /* 0x2cd8 */ unsigned long CcCopyReadNoWaitMiss;
  /* 0x2cdc */ volatile long IoReadOperationCount;
  /* 0x2ce0 */ volatile long IoWriteOperationCount;
  /* 0x2ce4 */ volatile long IoOtherOperationCount;
  /* 0x2ce8 */ union _LARGE_INTEGER IoReadTransferCount;
  /* 0x2cf0 */ union _LARGE_INTEGER IoWriteTransferCount;
  /* 0x2cf8 */ union _LARGE_INTEGER IoOtherTransferCount;
  /* 0x2d00 */ volatile long PacketBarrier;
  /* 0x2d04 */ volatile long TargetCount;
  /* 0x2d08 */ volatile unsigned long IpiFrozen;
  /* 0x2d0c */ long Padding_100;
  /* 0x2d10 */ void* IsrDpcStats;
  /* 0x2d18 */ unsigned long DeviceInterrupts;
  /* 0x2d1c */ long LookasideIrpFloat;
  /* 0x2d20 */ unsigned long InterruptLastCount;
  /* 0x2d24 */ unsigned long InterruptRate;
  /* 0x2d28 */ unsigned long PrcbPad41[22];
  /* 0x2d80 */ struct _KDPC_DATA DpcData[2];
  /* 0x2dd0 */ void* DpcStack;
  /* 0x2dd8 */ long MaximumDpcQueueDepth;
  /* 0x2ddc */ unsigned long DpcRequestRate;
  /* 0x2de0 */ unsigned long MinimumDpcRate;
  /* 0x2de4 */ unsigned long DpcLastCount;
  /* 0x2de8 */ unsigned char ThreadDpcEnable;
  /* 0x2de9 */ volatile unsigned char QuantumEnd;
  /* 0x2dea */ volatile unsigned char DpcRoutineActive;
  /* 0x2deb */ volatile unsigned char IdleSchedule;
  union
  {
    /* 0x2dec */ volatile long DpcRequestSummary;
    /* 0x2dec */ short DpcRequestSlot[2];
    struct
    {
      /* 0x2dec */ short NormalDpcState;
      /* 0x2dee */ short ThreadDpcState;
    }; /* size: 0x0004 */
    struct /* bitfield */
    {
      /* 0x2dec */ unsigned long DpcNormalProcessingActive : 1; /* bit position: 0 */
      /* 0x2dec */ unsigned long DpcNormalProcessingRequested : 1; /* bit position: 1 */
      /* 0x2dec */ unsigned long DpcNormalThreadSignal : 1; /* bit position: 2 */
      /* 0x2dec */ unsigned long DpcNormalTimerExpiration : 1; /* bit position: 3 */
      /* 0x2dec */ unsigned long DpcNormalDpcPresent : 1; /* bit position: 4 */
      /* 0x2dec */ unsigned long DpcNormalLocalInterrupt : 1; /* bit position: 5 */
      /* 0x2dec */ unsigned long DpcNormalSpare : 10; /* bit position: 6 */
      /* 0x2dec */ unsigned long DpcThreadActive : 1; /* bit position: 16 */
      /* 0x2dec */ unsigned long DpcThreadRequested : 1; /* bit position: 17 */
      /* 0x2dec */ unsigned long DpcThreadSpare : 14; /* bit position: 18 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x2df0 */ unsigned long LastTimerHand;
  /* 0x2df4 */ unsigned long LastTick;
  /* 0x2df8 */ unsigned long ClockInterrupts;
  /* 0x2dfc */ unsigned long ReadyScanTick;
  /* 0x2e00 */ struct _KTIMER_TABLE TimerTable;
  /* 0x5000 */ struct _KGATE DpcGate;
  /* 0x5018 */ void* PrcbPad52;
  /* 0x5020 */ struct _KDPC CallDpc;
  /* 0x5060 */ long ClockKeepAlive;
  /* 0x5064 */ unsigned char PrcbPad60[2];
  /* 0x5066 */ unsigned short NmiActive;
  /* 0x5068 */ long DpcWatchdogPeriod;
  /* 0x506c */ long DpcWatchdogCount;
  /* 0x5070 */ volatile long KeSpinLockOrdering;
  /* 0x5074 */ unsigned long PrcbPad70[1];
  /* 0x5078 */ void* CachedPtes;
  /* 0x5080 */ struct _LIST_ENTRY WaitListHead;
  /* 0x5090 */ unsigned __int64 WaitLock;
  /* 0x5098 */ unsigned long ReadySummary;
  /* 0x509c */ long AffinitizedSelectionMask;
  /* 0x50a0 */ unsigned long QueueIndex;
  /* 0x50a4 */ unsigned long PrcbPad75[3];
  /* 0x50b0 */ struct _KDPC TimerExpirationDpc;
  /* 0x50f0 */ struct _RTL_RB_TREE ScbQueue;
  /* 0x5100 */ struct _LIST_ENTRY DispatcherReadyListHead[32];
  /* 0x5300 */ unsigned long InterruptCount;
  /* 0x5304 */ unsigned long KernelTime;
  /* 0x5308 */ unsigned long UserTime;
  /* 0x530c */ unsigned long DpcTime;
  /* 0x5310 */ unsigned long InterruptTime;
  /* 0x5314 */ unsigned long AdjustDpcThreshold;
  /* 0x5318 */ unsigned char DebuggerSavedIRQL;
  /* 0x5319 */ unsigned char GroupSchedulingOverQuota;
  /* 0x531a */ volatile unsigned char DeepSleep;
  /* 0x531b */ unsigned char PrcbPad80[1];
  /* 0x531c */ unsigned long ScbOffset;
  /* 0x5320 */ unsigned long DpcTimeCount;
  /* 0x5324 */ unsigned long DpcTimeLimit;
  /* 0x5328 */ unsigned long PeriodicCount;
  /* 0x532c */ unsigned long PeriodicBias;
  /* 0x5330 */ unsigned long AvailableTime;
  /* 0x5334 */ unsigned long KeExceptionDispatchCount;
  /* 0x5338 */ unsigned __int64 StartCycles;
  /* 0x5340 */ unsigned __int64 GenerationTarget;
  /* 0x5348 */ unsigned __int64 AffinitizedCycles;
  /* 0x5350 */ unsigned __int64 PrcbPad81[2];
  /* 0x5360 */ volatile long MmSpinLockOrdering;
  /* 0x5364 */ unsigned long PageColor;
  /* 0x5368 */ unsigned long NodeColor;
  /* 0x536c */ unsigned long NodeShiftedColor;
  /* 0x5370 */ unsigned long SecondaryColorMask;
  /* 0x5374 */ unsigned long PrcbPad83;
  /* 0x5378 */ unsigned __int64 CycleTime;
  /* 0x5380 */ unsigned long CcFastMdlReadNoWait;
  /* 0x5384 */ unsigned long CcFastMdlReadWait;
  /* 0x5388 */ unsigned long CcFastMdlReadNotPossible;
  /* 0x538c */ unsigned long CcMapDataNoWait;
  /* 0x5390 */ unsigned long CcMapDataWait;
  /* 0x5394 */ unsigned long CcPinMappedDataCount;
  /* 0x5398 */ unsigned long CcPinReadNoWait;
  /* 0x539c */ unsigned long CcPinReadWait;
  /* 0x53a0 */ unsigned long CcMdlReadNoWait;
  /* 0x53a4 */ unsigned long CcMdlReadWait;
  /* 0x53a8 */ unsigned long CcLazyWriteHotSpots;
  /* 0x53ac */ unsigned long CcLazyWriteIos;
  /* 0x53b0 */ unsigned long CcLazyWritePages;
  /* 0x53b4 */ unsigned long CcDataFlushes;
  /* 0x53b8 */ unsigned long CcDataPages;
  /* 0x53bc */ unsigned long CcLostDelayedWrites;
  /* 0x53c0 */ unsigned long CcFastReadResourceMiss;
  /* 0x53c4 */ unsigned long CcCopyReadWaitMiss;
  /* 0x53c8 */ unsigned long CcFastMdlReadResourceMiss;
  /* 0x53cc */ unsigned long CcMapDataNoWaitMiss;
  /* 0x53d0 */ unsigned long CcMapDataWaitMiss;
  /* 0x53d4 */ unsigned long CcPinReadNoWaitMiss;
  /* 0x53d8 */ unsigned long CcPinReadWaitMiss;
  /* 0x53dc */ unsigned long CcMdlReadNoWaitMiss;
  /* 0x53e0 */ unsigned long CcMdlReadWaitMiss;
  /* 0x53e4 */ unsigned long CcReadAheadIos;
  /* 0x53e8 */ volatile long MmCacheTransitionCount;
  /* 0x53ec */ volatile long MmCacheReadCount;
  /* 0x53f0 */ volatile long MmCacheIoCount;
  /* 0x53f4 */ unsigned long PrcbPad91[3];
  /* 0x5400 */ struct _PROCESSOR_POWER_STATE PowerState;
  /* 0x55e0 */ struct _LIST_ENTRY ScbList;
  /* 0x55f0 */ unsigned long PrcbPad92[19];
  /* 0x563c */ unsigned long KeAlignmentFixupCount;
  /* 0x5640 */ struct _KDPC DpcWatchdogDpc;
  /* 0x5680 */ struct _KTIMER DpcWatchdogTimer;
  /* 0x56c0 */ struct _CACHE_DESCRIPTOR Cache[5];
  /* 0x56fc */ unsigned long CacheCount;
  /* 0x5700 */ volatile unsigned long CachedCommit;
  /* 0x5704 */ volatile unsigned long CachedResidentAvailable;
  /* 0x5708 */ void* HyperPte;
  /* 0x5710 */ void* WheaInfo;
  /* 0x5718 */ void* EtwSupport;
  /* 0x5720 */ union _SLIST_HEADER InterruptObjectPool;
  /* 0x5730 */ union _SLIST_HEADER HypercallPageList;
  /* 0x5740 */ void* HypercallPageVirtual;
  /* 0x5748 */ void* VirtualApicAssist;
  /* 0x5750 */ unsigned __int64* StatisticsPage;
  /* 0x5758 */ struct _KAFFINITY_EX PackageProcessorSet;
  /* 0x5800 */ unsigned __int64 SharedReadyQueueMask;
  /* 0x5808 */ struct _KSHARED_READY_QUEUE* SharedReadyQueue;
  /* 0x5810 */ unsigned __int64 CoreProcessorSet;
  /* 0x5818 */ unsigned __int64 ScanSiblingMask;
  /* 0x5820 */ unsigned __int64 LLCMask;
  /* 0x5828 */ unsigned __int64 CacheProcessorMask[5];
  /* 0x5850 */ unsigned long ScanSiblingIndex;
  /* 0x5854 */ unsigned long SharedReadyQueueOffset;
  /* 0x5858 */ struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;
  /* 0x5860 */ void* ProfileEventIndexAddress;
  /* 0x5868 */ unsigned __int64 PrcbPad94[3];
  /* 0x5880 */ struct _SYNCH_COUNTERS SynchCounters;
  /* 0x5938 */ unsigned __int64 PteBitCache;
  /* 0x5940 */ unsigned long PteBitOffset;
  /* 0x5944 */ long Padding_101;
  /* 0x5948 */ struct _FILESYSTEM_DISK_COUNTERS FsCounters;
  /* 0x5958 */ unsigned char VendorString[13];
  /* 0x5965 */ unsigned char PrcbPad10[3];
  /* 0x5968 */ unsigned __int64 FeatureBits;
  /* 0x5970 */ unsigned long PrcbPad11;
  /* 0x5974 */ long Padding_102;
  /* 0x5978 */ union _LARGE_INTEGER UpdateSignature;
  /* 0x5980 */ struct _CONTEXT* Context;
  /* 0x5988 */ unsigned long ContextFlagsInit;
  /* 0x598c */ long Padding_103;
  /* 0x5990 */ struct _XSAVE_AREA* ExtendedState;
  /* 0x5998 */ void* IsrStack;
  /* 0x59a0 */ struct _KENTROPY_TIMING_STATE EntropyTimingState;
  /* 0x5af0 */ struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
  /* 0x5af8 */ struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;
  /* 0x5b00 */ struct _KDPC AbDpc;
  /* 0x5b40 */ struct _REQUEST_MAILBOX* Mailbox;
  /* 0x5b48 */ long Padding_104[14];
  /* 0x5b80 */ struct _REQUEST_MAILBOX RequestMailbox[1];
} KPRCB, *PKPRCB; /* size: 0x5bc0 */

typedef struct _KPCR
{
  union
  {
    /* 0x0000 */ struct _NT_TIB NtTib;
    struct
    {
      /* 0x0000 */ union _KGDTENTRY64* GdtBase;
      /* 0x0008 */ struct _KTSS64* TssBase;
      /* 0x0010 */ unsigned __int64 UserRsp;
      /* 0x0018 */ struct _KPCR* Self;
      /* 0x0020 */ struct _KPRCB* CurrentPrcb;
      /* 0x0028 */ struct _KSPIN_LOCK_QUEUE* LockArray;
      /* 0x0030 */ void* Used_Self;
    }; /* size: 0x0038 */
  }; /* size: 0x0038 */
  /* 0x0038 */ union _KIDTENTRY64* IdtBase;
  /* 0x0040 */ unsigned __int64 Unused[2];
  /* 0x0050 */ unsigned char Irql;
  /* 0x0051 */ unsigned char SecondLevelCacheAssociativity;
  /* 0x0052 */ unsigned char ObsoleteNumber;
  /* 0x0053 */ unsigned char Fill0;
  /* 0x0054 */ unsigned long Unused0[3];
  /* 0x0060 */ unsigned short MajorVersion;
  /* 0x0062 */ unsigned short MinorVersion;
  /* 0x0064 */ unsigned long StallScaleFactor;
  /* 0x0068 */ void* Unused1[3];
  /* 0x0080 */ unsigned long KernelReserved[15];
  /* 0x00bc */ unsigned long SecondLevelCacheSize;
  /* 0x00c0 */ unsigned long HalReserved[16];
  /* 0x0100 */ unsigned long Unused2;
  /* 0x0104 */ long Padding_105;
  /* 0x0108 */ void* KdVersionBlock;
  /* 0x0110 */ void* Unused3;
  /* 0x0118 */ unsigned long PcrAlign1[24];
  /* 0x0178 */ long Padding_106[2];
  /* 0x0180 */ struct _KPRCB Prcb;
} KPCR, *PKPCR; /* size: 0x5d40 */

typedef struct _ETW_SESSION_PERF_COUNTERS
{
  /* 0x0000 */ long BufferMemoryPagedPool;
  /* 0x0004 */ long BufferMemoryNonPagedPool;
  /* 0x0008 */ unsigned __int64 EventsLoggedCount;
  /* 0x0010 */ long EventsLost;
  /* 0x0014 */ long NumConsumers;
} ETW_SESSION_PERF_COUNTERS, *PETW_SESSION_PERF_COUNTERS; /* size: 0x0018 */

typedef struct _BITMAP_RANGE
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ __int64 BasePage;
  /* 0x0018 */ unsigned long FirstDirtyPage;
  /* 0x001c */ unsigned long LastDirtyPage;
  /* 0x0020 */ unsigned long DirtyPages;
  /* 0x0024 */ long Padding_107;
  /* 0x0028 */ unsigned long* Bitmap;
} BITMAP_RANGE, *PBITMAP_RANGE; /* size: 0x0030 */

typedef struct _GDI_TEB_BATCH
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_108;
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e8 */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x0038 */ void* EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID ClientId;
  /* 0x0050 */ void* ActiveRpcHandle;
  /* 0x0058 */ void* ThreadLocalStoragePointer;
  /* 0x0060 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ void* CsrClientThread;
  /* 0x0078 */ void* Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x00fc */ long Padding_109;
  /* 0x0100 */ void* WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ void* SystemReserved1[54];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c4 */ unsigned char Padding0[4];
  /* 0x02c8 */ struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;
  /* 0x02d0 */ unsigned char SpareBytes[24];
  /* 0x02e8 */ unsigned long TxFsContext;
  /* 0x02ec */ unsigned char Padding1[4];
  /* 0x02f0 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID RealClientId;
  /* 0x07e8 */ void* GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ void* GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ void* glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ void* glReserved2;
  /* 0x1228 */ void* glSectionInfo;
  /* 0x1230 */ void* glSection;
  /* 0x1238 */ void* glTable;
  /* 0x1240 */ void* glCurrentRC;
  /* 0x1248 */ void* glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1254 */ unsigned char Padding2[4];
  /* 0x1258 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1472 */ unsigned char Padding3[6];
  /* 0x1478 */ void* DeallocationStack;
  /* 0x1480 */ void* TlsSlots[64];
  /* 0x1680 */ struct _LIST_ENTRY TlsLinks;
  /* 0x1690 */ void* Vdm;
  /* 0x1698 */ void* ReservedForNtRpc;
  /* 0x16a0 */ void* DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b4 */ unsigned char Padding4[4];
  /* 0x16b8 */ void* Instrumentation[11];
  /* 0x1710 */ struct _GUID ActivityId;
  /* 0x1720 */ void* SubProcessTag;
  /* 0x1728 */ void* PerflibData;
  /* 0x1730 */ void* EtwTraceData;
  /* 0x1738 */ void* WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x1744 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x1744 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x1744 */ unsigned char ReservedPad0;
      /* 0x1745 */ unsigned char ReservedPad1;
      /* 0x1746 */ unsigned char ReservedPad2;
      /* 0x1747 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x1748 */ unsigned long GuaranteedStackBytes;
  /* 0x174c */ unsigned char Padding5[4];
  /* 0x1750 */ void* ReservedForPerf;
  /* 0x1758 */ void* ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1764 */ unsigned char Padding6[4];
  /* 0x1768 */ void* SavedPriorityState;
  /* 0x1770 */ unsigned __int64 ReservedForCodeCoverage;
  /* 0x1778 */ void* ThreadPoolData;
  /* 0x1780 */ void** TlsExpansionSlots;
  /* 0x1788 */ void* DeallocationBStore;
  /* 0x1790 */ void* BStoreLimit;
  /* 0x1798 */ unsigned long MuiGeneration;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ void* NlsCache;
  /* 0x17a8 */ void* pShimData;
  /* 0x17b0 */ unsigned short HeapVirtualAffinity;
  /* 0x17b2 */ unsigned short LowFragHeapDataSlot;
  /* 0x17b4 */ unsigned char Padding7[4];
  /* 0x17b8 */ void* CurrentTransactionHandle;
  /* 0x17c0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x17c8 */ void* FlsData;
  /* 0x17d0 */ void* PreferredLanguages;
  /* 0x17d8 */ void* UserPrefLanguages;
  /* 0x17e0 */ void* MergedPrefLanguages;
  /* 0x17e8 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x17ec */ volatile unsigned short CrossTebFlags;
    /* 0x17ec */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x17ee */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x17ee */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x17ee */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x17ee */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x17ee */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x17ee */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x17ee */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x17ee */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x17ee */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x17ee */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x17ee */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x17ee */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x17ee */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x17ee */ unsigned short SpareSameTebBits : 4; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x17f0 */ void* TxnScopeEnterCallback;
  /* 0x17f8 */ void* TxnScopeExitCallback;
  /* 0x1800 */ void* TxnScopeContext;
  /* 0x1808 */ unsigned long LockCount;
  /* 0x180c */ unsigned long SpareUlong0;
  /* 0x1810 */ void* ResourceRetValue;
  /* 0x1818 */ void* ReservedForWdf;
} TEB, *PTEB; /* size: 0x1820 */

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0008 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0010 */

typedef struct _MBCB
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeIsInZone;
  /* 0x0004 */ unsigned long PagesToWrite;
  /* 0x0008 */ unsigned long DirtyPages;
  /* 0x000c */ unsigned long Reserved;
  /* 0x0010 */ struct _LIST_ENTRY BitmapRanges;
  /* 0x0020 */ __int64 ResumeWritePage;
  /* 0x0028 */ __int64 MostRecentlyDirtiedPage;
  /* 0x0030 */ struct _BITMAP_RANGE BitmapRange1;
  /* 0x0060 */ struct _BITMAP_RANGE BitmapRange2;
  /* 0x0090 */ struct _BITMAP_RANGE BitmapRange3;
} MBCB, *PMBCB; /* size: 0x00c0 */

typedef struct _LOGGED_STREAM_CALLBACK_V2
{
  /* 0x0000 */ struct _LOG_HANDLE_CONTEXT* LogHandleContext;
} LOGGED_STREAM_CALLBACK_V2, *PLOGGED_STREAM_CALLBACK_V2; /* size: 0x0008 */

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0010 */ void* ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ long Padding_110;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0098 */

typedef struct _CM_INDEX_HINT_BLOCK
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long HashKey[1];
} CM_INDEX_HINT_BLOCK, *PCM_INDEX_HINT_BLOCK; /* size: 0x0008 */

typedef union _WHEA_REVISION
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char MinorRevision;
      /* 0x0001 */ unsigned char MajorRevision;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_REVISION, *PWHEA_REVISION; /* size: 0x0002 */

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PlatformId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Timestamp : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PartitionId : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS; /* size: 0x0004 */

typedef union _WHEA_TIMESTAMP
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Seconds : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Minutes : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Hours : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Precise : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 Day : 8; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 Month : 8; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Year : 8; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 Century : 8; /* bit position: 56 */
    }; /* bitfield */
    /* 0x0000 */ union _LARGE_INTEGER AsLARGE_INTEGER;
  }; /* size: 0x0008 */
} WHEA_TIMESTAMP, *PWHEA_TIMESTAMP; /* size: 0x0008 */

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS; /* size: 0x0004 */

typedef union _WHEA_PERSISTENCE_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Signature : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Length : 24; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Identifier : 16; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Attributes : 2; /* bit position: 56 */
      /* 0x0000 */ unsigned __int64 DoNotLog : 1; /* bit position: 58 */
      /* 0x0000 */ unsigned __int64 Reserved : 5; /* bit position: 59 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 AsULONGLONG;
  }; /* size: 0x0008 */
} WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO; /* size: 0x0008 */

typedef struct _WHEA_ERROR_RECORD_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ union _WHEA_REVISION Revision;
  /* 0x0006 */ unsigned long SignatureEnd;
  /* 0x000a */ unsigned short SectionCount;
  /* 0x000c */ enum _WHEA_ERROR_SEVERITY Severity;
  /* 0x0010 */ union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ union _WHEA_TIMESTAMP Timestamp;
  /* 0x0020 */ struct _GUID PlatformId;
  /* 0x0030 */ struct _GUID PartitionId;
  /* 0x0040 */ struct _GUID CreatorId;
  /* 0x0050 */ struct _GUID NotifyType;
  /* 0x0060 */ unsigned __int64 RecordId;
  /* 0x0068 */ union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  /* 0x006c */ union _WHEA_PERSISTENCE_INFO PersistenceInfo;
  /* 0x0074 */ unsigned char Reserved[12];
} WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER; /* size: 0x0080 */

typedef struct _PROC_FEEDBACK_COUNTER
{
  union
  {
    /* 0x0000 */ void* InstantaneousRead /* function */;
    /* 0x0000 */ void* DifferentialRead /* function */;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 LastActualCount;
  /* 0x0010 */ unsigned __int64 LastReferenceCount;
  /* 0x0018 */ unsigned long CachedValue;
  /* 0x001c */ long Padding_111;
  /* 0x0020 */ unsigned char Affinitized;
  /* 0x0021 */ unsigned char Differential;
  /* 0x0022 */ unsigned char DisableInterrupts;
  /* 0x0023 */ char Padding_112[5];
  /* 0x0028 */ unsigned __int64 Context;
} PROC_FEEDBACK_COUNTER, *PPROC_FEEDBACK_COUNTER; /* size: 0x0030 */

typedef struct _LOGGED_STREAM_CALLBACK_V1
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0008 */ void* FlushToLsnRoutine /* function */;
} LOGGED_STREAM_CALLBACK_V1, *PLOGGED_STREAM_CALLBACK_V1; /* size: 0x0010 */

typedef struct _PO_DEVICE_NOTIFY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _LIST_ENTRY PowerChildren;
  /* 0x0020 */ struct _LIST_ENTRY PowerParents;
  /* 0x0030 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0038 */ unsigned char OrderLevel;
  /* 0x0039 */ char Padding_113[7];
  /* 0x0040 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0048 */ unsigned short* DeviceName;
  /* 0x0050 */ unsigned short* DriverName;
  /* 0x0058 */ unsigned long ChildCount;
  /* 0x005c */ unsigned long ActiveChild;
  /* 0x0060 */ unsigned long ParentCount;
  /* 0x0064 */ unsigned long ActiveParent;
} PO_DEVICE_NOTIFY, *PPO_DEVICE_NOTIFY; /* size: 0x0068 */

typedef struct _PO_IRP_QUEUE
{
  /* 0x0000 */ struct _IRP* CurrentIrp;
  /* 0x0008 */ struct _IRP* PendingIrpList;
} PO_IRP_QUEUE, *PPO_IRP_QUEUE; /* size: 0x0010 */

typedef struct _PO_IRP_MANAGER
{
  /* 0x0000 */ struct _PO_IRP_QUEUE DeviceIrpQueue;
  /* 0x0010 */ struct _PO_IRP_QUEUE SystemIrpQueue;
} PO_IRP_MANAGER, *PPO_IRP_MANAGER; /* size: 0x0020 */

typedef struct _DEVICE_NODE
{
  /* 0x0000 */ struct _DEVICE_NODE* Sibling;
  /* 0x0008 */ struct _DEVICE_NODE* Child;
  /* 0x0010 */ struct _DEVICE_NODE* Parent;
  /* 0x0018 */ struct _DEVICE_NODE* LastChild;
  /* 0x0020 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0028 */ struct _UNICODE_STRING InstancePath;
  /* 0x0038 */ struct _UNICODE_STRING ServiceName;
  /* 0x0048 */ struct _IRP* PendingIrp;
  /* 0x0050 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x0058 */ volatile long FxDeviceLock;
  /* 0x005c */ long Padding_114;
  /* 0x0060 */ struct _KEVENT FxRemoveEvent;
  /* 0x0078 */ volatile long FxActivationCount;
  /* 0x007c */ volatile long FxSleepCount;
  /* 0x0080 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0088 */ unsigned long Level;
  /* 0x008c */ union _POWER_STATE CurrentPowerState;
  /* 0x0090 */ struct _PO_DEVICE_NOTIFY Notify;
  /* 0x00f8 */ struct _PO_IRP_MANAGER PoIrpManager;
  /* 0x0118 */ struct _UNICODE_STRING UniqueId;
  /* 0x0128 */ unsigned long PowerFlags;
  /* 0x012c */ enum _PNP_DEVNODE_STATE State;
  /* 0x0130 */ enum _PNP_DEVNODE_STATE PreviousState;
  /* 0x0134 */ enum _PNP_DEVNODE_STATE StateHistory[20];
  /* 0x0184 */ unsigned long StateHistoryEntry;
  /* 0x0188 */ long CompletionStatus;
  /* 0x018c */ unsigned long Flags;
  /* 0x0190 */ unsigned long UserFlags;
  /* 0x0194 */ unsigned long Problem;
  /* 0x0198 */ long ProblemStatus;
  /* 0x019c */ long Padding_115;
  /* 0x01a0 */ struct _CM_RESOURCE_LIST* ResourceList;
  /* 0x01a8 */ struct _CM_RESOURCE_LIST* ResourceListTranslated;
  /* 0x01b0 */ struct _DEVICE_OBJECT* DuplicatePDO;
  /* 0x01b8 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x01c0 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x01c4 */ unsigned long BusNumber;
  /* 0x01c8 */ enum _INTERFACE_TYPE ChildInterfaceType;
  /* 0x01cc */ unsigned long ChildBusNumber;
  /* 0x01d0 */ unsigned short ChildBusTypeIndex;
  /* 0x01d2 */ unsigned char RemovalPolicy;
  /* 0x01d3 */ unsigned char HardwareRemovalPolicy;
  /* 0x01d4 */ long Padding_116;
  /* 0x01d8 */ struct _LIST_ENTRY TargetDeviceNotify;
  /* 0x01e8 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x01f8 */ struct _LIST_ENTRY DeviceTranslatorList;
  /* 0x0208 */ unsigned short NoTranslatorMask;
  /* 0x020a */ unsigned short QueryTranslatorMask;
  /* 0x020c */ unsigned short NoArbiterMask;
  /* 0x020e */ unsigned short QueryArbiterMask;
  union
  {
    union
    {
      /* 0x0210 */ struct _DEVICE_NODE* LegacyDeviceNode;
      /* 0x0210 */ struct _DEVICE_RELATIONS* PendingDeviceRelations;
      /* 0x0210 */ void* Information;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ OverUsed1;
  union
  {
    /* 0x0218 */ struct _DEVICE_NODE* NextResourceDeviceNode;
  } /* size: 0x0008 */ OverUsed2;
  /* 0x0220 */ struct _CM_RESOURCE_LIST* BootResources;
  /* 0x0228 */ struct _CM_RESOURCE_LIST* BootResourcesTranslated;
  /* 0x0230 */ unsigned long CapabilityFlags;
  /* 0x0234 */ long Padding_117;
  struct
  {
    /* 0x0238 */ enum PROFILE_STATUS DockStatus;
    /* 0x0004 */ long Padding_118;
    /* 0x0240 */ struct _LIST_ENTRY ListEntry;
    /* 0x0250 */ unsigned short* SerialNumber;
  } /* size: 0x0020 */ DockInfo;
  /* 0x0258 */ unsigned long DisableableDepends;
  /* 0x025c */ long Padding_119;
  /* 0x0260 */ struct _LIST_ENTRY PendedSetInterfaceState;
  /* 0x0270 */ struct _LIST_ENTRY LegacyBusListEntry;
  /* 0x0280 */ unsigned long DriverUnloadRetryCount;
  /* 0x0284 */ long Padding_120;
  /* 0x0288 */ struct _DEVICE_NODE* PreviousParent;
  /* 0x0290 */ unsigned long DeletedChildren;
  /* 0x0294 */ unsigned long NumaNodeIndex;
  /* 0x0298 */ struct _GUID ContainerID;
  /* 0x02a8 */ unsigned char OverrideFlags;
  /* 0x02a9 */ char Padding_121[3];
  /* 0x02ac */ unsigned long DeviceIdsHash;
  /* 0x02b0 */ unsigned char RequiresUnloadedDriver;
  /* 0x02b1 */ char Padding_122[7];
  /* 0x02b8 */ struct _PENDING_RELATIONS_LIST_ENTRY* PendingEjectRelations;
  /* 0x02c0 */ unsigned long StateFlags;
  /* 0x02c4 */ long __PADDING__[1];
} DEVICE_NODE, *PDEVICE_NODE; /* size: 0x02c8 */

typedef union _KEXECUTE_OPTIONS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ExecuteDisable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ExecuteEnable : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char DisableThunkEmulation : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char Permanent : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char ExecuteDispatchEnable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char ImageDispatchEnable : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char DisableExceptionChainValidation : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Spare : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ volatile unsigned char ExecuteOptions;
    /* 0x0000 */ unsigned char ExecuteOptionsNV;
  }; /* size: 0x0001 */
} KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS; /* size: 0x0001 */

typedef struct _KPROCESS
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY ProfileListHead;
  /* 0x0028 */ unsigned __int64 DirectoryTableBase;
  /* 0x0030 */ struct _LIST_ENTRY ThreadListHead;
  /* 0x0040 */ unsigned long ProcessLock;
  /* 0x0044 */ unsigned long Spare0;
  /* 0x0048 */ struct _KAFFINITY_EX Affinity;
  /* 0x00f0 */ struct _LIST_ENTRY ReadyListHead;
  /* 0x0100 */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  /* 0x0108 */ volatile struct _KAFFINITY_EX ActiveProcessors;
  union
  {
    struct /* bitfield */
    {
      /* 0x01b0 */ long AutoAlignment : 1; /* bit position: 0 */
      /* 0x01b0 */ long DisableBoost : 1; /* bit position: 1 */
      /* 0x01b0 */ long DisableQuantum : 1; /* bit position: 2 */
      /* 0x01b0 */ long AffinitySet : 1; /* bit position: 3 */
      /* 0x01b0 */ unsigned long DeepFreeze : 1; /* bit position: 4 */
      /* 0x01b0 */ unsigned long TimerVirtualization : 1; /* bit position: 5 */
      /* 0x01b0 */ unsigned long CheckStackExtents : 1; /* bit position: 6 */
      /* 0x01b0 */ unsigned long ActiveGroupsMask : 20; /* bit position: 7 */
      /* 0x01b0 */ long ReservedFlags : 5; /* bit position: 27 */
    }; /* bitfield */
    /* 0x01b0 */ volatile long ProcessFlags;
  }; /* size: 0x0004 */
  /* 0x01b4 */ char BasePriority;
  /* 0x01b5 */ char QuantumReset;
  /* 0x01b6 */ unsigned char Visited;
  /* 0x01b7 */ union _KEXECUTE_OPTIONS Flags;
  /* 0x01b8 */ unsigned long ThreadSeed[20];
  /* 0x0208 */ unsigned short IdealNode[20];
  /* 0x0230 */ unsigned short IdealGlobalNode;
  /* 0x0232 */ unsigned short Spare1;
  /* 0x0234 */ volatile union _KSTACK_COUNT StackCount;
  /* 0x0238 */ struct _LIST_ENTRY ProcessListEntry;
  /* 0x0248 */ unsigned __int64 CycleTime;
  /* 0x0250 */ unsigned __int64 ContextSwitches;
  /* 0x0258 */ struct _KSCHEDULING_GROUP* SchedulingGroup;
  /* 0x0260 */ unsigned long FreezeCount;
  /* 0x0264 */ unsigned long KernelTime;
  /* 0x0268 */ unsigned long UserTime;
  /* 0x026c */ unsigned short LdtFreeSelectorHint;
  /* 0x026e */ unsigned short LdtTableLength;
  /* 0x0270 */ union _KGDTENTRY64 LdtSystemDescriptor;
  /* 0x0280 */ void* LdtBaseAddress;
  /* 0x0288 */ struct _FAST_MUTEX LdtProcessLock;
  /* 0x02c0 */ void* InstrumentationCallback;
} KPROCESS, *PKPROCESS; /* size: 0x02c8 */

typedef struct _MDL
{
  /* 0x0000 */ struct _MDL* Next;
  /* 0x0008 */ short Size;
  /* 0x000a */ short MdlFlags;
  /* 0x000c */ unsigned short AllocationProcessorNumber;
  /* 0x000e */ unsigned short Reserved;
  /* 0x0010 */ struct _EPROCESS* Process;
  /* 0x0018 */ void* MappedSystemVa;
  /* 0x0020 */ void* StartVa;
  /* 0x0028 */ unsigned long ByteCount;
  /* 0x002c */ unsigned long ByteOffset;
} MDL, *PMDL; /* size: 0x0030 */

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char SpareBits : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned char Padding0[4];
  /* 0x0008 */ void* Mutant;
  /* 0x0010 */ void* ImageBaseAddress;
  /* 0x0018 */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0020 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0028 */ void* SubSystemData;
  /* 0x0030 */ void* ProcessHeap;
  /* 0x0038 */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0040 */ void* AtlThunkSListPtr;
  /* 0x0048 */ void* IFEOKey;
  union
  {
    /* 0x0050 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0050 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0050 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0050 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0050 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0050 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0050 */ unsigned long ReservedBits0 : 27; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0054 */ unsigned char Padding1[4];
  union
  {
    /* 0x0058 */ void* KernelCallbackTable;
    /* 0x0058 */ void* UserSharedInfoPtr;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned long SystemReserved[1];
  /* 0x0064 */ unsigned long AtlThunkSListPtr32;
  /* 0x0068 */ void* ApiSetMap;
  /* 0x0070 */ unsigned long TlsExpansionCounter;
  /* 0x0074 */ unsigned char Padding2[4];
  /* 0x0078 */ void* TlsBitmap;
  /* 0x0080 */ unsigned long TlsBitmapBits[2];
  /* 0x0088 */ void* ReadOnlySharedMemoryBase;
  /* 0x0090 */ void* SparePvoid0;
  /* 0x0098 */ void** ReadOnlyStaticServerData;
  /* 0x00a0 */ void* AnsiCodePageData;
  /* 0x00a8 */ void* OemCodePageData;
  /* 0x00b0 */ void* UnicodeCaseTableData;
  /* 0x00b8 */ unsigned long NumberOfProcessors;
  /* 0x00bc */ unsigned long NtGlobalFlag;
  /* 0x00c0 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x00c8 */ unsigned __int64 HeapSegmentReserve;
  /* 0x00d0 */ unsigned __int64 HeapSegmentCommit;
  /* 0x00d8 */ unsigned __int64 HeapDeCommitTotalFreeThreshold;
  /* 0x00e0 */ unsigned __int64 HeapDeCommitFreeBlockThreshold;
  /* 0x00e8 */ unsigned long NumberOfHeaps;
  /* 0x00ec */ unsigned long MaximumNumberOfHeaps;
  /* 0x00f0 */ void** ProcessHeaps;
  /* 0x00f8 */ void* GdiSharedHandleTable;
  /* 0x0100 */ void* ProcessStarterHelper;
  /* 0x0108 */ unsigned long GdiDCAttributeList;
  /* 0x010c */ unsigned char Padding3[4];
  /* 0x0110 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x0118 */ unsigned long OSMajorVersion;
  /* 0x011c */ unsigned long OSMinorVersion;
  /* 0x0120 */ unsigned short OSBuildNumber;
  /* 0x0122 */ unsigned short OSCSDVersion;
  /* 0x0124 */ unsigned long OSPlatformId;
  /* 0x0128 */ unsigned long ImageSubsystem;
  /* 0x012c */ unsigned long ImageSubsystemMajorVersion;
  /* 0x0130 */ unsigned long ImageSubsystemMinorVersion;
  /* 0x0134 */ unsigned char Padding4[4];
  /* 0x0138 */ unsigned __int64 ActiveProcessAffinityMask;
  /* 0x0140 */ unsigned long GdiHandleBuffer[60];
  /* 0x0230 */ void* PostProcessInitRoutine /* function */;
  /* 0x0238 */ void* TlsExpansionBitmap;
  /* 0x0240 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x02c0 */ unsigned long SessionId;
  /* 0x02c4 */ unsigned char Padding5[4];
  /* 0x02c8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x02d0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x02d8 */ void* pShimData;
  /* 0x02e0 */ void* AppCompatInfo;
  /* 0x02e8 */ struct _UNICODE_STRING CSDVersion;
  /* 0x02f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x0300 */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0308 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0310 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0318 */ unsigned __int64 MinimumStackCommit;
  /* 0x0320 */ struct _FLS_CALLBACK_INFO* FlsCallback;
  /* 0x0328 */ struct _LIST_ENTRY FlsListHead;
  /* 0x0338 */ void* FlsBitmap;
  /* 0x0340 */ unsigned long FlsBitmapBits[4];
  /* 0x0350 */ unsigned long FlsHighIndex;
  /* 0x0354 */ long Padding_123;
  /* 0x0358 */ void* WerRegistrationData;
  /* 0x0360 */ void* WerShipAssertPtr;
  /* 0x0368 */ void* pUnused;
  /* 0x0370 */ void* pImageHeaderHash;
  union
  {
    /* 0x0378 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0378 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0378 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0378 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0378 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x037c */ unsigned char Padding6[4];
  /* 0x0380 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
} PEB, *PPEB; /* size: 0x0388 */

typedef struct _MMIO_TRACKER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned __int64 PageFrameIndex;
  /* 0x0018 */ unsigned __int64 NumberOfPages;
  union
  {
    /* 0x0020 */ void* BaseVa;
    /* 0x0020 */ unsigned long CacheFlushTimeStamp;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _MDL* Mdl;
  /* 0x0030 */ unsigned __int64 MdlPages;
  /* 0x0038 */ void* StackTrace[6];
  /* 0x0068 */ struct _IO_CACHE_INFO CacheInfo[1];
  /* 0x0069 */ char __PADDING__[7];
} MMIO_TRACKER, *PMMIO_TRACKER; /* size: 0x0070 */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0005 */ char Padding_124[3];
  /* 0x0008 */ void* SsHandle;
  /* 0x0010 */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0020 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x0030 */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0040 */ void* EntryInProgress;
  /* 0x0048 */ unsigned char ShutdownInProgress;
  /* 0x0049 */ char Padding_125[7];
  /* 0x0050 */ void* ShutdownThreadId;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0058 */

typedef struct _CURDIR
{
  /* 0x0000 */ struct _UNICODE_STRING DosPath;
  /* 0x0010 */ void* Handle;
} CURDIR, *PCURDIR; /* size: 0x0018 */

typedef struct _STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_126;
  /* 0x0008 */ char* Buffer;
} STRING, *PSTRING; /* size: 0x0010 */

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Length;
  /* 0x0004 */ unsigned long TimeStamp;
  /* 0x0008 */ struct _STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR; /* size: 0x0018 */

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  /* 0x0000 */ unsigned long MaximumLength;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DebugFlags;
  /* 0x0010 */ void* ConsoleHandle;
  /* 0x0018 */ unsigned long ConsoleFlags;
  /* 0x001c */ long Padding_127;
  /* 0x0020 */ void* StandardInput;
  /* 0x0028 */ void* StandardOutput;
  /* 0x0030 */ void* StandardError;
  /* 0x0038 */ struct _CURDIR CurrentDirectory;
  /* 0x0050 */ struct _UNICODE_STRING DllPath;
  /* 0x0060 */ struct _UNICODE_STRING ImagePathName;
  /* 0x0070 */ struct _UNICODE_STRING CommandLine;
  /* 0x0080 */ void* Environment;
  /* 0x0088 */ unsigned long StartingX;
  /* 0x008c */ unsigned long StartingY;
  /* 0x0090 */ unsigned long CountX;
  /* 0x0094 */ unsigned long CountY;
  /* 0x0098 */ unsigned long CountCharsX;
  /* 0x009c */ unsigned long CountCharsY;
  /* 0x00a0 */ unsigned long FillAttribute;
  /* 0x00a4 */ unsigned long WindowFlags;
  /* 0x00a8 */ unsigned long ShowWindowFlags;
  /* 0x00ac */ long Padding_128;
  /* 0x00b0 */ struct _UNICODE_STRING WindowTitle;
  /* 0x00c0 */ struct _UNICODE_STRING DesktopInfo;
  /* 0x00d0 */ struct _UNICODE_STRING ShellInfo;
  /* 0x00e0 */ struct _UNICODE_STRING RuntimeData;
  /* 0x00f0 */ struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  /* 0x03f0 */ unsigned __int64 EnvironmentSize;
  /* 0x03f8 */ unsigned __int64 EnvironmentVersion;
  /* 0x0400 */ void* PackageDependencyData;
  /* 0x0408 */ unsigned long ProcessGroupId;
  /* 0x040c */ long __PADDING__[1];
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS; /* size: 0x0410 */

typedef struct _OBJECT_HANDLE_COUNT_ENTRY
{
  /* 0x0000 */ struct _EPROCESS* Process;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long HandleCount : 24; /* bit position: 0 */
    /* 0x0008 */ unsigned long LockCount : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x000c */ long __PADDING__[1];
} OBJECT_HANDLE_COUNT_ENTRY, *POBJECT_HANDLE_COUNT_ENTRY; /* size: 0x0010 */

typedef struct _OBJECT_HANDLE_COUNT_DATABASE
{
  /* 0x0000 */ unsigned long CountEntries;
  /* 0x0004 */ long Padding_129;
  /* 0x0008 */ struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];
} OBJECT_HANDLE_COUNT_DATABASE, *POBJECT_HANDLE_COUNT_DATABASE; /* size: 0x0018 */

typedef struct _KQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY EntryListHead;
  /* 0x0028 */ volatile unsigned long CurrentCount;
  /* 0x002c */ unsigned long MaximumCount;
  /* 0x0030 */ struct _LIST_ENTRY ThreadListHead;
} KQUEUE, *PKQUEUE; /* size: 0x0040 */

typedef struct _RTL_BITMAP_EX
{
  /* 0x0000 */ unsigned __int64 SizeOfBitMap;
  /* 0x0008 */ unsigned __int64* Buffer;
} RTL_BITMAP_EX, *PRTL_BITMAP_EX; /* size: 0x0010 */

typedef struct _MI_SYSTEM_PTE_TYPE
{
  /* 0x0000 */ struct _RTL_BITMAP_EX Bitmap;
  /* 0x0010 */ struct _MMPTE* BasePte;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ enum _MI_SYSTEM_VA_TYPE VaType;
  /* 0x0020 */ unsigned long* FailureCount;
  /* 0x0028 */ unsigned long PteFailures;
  /* 0x002c */ long Padding_130;
  union
  {
    /* 0x0030 */ unsigned __int64 SpinLock;
    /* 0x0030 */ struct _FAST_MUTEX* GlobalMutex;
  }; /* size: 0x0008 */
  /* 0x0038 */ struct _MMSUPPORT* Vm;
  /* 0x0040 */ volatile unsigned __int64 TotalSystemPtes;
  /* 0x0048 */ unsigned __int64 Hint;
  /* 0x0050 */ volatile struct _MI_CACHED_PTE* CachedPtes;
  /* 0x0058 */ volatile unsigned __int64 TotalFreeSystemPtes;
  /* 0x0060 */ volatile long CachedPteCount;
  /* 0x0064 */ long __PADDING__[1];
} MI_SYSTEM_PTE_TYPE, *PMI_SYSTEM_PTE_TYPE; /* size: 0x0068 */

typedef struct _MMSECURE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ReadOnly : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadWrite : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long SecNoChange : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoDelete : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long RequiresPteReversal : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long ExclusiveSecure : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long Spare : 6; /* bit position: 6 */
  }; /* bitfield */
} MMSECURE_FLAGS, *PMMSECURE_FLAGS; /* size: 0x0004 */

typedef struct _MMADDRESS_LIST
{
  union
  {
    union
    {
      /* 0x0000 */ struct _MMSECURE_FLAGS Flags;
      /* 0x0000 */ unsigned long FlagsLong;
      /* 0x0000 */ void* StartVa;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  /* 0x0008 */ void* EndVa;
} MMADDRESS_LIST, *PMMADDRESS_LIST; /* size: 0x0010 */

typedef struct _WHEAP_INFO_BLOCK
{
  /* 0x0000 */ unsigned long ErrorSourceCount;
  /* 0x0004 */ long Padding_131;
  /* 0x0008 */ struct _WHEAP_ERROR_SOURCE_TABLE* ErrorSourceTable;
  /* 0x0010 */ struct _WHEAP_WORK_QUEUE* WorkQueue;
} WHEAP_INFO_BLOCK, *PWHEAP_INFO_BLOCK; /* size: 0x0018 */

typedef struct _RTL_CRITICAL_SECTION
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
  /* 0x0008 */ long LockCount;
  /* 0x000c */ long RecursionCount;
  /* 0x0010 */ void* OwningThread;
  /* 0x0018 */ void* LockSemaphore;
  /* 0x0020 */ unsigned __int64 SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; /* size: 0x0028 */

typedef struct _MMPTE_HARDWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Dirty1 : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Unused : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 36; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 reserved1 : 4; /* bit position: 48 */
    /* 0x0000 */ unsigned __int64 SoftwareWsIndex : 11; /* bit position: 52 */
    /* 0x0000 */ unsigned __int64 NoExecute : 1; /* bit position: 63 */
  }; /* bitfield */
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; /* size: 0x0008 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ long Padding_132;
  /* 0x0008 */ struct _RTL_CRITICAL_SECTION* CriticalSection;
  /* 0x0010 */ struct _LIST_ENTRY ProcessLocksList;
  /* 0x0020 */ unsigned long EntryCount;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ unsigned short CreatorBackTraceIndexHigh;
  /* 0x002e */ unsigned short SpareUSHORT;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG; /* size: 0x0030 */

typedef struct _PCW_COUNTER_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
} PCW_COUNTER_INFORMATION, *PPCW_COUNTER_INFORMATION; /* size: 0x0010 */

typedef struct _IO_COMPLETION_CONTEXT
{
  /* 0x0000 */ void* Port;
  /* 0x0008 */ void* Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT; /* size: 0x0010 */

struct _ACTIVATION_CONTEXT_DATA;

struct _ASSEMBLY_STORAGE_MAP;

struct _FLS_CALLBACK_INFO;

typedef struct _OWNER_ENTRY
{
  /* 0x0000 */ unsigned __int64 OwnerThread;
  union
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long IoPriorityBoosted : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned long OwnerReferenced : 1; /* bit position: 1 */
      /* 0x0008 */ unsigned long OwnerCount : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0008 */ unsigned long TableSize;
  }; /* size: 0x0004 */
  /* 0x000c */ long __PADDING__[1];
} OWNER_ENTRY, *POWNER_ENTRY; /* size: 0x0010 */

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x0008 */ struct _LIST_ENTRY FrameListCache;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long NextCookieSequenceNumber;
  /* 0x0020 */ unsigned long StackId;
  /* 0x0024 */ long __PADDING__[1];
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0028 */

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;
  /* 0x0008 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME; /* size: 0x0018 */

typedef struct _ALPC_HANDLE_TABLE
{
  /* 0x0000 */ struct _ALPC_HANDLE_ENTRY* Handles;
  /* 0x0008 */ unsigned long TotalHandles;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ struct _EX_PUSH_LOCK Lock;
} ALPC_HANDLE_TABLE, *PALPC_HANDLE_TABLE; /* size: 0x0018 */

typedef struct _QUAD
{
  union
  {
    /* 0x0000 */ __int64 UseThisFieldToCopy;
    /* 0x0000 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
} QUAD, *PQUAD; /* size: 0x0008 */

typedef struct _EXT_DELETE_PARAMETERS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* DeleteCallback /* function */;
  /* 0x0010 */ void* DeleteContext;
} EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS; /* size: 0x0018 */

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_133;
  /* 0x0008 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0010 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x0018 */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_134;
  /* 0x0008 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0010 */

struct VACB_LEVEL_ALLOCATION_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY VacbLevelList;
  /* 0x0010 */ void* VacbLevelWithBcbListHeads;
  /* 0x0018 */ unsigned long VacbLevelsAllocated;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef struct _PROC_PERF_HISTORY_ENTRY
{
  /* 0x0000 */ unsigned short Utility;
  /* 0x0002 */ unsigned short AffinitizedUtility;
  /* 0x0004 */ unsigned char Frequency;
  /* 0x0005 */ unsigned char Reserved;
} PROC_PERF_HISTORY_ENTRY, *PPROC_PERF_HISTORY_ENTRY; /* size: 0x0006 */

typedef struct _HIVE_WRITE_WAIT_QUEUE
{
  /* 0x0000 */ struct _ETHREAD* ActiveThread;
  /* 0x0008 */ struct _HIVE_WAIT_PACKET* WaitList;
  /* 0x0010 */ volatile unsigned long OwnerBoosted;
  /* 0x0014 */ long __PADDING__[1];
} HIVE_WRITE_WAIT_QUEUE, *PHIVE_WRITE_WAIT_QUEUE; /* size: 0x0018 */

typedef struct _KSHARED_READY_QUEUE
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned long ReadySummary;
  /* 0x000c */ long Padding_135;
  /* 0x0010 */ struct _LIST_ENTRY ReadyListHead[32];
  /* 0x0210 */ char RunningSummary[64];
  /* 0x0250 */ unsigned long Span;
  /* 0x0254 */ unsigned long LowProcIndex;
  /* 0x0258 */ unsigned long QueueIndex;
  /* 0x025c */ unsigned long ProcCount;
  /* 0x0260 */ unsigned __int64 Affinity;
} KSHARED_READY_QUEUE, *PKSHARED_READY_QUEUE; /* size: 0x0268 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0020 */ unsigned long BucketIndex;
  /* 0x0024 */ long __PADDING__[1];
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR; /* size: 0x0028 */

typedef struct _RTL_DYNAMIC_HASH_TABLE
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Shift;
  /* 0x0008 */ unsigned long TableSize;
  /* 0x000c */ unsigned long Pivot;
  /* 0x0010 */ unsigned long DivisorMask;
  /* 0x0014 */ unsigned long NumEntries;
  /* 0x0018 */ unsigned long NonEmptyBuckets;
  /* 0x001c */ unsigned long NumEnumerators;
  /* 0x0020 */ void* Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE; /* size: 0x0028 */

typedef struct _IMAGE_OPTIONAL_HEADER64
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned __int64 ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned __int64 SizeOfStackReserve;
  /* 0x0050 */ unsigned __int64 SizeOfStackCommit;
  /* 0x0058 */ unsigned __int64 SizeOfHeapReserve;
  /* 0x0060 */ unsigned __int64 SizeOfHeapCommit;
  /* 0x0068 */ unsigned long LoaderFlags;
  /* 0x006c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0070 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64; /* size: 0x00f0 */

typedef struct _IMAGE_NT_HEADERS64
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64; /* size: 0x0108 */

typedef struct _HANDLE_TABLE_ENTRY_INFO
{
  /* 0x0000 */ unsigned long AuditMask;
} HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO; /* size: 0x0004 */

typedef struct _OB_DUPLICATE_OBJECT_STATE
{
  /* 0x0000 */ struct _EPROCESS* SourceProcess;
  /* 0x0008 */ void* SourceHandle;
  /* 0x0010 */ void* Object;
  /* 0x0018 */ unsigned long TargetAccess;
  /* 0x001c */ struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo;
  /* 0x0020 */ unsigned long HandleAttributes;
  /* 0x0024 */ long __PADDING__[1];
} OB_DUPLICATE_OBJECT_STATE, *POB_DUPLICATE_OBJECT_STATE; /* size: 0x0028 */

typedef struct _IO_CLIENT_EXTENSION
{
  /* 0x0000 */ struct _IO_CLIENT_EXTENSION* NextExtension;
  /* 0x0008 */ void* ClientIdentificationAddress;
} IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION; /* size: 0x0010 */

typedef struct _KSCB
{
  /* 0x0000 */ unsigned __int64 GenerationCycles;
  /* 0x0008 */ unsigned __int64 UnderQuotaCycleTarget;
  /* 0x0010 */ unsigned __int64 RankCycleTarget;
  /* 0x0018 */ unsigned __int64 LongTermCycles;
  /* 0x0020 */ unsigned __int64 LastReportedCycles;
  /* 0x0028 */ volatile unsigned __int64 OverQuotaHistory;
  /* 0x0030 */ unsigned __int64 ReadyTime;
  /* 0x0038 */ unsigned __int64 InsertTime;
  /* 0x0040 */ struct _LIST_ENTRY PerProcessorList;
  /* 0x0050 */ struct _RTL_BALANCED_NODE QueueNode;
  struct /* bitfield */
  {
    /* 0x0068 */ unsigned char Inserted : 1; /* bit position: 0 */
    /* 0x0068 */ unsigned char OverQuota : 1; /* bit position: 1 */
    /* 0x0068 */ unsigned char HardCap : 1; /* bit position: 2 */
    /* 0x0068 */ unsigned char RankBias : 1; /* bit position: 3 */
    /* 0x0068 */ unsigned char Spare1 : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0069 */ unsigned char Spare2;
  /* 0x006a */ unsigned short ReadySummary;
  /* 0x006c */ unsigned long Rank;
  /* 0x0070 */ struct _LIST_ENTRY ReadyListHead[16];
} KSCB, *PKSCB; /* size: 0x0170 */

typedef struct _KSCHEDULING_GROUP
{
  /* 0x0000 */ unsigned short Value;
  /* 0x0002 */ unsigned char Type;
  /* 0x0003 */ unsigned char HardCap;
  /* 0x0004 */ unsigned long RelativeWeight;
  /* 0x0008 */ unsigned __int64 QueryHistoryTimeStamp;
  /* 0x0010 */ __int64 NotificationCycles;
  /* 0x0018 */ struct _LIST_ENTRY SchedulingGroupList;
  /* 0x0028 */ struct _KDPC* NotificationDpc;
  /* 0x0030 */ long Padding_136[4];
  /* 0x0040 */ struct _KSCB PerProcessor[1];
  /* 0x01b0 */ long __PADDING__[4];
} KSCHEDULING_GROUP, *PKSCHEDULING_GROUP; /* size: 0x01c0 */

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET; /* size: 0x0014 */

typedef struct _PRIVATE_CACHE_MAP_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long DontUse : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadAheadActive : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long ReadAheadEnabled : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long PagePriority : 3; /* bit position: 18 */
    /* 0x0000 */ unsigned long PipelineReadAheads : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long Available : 10; /* bit position: 22 */
  }; /* bitfield */
} PRIVATE_CACHE_MAP_FLAGS, *PPRIVATE_CACHE_MAP_FLAGS; /* size: 0x0004 */

typedef struct _PRIVATE_CACHE_MAP
{
  union
  {
    /* 0x0000 */ short NodeTypeCode;
    /* 0x0000 */ struct _PRIVATE_CACHE_MAP_FLAGS Flags;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long ReadAheadMask;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ union _LARGE_INTEGER FileOffset1;
  /* 0x0018 */ union _LARGE_INTEGER BeyondLastByte1;
  /* 0x0020 */ union _LARGE_INTEGER FileOffset2;
  /* 0x0028 */ union _LARGE_INTEGER BeyondLastByte2;
  /* 0x0030 */ unsigned long SequentialReadCount;
  /* 0x0034 */ unsigned long ReadAheadLength;
  /* 0x0038 */ union _LARGE_INTEGER ReadAheadOffset;
  /* 0x0040 */ union _LARGE_INTEGER ReadAheadBeyondLastByte;
  /* 0x0048 */ unsigned __int64 PrevReadAheadBeyondLastByte;
  /* 0x0050 */ unsigned __int64 ReadAheadSpinLock;
  /* 0x0058 */ unsigned long PipelinedReadAheadRequestSize;
  /* 0x005c */ unsigned long ReadAheadGrowth;
  /* 0x0060 */ struct _LIST_ENTRY PrivateLinks;
  /* 0x0070 */ void* ReadAheadWorkItem;
} PRIVATE_CACHE_MAP, *PPRIVATE_CACHE_MAP; /* size: 0x0078 */

typedef struct _SHARED_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned long OpenCount;
  /* 0x0008 */ union _LARGE_INTEGER FileSize;
  /* 0x0010 */ struct _LIST_ENTRY BcbList;
  /* 0x0020 */ union _LARGE_INTEGER SectionSize;
  /* 0x0028 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0030 */ union _LARGE_INTEGER ValidDataGoal;
  /* 0x0038 */ struct _VACB* InitialVacbs[4];
  /* 0x0058 */ struct _VACB** Vacbs;
  /* 0x0060 */ struct _EX_FAST_REF FileObjectFastRef;
  /* 0x0068 */ struct _EX_PUSH_LOCK VacbLock;
  /* 0x0070 */ unsigned long DirtyPages;
  /* 0x0074 */ long Padding_137;
  /* 0x0078 */ struct _LIST_ENTRY LoggedStreamLinks;
  /* 0x0088 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0098 */ unsigned long Flags;
  /* 0x009c */ long Status;
  /* 0x00a0 */ struct _MBCB* Mbcb;
  /* 0x00a8 */ void* Section;
  /* 0x00b0 */ struct _KEVENT* CreateEvent;
  /* 0x00b8 */ struct _KEVENT* WaitOnActiveCount;
  /* 0x00c0 */ unsigned long PagesToWrite;
  /* 0x00c4 */ long Padding_138;
  /* 0x00c8 */ __int64 BeyondLastFlush;
  /* 0x00d0 */ struct _CACHE_MANAGER_CALLBACKS* Callbacks;
  /* 0x00d8 */ void* LazyWriteContext;
  /* 0x00e0 */ struct _LIST_ENTRY PrivateList;
  union
  {
    /* 0x00f0 */ struct _LOGGED_STREAM_CALLBACK_V1 V1;
    /* 0x00f0 */ struct _LOGGED_STREAM_CALLBACK_V2 V2;
  }; /* size: 0x0010 */
  /* 0x0100 */ union _LARGE_INTEGER LargestLSN;
  /* 0x0108 */ unsigned long DirtyPageThreshold;
  /* 0x010c */ unsigned long LazyWritePassCount;
  /* 0x0110 */ struct _CACHE_UNINITIALIZE_EVENT* UninitializeEvent;
  /* 0x0118 */ struct _FAST_MUTEX BcbLock;
  /* 0x0150 */ union _LARGE_INTEGER LastUnmapBehindOffset;
  /* 0x0158 */ struct _KEVENT Event;
  /* 0x0170 */ union _LARGE_INTEGER HighWaterMappingOffset;
  /* 0x0178 */ struct _PRIVATE_CACHE_MAP PrivateCacheMap;
  /* 0x01f0 */ void* WriteBehindWorkQueueEntry;
  /* 0x01f8 */ struct _VOLUME_CACHE_MAP* VolumeCacheMap;
  /* 0x0200 */ unsigned long ProcImagePathHash;
  /* 0x0204 */ unsigned long WritesInProgress;
} SHARED_CACHE_MAP, *PSHARED_CACHE_MAP; /* size: 0x0208 */

typedef union _MM_PAGE_ACCESS_INFO_FLAGS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Image : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 11 */
      }; /* bitfield */
    } /* size: 0x0004 */ File;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Spare1 : 2; /* bit position: 10 */
      }; /* bitfield */
    } /* size: 0x0004 */ Private;
  }; /* size: 0x0004 */
} MM_PAGE_ACCESS_INFO_FLAGS, *PMM_PAGE_ACCESS_INFO_FLAGS; /* size: 0x0004 */

typedef struct _KTRAP_FRAME
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5;
  /* 0x0028 */ char PreviousMode;
  /* 0x0029 */ unsigned char PreviousIrql;
  /* 0x002a */ unsigned char FaultIndicator;
  /* 0x002b */ unsigned char ExceptionActive;
  /* 0x002c */ unsigned long MxCsr;
  /* 0x0030 */ unsigned __int64 Rax;
  /* 0x0038 */ unsigned __int64 Rcx;
  /* 0x0040 */ unsigned __int64 Rdx;
  /* 0x0048 */ unsigned __int64 R8;
  /* 0x0050 */ unsigned __int64 R9;
  /* 0x0058 */ unsigned __int64 R10;
  /* 0x0060 */ unsigned __int64 R11;
  union
  {
    /* 0x0068 */ unsigned __int64 GsBase;
    /* 0x0068 */ unsigned __int64 GsSwap;
  }; /* size: 0x0008 */
  /* 0x0070 */ struct _M128A Xmm0;
  /* 0x0080 */ struct _M128A Xmm1;
  /* 0x0090 */ struct _M128A Xmm2;
  /* 0x00a0 */ struct _M128A Xmm3;
  /* 0x00b0 */ struct _M128A Xmm4;
  /* 0x00c0 */ struct _M128A Xmm5;
  union
  {
    /* 0x00d0 */ unsigned __int64 FaultAddress;
    /* 0x00d0 */ unsigned __int64 ContextRecord;
    /* 0x00d0 */ unsigned __int64 TimeStampCKCL;
  }; /* size: 0x0008 */
  /* 0x00d8 */ unsigned __int64 Dr0;
  /* 0x00e0 */ unsigned __int64 Dr1;
  /* 0x00e8 */ unsigned __int64 Dr2;
  /* 0x00f0 */ unsigned __int64 Dr3;
  /* 0x00f8 */ unsigned __int64 Dr6;
  /* 0x0100 */ unsigned __int64 Dr7;
  union
  {
    struct
    {
      /* 0x0108 */ unsigned __int64 DebugControl;
      /* 0x0110 */ unsigned __int64 LastBranchToRip;
      /* 0x0118 */ unsigned __int64 LastBranchFromRip;
      /* 0x0120 */ unsigned __int64 LastExceptionToRip;
      /* 0x0128 */ unsigned __int64 LastExceptionFromRip;
    }; /* size: 0x0028 */
    struct
    {
      /* 0x0108 */ unsigned __int64 LastBranchControl;
      /* 0x0110 */ unsigned long LastBranchMSR;
    }; /* size: 0x000c */
  }; /* size: 0x0028 */
  /* 0x0130 */ unsigned short SegDs;
  /* 0x0132 */ unsigned short SegEs;
  /* 0x0134 */ unsigned short SegFs;
  /* 0x0136 */ unsigned short SegGs;
  /* 0x0138 */ unsigned __int64 TrapFrame;
  /* 0x0140 */ unsigned __int64 Rbx;
  /* 0x0148 */ unsigned __int64 Rdi;
  /* 0x0150 */ unsigned __int64 Rsi;
  /* 0x0158 */ unsigned __int64 Rbp;
  union
  {
    /* 0x0160 */ unsigned __int64 ErrorCode;
    /* 0x0160 */ unsigned __int64 ExceptionFrame;
    /* 0x0160 */ unsigned __int64 TimeStampKlog;
  }; /* size: 0x0008 */
  /* 0x0168 */ unsigned __int64 Rip;
  /* 0x0170 */ unsigned short SegCs;
  /* 0x0172 */ unsigned char Fill0;
  /* 0x0173 */ unsigned char Logging;
  /* 0x0174 */ unsigned short Fill1[2];
  /* 0x0178 */ unsigned long EFlags;
  /* 0x017c */ unsigned long Fill2;
  /* 0x0180 */ unsigned __int64 Rsp;
  /* 0x0188 */ unsigned short SegSs;
  /* 0x018a */ unsigned short Fill3;
  /* 0x018c */ unsigned long Fill4;
} KTRAP_FRAME, *PKTRAP_FRAME; /* size: 0x0190 */

typedef struct _KPRIQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY EntryListHead[32];
  /* 0x0218 */ volatile long CurrentCount[32];
  /* 0x0298 */ unsigned long MaximumCount;
  /* 0x029c */ long Padding_139;
  /* 0x02a0 */ struct _LIST_ENTRY ThreadListHead;
} KPRIQUEUE, *PKPRIQUEUE; /* size: 0x02b0 */

typedef struct _EX_WORK_QUEUE
{
  /* 0x0000 */ struct _KPRIQUEUE WorkPriQueue;
  /* 0x02b0 */ volatile unsigned long WorkItemsProcessed;
  /* 0x02b4 */ unsigned long WorkItemsProcessedLastPass;
  /* 0x02b8 */ volatile long ThreadCount;
  /* 0x02bc */ volatile unsigned char TryFailed;
  /* 0x02bd */ char __PADDING__[3];
} EX_WORK_QUEUE, *PEX_WORK_QUEUE; /* size: 0x02c0 */

typedef struct _KSEMAPHORE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ long Limit;
  /* 0x001c */ long __PADDING__[1];
} KSEMAPHORE, *PKSEMAPHORE; /* size: 0x0020 */

typedef union _PS_CLIENT_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ unsigned __int64 ImpersonationData;
    /* 0x0000 */ void* ImpersonationToken;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ImpersonationLevel : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 EffectiveOnly : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT; /* size: 0x0008 */

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    /* 0x0000 */ unsigned __int64 Count;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0008 */
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; /* size: 0x0008 */

typedef struct _ETHREAD
{
  /* 0x0000 */ struct _KTHREAD Tcb;
  /* 0x05d0 */ union _LARGE_INTEGER CreateTime;
  union
  {
    /* 0x05d8 */ union _LARGE_INTEGER ExitTime;
    /* 0x05d8 */ struct _LIST_ENTRY KeyedWaitChain;
  }; /* size: 0x0010 */
  /* 0x05e8 */ void* ChargeOnlySession;
  union
  {
    /* 0x05f0 */ struct _LIST_ENTRY PostBlockList;
    struct
    {
      /* 0x05f0 */ void* ForwardLinkShadow;
      /* 0x05f8 */ void* StartAddress;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0600 */ struct _TERMINATION_PORT* TerminationPort;
    /* 0x0600 */ struct _ETHREAD* ReaperLink;
    /* 0x0600 */ void* KeyedWaitValue;
  }; /* size: 0x0008 */
  /* 0x0608 */ unsigned __int64 ActiveTimerListLock;
  /* 0x0610 */ struct _LIST_ENTRY ActiveTimerListHead;
  /* 0x0620 */ struct _CLIENT_ID Cid;
  union
  {
    /* 0x0630 */ struct _KSEMAPHORE KeyedWaitSemaphore;
    /* 0x0630 */ struct _KSEMAPHORE AlpcWaitSemaphore;
  }; /* size: 0x0020 */
  /* 0x0650 */ union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
  /* 0x0658 */ struct _LIST_ENTRY IrpList;
  /* 0x0668 */ unsigned __int64 TopLevelIrp;
  /* 0x0670 */ struct _DEVICE_OBJECT* DeviceToVerify;
  /* 0x0678 */ void* Win32StartAddress;
  /* 0x0680 */ void* LegacyPowerObject;
  /* 0x0688 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0698 */ struct _EX_RUNDOWN_REF RundownProtect;
  /* 0x06a0 */ struct _EX_PUSH_LOCK ThreadLock;
  /* 0x06a8 */ unsigned long ReadClusterSize;
  /* 0x06ac */ volatile long MmLockOrdering;
  /* 0x06b0 */ volatile long CmLockOrdering;
  union
  {
    /* 0x06b4 */ unsigned long CrossThreadFlags;
    struct /* bitfield */
    {
      /* 0x06b4 */ unsigned long Terminated : 1; /* bit position: 0 */
      /* 0x06b4 */ unsigned long ThreadInserted : 1; /* bit position: 1 */
      /* 0x06b4 */ unsigned long HideFromDebugger : 1; /* bit position: 2 */
      /* 0x06b4 */ unsigned long ActiveImpersonationInfo : 1; /* bit position: 3 */
      /* 0x06b4 */ unsigned long HardErrorsAreDisabled : 1; /* bit position: 4 */
      /* 0x06b4 */ unsigned long BreakOnTermination : 1; /* bit position: 5 */
      /* 0x06b4 */ unsigned long SkipCreationMsg : 1; /* bit position: 6 */
      /* 0x06b4 */ unsigned long SkipTerminationMsg : 1; /* bit position: 7 */
      /* 0x06b4 */ unsigned long CopyTokenOnOpen : 1; /* bit position: 8 */
      /* 0x06b4 */ unsigned long ThreadIoPriority : 3; /* bit position: 9 */
      /* 0x06b4 */ unsigned long ThreadPagePriority : 3; /* bit position: 12 */
      /* 0x06b4 */ unsigned long RundownFail : 1; /* bit position: 15 */
      /* 0x06b4 */ unsigned long UmsForceQueueTermination : 1; /* bit position: 16 */
      /* 0x06b4 */ unsigned long ReservedCrossThreadFlags : 15; /* bit position: 17 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x06b8 */ unsigned long SameThreadPassiveFlags;
    struct /* bitfield */
    {
      /* 0x06b8 */ unsigned long ActiveExWorker : 1; /* bit position: 0 */
      /* 0x06b8 */ unsigned long MemoryMaker : 1; /* bit position: 1 */
      /* 0x06b8 */ unsigned long ClonedThread : 1; /* bit position: 2 */
      /* 0x06b8 */ unsigned long KeyedEventInUse : 1; /* bit position: 3 */
      /* 0x06b8 */ unsigned long SelfTerminate : 1; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x06bc */ unsigned long SameThreadApcFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x06bc */ unsigned char HardFaultBehavior : 1; /* bit position: 0 */
        /* 0x06bc */ volatile unsigned char StartAddressInvalid : 1; /* bit position: 1 */
        /* 0x06bc */ unsigned char EtwCalloutActive : 1; /* bit position: 2 */
        /* 0x06bc */ unsigned char OwnsProcessWorkingSetExclusive : 1; /* bit position: 3 */
        /* 0x06bc */ unsigned char OwnsProcessWorkingSetShared : 1; /* bit position: 4 */
        /* 0x06bc */ unsigned char OwnsSystemCacheWorkingSetExclusive : 1; /* bit position: 5 */
        /* 0x06bc */ unsigned char OwnsSystemCacheWorkingSetShared : 1; /* bit position: 6 */
        /* 0x06bc */ unsigned char OwnsSessionWorkingSetExclusive : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x06bd */ unsigned char OwnsSessionWorkingSetShared : 1; /* bit position: 0 */
        /* 0x06bd */ unsigned char OwnsProcessAddressSpaceExclusive : 1; /* bit position: 1 */
        /* 0x06bd */ unsigned char OwnsProcessAddressSpaceShared : 1; /* bit position: 2 */
        /* 0x06bd */ unsigned char SuppressSymbolLoad : 1; /* bit position: 3 */
        /* 0x06bd */ unsigned char Prefetching : 1; /* bit position: 4 */
        /* 0x06bd */ unsigned char OwnsVadExclusive : 1; /* bit position: 5 */
        /* 0x06bd */ unsigned char OwnsChangeControlAreaExclusive : 1; /* bit position: 6 */
        /* 0x06bd */ unsigned char OwnsChangeControlAreaShared : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x06be */ unsigned char OwnsPagedPoolWorkingSetExclusive : 1; /* bit position: 0 */
        /* 0x06be */ unsigned char OwnsPagedPoolWorkingSetShared : 1; /* bit position: 1 */
        /* 0x06be */ unsigned char OwnsSystemPtesWorkingSetExclusive : 1; /* bit position: 2 */
        /* 0x06be */ unsigned char OwnsSystemPtesWorkingSetShared : 1; /* bit position: 3 */
        /* 0x06be */ unsigned char TrimTrigger : 2; /* bit position: 4 */
        /* 0x06be */ unsigned char Spare2 : 2; /* bit position: 6 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x06bf */ unsigned char SystemPagePriorityActive : 1; /* bit position: 0 */
        /* 0x06bf */ unsigned char SystemPagePriority : 3; /* bit position: 1 */
        /* 0x06bf */ unsigned char Spare3 : 4; /* bit position: 4 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x06c0 */ unsigned char CacheManagerActive;
  /* 0x06c1 */ unsigned char DisablePageFaultClustering;
  /* 0x06c2 */ unsigned char ActiveFaultCount;
  /* 0x06c3 */ unsigned char LockOrderState;
  /* 0x06c4 */ long Padding_140;
  /* 0x06c8 */ unsigned __int64 AlpcMessageId;
  union
  {
    /* 0x06d0 */ void* AlpcMessage;
    /* 0x06d0 */ unsigned long AlpcReceiveAttributeSet;
  }; /* size: 0x0008 */
  /* 0x06d8 */ long ExitStatus;
  /* 0x06dc */ long Padding_141;
  /* 0x06e0 */ struct _LIST_ENTRY AlpcWaitListEntry;
  /* 0x06f0 */ unsigned long CacheManagerCount;
  /* 0x06f4 */ unsigned long IoBoostCount;
  /* 0x06f8 */ struct _LIST_ENTRY BoostList;
  /* 0x0708 */ struct _LIST_ENTRY DeboostList;
  /* 0x0718 */ unsigned __int64 BoostListLock;
  /* 0x0720 */ unsigned __int64 IrpListLock;
  /* 0x0728 */ void* ReservedForSynchTracking;
  /* 0x0730 */ struct _SINGLE_LIST_ENTRY CmCallbackListHead;
  /* 0x0738 */ const struct _GUID* ActivityId;
  /* 0x0740 */ struct _SINGLE_LIST_ENTRY SeLearningModeListHead;
  /* 0x0748 */ void* VerifierContext;
  /* 0x0750 */ unsigned long KernelStackReference;
  /* 0x0754 */ long Padding_142;
  /* 0x0758 */ void* AdjustedClientToken;
  /* 0x0760 */ unsigned long UserFsBase;
  /* 0x0764 */ long Padding_143;
  /* 0x0768 */ unsigned __int64 UserGsBase;
  /* 0x0770 */ void* PicoContext;
} ETHREAD, *PETHREAD; /* size: 0x0778 */

typedef struct _KALPC_REGION
{
  /* 0x0000 */ struct _LIST_ENTRY RegionListEntry;
  /* 0x0010 */ struct _KALPC_SECTION* Section;
  /* 0x0018 */ unsigned __int64 Offset;
  /* 0x0020 */ unsigned __int64 Size;
  /* 0x0028 */ unsigned __int64 ViewSize;
  union
  {
    struct
    {
      /* 0x0030 */ unsigned long Secure : 1; /* bit position: 0 */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x0034 */ unsigned long NumberOfViews;
  /* 0x0038 */ struct _LIST_ENTRY ViewListHead;
  /* 0x0048 */ struct _KALPC_VIEW* ReadOnlyView;
  /* 0x0050 */ struct _KALPC_VIEW* ReadWriteView;
} KALPC_REGION, *PKALPC_REGION; /* size: 0x0058 */

typedef struct _DRIVER_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_144;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long Padding_145;
  /* 0x0018 */ void* DriverStart;
  /* 0x0020 */ unsigned long DriverSize;
  /* 0x0024 */ long Padding_146;
  /* 0x0028 */ void* DriverSection;
  /* 0x0030 */ struct _DRIVER_EXTENSION* DriverExtension;
  /* 0x0038 */ struct _UNICODE_STRING DriverName;
  /* 0x0048 */ struct _UNICODE_STRING* HardwareDatabase;
  /* 0x0050 */ struct _FAST_IO_DISPATCH* FastIoDispatch;
  /* 0x0058 */ void* DriverInit /* function */;
  /* 0x0060 */ void* DriverStartIo /* function */;
  /* 0x0068 */ void* DriverUnload /* function */;
  /* 0x0070 */ void* MajorFunction[28] /* function */;
} DRIVER_OBJECT, *PDRIVER_OBJECT; /* size: 0x0150 */

typedef struct _KTHREAD_COUNTERS
{
  /* 0x0000 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0008 */ struct _THREAD_PERFORMANCE_DATA* UserData;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long ContextSwitches;
  /* 0x0018 */ unsigned __int64 CycleTimeBias;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING HwCounter[16];
} KTHREAD_COUNTERS, *PKTHREAD_COUNTERS; /* size: 0x01a8 */

typedef struct _PERFINFO_PPM_STATE_SELECTION
{
  /* 0x0000 */ unsigned long SelectedState;
  /* 0x0004 */ unsigned long VetoedStates;
  /* 0x0008 */ unsigned long VetoReason[1];
} PERFINFO_PPM_STATE_SELECTION, *PPERFINFO_PPM_STATE_SELECTION; /* size: 0x000c */

typedef struct _DBGKD_SWITCH_PARTITION
{
  /* 0x0000 */ unsigned long Partition;
} DBGKD_SWITCH_PARTITION, *PDBGKD_SWITCH_PARTITION; /* size: 0x0004 */

typedef struct _XSTATE_SAVE
{
  /* 0x0000 */ struct _XSTATE_SAVE* Prev;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x0010 */ unsigned char Level;
  /* 0x0011 */ char Padding_147[7];
  /* 0x0018 */ struct _XSTATE_CONTEXT XStateContext;
} XSTATE_SAVE, *PXSTATE_SAVE; /* size: 0x0038 */

typedef struct _PPM_SELECTION_STATISTICS
{
  /* 0x0000 */ unsigned __int64 PlatformOnlyCount;
  /* 0x0008 */ unsigned __int64 PreVetoCount;
  /* 0x0010 */ unsigned __int64 VetoCount;
  /* 0x0018 */ unsigned __int64 IdleDurationCount;
  /* 0x0020 */ unsigned __int64 LatencyCount;
  /* 0x0028 */ unsigned __int64 InterruptibleCount;
  /* 0x0030 */ unsigned __int64 DeviceDependencyCount;
  /* 0x0038 */ unsigned __int64 ProcessorDependencyCount;
  /* 0x0040 */ unsigned __int64 WrongProcessorCount;
  /* 0x0048 */ unsigned __int64 LegacyOverrideCount;
  /* 0x0050 */ unsigned __int64 CstateCheckCount;
  /* 0x0058 */ unsigned __int64 NoCStateCount;
  /* 0x0060 */ unsigned __int64 SelectedCount;
} PPM_SELECTION_STATISTICS, *PPPM_SELECTION_STATISTICS; /* size: 0x0068 */

typedef struct _XSAVE_AREA_HEADER
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned __int64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER; /* size: 0x0040 */

typedef struct _XSAVE_AREA
{
  /* 0x0000 */ struct _XSAVE_FORMAT LegacyState;
  /* 0x0200 */ struct _XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA; /* size: 0x0240 */

typedef struct _SECURITY_SUBJECT_CONTEXT
{
  /* 0x0000 */ void* ClientToken;
  /* 0x0008 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x000c */ long Padding_148;
  /* 0x0010 */ void* PrimaryToken;
  /* 0x0018 */ void* ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT; /* size: 0x0020 */

typedef struct _INITIAL_PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET; /* size: 0x002c */

typedef struct _ACCESS_STATE
{
  /* 0x0000 */ struct _LUID OperationID;
  /* 0x0008 */ unsigned char SecurityEvaluated;
  /* 0x0009 */ unsigned char GenerateAudit;
  /* 0x000a */ unsigned char GenerateOnClose;
  /* 0x000b */ unsigned char PrivilegesAllocated;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long RemainingDesiredAccess;
  /* 0x0014 */ unsigned long PreviouslyGrantedAccess;
  /* 0x0018 */ unsigned long OriginalDesiredAccess;
  /* 0x001c */ long Padding_149;
  /* 0x0020 */ struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  /* 0x0040 */ void* SecurityDescriptor;
  /* 0x0048 */ void* AuxData;
  union
  {
    union
    {
      /* 0x0050 */ struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      /* 0x0050 */ struct _PRIVILEGE_SET PrivilegeSet;
    }; /* size: 0x002c */
  } /* size: 0x002c */ Privileges;
  /* 0x007c */ unsigned char AuditPrivileges;
  /* 0x007d */ char Padding_150[3];
  /* 0x0080 */ struct _UNICODE_STRING ObjectName;
  /* 0x0090 */ struct _UNICODE_STRING ObjectTypeName;
} ACCESS_STATE, *PACCESS_STATE; /* size: 0x00a0 */

typedef union _POP_FX_COMPONENT_FLAGS
{
  union
  {
    struct
    {
      /* 0x0000 */ long Value;
      /* 0x0004 */ long Value2;
    }; /* size: 0x0008 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long RefCount : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Idling : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Active : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long CriticalIdleOverride : 1; /* bit position: 0 */
        /* 0x0004 */ unsigned long ResidentOverride : 1; /* bit position: 1 */
        /* 0x0004 */ unsigned long CompleteIdleStatePending : 1; /* bit position: 2 */
        /* 0x0004 */ unsigned long Reserved : 29; /* bit position: 3 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} POP_FX_COMPONENT_FLAGS, *PPOP_FX_COMPONENT_FLAGS; /* size: 0x0008 */

typedef struct _UMS_CONTROL_BLOCK
{
  /* 0x0000 */ struct _RTL_UMS_CONTEXT* UmsContext;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY* CompletionListEntry;
  /* 0x0010 */ struct _KEVENT* CompletionListEvent;
  /* 0x0018 */ unsigned long ServiceSequenceNumber;
  /* 0x001c */ long Padding_151;
  union
  {
    struct
    {
      /* 0x0020 */ struct _KQUEUE UmsQueue;
      /* 0x0060 */ struct _LIST_ENTRY QueueEntry;
      /* 0x0070 */ struct _RTL_UMS_CONTEXT* YieldingUmsContext;
      /* 0x0078 */ void* YieldingParam;
      /* 0x0080 */ void* UmsTeb;
    }; /* size: 0x0068 */
    struct
    {
      /* 0x0020 */ struct _KQUEUE* UmsAssociatedQueue;
      /* 0x0028 */ struct _LIST_ENTRY* UmsQueueListEntry;
      /* 0x0030 */ struct _KEVENT UmsWaitEvent;
      /* 0x0048 */ void* StagingArea;
      union
      {
        struct /* bitfield */
        {
          /* 0x0050 */ unsigned long UmsPrimaryDeliveredContext : 1; /* bit position: 0 */
          /* 0x0050 */ unsigned long UmsAssociatedQueueUsed : 1; /* bit position: 1 */
          /* 0x0050 */ unsigned long UmsThreadParked : 1; /* bit position: 2 */
        }; /* bitfield */
        /* 0x0050 */ unsigned long UmsFlags;
      }; /* size: 0x0004 */
    }; /* size: 0x0034 */
  }; /* size: 0x0068 */
  /* 0x0088 */ unsigned short TebSelector;
  /* 0x008a */ char __PADDING__[6];
} UMS_CONTROL_BLOCK, *PUMS_CONTROL_BLOCK; /* size: 0x0090 */

typedef struct _PEBS_DS_SAVE_AREA
{
  /* 0x0000 */ unsigned __int64 BtsBufferBase;
  /* 0x0008 */ unsigned __int64 BtsIndex;
  /* 0x0010 */ unsigned __int64 BtsAbsoluteMaximum;
  /* 0x0018 */ unsigned __int64 BtsInterruptThreshold;
  /* 0x0020 */ unsigned __int64 PebsBufferBase;
  /* 0x0028 */ unsigned __int64 PebsIndex;
  /* 0x0030 */ unsigned __int64 PebsAbsoluteMaximum;
  /* 0x0038 */ unsigned __int64 PebsInterruptThreshold;
  /* 0x0040 */ unsigned __int64 PebsCounterReset0;
  /* 0x0048 */ unsigned __int64 PebsCounterReset1;
  /* 0x0050 */ unsigned __int64 PebsCounterReset2;
  /* 0x0058 */ unsigned __int64 PebsCounterReset3;
} PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA; /* size: 0x0060 */

typedef struct _KUMS_CONTEXT_HEADER
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ void* StackTop;
  /* 0x0028 */ unsigned __int64 StackSize;
  /* 0x0030 */ unsigned __int64 RspOffset;
  /* 0x0038 */ unsigned __int64 Rip;
  /* 0x0040 */ struct _XSAVE_FORMAT* FltSave;
  union
  {
    struct /* bitfield */
    {
      /* 0x0048 */ unsigned __int64 Volatile : 1; /* bit position: 0 */
      /* 0x0048 */ unsigned __int64 Reserved : 63; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0048 */ unsigned __int64 Flags;
  }; /* size: 0x0008 */
  /* 0x0050 */ struct _KTRAP_FRAME* TrapFrame;
  /* 0x0058 */ struct _KEXCEPTION_FRAME* ExceptionFrame;
  /* 0x0060 */ struct _KTHREAD* SourceThread;
  /* 0x0068 */ unsigned __int64 Return;
} KUMS_CONTEXT_HEADER, *PKUMS_CONTEXT_HEADER; /* size: 0x0070 */

typedef struct _KEXCEPTION_FRAME
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5;
  /* 0x0028 */ unsigned __int64 Spare1;
  /* 0x0030 */ struct _M128A Xmm6;
  /* 0x0040 */ struct _M128A Xmm7;
  /* 0x0050 */ struct _M128A Xmm8;
  /* 0x0060 */ struct _M128A Xmm9;
  /* 0x0070 */ struct _M128A Xmm10;
  /* 0x0080 */ struct _M128A Xmm11;
  /* 0x0090 */ struct _M128A Xmm12;
  /* 0x00a0 */ struct _M128A Xmm13;
  /* 0x00b0 */ struct _M128A Xmm14;
  /* 0x00c0 */ struct _M128A Xmm15;
  /* 0x00d0 */ unsigned __int64 TrapFrame;
  /* 0x00d8 */ unsigned __int64 OutputBuffer;
  /* 0x00e0 */ unsigned __int64 OutputLength;
  /* 0x00e8 */ unsigned __int64 Spare2;
  /* 0x00f0 */ unsigned __int64 MxCsr;
  /* 0x00f8 */ unsigned __int64 Rbp;
  /* 0x0100 */ unsigned __int64 Rbx;
  /* 0x0108 */ unsigned __int64 Rdi;
  /* 0x0110 */ unsigned __int64 Rsi;
  /* 0x0118 */ unsigned __int64 R12;
  /* 0x0120 */ unsigned __int64 R13;
  /* 0x0128 */ unsigned __int64 R14;
  /* 0x0130 */ unsigned __int64 R15;
  /* 0x0138 */ unsigned __int64 Return;
} KEXCEPTION_FRAME, *PKEXCEPTION_FRAME; /* size: 0x0140 */

typedef struct _HEAP_ENTRY
{
  union
  {
    struct
    {
      /* 0x0000 */ void* PreviousBlockPrivateData;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short Size;
          /* 0x000a */ unsigned char Flags;
          /* 0x000b */ unsigned char SmallTagIndex;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long SubSegmentCode;
          /* 0x000c */ unsigned short PreviousSize;
          union
          {
            /* 0x000e */ unsigned char SegmentOffset;
            struct
            {
              /* 0x000e */ unsigned char LFHFlags;
              /* 0x000f */ unsigned char UnusedBytes;
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 CompactHeader;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ void* Reserved;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short FunctionIndex;
          /* 0x000a */ unsigned short ContextValue;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long InterceptorValue;
          /* 0x000c */ unsigned short UnusedBytesLength;
          /* 0x000e */ unsigned char EntryOffset;
          /* 0x000f */ unsigned char ExtendedBlockSignature;
        }; /* size: 0x0008 */
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ void* ReservedForAlignment;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned long Code1;
          union
          {
            struct
            {
              /* 0x000c */ unsigned short Code2;
              /* 0x000e */ unsigned char Code3;
              /* 0x000f */ unsigned char Code4;
            }; /* size: 0x0004 */
            /* 0x000c */ unsigned long Code234;
          }; /* size: 0x0004 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 AgregateCode;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} HEAP_ENTRY, *PHEAP_ENTRY; /* size: 0x0010 */

typedef struct _HEAP_SEGMENT
{
  /* 0x0000 */ struct _HEAP_ENTRY Entry;
  /* 0x0010 */ unsigned long SegmentSignature;
  /* 0x0014 */ unsigned long SegmentFlags;
  /* 0x0018 */ struct _LIST_ENTRY SegmentListEntry;
  /* 0x0028 */ struct _HEAP* Heap;
  /* 0x0030 */ void* BaseAddress;
  /* 0x0038 */ unsigned long NumberOfPages;
  /* 0x003c */ long Padding_152;
  /* 0x0040 */ struct _HEAP_ENTRY* FirstEntry;
  /* 0x0048 */ struct _HEAP_ENTRY* LastValidEntry;
  /* 0x0050 */ unsigned long NumberOfUnCommittedPages;
  /* 0x0054 */ unsigned long NumberOfUnCommittedRanges;
  /* 0x0058 */ unsigned short SegmentAllocatorBackTraceIndex;
  /* 0x005a */ unsigned short Reserved;
  /* 0x005c */ long Padding_153;
  /* 0x0060 */ struct _LIST_ENTRY UCRSegmentList;
} HEAP_SEGMENT, *PHEAP_SEGMENT; /* size: 0x0070 */

typedef struct _PROC_PERF_DOMAIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _KPRCB* Master;
  /* 0x0018 */ struct _KAFFINITY_EX Members;
  /* 0x00c0 */ unsigned long ProcessorCount;
  /* 0x00c4 */ long Padding_154;
  /* 0x00c8 */ struct _PROC_PERF_CONSTRAINT* Processors;
  /* 0x00d0 */ void* GetFFHThrottleState /* function */;
  /* 0x00d8 */ void* BoostPolicyHandler /* function */;
  /* 0x00e0 */ void* BoostModeHandler /* function */;
  /* 0x00e8 */ void* PerfSelectionHandler /* function */;
  /* 0x00f0 */ void* PerfControlHandler /* function */;
  /* 0x00f8 */ unsigned long MaxFrequency;
  /* 0x00fc */ unsigned long NominalFrequency;
  /* 0x0100 */ unsigned long MaxPercent;
  /* 0x0104 */ unsigned long MinPerfPercent;
  /* 0x0108 */ unsigned long MinThrottlePercent;
  /* 0x010c */ unsigned char Coordination;
  /* 0x010d */ unsigned char HardPlatformCap;
  /* 0x010e */ unsigned char AffinitizeControl;
  /* 0x010f */ char Padding_155;
  /* 0x0110 */ unsigned long SelectedPercent;
  /* 0x0114 */ unsigned long SelectedFrequency;
  /* 0x0118 */ unsigned long DesiredPercent;
  /* 0x011c */ unsigned long MaxPolicyPercent;
  /* 0x0120 */ unsigned long MinPolicyPercent;
  /* 0x0124 */ unsigned long ConstrainedMaxPercent;
  /* 0x0128 */ unsigned long ConstrainedMinPercent;
  /* 0x012c */ unsigned long GuaranteedPercent;
  /* 0x0130 */ unsigned long TolerancePercent;
  /* 0x0134 */ long Padding_156;
  /* 0x0138 */ unsigned __int64 SelectedState;
  /* 0x0140 */ unsigned char Force;
  /* 0x0141 */ char Padding_157[7];
  /* 0x0148 */ unsigned __int64 PerfChangeTime;
  /* 0x0150 */ unsigned long PerfChangeIntervalCount;
  /* 0x0154 */ long __PADDING__[1];
} PROC_PERF_DOMAIN, *PPROC_PERF_DOMAIN; /* size: 0x0158 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char FRUId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char FRUText : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS; /* size: 0x0001 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Primary : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ContainmentWarning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reset : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long ThresholdExceeded : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ResourceNotAvailable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long LatentError : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  /* 0x0000 */ unsigned long SectionOffset;
  /* 0x0004 */ unsigned long SectionLength;
  /* 0x0008 */ union _WHEA_REVISION Revision;
  /* 0x000a */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ struct _GUID SectionType;
  /* 0x0020 */ struct _GUID FRUId;
  /* 0x0030 */ enum _WHEA_ERROR_SEVERITY SectionSeverity;
  /* 0x0034 */ char FRUText[20];
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR; /* size: 0x0048 */

typedef struct _EX_PUSH_LOCK_CACHE_AWARE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK* Locks[32];
} EX_PUSH_LOCK_CACHE_AWARE, *PEX_PUSH_LOCK_CACHE_AWARE; /* size: 0x0100 */

typedef struct _AMD64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned __int64 Dr7;
  /* 0x000c */ unsigned __int64 CurrentSymbolStart;
  /* 0x0014 */ unsigned __int64 CurrentSymbolEnd;
} AMD64_DBGKD_CONTROL_SET, *PAMD64_DBGKD_CONTROL_SET; /* size: 0x001c */

typedef struct _DBGKD_GET_VERSION64
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned char ProtocolVersion;
  /* 0x0005 */ unsigned char KdSecondaryVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned short MachineType;
  /* 0x000a */ unsigned char MaxPacketType;
  /* 0x000b */ unsigned char MaxStateChange;
  /* 0x000c */ unsigned char MaxManipulate;
  /* 0x000d */ unsigned char Simulation;
  /* 0x000e */ unsigned short Unused[1];
  /* 0x0010 */ unsigned __int64 KernBase;
  /* 0x0018 */ unsigned __int64 PsLoadedModuleList;
  /* 0x0020 */ unsigned __int64 DebuggerDataList;
} DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64; /* size: 0x0028 */

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY
{
  /* 0x0000 */ unsigned __int64 Residency;
  /* 0x0008 */ unsigned __int64 TransitionCount;
} PROCESSOR_PLATFORM_STATE_RESIDENCY, *PPROCESSOR_PLATFORM_STATE_RESIDENCY; /* size: 0x0010 */

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_158;
  /* 0x0008 */ struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];
} PROCESSOR_PLATFORM_STATE_RESIDENCIES, *PPROCESSOR_PLATFORM_STATE_RESIDENCIES; /* size: 0x0018 */

typedef struct _PROC_PERF_LOAD
{
  /* 0x0000 */ unsigned char BusyPercentage;
  /* 0x0001 */ unsigned char FrequencyPercentage;
} PROC_PERF_LOAD, *PPROC_PERF_LOAD; /* size: 0x0002 */

typedef struct _SID_AND_ATTRIBUTES
{
  /* 0x0000 */ void* Sid;
  /* 0x0008 */ unsigned long Attributes;
  /* 0x000c */ long __PADDING__[1];
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES; /* size: 0x0010 */

typedef struct _VACB_LEVEL_REFERENCE
{
  /* 0x0000 */ long Reference;
  /* 0x0004 */ long SpecialReference;
} VACB_LEVEL_REFERENCE, *PVACB_LEVEL_REFERENCE; /* size: 0x0008 */

typedef struct _GENERAL_LOOKASIDE
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  union
  {
    /* 0x0018 */ unsigned long AllocateMisses;
    /* 0x0018 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long TotalFrees;
  union
  {
    /* 0x0020 */ unsigned long FreeMisses;
    /* 0x0020 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x0024 */ enum _POOL_TYPE Type;
  /* 0x0028 */ unsigned long Tag;
  /* 0x002c */ unsigned long Size;
  union
  {
    /* 0x0030 */ void* AllocateEx /* function */;
    /* 0x0030 */ void* Allocate /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0038 */ void* FreeEx /* function */;
    /* 0x0038 */ void* Free /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _LIST_ENTRY ListEntry;
  /* 0x0050 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x0054 */ unsigned long LastAllocateMisses;
    /* 0x0054 */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0058 */ unsigned long Future[2];
  /* 0x0060 */ long __PADDING__[8];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE; /* size: 0x0080 */

typedef struct _OBJECT_DIRECTORY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* HashBuckets[37];
  /* 0x0128 */ struct _EX_PUSH_LOCK Lock;
  union
  {
    /* 0x0130 */ struct _DEVICE_MAP* DeviceMap;
    /* 0x0130 */ struct _OBJECT_DIRECTORY* ShadowDirectory;
  }; /* size: 0x0008 */
  /* 0x0138 */ unsigned long SessionId;
  /* 0x013c */ long Padding_159;
  /* 0x0140 */ void* NamespaceEntry;
  /* 0x0148 */ unsigned long Flags;
  /* 0x014c */ long __PADDING__[1];
} OBJECT_DIRECTORY, *POBJECT_DIRECTORY; /* size: 0x0150 */

typedef struct _LOOKASIDE_LIST_EX
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX; /* size: 0x0060 */

typedef struct _ALPC_COMPLETION_LIST_STATE
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 Head : 24; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 Tail : 24; /* bit position: 24 */
          /* 0x0000 */ unsigned __int64 ActiveThreadCount : 16; /* bit position: 48 */
        }; /* bitfield */
      } /* size: 0x0008 */ s1;
      /* 0x0000 */ __int64 Value;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} ALPC_COMPLETION_LIST_STATE, *PALPC_COMPLETION_LIST_STATE; /* size: 0x0008 */

typedef struct _RTL_SRWLOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Shared : 60; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0008 */
} RTL_SRWLOCK, *PRTL_SRWLOCK; /* size: 0x0008 */

typedef struct _ALPC_COMPLETION_LIST_HEADER
{
  /* 0x0000 */ unsigned __int64 StartMagic;
  /* 0x0008 */ unsigned long TotalSize;
  /* 0x000c */ unsigned long ListOffset;
  /* 0x0010 */ unsigned long ListSize;
  /* 0x0014 */ unsigned long BitmapOffset;
  /* 0x0018 */ unsigned long BitmapSize;
  /* 0x001c */ unsigned long DataOffset;
  /* 0x0020 */ unsigned long DataSize;
  /* 0x0024 */ unsigned long AttributeFlags;
  /* 0x0028 */ unsigned long AttributeSize;
  /* 0x002c */ long Padding_160[5];
  /* 0x0040 */ volatile struct _ALPC_COMPLETION_LIST_STATE State;
  /* 0x0048 */ volatile unsigned long LastMessageId;
  /* 0x004c */ volatile unsigned long LastCallbackId;
  /* 0x0050 */ long Padding_161[12];
  /* 0x0080 */ volatile unsigned long PostCount;
  /* 0x0084 */ long Padding_162[15];
  /* 0x00c0 */ volatile unsigned long ReturnCount;
  /* 0x00c4 */ long Padding_163[15];
  /* 0x0100 */ volatile unsigned long LogSequenceNumber;
  /* 0x0104 */ long Padding_164[15];
  /* 0x0140 */ struct _RTL_SRWLOCK UserLock;
  /* 0x0148 */ unsigned __int64 EndMagic;
  /* 0x0150 */ long __PADDING__[12];
} ALPC_COMPLETION_LIST_HEADER, *PALPC_COMPLETION_LIST_HEADER; /* size: 0x0180 */

typedef struct _FILE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_165;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _VPB* Vpb;
  /* 0x0018 */ void* FsContext;
  /* 0x0020 */ void* FsContext2;
  /* 0x0028 */ struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;
  /* 0x0030 */ void* PrivateCacheMap;
  /* 0x0038 */ long FinalStatus;
  /* 0x003c */ long Padding_166;
  /* 0x0040 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0048 */ unsigned char LockOperation;
  /* 0x0049 */ unsigned char DeletePending;
  /* 0x004a */ unsigned char ReadAccess;
  /* 0x004b */ unsigned char WriteAccess;
  /* 0x004c */ unsigned char DeleteAccess;
  /* 0x004d */ unsigned char SharedRead;
  /* 0x004e */ unsigned char SharedWrite;
  /* 0x004f */ unsigned char SharedDelete;
  /* 0x0050 */ unsigned long Flags;
  /* 0x0054 */ long Padding_167;
  /* 0x0058 */ struct _UNICODE_STRING FileName;
  /* 0x0068 */ union _LARGE_INTEGER CurrentByteOffset;
  /* 0x0070 */ unsigned long Waiters;
  /* 0x0074 */ unsigned long Busy;
  /* 0x0078 */ void* LastLock;
  /* 0x0080 */ struct _KEVENT Lock;
  /* 0x0098 */ struct _KEVENT Event;
  /* 0x00b0 */ struct _IO_COMPLETION_CONTEXT* CompletionContext;
  /* 0x00b8 */ unsigned __int64 IrpListLock;
  /* 0x00c0 */ struct _LIST_ENTRY IrpList;
  /* 0x00d0 */ void* FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT; /* size: 0x00d8 */

typedef struct _PORT_MESSAGE
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ short DataLength;
        /* 0x0002 */ short TotalLength;
      } /* size: 0x0004 */ s1;
      /* 0x0000 */ unsigned long Length;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ short Type;
        /* 0x0006 */ short DataInfoOffset;
      } /* size: 0x0004 */ s2;
      /* 0x0004 */ unsigned long ZeroInit;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  union
  {
    /* 0x0008 */ struct _CLIENT_ID ClientId;
    /* 0x0008 */ double DoNotUseThisField;
  }; /* size: 0x0010 */
  /* 0x0018 */ unsigned long MessageId;
  /* 0x001c */ long Padding_168;
  union
  {
    /* 0x0020 */ unsigned __int64 ClientViewSize;
    struct
    {
      /* 0x0020 */ unsigned long CallbackId;
      /* 0x0024 */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} PORT_MESSAGE, *PPORT_MESSAGE; /* size: 0x0028 */

typedef struct _KERNEL_STACK_SEGMENT
{
  /* 0x0000 */ unsigned __int64 StackBase;
  /* 0x0008 */ unsigned __int64 StackLimit;
  /* 0x0010 */ unsigned __int64 KernelStack;
  /* 0x0018 */ unsigned __int64 InitialStack;
} KERNEL_STACK_SEGMENT, *PKERNEL_STACK_SEGMENT; /* size: 0x0020 */

typedef struct _KSTACK_CONTROL
{
  /* 0x0000 */ unsigned __int64 StackBase;
  union
  {
    /* 0x0008 */ unsigned __int64 ActualLimit;
    /* 0x0008 */ unsigned __int64 StackExpansion : 1; /* bit position: 0 */
  }; /* size: 0x0008 */
  /* 0x0010 */ struct _KERNEL_STACK_SEGMENT Previous;
} KSTACK_CONTROL, *PKSTACK_CONTROL; /* size: 0x0030 */

typedef struct _WORK_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY WorkQueueLinks;
  union
  {
    union
    {
      struct
      {
        /* 0x0010 */ struct _FILE_OBJECT* FileObject;
      } /* size: 0x0008 */ Read;
      struct
      {
        /* 0x0010 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
      } /* size: 0x0008 */ Write;
      struct
      {
        /* 0x0010 */ struct _KEVENT* Event;
      } /* size: 0x0008 */ Event;
      struct
      {
        /* 0x0010 */ unsigned long Reason;
      } /* size: 0x0004 */ Notification;
      struct
      {
        /* 0x0010 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x0018 */ struct _IO_STATUS_BLOCK* IoStatus;
        /* 0x0020 */ struct _KEVENT CallerWaitEvent;
        /* 0x0038 */ unsigned char IsLowPriWriteBehind;
        /* 0x0039 */ char __PADDING__[7];
      } /* size: 0x0030 */ LowPriWrite;
    }; /* size: 0x0030 */
  } /* size: 0x0030 */ Parameters;
  /* 0x0040 */ unsigned char Function;
  /* 0x0041 */ char __PADDING__[7];
} WORK_QUEUE_ENTRY, *PWORK_QUEUE_ENTRY; /* size: 0x0048 */

typedef struct _CM_CELL_REMAP_BLOCK
{
  /* 0x0000 */ unsigned long OldCell;
  /* 0x0004 */ unsigned long NewCell;
} CM_CELL_REMAP_BLOCK, *PCM_CELL_REMAP_BLOCK; /* size: 0x0008 */

typedef struct _CM_KEY_SECURITY_CACHE_ENTRY
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ long Padding_169;
  /* 0x0008 */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
} CM_KEY_SECURITY_CACHE_ENTRY, *PCM_KEY_SECURITY_CACHE_ENTRY; /* size: 0x0010 */

typedef struct _INTERRUPT_REMAPPING_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long IrtIndex : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long FlagHalInternal : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long FlagTranslated : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_170;
  union
  {
    union
    {
      /* 0x0008 */ union _ULARGE_INTEGER RemappedFormat;
      struct
      {
        /* 0x0008 */ unsigned long MessageAddressLow;
        /* 0x000c */ unsigned short MessageData;
        /* 0x000e */ unsigned short Reserved;
      } /* size: 0x0008 */ Msi;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} INTERRUPT_REMAPPING_INFO, *PINTERRUPT_REMAPPING_INFO; /* size: 0x0010 */

typedef struct _PROC_IDLE_STATE_BUCKET
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 MinTime;
  /* 0x0010 */ unsigned __int64 MaxTime;
  /* 0x0018 */ unsigned long Count;
  /* 0x001c */ long __PADDING__[1];
} PROC_IDLE_STATE_BUCKET, *PPROC_IDLE_STATE_BUCKET; /* size: 0x0020 */

typedef struct _PROC_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned long CancelCount;
  /* 0x000c */ unsigned long FailureCount;
  /* 0x0010 */ unsigned long SuccessCount;
  /* 0x0014 */ unsigned long InvalidBucketIndex;
  /* 0x0018 */ unsigned __int64 MinTime;
  /* 0x0020 */ unsigned __int64 MaxTime;
  /* 0x0028 */ struct _PPM_SELECTION_STATISTICS SelectionStatistics;
  /* 0x0090 */ struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
} PROC_IDLE_STATE_ACCOUNTING, *PPROC_IDLE_STATE_ACCOUNTING; /* size: 0x03d0 */

typedef struct _PROC_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long TotalTransitions;
  /* 0x0008 */ unsigned long ResetCount;
  /* 0x000c */ unsigned long AbortCount;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ unsigned __int64 PriorIdleTime;
  /* 0x0020 */ enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
  /* 0x0024 */ long Padding_171;
  /* 0x0028 */ struct _PROC_IDLE_STATE_ACCOUNTING State[1];
} PROC_IDLE_ACCOUNTING, *PPROC_IDLE_ACCOUNTING; /* size: 0x03f8 */

typedef struct _ISRDPCSTATS
{
  /* 0x0000 */ unsigned __int64 IsrTime;
  /* 0x0008 */ unsigned __int64 IsrTimeStart;
  /* 0x0010 */ unsigned __int64 IsrCount;
  /* 0x0018 */ unsigned __int64 DpcTime;
  /* 0x0020 */ unsigned __int64 DpcTimeStart;
  /* 0x0028 */ unsigned __int64 DpcCount;
  /* 0x0030 */ unsigned char IsrActive;
  /* 0x0031 */ unsigned char Reserved[15];
} ISRDPCSTATS, *PISRDPCSTATS; /* size: 0x0040 */

typedef struct _PF_KERNEL_GLOBALS
{
  /* 0x0000 */ unsigned __int64 AccessBufferAgeThreshold;
  /* 0x0008 */ struct _EX_RUNDOWN_REF AccessBufferRef;
  /* 0x0010 */ struct _KEVENT AccessBufferExistsEvent;
  /* 0x0028 */ unsigned long AccessBufferMax;
  /* 0x002c */ long Padding_172[5];
  /* 0x0040 */ union _SLIST_HEADER AccessBufferList;
  /* 0x0050 */ long StreamSequenceNumber;
  /* 0x0054 */ unsigned long Flags;
  /* 0x0058 */ long ScenarioPrefetchCount;
  /* 0x005c */ long __PADDING__[1];
} PF_KERNEL_GLOBALS, *PPF_KERNEL_GLOBALS; /* size: 0x0060 */

typedef struct _PCW_PROCESSOR_INFO
{
  /* 0x0000 */ unsigned __int64 IdleTime;
  /* 0x0008 */ unsigned __int64 AvailableTime;
  /* 0x0010 */ unsigned __int64 UserTime;
  /* 0x0018 */ unsigned __int64 KernelTime;
  /* 0x0020 */ unsigned long Interrupts;
  /* 0x0024 */ long Padding_173;
  /* 0x0028 */ unsigned __int64 DpcTime;
  /* 0x0030 */ unsigned __int64 InterruptTime;
  /* 0x0038 */ unsigned long ClockInterrupts;
  /* 0x003c */ unsigned long DpcCount;
  /* 0x0040 */ unsigned long DpcRate;
  /* 0x0044 */ long Padding_174;
  /* 0x0048 */ unsigned __int64 C1Time;
  /* 0x0050 */ unsigned __int64 C2Time;
  /* 0x0058 */ unsigned __int64 C3Time;
  /* 0x0060 */ unsigned __int64 C1Transitions;
  /* 0x0068 */ unsigned __int64 C2Transitions;
  /* 0x0070 */ unsigned __int64 C3Transitions;
  /* 0x0078 */ unsigned long ParkingStatus;
  /* 0x007c */ unsigned long CurrentFrequency;
  /* 0x0080 */ unsigned long PercentMaxFrequency;
  /* 0x0084 */ unsigned long StateFlags;
  /* 0x0088 */ unsigned long NominalThroughput;
  /* 0x008c */ unsigned long ActiveThroughput;
  /* 0x0090 */ unsigned __int64 ScaledThroughput;
  /* 0x0098 */ unsigned __int64 ScaledKernelThroughput;
  /* 0x00a0 */ unsigned __int64 AverageIdleTime;
  /* 0x00a8 */ unsigned __int64 IdleBreakEvents;
  /* 0x00b0 */ unsigned long PerformanceLimit;
  /* 0x00b4 */ unsigned long PerformanceLimitFlags;
} PCW_PROCESSOR_INFO, *PPCW_PROCESSOR_INFO; /* size: 0x00b8 */

struct PROCESSOR_PERFSTATE_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ unsigned char MaxThrottle;
  /* 0x0005 */ unsigned char MinThrottle;
  /* 0x0006 */ unsigned char BusyAdjThreshold;
  union
  {
    /* 0x0007 */ unsigned char Spare;
    union
    {
      union
      {
        /* 0x0007 */ unsigned char AsUCHAR;
        struct /* bitfield */
        {
          /* 0x0007 */ unsigned char NoDomainAccounting : 1; /* bit position: 0 */
          /* 0x0007 */ unsigned char IncreasePolicy : 2; /* bit position: 1 */
          /* 0x0007 */ unsigned char DecreasePolicy : 2; /* bit position: 3 */
          /* 0x0007 */ unsigned char Reserved : 3; /* bit position: 5 */
        }; /* bitfield */
      }; /* size: 0x0001 */
    } /* size: 0x0001 */ Flags;
  }; /* size: 0x0001 */
  /* 0x0008 */ unsigned long TimeCheck;
  /* 0x000c */ unsigned long IncreaseTime;
  /* 0x0010 */ unsigned long DecreaseTime;
  /* 0x0014 */ unsigned long IncreasePercent;
  /* 0x0018 */ unsigned long DecreasePercent;
}; /* size: 0x001c */

typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Preallocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long FromPersistentStore : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Reserved : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEAP_ERROR_RECORD_WRAPPER_FLAGS, *PWHEAP_ERROR_RECORD_WRAPPER_FLAGS; /* size: 0x0004 */

typedef struct _STRING32
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ unsigned long Buffer;
} STRING32, *PSTRING32; /* size: 0x0008 */

typedef struct _PEB32
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char SpareBits : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned long Mutant;
  /* 0x0008 */ unsigned long ImageBaseAddress;
  /* 0x000c */ unsigned long Ldr;
  /* 0x0010 */ unsigned long ProcessParameters;
  /* 0x0014 */ unsigned long SubSystemData;
  /* 0x0018 */ unsigned long ProcessHeap;
  /* 0x001c */ unsigned long FastPebLock;
  /* 0x0020 */ unsigned long AtlThunkSListPtr;
  /* 0x0024 */ unsigned long IFEOKey;
  union
  {
    /* 0x0028 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0028 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0028 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0028 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0028 */ unsigned long ReservedBits0 : 27; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ unsigned long KernelCallbackTable;
    /* 0x002c */ unsigned long UserSharedInfoPtr;
  }; /* size: 0x0004 */
  /* 0x0030 */ unsigned long SystemReserved[1];
  /* 0x0034 */ unsigned long AtlThunkSListPtr32;
  /* 0x0038 */ unsigned long ApiSetMap;
  /* 0x003c */ unsigned long TlsExpansionCounter;
  /* 0x0040 */ unsigned long TlsBitmap;
  /* 0x0044 */ unsigned long TlsBitmapBits[2];
  /* 0x004c */ unsigned long ReadOnlySharedMemoryBase;
  /* 0x0050 */ unsigned long SparePvoid0;
  /* 0x0054 */ unsigned long ReadOnlyStaticServerData;
  /* 0x0058 */ unsigned long AnsiCodePageData;
  /* 0x005c */ unsigned long OemCodePageData;
  /* 0x0060 */ unsigned long UnicodeCaseTableData;
  /* 0x0064 */ unsigned long NumberOfProcessors;
  /* 0x0068 */ unsigned long NtGlobalFlag;
  /* 0x006c */ long Padding_175;
  /* 0x0070 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0078 */ unsigned long HeapSegmentReserve;
  /* 0x007c */ unsigned long HeapSegmentCommit;
  /* 0x0080 */ unsigned long HeapDeCommitTotalFreeThreshold;
  /* 0x0084 */ unsigned long HeapDeCommitFreeBlockThreshold;
  /* 0x0088 */ unsigned long NumberOfHeaps;
  /* 0x008c */ unsigned long MaximumNumberOfHeaps;
  /* 0x0090 */ unsigned long ProcessHeaps;
  /* 0x0094 */ unsigned long GdiSharedHandleTable;
  /* 0x0098 */ unsigned long ProcessStarterHelper;
  /* 0x009c */ unsigned long GdiDCAttributeList;
  /* 0x00a0 */ unsigned long LoaderLock;
  /* 0x00a4 */ unsigned long OSMajorVersion;
  /* 0x00a8 */ unsigned long OSMinorVersion;
  /* 0x00ac */ unsigned short OSBuildNumber;
  /* 0x00ae */ unsigned short OSCSDVersion;
  /* 0x00b0 */ unsigned long OSPlatformId;
  /* 0x00b4 */ unsigned long ImageSubsystem;
  /* 0x00b8 */ unsigned long ImageSubsystemMajorVersion;
  /* 0x00bc */ unsigned long ImageSubsystemMinorVersion;
  /* 0x00c0 */ unsigned long ActiveProcessAffinityMask;
  /* 0x00c4 */ unsigned long GdiHandleBuffer[34];
  /* 0x014c */ unsigned long PostProcessInitRoutine;
  /* 0x0150 */ unsigned long TlsExpansionBitmap;
  /* 0x0154 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x01d4 */ unsigned long SessionId;
  /* 0x01d8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x01e0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x01e8 */ unsigned long pShimData;
  /* 0x01ec */ unsigned long AppCompatInfo;
  /* 0x01f0 */ struct _STRING32 CSDVersion;
  /* 0x01f8 */ unsigned long ActivationContextData;
  /* 0x01fc */ unsigned long ProcessAssemblyStorageMap;
  /* 0x0200 */ unsigned long SystemDefaultActivationContextData;
  /* 0x0204 */ unsigned long SystemAssemblyStorageMap;
  /* 0x0208 */ unsigned long MinimumStackCommit;
  /* 0x020c */ unsigned long FlsCallback;
  /* 0x0210 */ struct LIST_ENTRY32 FlsListHead;
  /* 0x0218 */ unsigned long FlsBitmap;
  /* 0x021c */ unsigned long FlsBitmapBits[4];
  /* 0x022c */ unsigned long FlsHighIndex;
  /* 0x0230 */ unsigned long WerRegistrationData;
  /* 0x0234 */ unsigned long WerShipAssertPtr;
  /* 0x0238 */ unsigned long pUnused;
  /* 0x023c */ unsigned long pImageHeaderHash;
  union
  {
    /* 0x0240 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0240 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0240 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0240 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0240 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0244 */ long Padding_176;
  /* 0x0248 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
} PEB32, *PPEB32; /* size: 0x0250 */

typedef struct _MM_PAGE_ACCESS_INFO
{
  union
  {
    /* 0x0000 */ union _MM_PAGE_ACCESS_INFO_FLAGS Flags;
    /* 0x0000 */ unsigned __int64 FileOffset;
    /* 0x0000 */ void* VirtualAddress;
    /* 0x0000 */ void* PointerProtoPte;
  }; /* size: 0x0008 */
} MM_PAGE_ACCESS_INFO, *PMM_PAGE_ACCESS_INFO; /* size: 0x0008 */

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x000c */ enum _WHEA_ERROR_SOURCE_STATE State;
  /* 0x0010 */ unsigned long MaxRawDataLength;
  /* 0x0014 */ unsigned long NumRecordsToPreallocate;
  /* 0x0018 */ unsigned long MaxSectionsPerRecord;
  /* 0x001c */ unsigned long ErrorSourceId;
  /* 0x0020 */ unsigned long PlatformErrorSourceId;
  /* 0x0024 */ unsigned long Flags;
  union
  {
    union
    {
      /* 0x0028 */ struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
      /* 0x0028 */ struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
      /* 0x0028 */ struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
    }; /* size: 0x03a4 */
  } /* size: 0x03a4 */ Info;
} WHEA_ERROR_SOURCE_DESCRIPTOR, *PWHEA_ERROR_SOURCE_DESCRIPTOR; /* size: 0x03cc */

typedef struct _IMAGE_ROM_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long BaseOfBss;
  /* 0x0020 */ unsigned long GprMask;
  /* 0x0024 */ unsigned long CprMask[4];
  /* 0x0034 */ unsigned long GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER; /* size: 0x0038 */

typedef struct _PROC_PERF_CONSTRAINT
{
  /* 0x0000 */ struct _KPRCB* Prcb;
  /* 0x0008 */ unsigned __int64 PerfContext;
  /* 0x0010 */ unsigned long PlatformCap;
  /* 0x0014 */ unsigned long ThermalCap;
  /* 0x0018 */ unsigned long LimitReasons;
  /* 0x001c */ long Padding_177;
  /* 0x0020 */ unsigned __int64 PlatformCapStartTime;
  /* 0x0028 */ unsigned long TargetPercent;
  /* 0x002c */ unsigned long DesiredPercent;
  /* 0x0030 */ unsigned long SelectedPercent;
  /* 0x0034 */ unsigned long SelectedFrequency;
  /* 0x0038 */ unsigned long PreviousFrequency;
  /* 0x003c */ unsigned long PreviousPercent;
  /* 0x0040 */ unsigned long LatestFrequencyPercent;
  /* 0x0044 */ long Padding_178;
  /* 0x0048 */ unsigned __int64 SelectedState;
  /* 0x0050 */ unsigned char Force;
  /* 0x0051 */ char __PADDING__[7];
} PROC_PERF_CONSTRAINT, *PPROC_PERF_CONSTRAINT; /* size: 0x0058 */

typedef struct _OBJECT_HEADER_PADDING_INFO
{
  /* 0x0000 */ unsigned long PaddingAmount;
} OBJECT_HEADER_PADDING_INFO, *POBJECT_HEADER_PADDING_INFO; /* size: 0x0004 */

typedef struct _CM_KEY_HASH
{
  /* 0x0000 */ unsigned long ConvKey;
  /* 0x0004 */ long Padding_179;
  /* 0x0008 */ struct _CM_KEY_HASH* NextHash;
  /* 0x0010 */ struct _HHIVE* KeyHive;
  /* 0x0018 */ unsigned long KeyCell;
  /* 0x001c */ long __PADDING__[1];
} CM_KEY_HASH, *PCM_KEY_HASH; /* size: 0x0020 */

typedef struct _CELL_DATA
{
  /* 0x0000 */ union _u u;
} CELL_DATA, *PCELL_DATA; /* size: 0x0050 */

typedef struct _CM_CACHED_VALUE_INDEX
{
  /* 0x0000 */ unsigned long CellIndex;
  /* 0x0004 */ long Padding_180;
  union
  {
    union
    {
      /* 0x0008 */ struct _CELL_DATA CellData;
      /* 0x0008 */ unsigned __int64 List[1];
    }; /* size: 0x0050 */
  } /* size: 0x0050 */ Data;
} CM_CACHED_VALUE_INDEX, *PCM_CACHED_VALUE_INDEX; /* size: 0x0058 */

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  /* 0x0000 */ unsigned char Removed;
  /* 0x0001 */ unsigned char Reserved[3];
  /* 0x0004 */ long IoCount;
  /* 0x0008 */ struct _KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK; /* size: 0x0020 */

typedef struct _IO_REMOVE_LOCK
{
  /* 0x0000 */ struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK; /* size: 0x0020 */

typedef struct _CACHED_CHILD_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_181;
  union
  {
    /* 0x0008 */ unsigned __int64 ValueList;
    /* 0x0008 */ struct _CM_KEY_CONTROL_BLOCK* RealKcb;
  }; /* size: 0x0008 */
} CACHED_CHILD_LIST, *PCACHED_CHILD_LIST; /* size: 0x0010 */

typedef struct _DBGKD_WRITE_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakPointAddress;
  /* 0x0004 */ unsigned long BreakPointHandle;
} DBGKD_WRITE_BREAKPOINT32, *PDBGKD_WRITE_BREAKPOINT32; /* size: 0x0008 */

typedef struct _KENLISTMENT_HISTORY
{
  /* 0x0000 */ unsigned long Notification;
  /* 0x0004 */ enum _KENLISTMENT_STATE NewState;
} KENLISTMENT_HISTORY, *PKENLISTMENT_HISTORY; /* size: 0x0008 */

typedef struct _RTL_BALANCED_LINKS
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS* Parent;
  /* 0x0008 */ struct _RTL_BALANCED_LINKS* LeftChild;
  /* 0x0010 */ struct _RTL_BALANCED_LINKS* RightChild;
  /* 0x0018 */ char Balance;
  /* 0x0019 */ unsigned char Reserved[3];
  /* 0x001c */ long __PADDING__[1];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS; /* size: 0x0020 */

typedef struct _KTMOBJECT_NAMESPACE_LINK
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS Links;
  /* 0x0020 */ unsigned char Expired;
  /* 0x0021 */ char __PADDING__[7];
} KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK; /* size: 0x0028 */

typedef union _CLS_LSN
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int idxRecord;
      /* 0x0004 */ unsigned long cidContainer;
    } /* size: 0x0008 */ offset;
    /* 0x0000 */ unsigned __int64 ullOffset;
  }; /* size: 0x0008 */
} CLS_LSN, *PCLS_LSN; /* size: 0x0008 */

typedef struct _WORK_QUEUE_ITEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0010 */ void* WorkerRoutine /* function */;
  /* 0x0018 */ void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; /* size: 0x0020 */

typedef struct _KTRANSACTION
{
  /* 0x0000 */ struct _KEVENT OutcomeEvent;
  /* 0x0018 */ unsigned long cookie;
  /* 0x001c */ long Padding_182;
  /* 0x0020 */ struct _KMUTANT Mutex;
  /* 0x0058 */ struct _KTRANSACTION* TreeTx;
  /* 0x0060 */ struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
  /* 0x0088 */ struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
  /* 0x00b0 */ struct _GUID UOW;
  /* 0x00c0 */ enum _KTRANSACTION_STATE State;
  /* 0x00c4 */ unsigned long Flags;
  /* 0x00c8 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x00d8 */ unsigned long EnlistmentCount;
  /* 0x00dc */ unsigned long RecoverableEnlistmentCount;
  /* 0x00e0 */ unsigned long PrePrepareRequiredEnlistmentCount;
  /* 0x00e4 */ unsigned long PrepareRequiredEnlistmentCount;
  /* 0x00e8 */ unsigned long OutcomeRequiredEnlistmentCount;
  /* 0x00ec */ unsigned long PendingResponses;
  /* 0x00f0 */ struct _KENLISTMENT* SuperiorEnlistment;
  /* 0x00f8 */ union _CLS_LSN LastLsn;
  /* 0x0100 */ struct _LIST_ENTRY PromotedEntry;
  /* 0x0110 */ struct _KTRANSACTION* PromoterTransaction;
  /* 0x0118 */ void* PromotePropagation;
  /* 0x0120 */ unsigned long IsolationLevel;
  /* 0x0124 */ unsigned long IsolationFlags;
  /* 0x0128 */ union _LARGE_INTEGER Timeout;
  /* 0x0130 */ struct _UNICODE_STRING Description;
  /* 0x0140 */ struct _KTHREAD* RollbackThread;
  /* 0x0148 */ struct _WORK_QUEUE_ITEM RollbackWorkItem;
  /* 0x0168 */ struct _KDPC RollbackDpc;
  /* 0x01a8 */ struct _KTIMER RollbackTimer;
  /* 0x01e8 */ struct _LIST_ENTRY LsnOrderedEntry;
  /* 0x01f8 */ enum _KTRANSACTION_OUTCOME Outcome;
  /* 0x01fc */ long Padding_183;
  /* 0x0200 */ struct _KTM* Tm;
  /* 0x0208 */ __int64 CommitReservation;
  /* 0x0210 */ struct _KTRANSACTION_HISTORY TransactionHistory[10];
  /* 0x0260 */ unsigned long TransactionHistoryCount;
  /* 0x0264 */ long Padding_184;
  /* 0x0268 */ void* DTCPrivateInformation;
  /* 0x0270 */ unsigned long DTCPrivateInformationLength;
  /* 0x0274 */ long Padding_185;
  /* 0x0278 */ struct _KMUTANT DTCPrivateInformationMutex;
  /* 0x02b0 */ void* PromotedTxSelfHandle;
  /* 0x02b8 */ unsigned long PendingPromotionCount;
  /* 0x02bc */ long Padding_186;
  /* 0x02c0 */ struct _KEVENT PromotionCompletedEvent;
} KTRANSACTION, *PKTRANSACTION; /* size: 0x02d8 */

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_SET_INTERNAL_BREAKPOINT64, *PDBGKD_SET_INTERNAL_BREAKPOINT64; /* size: 0x0010 */

typedef struct _CM_NOTIFY_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY HiveList;
  /* 0x0010 */ struct _LIST_ENTRY PostList;
  /* 0x0020 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0028 */ struct _CM_KEY_BODY* KeyBody;
  struct /* bitfield */
  {
    /* 0x0030 */ unsigned long Filter : 30; /* bit position: 0 */
    /* 0x0030 */ unsigned long WatchTree : 1; /* bit position: 30 */
    /* 0x0030 */ unsigned long NotifyPending : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0034 */ long Padding_187;
  /* 0x0038 */ struct _SECURITY_SUBJECT_CONTEXT SubjectContext;
} CM_NOTIFY_BLOCK, *PCM_NOTIFY_BLOCK; /* size: 0x0058 */

typedef struct _PPM_CONCURRENCY_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned long Processors;
  /* 0x000c */ unsigned long ActiveProcessors;
  /* 0x0010 */ unsigned __int64 LastUpdateTime;
  /* 0x0018 */ unsigned __int64 TotalTime;
  /* 0x0020 */ unsigned __int64 AccumulatedTime[1];
} PPM_CONCURRENCY_ACCOUNTING, *PPPM_CONCURRENCY_ACCOUNTING; /* size: 0x0028 */

typedef struct _CM_INTENT_LOCK
{
  /* 0x0000 */ unsigned long OwnerCount;
  /* 0x0004 */ long Padding_188;
  /* 0x0008 */ struct _CM_KCB_UOW** OwnerTable;
} CM_INTENT_LOCK, *PCM_INTENT_LOCK; /* size: 0x0010 */

typedef struct _PROC_PERF_HISTORY
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Slot;
  /* 0x0008 */ struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];
  /* 0x000e */ char __PADDING__[2];
} PROC_PERF_HISTORY, *PPROC_PERF_HISTORY; /* size: 0x0010 */

typedef struct _PENDING_RELATIONS_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0030 */ struct _PNP_DEVICE_EVENT_ENTRY* DeviceEvent;
  /* 0x0038 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0040 */ struct _RELATION_LIST* RelationsList;
  /* 0x0048 */ struct _IRP* EjectIrp;
  /* 0x0050 */ enum IRPLOCK Lock;
  /* 0x0054 */ unsigned long Problem;
  /* 0x0058 */ unsigned char ProfileChangingEject;
  /* 0x0059 */ unsigned char DisplaySafeRemovalDialog;
  /* 0x005a */ char Padding_189[2];
  /* 0x005c */ enum _SYSTEM_POWER_STATE LightestSleepState;
  /* 0x0060 */ struct DOCK_INTERFACE* DockInterface;
  /* 0x0068 */ unsigned char DequeuePending;
  /* 0x0069 */ char Padding_190[3];
  /* 0x006c */ enum _PNP_DEVICE_DELETE_TYPE DeleteType;
} PENDING_RELATIONS_LIST_ENTRY, *PPENDING_RELATIONS_LIST_ENTRY; /* size: 0x0070 */

typedef struct _HMAP_ENTRY
{
  /* 0x0000 */ unsigned __int64 BlockAddress;
  /* 0x0008 */ unsigned __int64 BinAddress;
  /* 0x0010 */ unsigned long MemAlloc;
  /* 0x0014 */ long __PADDING__[1];
} HMAP_ENTRY, *PHMAP_ENTRY; /* size: 0x0018 */

typedef struct _HIVE_WAIT_PACKET
{
  /* 0x0000 */ struct _KEVENT WakeEvent;
  /* 0x0018 */ long Status;
  /* 0x001c */ long Padding_191;
  /* 0x0020 */ struct _HIVE_WAIT_PACKET* Next;
} HIVE_WAIT_PACKET, *PHIVE_WAIT_PACKET; /* size: 0x0028 */

typedef struct _DEVICE_MAP
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* DosDevicesDirectory;
  /* 0x0008 */ struct _OBJECT_DIRECTORY* GlobalDosDevicesDirectory;
  /* 0x0010 */ void* DosDevicesDirectoryHandle;
  /* 0x0018 */ volatile long ReferenceCount;
  /* 0x001c */ unsigned long DriveMap;
  /* 0x0020 */ unsigned char DriveType[32];
} DEVICE_MAP, *PDEVICE_MAP; /* size: 0x0040 */

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA
{
  /* 0x0000 */ struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
} PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA; /* size: 0x0060 */

typedef struct _VI_POOL_PAGE_HEADER
{
  /* 0x0000 */ struct _SLIST_ENTRY* NextPage;
  /* 0x0008 */ void* VerifierEntry;
  /* 0x0010 */ unsigned __int64 Signature;
} VI_POOL_PAGE_HEADER, *PVI_POOL_PAGE_HEADER; /* size: 0x0018 */

typedef struct _LPCP_MESSAGE
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY Entry;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeEntry;
      /* 0x0008 */ unsigned long Reserved0;
    }; /* size: 0x000c */
  }; /* size: 0x0010 */
  /* 0x0010 */ void* SenderPort;
  /* 0x0018 */ struct _ETHREAD* RepliedToThread;
  /* 0x0020 */ void* PortContext;
  /* 0x0028 */ struct _PORT_MESSAGE Request;
} LPCP_MESSAGE, *PLPCP_MESSAGE; /* size: 0x0050 */

typedef union _KIDTENTRY64
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short OffsetLow;
      /* 0x0002 */ unsigned short Selector;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned short IstIndex : 3; /* bit position: 0 */
        /* 0x0004 */ unsigned short Reserved0 : 5; /* bit position: 3 */
        /* 0x0004 */ unsigned short Type : 5; /* bit position: 8 */
        /* 0x0004 */ unsigned short Dpl : 2; /* bit position: 13 */
        /* 0x0004 */ unsigned short Present : 1; /* bit position: 15 */
      }; /* bitfield */
      /* 0x0006 */ unsigned short OffsetMiddle;
      /* 0x0008 */ unsigned long OffsetHigh;
      /* 0x000c */ unsigned long Reserved1;
    }; /* size: 0x0010 */
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0010 */
} KIDTENTRY64, *PKIDTENTRY64; /* size: 0x0010 */

typedef struct _KFLOATING_SAVE
{
  /* 0x0000 */ unsigned long Dummy;
} KFLOATING_SAVE, *PKFLOATING_SAVE; /* size: 0x0004 */

typedef struct _SINGLE_LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Next;
} SINGLE_LIST_ENTRY32, *PSINGLE_LIST_ENTRY32; /* size: 0x0004 */

typedef struct _X86_KTRAP_FRAME_BLUE
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned short TempSegCs;
  /* 0x000e */ unsigned char Logging;
  /* 0x000f */ unsigned char FrameType;
  /* 0x0010 */ unsigned long TempEsp;
  /* 0x0014 */ unsigned long Dr0;
  /* 0x0018 */ unsigned long Dr1;
  /* 0x001c */ unsigned long Dr2;
  /* 0x0020 */ unsigned long Dr3;
  /* 0x0024 */ unsigned long Dr6;
  /* 0x0028 */ unsigned long Dr7;
  /* 0x002c */ unsigned long SegGs;
  /* 0x0030 */ unsigned long SegEs;
  /* 0x0034 */ unsigned long SegDs;
  /* 0x0038 */ unsigned long Edx;
  /* 0x003c */ unsigned long Ecx;
  /* 0x0040 */ unsigned long Eax;
  /* 0x0044 */ unsigned char PreviousPreviousMode;
  /* 0x0045 */ unsigned char EntropyQueueDpc;
  /* 0x0046 */ unsigned char Reserved[2];
  /* 0x0048 */ unsigned long MxCsr;
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME_BLUE, *PX86_KTRAP_FRAME_BLUE; /* size: 0x008c */

typedef struct _EXT_SET_PARAMETERS_V0
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ __int64 NoWakeTolerance;
} EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0; /* size: 0x0010 */

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
  /* 0x0000 */ struct _LIST_ENTRY NotificationListHead;
  /* 0x0010 */ void* Port;
  /* 0x0018 */ unsigned __int64 Key;
  /* 0x0020 */ struct _EPROCESS* BindingProcess;
} KRESOURCEMANAGER_COMPLETION_BINDING, *PKRESOURCEMANAGER_COMPLETION_BINDING; /* size: 0x0028 */

typedef struct _SLIST_ENTRY
{
  /* 0x0000 */ struct _SLIST_ENTRY* Next;
  /* 0x0008 */ long __PADDING__[2];
} SLIST_ENTRY, *PSLIST_ENTRY; /* size: 0x0010 */

typedef struct _NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _PAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _ETW_REALTIME_CONSUMER
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ void* ProcessHandle;
  /* 0x0018 */ struct _EPROCESS* ProcessObject;
  /* 0x0020 */ void* NextNotDelivered;
  /* 0x0028 */ void* RealtimeConnectContext;
  /* 0x0030 */ struct _KEVENT* DisconnectEvent;
  /* 0x0038 */ struct _KEVENT* DataAvailableEvent;
  /* 0x0040 */ unsigned long* UserBufferCount;
  /* 0x0048 */ struct _SINGLE_LIST_ENTRY* UserBufferListHead;
  /* 0x0050 */ unsigned long BuffersLost;
  /* 0x0054 */ unsigned long EmptyBuffersCount;
  /* 0x0058 */ unsigned short LoggerId;
  union
  {
    /* 0x005a */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x005a */ unsigned char ShutDownRequested : 1; /* bit position: 0 */
      /* 0x005a */ unsigned char NewBuffersLost : 1; /* bit position: 1 */
      /* 0x005a */ unsigned char Disconnected : 1; /* bit position: 2 */
      /* 0x005a */ unsigned char Notified : 1; /* bit position: 3 */
      /* 0x005a */ unsigned char Wow : 1; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x005b */ char Padding_192[5];
  /* 0x0060 */ struct _RTL_BITMAP ReservedBufferSpaceBitMap;
  /* 0x0070 */ unsigned char* ReservedBufferSpace;
  /* 0x0078 */ unsigned long ReservedBufferSpaceSize;
  /* 0x007c */ unsigned long UserPagesAllocated;
  /* 0x0080 */ unsigned long UserPagesReused;
  /* 0x0084 */ long Padding_193;
  /* 0x0088 */ unsigned long* EventsLostCount;
  /* 0x0090 */ unsigned long* BuffersLostCount;
} ETW_REALTIME_CONSUMER, *PETW_REALTIME_CONSUMER; /* size: 0x0098 */

typedef struct _ENODE
{
  /* 0x0000 */ struct _KNODE Ncb;
  /* 0x00c0 */ struct _EX_WORK_QUEUE ExWorkQueue[2];
  /* 0x0640 */ struct _KEVENT ExpThreadSetManagerEvent;
  /* 0x0658 */ struct _KEVENT ExpBalancerExitEvent;
  /* 0x0670 */ struct _KTIMER ExpDeadlockTimer;
  /* 0x06b0 */ struct _KEVENT ExpThreadReaperEvent;
  /* 0x06c8 */ struct _KWAIT_BLOCK WaitBlocks[4];
  /* 0x0788 */ struct _ETHREAD* ExpWorkerThreadBalanceManagerPtr;
  /* 0x0790 */ unsigned long ExpWorkerSeed;
  union
  {
    struct /* bitfield */
    {
      /* 0x0794 */ volatile unsigned long ExWorkerFullInit : 1; /* bit position: 0 */
      /* 0x0794 */ volatile unsigned long ExWorkerStructInit : 1; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0794 */ volatile unsigned long ExWorkerFlags;
  }; /* size: 0x0004 */
  /* 0x0798 */ long __PADDING__[10];
} ENODE, *PENODE; /* size: 0x07c0 */

typedef struct _TERMINATION_PORT
{
  /* 0x0000 */ struct _TERMINATION_PORT* Next;
  /* 0x0008 */ void* Port;
} TERMINATION_PORT, *PTERMINATION_PORT; /* size: 0x0010 */

typedef struct _DEVICE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0010 */ struct _DEVICE_OBJECT* NextDevice;
  /* 0x0018 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0020 */ struct _IRP* CurrentIrp;
  /* 0x0028 */ struct _IO_TIMER* Timer;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ unsigned long Characteristics;
  /* 0x0038 */ struct _VPB* Vpb;
  /* 0x0040 */ void* DeviceExtension;
  /* 0x0048 */ unsigned long DeviceType;
  /* 0x004c */ char StackSize;
  /* 0x004d */ char Padding_194[3];
  union
  {
    union
    {
      /* 0x0050 */ struct _LIST_ENTRY ListEntry;
      /* 0x0050 */ struct _WAIT_CONTEXT_BLOCK Wcb;
    }; /* size: 0x0048 */
  } /* size: 0x0048 */ Queue;
  /* 0x0098 */ unsigned long AlignmentRequirement;
  /* 0x009c */ long Padding_195;
  /* 0x00a0 */ struct _KDEVICE_QUEUE DeviceQueue;
  /* 0x00c8 */ struct _KDPC Dpc;
  /* 0x0108 */ unsigned long ActiveThreadCount;
  /* 0x010c */ long Padding_196;
  /* 0x0110 */ void* SecurityDescriptor;
  /* 0x0118 */ struct _KEVENT DeviceLock;
  /* 0x0130 */ unsigned short SectorSize;
  /* 0x0132 */ unsigned short Spare1;
  /* 0x0134 */ long Padding_197;
  /* 0x0138 */ struct _DEVOBJ_EXTENSION* DeviceObjectExtension;
  /* 0x0140 */ void* Reserved;
  /* 0x0148 */ long __PADDING__[2];
} DEVICE_OBJECT, *PDEVICE_OBJECT; /* size: 0x0150 */

typedef struct _HV_HYPERVISOR_HARDWARE_FEATURES
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int ApicOverlayAssistInUse : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int MsrBitmapsInUse : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int ArchitecturalPerformanceCountersInUse : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int SecondLevelAddressTranslationInUse : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int DmaRemappingInUse : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned int InterruptRemappingInUse : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned int MemoryPatrolScrubberPresent : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned int Reserved : 25; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0004 */ unsigned int ReservedEbx;
  /* 0x0008 */ unsigned int ReservedEcx;
  /* 0x000c */ unsigned int ReservedEdx;
} HV_HYPERVISOR_HARDWARE_FEATURES, *PHV_HYPERVISOR_HARDWARE_FEATURES; /* size: 0x0010 */

typedef struct _DRIVER_EXTENSION
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0008 */ void* AddDevice /* function */;
  /* 0x0010 */ unsigned long Count;
  /* 0x0014 */ long Padding_198;
  /* 0x0018 */ struct _UNICODE_STRING ServiceKeyName;
  /* 0x0028 */ struct _IO_CLIENT_EXTENSION* ClientDriverExtension;
  /* 0x0030 */ struct _FS_FILTER_CALLBACKS* FsFilterCallbacks;
  /* 0x0038 */ void* KseCallbacks;
  /* 0x0040 */ void* DvCallbacks;
  /* 0x0048 */ void* VerifierContext;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION; /* size: 0x0050 */

typedef struct _RELATION_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long TagCount;
  /* 0x0008 */ unsigned long FirstLevel;
  /* 0x000c */ unsigned long MaxLevel;
  /* 0x0010 */ struct _RELATION_LIST_ENTRY* Entries[1];
} RELATION_LIST, *PRELATION_LIST; /* size: 0x0018 */

typedef struct _FS_FILTER_CALLBACKS
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbacks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* PreAcquireForSectionSynchronization /* function */;
  /* 0x0010 */ void* PostAcquireForSectionSynchronization /* function */;
  /* 0x0018 */ void* PreReleaseForSectionSynchronization /* function */;
  /* 0x0020 */ void* PostReleaseForSectionSynchronization /* function */;
  /* 0x0028 */ void* PreAcquireForCcFlush /* function */;
  /* 0x0030 */ void* PostAcquireForCcFlush /* function */;
  /* 0x0038 */ void* PreReleaseForCcFlush /* function */;
  /* 0x0040 */ void* PostReleaseForCcFlush /* function */;
  /* 0x0048 */ void* PreAcquireForModifiedPageWriter /* function */;
  /* 0x0050 */ void* PostAcquireForModifiedPageWriter /* function */;
  /* 0x0058 */ void* PreReleaseForModifiedPageWriter /* function */;
  /* 0x0060 */ void* PostReleaseForModifiedPageWriter /* function */;
} FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS; /* size: 0x0068 */

typedef struct _RTL_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS BalancedRoot;
  /* 0x0020 */ void* OrderedPointer;
  /* 0x0028 */ unsigned long WhichOrderedElement;
  /* 0x002c */ unsigned long NumberGenericTableElements;
  /* 0x0030 */ unsigned long DepthOfTree;
  /* 0x0034 */ long Padding_199;
  /* 0x0038 */ struct _RTL_BALANCED_LINKS* RestartKey;
  /* 0x0040 */ unsigned long DeleteCount;
  /* 0x0044 */ long Padding_200;
  /* 0x0048 */ void* CompareRoutine /* function */;
  /* 0x0050 */ void* AllocateRoutine /* function */;
  /* 0x0058 */ void* FreeRoutine /* function */;
  /* 0x0060 */ void* TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE; /* size: 0x0068 */

typedef struct _KTMOBJECT_NAMESPACE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE Table;
  /* 0x0068 */ struct _KMUTANT Mutex;
  /* 0x00a0 */ unsigned short LinksOffset;
  /* 0x00a2 */ unsigned short GuidOffset;
  /* 0x00a4 */ unsigned char Expired;
  /* 0x00a5 */ char __PADDING__[3];
} KTMOBJECT_NAMESPACE, *PKTMOBJECT_NAMESPACE; /* size: 0x00a8 */

typedef struct _KRESOURCEMANAGER
{
  /* 0x0000 */ struct _KEVENT NotificationAvailable;
  /* 0x0018 */ unsigned long cookie;
  /* 0x001c */ enum _KRESOURCEMANAGER_STATE State;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long Padding_201;
  /* 0x0028 */ struct _KMUTANT Mutex;
  /* 0x0060 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0088 */ struct _GUID RmId;
  /* 0x0098 */ struct _KQUEUE NotificationQueue;
  /* 0x00d8 */ struct _KMUTANT NotificationMutex;
  /* 0x0110 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x0120 */ unsigned long EnlistmentCount;
  /* 0x0124 */ long Padding_202;
  /* 0x0128 */ void* NotificationRoutine /* function */;
  /* 0x0130 */ void* Key;
  /* 0x0138 */ struct _LIST_ENTRY ProtocolListHead;
  /* 0x0148 */ struct _LIST_ENTRY PendingPropReqListHead;
  /* 0x0158 */ struct _LIST_ENTRY CRMListEntry;
  /* 0x0168 */ struct _KTM* Tm;
  /* 0x0170 */ struct _UNICODE_STRING Description;
  /* 0x0180 */ struct _KTMOBJECT_NAMESPACE Enlistments;
  /* 0x0228 */ struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
} KRESOURCEMANAGER, *PKRESOURCEMANAGER; /* size: 0x0250 */

typedef union _FS_FILTER_PARAMETERS
{
  union
  {
    struct
    {
      /* 0x0000 */ union _LARGE_INTEGER* EndingOffset;
      /* 0x0008 */ struct _ERESOURCE** ResourceToRelease;
    } /* size: 0x0010 */ AcquireForModifiedPageWriter;
    struct
    {
      /* 0x0000 */ struct _ERESOURCE* ResourceToRelease;
    } /* size: 0x0008 */ ReleaseForModifiedPageWriter;
    struct
    {
      /* 0x0000 */ enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;
      /* 0x0004 */ unsigned long PageProtection;
    } /* size: 0x0008 */ AcquireForSectionSynchronization;
    struct
    {
      /* 0x0000 */ enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;
      /* 0x0004 */ long Padding_203;
      /* 0x0008 */ unsigned char SafeToRecurse;
      /* 0x0009 */ char __PADDING__[7];
    } /* size: 0x0010 */ NotifyStreamFileObject;
    struct
    {
      /* 0x0000 */ void* Argument1;
      /* 0x0008 */ void* Argument2;
      /* 0x0010 */ void* Argument3;
      /* 0x0018 */ void* Argument4;
      /* 0x0020 */ void* Argument5;
    } /* size: 0x0028 */ Others;
  }; /* size: 0x0028 */
} FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS; /* size: 0x0028 */

typedef struct _FS_FILTER_CALLBACK_DATA
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbackData;
  /* 0x0004 */ unsigned char Operation;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ char Padding_204[2];
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _FILE_OBJECT* FileObject;
  /* 0x0018 */ union _FS_FILTER_PARAMETERS Parameters;
} FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA; /* size: 0x0040 */

typedef struct _VPB
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short VolumeLabelLength;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _DEVICE_OBJECT* RealDevice;
  /* 0x0018 */ unsigned long SerialNumber;
  /* 0x001c */ unsigned long ReferenceCount;
  /* 0x0020 */ wchar_t VolumeLabel[32];
} VPB, *PVPB; /* size: 0x0060 */

typedef struct _TIME_FIELDS
{
  /* 0x0000 */ short Year;
  /* 0x0002 */ short Month;
  /* 0x0004 */ short Day;
  /* 0x0006 */ short Hour;
  /* 0x0008 */ short Minute;
  /* 0x000a */ short Second;
  /* 0x000c */ short Milliseconds;
  /* 0x000e */ short Weekday;
} TIME_FIELDS, *PTIME_FIELDS; /* size: 0x0010 */

typedef struct _SECTION_OBJECT_POINTERS
{
  /* 0x0000 */ void* DataSectionObject;
  /* 0x0008 */ void* SharedCacheMap;
  /* 0x0010 */ void* ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS; /* size: 0x0018 */

typedef struct _ERESOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY SystemResourcesList;
  /* 0x0010 */ struct _OWNER_ENTRY* OwnerTable;
  /* 0x0018 */ short ActiveCount;
  union
  {
    /* 0x001a */ unsigned short Flag;
    struct
    {
      /* 0x001a */ unsigned char ReservedLowFlags;
      /* 0x001b */ unsigned char WaiterPriority;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x001c */ long Padding_205;
  /* 0x0020 */ struct _KSEMAPHORE* SharedWaiters;
  /* 0x0028 */ struct _KEVENT* ExclusiveWaiters;
  /* 0x0030 */ struct _OWNER_ENTRY OwnerEntry;
  /* 0x0040 */ unsigned long ActiveEntries;
  /* 0x0044 */ unsigned long ContentionCount;
  /* 0x0048 */ unsigned long NumberOfSharedWaiters;
  /* 0x004c */ unsigned long NumberOfExclusiveWaiters;
  /* 0x0050 */ void* Reserved2;
  union
  {
    /* 0x0058 */ void* Address;
    /* 0x0058 */ unsigned __int64 CreatorBackTraceIndex;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned __int64 SpinLock;
} ERESOURCE, *PERESOURCE; /* size: 0x0068 */

typedef struct _POOL_TRACKER_TABLE
{
  /* 0x0000 */ volatile long Key;
  /* 0x0004 */ unsigned long NonPagedAllocs;
  /* 0x0008 */ unsigned long NonPagedFrees;
  /* 0x000c */ long Padding_206;
  /* 0x0010 */ unsigned __int64 NonPagedBytes;
  /* 0x0018 */ unsigned long PagedAllocs;
  /* 0x001c */ unsigned long PagedFrees;
  /* 0x0020 */ unsigned __int64 PagedBytes;
} POOL_TRACKER_TABLE, *PPOOL_TRACKER_TABLE; /* size: 0x0028 */

typedef struct _WHEA_ERROR_RECORD
{
  /* 0x0000 */ struct _WHEA_ERROR_RECORD_HEADER Header;
  /* 0x0080 */ struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
} WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD; /* size: 0x00c8 */

typedef struct _WHEAP_ERROR_RECORD_WRAPPER
{
  /* 0x0000 */ struct _LIST_ENTRY WorkEntry;
  /* 0x0010 */ unsigned long Length;
  /* 0x0014 */ unsigned long ProcessorNumber;
  /* 0x0018 */ union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;
  /* 0x001c */ volatile long InUse;
  /* 0x0020 */ struct _WHEAP_ERROR_SOURCE* ErrorSource;
  /* 0x0028 */ struct _WHEA_ERROR_RECORD ErrorRecord;
} WHEAP_ERROR_RECORD_WRAPPER, *PWHEAP_ERROR_RECORD_WRAPPER; /* size: 0x00f0 */

typedef struct _SEP_LOWBOX_NUMBER_MAPPING
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _RTL_BITMAP Bitmap;
  /* 0x0018 */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
  /* 0x0020 */ unsigned char Active;
  /* 0x0021 */ char __PADDING__[7];
} SEP_LOWBOX_NUMBER_MAPPING, *PSEP_LOWBOX_NUMBER_MAPPING; /* size: 0x0028 */

typedef struct _WHEAP_ERROR_SOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long FailedAllocations;
  /* 0x0014 */ unsigned long PlatformErrorSourceId;
  /* 0x0018 */ long ErrorCount;
  /* 0x001c */ unsigned long RecordCount;
  /* 0x0020 */ unsigned long RecordLength;
  /* 0x0024 */ unsigned long PoolTag;
  /* 0x0028 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x002c */ long Padding_207;
  /* 0x0030 */ struct _WHEAP_ERROR_RECORD_WRAPPER* Records;
  /* 0x0038 */ void* Context;
  /* 0x0040 */ unsigned long SectionCount;
  /* 0x0044 */ unsigned long SectionLength;
  /* 0x0048 */ union _LARGE_INTEGER TickCountAtLastError;
  /* 0x0050 */ unsigned long AccumulatedErrors;
  /* 0x0054 */ unsigned long TotalErrors;
  /* 0x0058 */ unsigned char Deferred;
  /* 0x0059 */ struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;
  /* 0x0425 */ char __PADDING__[3];
} WHEAP_ERROR_SOURCE, *PWHEAP_ERROR_SOURCE; /* size: 0x0428 */

typedef struct _SEGMENT_OBJECT
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ unsigned long TotalNumberOfPtes;
  /* 0x000c */ long Padding_208;
  /* 0x0010 */ union _LARGE_INTEGER SizeOfSegment;
  /* 0x0018 */ unsigned long NonExtendedPtes;
  /* 0x001c */ unsigned long ImageCommitment;
  /* 0x0020 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0028 */ struct _SUBSECTION* Subsection;
  /* 0x0030 */ struct _MMSECTION_FLAGS* MmSectionFlags;
  /* 0x0038 */ struct _MMSUBSECTION_FLAGS* MmSubSectionFlags;
} SEGMENT_OBJECT, *PSEGMENT_OBJECT; /* size: 0x0040 */

typedef struct _FAST_IO_DISPATCH
{
  /* 0x0000 */ unsigned long SizeOfFastIoDispatch;
  /* 0x0004 */ long Padding_209;
  /* 0x0008 */ void* FastIoCheckIfPossible /* function */;
  /* 0x0010 */ void* FastIoRead /* function */;
  /* 0x0018 */ void* FastIoWrite /* function */;
  /* 0x0020 */ void* FastIoQueryBasicInfo /* function */;
  /* 0x0028 */ void* FastIoQueryStandardInfo /* function */;
  /* 0x0030 */ void* FastIoLock /* function */;
  /* 0x0038 */ void* FastIoUnlockSingle /* function */;
  /* 0x0040 */ void* FastIoUnlockAll /* function */;
  /* 0x0048 */ void* FastIoUnlockAllByKey /* function */;
  /* 0x0050 */ void* FastIoDeviceControl /* function */;
  /* 0x0058 */ void* AcquireFileForNtCreateSection /* function */;
  /* 0x0060 */ void* ReleaseFileForNtCreateSection /* function */;
  /* 0x0068 */ void* FastIoDetachDevice /* function */;
  /* 0x0070 */ void* FastIoQueryNetworkOpenInfo /* function */;
  /* 0x0078 */ void* AcquireForModWrite /* function */;
  /* 0x0080 */ void* MdlRead /* function */;
  /* 0x0088 */ void* MdlReadComplete /* function */;
  /* 0x0090 */ void* PrepareMdlWrite /* function */;
  /* 0x0098 */ void* MdlWriteComplete /* function */;
  /* 0x00a0 */ void* FastIoReadCompressed /* function */;
  /* 0x00a8 */ void* FastIoWriteCompressed /* function */;
  /* 0x00b0 */ void* MdlReadCompleteCompressed /* function */;
  /* 0x00b8 */ void* MdlWriteCompleteCompressed /* function */;
  /* 0x00c0 */ void* FastIoQueryOpen /* function */;
  /* 0x00c8 */ void* ReleaseForModWrite /* function */;
  /* 0x00d0 */ void* AcquireForCcFlush /* function */;
  /* 0x00d8 */ void* ReleaseForCcFlush /* function */;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH; /* size: 0x00e0 */

typedef struct _SESSION_LOWBOX_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long SessionId;
  /* 0x0014 */ long Padding_210;
  /* 0x0018 */ struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;
} SESSION_LOWBOX_MAP, *PSESSION_LOWBOX_MAP; /* size: 0x0040 */

typedef struct _MM_DRIVER_VERIFIER_DATA
{
  /* 0x0000 */ unsigned long Level;
  /* 0x0004 */ volatile unsigned long RaiseIrqls;
  /* 0x0008 */ volatile unsigned long AcquireSpinLocks;
  /* 0x000c */ volatile unsigned long SynchronizeExecutions;
  /* 0x0010 */ volatile unsigned long AllocationsAttempted;
  /* 0x0014 */ volatile unsigned long AllocationsSucceeded;
  /* 0x0018 */ volatile unsigned long AllocationsSucceededSpecialPool;
  /* 0x001c */ unsigned long AllocationsWithNoTag;
  /* 0x0020 */ unsigned long TrimRequests;
  /* 0x0024 */ unsigned long Trims;
  /* 0x0028 */ unsigned long AllocationsFailed;
  /* 0x002c */ volatile unsigned long AllocationsFailedDeliberately;
  /* 0x0030 */ volatile unsigned long Loads;
  /* 0x0034 */ volatile unsigned long Unloads;
  /* 0x0038 */ unsigned long UnTrackedPool;
  /* 0x003c */ unsigned long UserTrims;
  /* 0x0040 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x0044 */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0048 */ unsigned long PeakPagedPoolAllocations;
  /* 0x004c */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0050 */ volatile unsigned __int64 PagedBytes;
  /* 0x0058 */ volatile unsigned __int64 NonPagedBytes;
  /* 0x0060 */ unsigned __int64 PeakPagedBytes;
  /* 0x0068 */ unsigned __int64 PeakNonPagedBytes;
  /* 0x0070 */ volatile unsigned long BurstAllocationsFailedDeliberately;
  /* 0x0074 */ unsigned long SessionTrims;
  /* 0x0078 */ volatile unsigned long OptionChanges;
  /* 0x007c */ volatile unsigned long VerifyMode;
  /* 0x0080 */ struct _UNICODE_STRING PreviousBucketName;
  /* 0x0090 */ volatile unsigned long ActivityCounter;
  /* 0x0094 */ volatile unsigned long PreviousActivityCounter;
  /* 0x0098 */ volatile unsigned long WorkerTrimRequests;
  /* 0x009c */ long __PADDING__[1];
} MM_DRIVER_VERIFIER_DATA, *PMM_DRIVER_VERIFIER_DATA; /* size: 0x00a0 */

typedef struct _STRING64
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_211;
  /* 0x0008 */ unsigned __int64 Buffer;
} STRING64, *PSTRING64; /* size: 0x0010 */

typedef struct _CM_NAME_HASH
{
  /* 0x0000 */ unsigned long ConvKey;
  /* 0x0004 */ long Padding_212;
  /* 0x0008 */ struct _CM_NAME_HASH* NextHash;
  /* 0x0010 */ unsigned short NameLength;
  /* 0x0012 */ wchar_t Name[1];
  /* 0x0014 */ long __PADDING__[1];
} CM_NAME_HASH, *PCM_NAME_HASH; /* size: 0x0018 */

typedef struct _CM_NAME_CONTROL_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Compressed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long RefCount : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_213;
  union
  {
    /* 0x0008 */ struct _CM_NAME_HASH NameHash;
    struct
    {
      /* 0x0008 */ unsigned long ConvKey;
      /* 0x000c */ long Padding_214;
      /* 0x0010 */ struct _CM_KEY_HASH* NextHash;
      /* 0x0018 */ unsigned short NameLength;
      /* 0x001a */ wchar_t Name[1];
      /* 0x001c */ long __PADDING__[1];
    }; /* size: 0x0014 */
  }; /* size: 0x0018 */
} CM_NAME_CONTROL_BLOCK, *PCM_NAME_CONTROL_BLOCK; /* size: 0x0020 */

typedef struct _VI_FAULT_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0008 */ void* StackTrace[8];
} VI_FAULT_TRACE, *PVI_FAULT_TRACE; /* size: 0x0048 */

typedef struct _KINTERRUPT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_215;
  /* 0x0008 */ struct _LIST_ENTRY InterruptListEntry;
  /* 0x0018 */ void* ServiceRoutine /* function */;
  /* 0x0020 */ void* MessageServiceRoutine /* function */;
  /* 0x0028 */ unsigned long MessageIndex;
  /* 0x002c */ long Padding_216;
  /* 0x0030 */ void* ServiceContext;
  /* 0x0038 */ unsigned __int64 SpinLock;
  /* 0x0040 */ unsigned long TickCount;
  /* 0x0044 */ long Padding_217;
  /* 0x0048 */ unsigned __int64* ActualLock;
  /* 0x0050 */ void* DispatchAddress /* function */;
  /* 0x0058 */ unsigned long Vector;
  /* 0x005c */ unsigned char Irql;
  /* 0x005d */ unsigned char SynchronizeIrql;
  /* 0x005e */ unsigned char FloatingSave;
  /* 0x005f */ unsigned char Connected;
  /* 0x0060 */ unsigned long Number;
  /* 0x0064 */ unsigned char ShareVector;
  /* 0x0065 */ unsigned char EmulateActiveBoth;
  /* 0x0066 */ unsigned short ActiveCount;
  /* 0x0068 */ long InternalState;
  /* 0x006c */ enum _KINTERRUPT_MODE Mode;
  /* 0x0070 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0074 */ unsigned long ServiceCount;
  /* 0x0078 */ unsigned long DispatchCount;
  /* 0x007c */ long Padding_218;
  /* 0x0080 */ struct _KEVENT* PassiveEvent;
  /* 0x0088 */ struct _KTRAP_FRAME* TrapFrame;
  /* 0x0090 */ unsigned long DispatchCode[4];
  /* 0x00a0 */ void* DisconnectData;
  /* 0x00a8 */ struct _KTHREAD* volatile ServiceThread;
  /* 0x00b0 */ struct _ISRDPCSTATS IsrDpcStats;
  /* 0x00f0 */ struct _INTERRUPT_CONNECTION_DATA* ConnectionData;
  /* 0x00f8 */ unsigned char Padding[8];
} KINTERRUPT, *PKINTERRUPT; /* size: 0x0100 */

typedef struct _PNP_DEVICE_COMPLETION_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY DispatchedList;
  /* 0x0010 */ unsigned long DispatchedCount;
  /* 0x0014 */ long Padding_219;
  /* 0x0018 */ struct _LIST_ENTRY CompletedList;
  /* 0x0028 */ struct _KSEMAPHORE CompletedSemaphore;
  /* 0x0048 */ unsigned __int64 SpinLock;
} PNP_DEVICE_COMPLETION_QUEUE, *PPNP_DEVICE_COMPLETION_QUEUE; /* size: 0x0050 */

typedef struct _FILE_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ unsigned long FileAttributes;
  /* 0x0024 */ long __PADDING__[1];
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION; /* size: 0x0028 */

typedef struct _KSECONDARY_IDT_ENTRY
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ struct _KEVENT ConnectLock;
  /* 0x0020 */ unsigned char LineMasked;
  /* 0x0021 */ char Padding_220[7];
  /* 0x0028 */ struct _KINTERRUPT* InterruptList;
} KSECONDARY_IDT_ENTRY, *PKSECONDARY_IDT_ENTRY; /* size: 0x0030 */

typedef struct _FILE_STANDARD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0010 */ unsigned long NumberOfLinks;
  /* 0x0014 */ unsigned char DeletePending;
  /* 0x0015 */ unsigned char Directory;
  /* 0x0016 */ char __PADDING__[2];
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION; /* size: 0x0018 */

typedef struct _OBJECT_HEADER_NAME_INFO
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0008 */ struct _UNICODE_STRING Name;
  /* 0x0018 */ long ReferenceCount;
  /* 0x001c */ long __PADDING__[1];
} OBJECT_HEADER_NAME_INFO, *POBJECT_HEADER_NAME_INFO; /* size: 0x0020 */

typedef struct _PCW_REGISTRATION_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_221;
  /* 0x0008 */ const struct _UNICODE_STRING* Name;
  /* 0x0010 */ unsigned long CounterCount;
  /* 0x0014 */ long Padding_222;
  /* 0x0018 */ struct _PCW_COUNTER_DESCRIPTOR* Counters;
  /* 0x0020 */ void* Callback /* function */;
  /* 0x0028 */ void* CallbackContext;
} PCW_REGISTRATION_INFORMATION, *PPCW_REGISTRATION_INFORMATION; /* size: 0x0030 */

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO
{
  /* 0x0000 */ struct _OBJECT_NAME_INFORMATION* ImageFileName;
} SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO; /* size: 0x0008 */

typedef struct _ALPC_PROCESS_CONTEXT
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _LIST_ENTRY ViewListHead;
  /* 0x0018 */ volatile unsigned __int64 PagedPoolQuotaCache;
} ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT; /* size: 0x0020 */

typedef struct _PS_PROTECTION
{
  union
  {
    /* 0x0000 */ unsigned char Level;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Type : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char Audit : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Signer : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} PS_PROTECTION, *PPS_PROTECTION; /* size: 0x0001 */

typedef struct _EPROCESS
{
  /* 0x0000 */ struct _KPROCESS Pcb;
  /* 0x02c8 */ struct _EX_PUSH_LOCK ProcessLock;
  /* 0x02d0 */ union _LARGE_INTEGER CreateTime;
  /* 0x02d8 */ struct _EX_RUNDOWN_REF RundownProtect;
  /* 0x02e0 */ void* UniqueProcessId;
  /* 0x02e8 */ struct _LIST_ENTRY ActiveProcessLinks;
  union
  {
    /* 0x02f8 */ unsigned long Flags2;
    struct /* bitfield */
    {
      /* 0x02f8 */ unsigned long JobNotReallyActive : 1; /* bit position: 0 */
      /* 0x02f8 */ unsigned long AccountingFolded : 1; /* bit position: 1 */
      /* 0x02f8 */ unsigned long NewProcessReported : 1; /* bit position: 2 */
      /* 0x02f8 */ unsigned long ExitProcessReported : 1; /* bit position: 3 */
      /* 0x02f8 */ unsigned long ReportCommitChanges : 1; /* bit position: 4 */
      /* 0x02f8 */ unsigned long LastReportMemory : 1; /* bit position: 5 */
      /* 0x02f8 */ unsigned long ForceWakeCharge : 1; /* bit position: 6 */
      /* 0x02f8 */ unsigned long CrossSessionCreate : 1; /* bit position: 7 */
      /* 0x02f8 */ unsigned long NeedsHandleRundown : 1; /* bit position: 8 */
      /* 0x02f8 */ unsigned long RefTraceEnabled : 1; /* bit position: 9 */
      /* 0x02f8 */ unsigned long DisableDynamicCode : 1; /* bit position: 10 */
      /* 0x02f8 */ unsigned long EmptyJobEvaluated : 1; /* bit position: 11 */
      /* 0x02f8 */ unsigned long DefaultPagePriority : 3; /* bit position: 12 */
      /* 0x02f8 */ unsigned long PrimaryTokenFrozen : 1; /* bit position: 15 */
      /* 0x02f8 */ unsigned long ProcessVerifierTarget : 1; /* bit position: 16 */
      /* 0x02f8 */ unsigned long StackRandomizationDisabled : 1; /* bit position: 17 */
      /* 0x02f8 */ unsigned long AffinityPermanent : 1; /* bit position: 18 */
      /* 0x02f8 */ unsigned long AffinityUpdateEnable : 1; /* bit position: 19 */
      /* 0x02f8 */ unsigned long PropagateNode : 1; /* bit position: 20 */
      /* 0x02f8 */ unsigned long ExplicitAffinity : 1; /* bit position: 21 */
      /* 0x02f8 */ unsigned long ProcessExecutionState : 2; /* bit position: 22 */
      /* 0x02f8 */ unsigned long DisallowStrippedImages : 1; /* bit position: 24 */
      /* 0x02f8 */ unsigned long HighEntropyASLREnabled : 1; /* bit position: 25 */
      /* 0x02f8 */ unsigned long ExtensionPointDisable : 1; /* bit position: 26 */
      /* 0x02f8 */ unsigned long ForceRelocateImages : 1; /* bit position: 27 */
      /* 0x02f8 */ unsigned long ProcessStateChangeRequest : 2; /* bit position: 28 */
      /* 0x02f8 */ unsigned long ProcessStateChangeInProgress : 1; /* bit position: 30 */
      /* 0x02f8 */ unsigned long DisallowWin32kSystemCalls : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x02fc */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x02fc */ unsigned long CreateReported : 1; /* bit position: 0 */
      /* 0x02fc */ unsigned long NoDebugInherit : 1; /* bit position: 1 */
      /* 0x02fc */ unsigned long ProcessExiting : 1; /* bit position: 2 */
      /* 0x02fc */ unsigned long ProcessDelete : 1; /* bit position: 3 */
      /* 0x02fc */ unsigned long ControlFlowGuardEnabled : 1; /* bit position: 4 */
      /* 0x02fc */ unsigned long VmDeleted : 1; /* bit position: 5 */
      /* 0x02fc */ unsigned long OutswapEnabled : 1; /* bit position: 6 */
      /* 0x02fc */ unsigned long Outswapped : 1; /* bit position: 7 */
      /* 0x02fc */ unsigned long ForkFailed : 1; /* bit position: 8 */
      /* 0x02fc */ unsigned long Wow64VaSpace4Gb : 1; /* bit position: 9 */
      /* 0x02fc */ unsigned long AddressSpaceInitialized : 2; /* bit position: 10 */
      /* 0x02fc */ unsigned long SetTimerResolution : 1; /* bit position: 12 */
      /* 0x02fc */ unsigned long BreakOnTermination : 1; /* bit position: 13 */
      /* 0x02fc */ unsigned long DeprioritizeViews : 1; /* bit position: 14 */
      /* 0x02fc */ unsigned long WriteWatch : 1; /* bit position: 15 */
      /* 0x02fc */ unsigned long ProcessInSession : 1; /* bit position: 16 */
      /* 0x02fc */ unsigned long OverrideAddressSpace : 1; /* bit position: 17 */
      /* 0x02fc */ unsigned long HasAddressSpace : 1; /* bit position: 18 */
      /* 0x02fc */ unsigned long LaunchPrefetched : 1; /* bit position: 19 */
      /* 0x02fc */ unsigned long Background : 1; /* bit position: 20 */
      /* 0x02fc */ unsigned long VmTopDown : 1; /* bit position: 21 */
      /* 0x02fc */ unsigned long ImageNotifyDone : 1; /* bit position: 22 */
      /* 0x02fc */ unsigned long PdeUpdateNeeded : 1; /* bit position: 23 */
      /* 0x02fc */ unsigned long VdmAllowed : 1; /* bit position: 24 */
      /* 0x02fc */ unsigned long ProcessRundown : 1; /* bit position: 25 */
      /* 0x02fc */ unsigned long ProcessInserted : 1; /* bit position: 26 */
      /* 0x02fc */ unsigned long DefaultIoPriority : 3; /* bit position: 27 */
      /* 0x02fc */ unsigned long ProcessSelfDelete : 1; /* bit position: 30 */
      /* 0x02fc */ unsigned long SetTimerResolutionLink : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0300 */ unsigned __int64 ProcessQuotaUsage[2];
  /* 0x0310 */ unsigned __int64 ProcessQuotaPeak[2];
  /* 0x0320 */ unsigned __int64 PeakVirtualSize;
  /* 0x0328 */ unsigned __int64 VirtualSize;
  /* 0x0330 */ struct _LIST_ENTRY SessionProcessLinks;
  union
  {
    /* 0x0340 */ void* ExceptionPortData;
    /* 0x0340 */ unsigned __int64 ExceptionPortValue;
    /* 0x0340 */ unsigned __int64 ExceptionPortState : 3; /* bit position: 0 */
  }; /* size: 0x0008 */
  /* 0x0348 */ struct _EX_FAST_REF Token;
  /* 0x0350 */ unsigned __int64 WorkingSetPage;
  /* 0x0358 */ struct _EX_PUSH_LOCK AddressCreationLock;
  /* 0x0360 */ struct _EX_PUSH_LOCK PageTableCommitmentLock;
  /* 0x0368 */ struct _ETHREAD* RotateInProgress;
  /* 0x0370 */ struct _ETHREAD* ForkInProgress;
  /* 0x0378 */ struct _EJOB* volatile CommitChargeJob;
  /* 0x0380 */ struct _RTL_AVL_TREE CloneRoot;
  /* 0x0388 */ volatile unsigned __int64 NumberOfPrivatePages;
  /* 0x0390 */ volatile unsigned __int64 NumberOfLockedPages;
  /* 0x0398 */ void* Win32Process;
  /* 0x03a0 */ struct _EJOB* volatile Job;
  /* 0x03a8 */ void* SectionObject;
  /* 0x03b0 */ void* SectionBaseAddress;
  /* 0x03b8 */ unsigned long Cookie;
  /* 0x03bc */ long Padding_223;
  /* 0x03c0 */ struct _PAGEFAULT_HISTORY* WorkingSetWatch;
  /* 0x03c8 */ void* Win32WindowStation;
  /* 0x03d0 */ void* InheritedFromUniqueProcessId;
  /* 0x03d8 */ void* LdtInformation;
  /* 0x03e0 */ volatile unsigned __int64 OwnerProcessId;
  /* 0x03e8 */ struct _PEB* Peb;
  /* 0x03f0 */ void* Session;
  /* 0x03f8 */ void* AweInfo;
  /* 0x0400 */ struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;
  /* 0x0408 */ struct _HANDLE_TABLE* ObjectTable;
  /* 0x0410 */ void* DebugPort;
  /* 0x0418 */ void* Wow64Process;
  /* 0x0420 */ void* DeviceMap;
  /* 0x0428 */ void* EtwDataSource;
  /* 0x0430 */ unsigned __int64 PageDirectoryPte;
  /* 0x0438 */ unsigned char ImageFileName[15];
  /* 0x0447 */ unsigned char PriorityClass;
  /* 0x0448 */ void* SecurityPort;
  /* 0x0450 */ struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
  /* 0x0458 */ struct _LIST_ENTRY JobLinks;
  /* 0x0468 */ void* HighestUserAddress;
  /* 0x0470 */ struct _LIST_ENTRY ThreadListHead;
  /* 0x0480 */ volatile unsigned long ActiveThreads;
  /* 0x0484 */ unsigned long ImagePathHash;
  /* 0x0488 */ unsigned long DefaultHardErrorProcessing;
  /* 0x048c */ long LastThreadExitStatus;
  /* 0x0490 */ struct _EX_FAST_REF PrefetchTrace;
  /* 0x0498 */ void* LockedPagesList;
  /* 0x04a0 */ union _LARGE_INTEGER ReadOperationCount;
  /* 0x04a8 */ union _LARGE_INTEGER WriteOperationCount;
  /* 0x04b0 */ union _LARGE_INTEGER OtherOperationCount;
  /* 0x04b8 */ union _LARGE_INTEGER ReadTransferCount;
  /* 0x04c0 */ union _LARGE_INTEGER WriteTransferCount;
  /* 0x04c8 */ union _LARGE_INTEGER OtherTransferCount;
  /* 0x04d0 */ unsigned __int64 CommitChargeLimit;
  /* 0x04d8 */ volatile unsigned __int64 CommitCharge;
  /* 0x04e0 */ volatile unsigned __int64 CommitChargePeak;
  /* 0x04e8 */ struct _MMSUPPORT Vm;
  /* 0x05c0 */ struct _LIST_ENTRY MmProcessLinks;
  /* 0x05d0 */ unsigned long ModifiedPageCount;
  /* 0x05d4 */ long ExitStatus;
  /* 0x05d8 */ struct _RTL_AVL_TREE VadRoot;
  /* 0x05e0 */ void* VadHint;
  /* 0x05e8 */ unsigned __int64 VadCount;
  /* 0x05f0 */ volatile unsigned __int64 VadPhysicalPages;
  /* 0x05f8 */ unsigned __int64 VadPhysicalPagesLimit;
  /* 0x0600 */ struct _ALPC_PROCESS_CONTEXT AlpcContext;
  /* 0x0620 */ struct _LIST_ENTRY TimerResolutionLink;
  /* 0x0630 */ struct _PO_DIAG_STACK_RECORD* TimerResolutionStackRecord;
  /* 0x0638 */ unsigned long RequestedTimerResolution;
  /* 0x063c */ unsigned long SmallestTimerResolution;
  /* 0x0640 */ union _LARGE_INTEGER ExitTime;
  /* 0x0648 */ struct _INVERTED_FUNCTION_TABLE* InvertedFunctionTable;
  /* 0x0650 */ struct _EX_PUSH_LOCK InvertedFunctionTableLock;
  /* 0x0658 */ unsigned long ActiveThreadsHighWatermark;
  /* 0x065c */ unsigned long LargePrivateVadCount;
  /* 0x0660 */ struct _EX_PUSH_LOCK ThreadListLock;
  /* 0x0668 */ void* WnfContext;
  /* 0x0670 */ unsigned __int64 Spare0;
  /* 0x0678 */ unsigned char SignatureLevel;
  /* 0x0679 */ unsigned char SectionSignatureLevel;
  /* 0x067a */ struct _PS_PROTECTION Protection;
  /* 0x067b */ unsigned char SpareByte20[1];
  union
  {
    /* 0x067c */ unsigned long Flags3;
    /* 0x067c */ unsigned long Minimal : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x0680 */ long SvmReserved;
  /* 0x0684 */ long Padding_224;
  /* 0x0688 */ void* SvmReserved1;
  /* 0x0690 */ unsigned __int64 SvmReserved2;
  /* 0x0698 */ unsigned __int64 LastFreezeInterruptTime;
  /* 0x06a0 */ struct _PROCESS_DISK_COUNTERS* DiskCounters;
  /* 0x06a8 */ void* PicoContext;
  /* 0x06b0 */ unsigned long KeepAliveCounter;
  /* 0x06b4 */ unsigned long NoWakeKeepAliveCounter;
} EPROCESS, *PEPROCESS; /* size: 0x06b8 */

typedef struct _PCW_MASK_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
  /* 0x0010 */ unsigned long InstanceId;
  /* 0x0014 */ unsigned char CollectMultiple;
  /* 0x0015 */ char Padding_225[3];
  /* 0x0018 */ struct _PCW_BUFFER* Buffer;
  /* 0x0020 */ struct _KEVENT* CancelEvent;
} PCW_MASK_INFORMATION, *PPCW_MASK_INFORMATION; /* size: 0x0028 */

typedef union _PCW_CALLBACK_INFORMATION
{
  union
  {
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION AddCounter;
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION RemoveCounter;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION EnumerateInstances;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION CollectData;
  }; /* size: 0x0028 */
} PCW_CALLBACK_INFORMATION, *PPCW_CALLBACK_INFORMATION; /* size: 0x0028 */

typedef struct _PROCESS_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 BytesRead;
  /* 0x0008 */ unsigned __int64 BytesWritten;
  /* 0x0010 */ unsigned __int64 ReadOperationCount;
  /* 0x0018 */ unsigned __int64 WriteOperationCount;
  /* 0x0020 */ unsigned __int64 FlushOperationCount;
} PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS; /* size: 0x0028 */

typedef struct _WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME; /* size: 0x0008 */

typedef struct _PS_WAKE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NotificationChannel;
  /* 0x0008 */ unsigned __int64 WakeCounters[5];
  /* 0x0030 */ unsigned __int64 NoWakeCounter;
} PS_WAKE_INFORMATION, *PPS_WAKE_INFORMATION; /* size: 0x0038 */

typedef struct _JOBOBJECT_WAKE_FILTER
{
  /* 0x0000 */ unsigned long HighEdgeFilter;
  /* 0x0004 */ unsigned long LowEdgeFilter;
} JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER; /* size: 0x0008 */

typedef struct _EPROCESS_VALUES
{
  /* 0x0000 */ unsigned __int64 KernelTime;
  /* 0x0008 */ unsigned __int64 UserTime;
  /* 0x0010 */ unsigned __int64 CycleTime;
  /* 0x0018 */ unsigned __int64 ContextSwitches;
  /* 0x0020 */ __int64 ReadOperationCount;
  /* 0x0028 */ __int64 WriteOperationCount;
  /* 0x0030 */ __int64 OtherOperationCount;
  /* 0x0038 */ __int64 ReadTransferCount;
  /* 0x0040 */ __int64 WriteTransferCount;
  /* 0x0048 */ __int64 OtherTransferCount;
} EPROCESS_VALUES, *PEPROCESS_VALUES; /* size: 0x0050 */

typedef struct _EJOB
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0018 */ struct _LIST_ENTRY JobLinks;
  /* 0x0028 */ struct _LIST_ENTRY ProcessListHead;
  /* 0x0038 */ struct _ERESOURCE JobLock;
  /* 0x00a0 */ union _LARGE_INTEGER TotalUserTime;
  /* 0x00a8 */ union _LARGE_INTEGER TotalKernelTime;
  /* 0x00b0 */ union _LARGE_INTEGER TotalCycleTime;
  /* 0x00b8 */ union _LARGE_INTEGER ThisPeriodTotalUserTime;
  /* 0x00c0 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime;
  /* 0x00c8 */ unsigned __int64 TotalContextSwitches;
  /* 0x00d0 */ unsigned long TotalPageFaultCount;
  /* 0x00d4 */ unsigned long TotalProcesses;
  /* 0x00d8 */ unsigned long ActiveProcesses;
  /* 0x00dc */ unsigned long TotalTerminatedProcesses;
  /* 0x00e0 */ union _LARGE_INTEGER PerProcessUserTimeLimit;
  /* 0x00e8 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* 0x00f0 */ unsigned __int64 MinimumWorkingSetSize;
  /* 0x00f8 */ unsigned __int64 MaximumWorkingSetSize;
  /* 0x0100 */ unsigned long LimitFlags;
  /* 0x0104 */ unsigned long ActiveProcessLimit;
  /* 0x0108 */ struct _KAFFINITY_EX Affinity;
  /* 0x01b0 */ struct _JOB_ACCESS_STATE* AccessState;
  /* 0x01b8 */ void* AccessStateQuotaReference;
  /* 0x01c0 */ unsigned long UIRestrictionsClass;
  /* 0x01c4 */ unsigned long EndOfJobTimeAction;
  /* 0x01c8 */ void* CompletionPort;
  /* 0x01d0 */ void* CompletionKey;
  /* 0x01d8 */ unsigned __int64 CompletionCount;
  /* 0x01e0 */ unsigned long SessionId;
  /* 0x01e4 */ unsigned long SchedulingClass;
  /* 0x01e8 */ unsigned __int64 ReadOperationCount;
  /* 0x01f0 */ unsigned __int64 WriteOperationCount;
  /* 0x01f8 */ unsigned __int64 OtherOperationCount;
  /* 0x0200 */ unsigned __int64 ReadTransferCount;
  /* 0x0208 */ unsigned __int64 WriteTransferCount;
  /* 0x0210 */ unsigned __int64 OtherTransferCount;
  /* 0x0218 */ struct _PROCESS_DISK_COUNTERS DiskIoInfo;
  /* 0x0240 */ unsigned __int64 ProcessMemoryLimit;
  /* 0x0248 */ unsigned __int64 JobMemoryLimit;
  /* 0x0250 */ unsigned __int64 PeakProcessMemoryUsed;
  /* 0x0258 */ unsigned __int64 PeakJobMemoryUsed;
  /* 0x0260 */ struct _KAFFINITY_EX EffectiveAffinity;
  /* 0x0308 */ union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
  /* 0x0310 */ unsigned __int64 EffectiveMinimumWorkingSetSize;
  /* 0x0318 */ unsigned __int64 EffectiveMaximumWorkingSetSize;
  /* 0x0320 */ unsigned __int64 EffectiveProcessMemoryLimit;
  /* 0x0328 */ struct _EJOB* EffectiveProcessMemoryLimitJob;
  /* 0x0330 */ struct _EJOB* EffectivePerProcessUserTimeLimitJob;
  /* 0x0338 */ unsigned long EffectiveLimitFlags;
  /* 0x033c */ unsigned long EffectiveSchedulingClass;
  /* 0x0340 */ unsigned long EffectiveFreezeCount;
  /* 0x0344 */ unsigned long EffectiveBackgroundCount;
  /* 0x0348 */ unsigned long EffectiveSwapCount;
  /* 0x034c */ unsigned long EffectiveNotificationLimitCount;
  /* 0x0350 */ unsigned char EffectivePriorityClass;
  /* 0x0351 */ unsigned char PriorityClass;
  /* 0x0352 */ unsigned char Reserved1[2];
  /* 0x0354 */ unsigned long CompletionFilter;
  union
  {
    /* 0x0358 */ struct _WNF_STATE_NAME WakeChannel;
    /* 0x0358 */ struct _PS_WAKE_INFORMATION WakeInfo;
  }; /* size: 0x0038 */
  /* 0x0390 */ struct _JOBOBJECT_WAKE_FILTER WakeFilter;
  /* 0x0398 */ unsigned long LowEdgeLatchFilter;
  /* 0x039c */ unsigned long OwnedHighEdgeFilters;
  /* 0x03a0 */ struct _EJOB* NotificationLink;
  /* 0x03a8 */ unsigned __int64 CurrentJobMemoryUsed;
  /* 0x03b0 */ struct _JOB_NOTIFICATION_INFORMATION* NotificationInfo;
  /* 0x03b8 */ void* NotificationInfoQuotaReference;
  /* 0x03c0 */ struct _IO_MINI_COMPLETION_PACKET_USER* NotificationPacket;
  /* 0x03c8 */ struct _JOB_CPU_RATE_CONTROL* CpuRateControl;
  /* 0x03d0 */ void* EffectiveSchedulingGroup;
  /* 0x03d8 */ unsigned __int64 ReadyTime;
  /* 0x03e0 */ struct _EX_PUSH_LOCK MemoryLimitsLock;
  /* 0x03e8 */ struct _LIST_ENTRY SiblingJobLinks;
  /* 0x03f8 */ struct _LIST_ENTRY ChildJobListHead;
  /* 0x0408 */ struct _EJOB* ParentJob;
  /* 0x0410 */ struct _EJOB* volatile RootJob;
  /* 0x0418 */ struct _LIST_ENTRY IteratorListHead;
  /* 0x0428 */ unsigned __int64 AncestorCount;
  /* 0x0430 */ struct _EJOB** Ancestors;
  /* 0x0438 */ struct _EPROCESS_VALUES Accounting;
  /* 0x0488 */ unsigned long ShadowActiveProcessCount;
  /* 0x048c */ unsigned long SequenceNumber;
  /* 0x0490 */ unsigned __int64 TimerListLock;
  /* 0x0498 */ struct _LIST_ENTRY TimerListHead;
  union
  {
    /* 0x04a8 */ unsigned long JobFlags;
    struct /* bitfield */
    {
      /* 0x04a8 */ unsigned long CloseDone : 1; /* bit position: 0 */
      /* 0x04a8 */ unsigned long MultiGroup : 1; /* bit position: 1 */
      /* 0x04a8 */ unsigned long OutstandingNotification : 1; /* bit position: 2 */
      /* 0x04a8 */ unsigned long NotificationInProgress : 1; /* bit position: 3 */
      /* 0x04a8 */ unsigned long UILimits : 1; /* bit position: 4 */
      /* 0x04a8 */ unsigned long CpuRateControlActive : 1; /* bit position: 5 */
      /* 0x04a8 */ unsigned long OwnCpuRateControl : 1; /* bit position: 6 */
      /* 0x04a8 */ unsigned long Terminating : 1; /* bit position: 7 */
      /* 0x04a8 */ unsigned long WorkingSetLock : 1; /* bit position: 8 */
      /* 0x04a8 */ unsigned long JobFrozen : 1; /* bit position: 9 */
      /* 0x04a8 */ unsigned long Background : 1; /* bit position: 10 */
      /* 0x04a8 */ unsigned long WakeNotificationAllocated : 1; /* bit position: 11 */
      /* 0x04a8 */ unsigned long WakeNotificationEnabled : 1; /* bit position: 12 */
      /* 0x04a8 */ unsigned long WakeNotificationPending : 1; /* bit position: 13 */
      /* 0x04a8 */ unsigned long LimitNotificationRequired : 1; /* bit position: 14 */
      /* 0x04a8 */ unsigned long ZeroCountNotificationRequired : 1; /* bit position: 15 */
      /* 0x04a8 */ unsigned long CycleTimeNotificationRequired : 1; /* bit position: 16 */
      /* 0x04a8 */ unsigned long CycleTimeNotificationPending : 1; /* bit position: 17 */
      /* 0x04a8 */ unsigned long TimersVirtualized : 1; /* bit position: 18 */
      /* 0x04a8 */ unsigned long JobSwapped : 1; /* bit position: 19 */
      /* 0x04a8 */ unsigned long ViolationDetected : 1; /* bit position: 20 */
      /* 0x04a8 */ unsigned long EmptyJobNotified : 1; /* bit position: 21 */
      /* 0x04a8 */ unsigned long NoSystemCharge : 1; /* bit position: 22 */
      /* 0x04a8 */ unsigned long DropNoWakeCharges : 1; /* bit position: 23 */
      /* 0x04a8 */ unsigned long NoWakeChargePolicyDecided : 1; /* bit position: 24 */
      /* 0x04a8 */ unsigned long SpareJobFlags : 7; /* bit position: 25 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x04ac */ unsigned long EffectiveHighEdgeFilters;
} EJOB, *PEJOB; /* size: 0x04b0 */

struct _JOB_ACCESS_STATE;

typedef struct _OBJECT_TYPE_INITIALIZER
{
  /* 0x0000 */ unsigned short Length;
  union
  {
    /* 0x0002 */ unsigned char ObjectTypeFlags;
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned char CaseInsensitive : 1; /* bit position: 0 */
      /* 0x0002 */ unsigned char UnnamedObjectsOnly : 1; /* bit position: 1 */
      /* 0x0002 */ unsigned char UseDefaultObject : 1; /* bit position: 2 */
      /* 0x0002 */ unsigned char SecurityRequired : 1; /* bit position: 3 */
      /* 0x0002 */ unsigned char MaintainHandleCount : 1; /* bit position: 4 */
      /* 0x0002 */ unsigned char MaintainTypeList : 1; /* bit position: 5 */
      /* 0x0002 */ unsigned char SupportsObjectCallbacks : 1; /* bit position: 6 */
      /* 0x0002 */ unsigned char CacheAligned : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0003 */ char Padding_226;
  /* 0x0004 */ unsigned long ObjectTypeCode;
  /* 0x0008 */ unsigned long InvalidAttributes;
  /* 0x000c */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x001c */ unsigned long ValidAccessMask;
  /* 0x0020 */ unsigned long RetainAccess;
  /* 0x0024 */ enum _POOL_TYPE PoolType;
  /* 0x0028 */ unsigned long DefaultPagedPoolCharge;
  /* 0x002c */ unsigned long DefaultNonPagedPoolCharge;
  /* 0x0030 */ void* DumpProcedure /* function */;
  /* 0x0038 */ void* OpenProcedure /* function */;
  /* 0x0040 */ void* CloseProcedure /* function */;
  /* 0x0048 */ void* DeleteProcedure /* function */;
  /* 0x0050 */ void* ParseProcedure /* function */;
  /* 0x0058 */ void* SecurityProcedure /* function */;
  /* 0x0060 */ void* QueryNameProcedure /* function */;
  /* 0x0068 */ void* OkayToCloseProcedure /* function */;
  /* 0x0070 */ unsigned long WaitObjectFlagMask;
  /* 0x0074 */ unsigned short WaitObjectFlagOffset;
  /* 0x0076 */ unsigned short WaitObjectPointerOffset;
} OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER; /* size: 0x0078 */

typedef struct _OBJECT_TYPE
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0010 */ struct _UNICODE_STRING Name;
  /* 0x0020 */ void* DefaultObject;
  /* 0x0028 */ unsigned char Index;
  /* 0x0029 */ char Padding_227[3];
  /* 0x002c */ unsigned long TotalNumberOfObjects;
  /* 0x0030 */ unsigned long TotalNumberOfHandles;
  /* 0x0034 */ unsigned long HighWaterNumberOfObjects;
  /* 0x0038 */ unsigned long HighWaterNumberOfHandles;
  /* 0x003c */ long Padding_228;
  /* 0x0040 */ struct _OBJECT_TYPE_INITIALIZER TypeInfo;
  /* 0x00b8 */ struct _EX_PUSH_LOCK TypeLock;
  /* 0x00c0 */ unsigned long Key;
  /* 0x00c4 */ long Padding_229;
  /* 0x00c8 */ struct _LIST_ENTRY CallbackList;
} OBJECT_TYPE, *POBJECT_TYPE; /* size: 0x00d8 */

struct _JOB_NOTIFICATION_INFORMATION;

struct _CALLBACK_OBJECT;

typedef struct _IO_MINI_COMPLETION_PACKET_USER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long PacketType;
  /* 0x0014 */ long Padding_230;
  /* 0x0018 */ void* KeyContext;
  /* 0x0020 */ void* ApcContext;
  /* 0x0028 */ long IoStatus;
  /* 0x002c */ long Padding_231;
  /* 0x0030 */ unsigned __int64 IoStatusInformation;
  /* 0x0038 */ void* MiniPacketCallback /* function */;
  /* 0x0040 */ void* Context;
  /* 0x0048 */ unsigned char Allocated;
  /* 0x0049 */ char __PADDING__[7];
} IO_MINI_COMPLETION_PACKET_USER, *PIO_MINI_COMPLETION_PACKET_USER; /* size: 0x0050 */

typedef struct _IO_PRIORITY_INFO
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long ThreadPriority;
  /* 0x0008 */ unsigned long PagePriority;
  /* 0x000c */ enum _IO_PRIORITY_HINT IoPriority;
} IO_PRIORITY_INFO, *PIO_PRIORITY_INFO; /* size: 0x0010 */

struct _JOB_CPU_RATE_CONTROL;

struct _PAGEFAULT_HISTORY;

struct _EPROCESS_QUOTA_BLOCK;

typedef struct _ALPC_COMMUNICATION_INFO
{
  /* 0x0000 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x0008 */ struct _ALPC_PORT* ServerCommunicationPort;
  /* 0x0010 */ struct _ALPC_PORT* ClientCommunicationPort;
  /* 0x0018 */ struct _LIST_ENTRY CommunicationList;
  /* 0x0028 */ struct _ALPC_HANDLE_TABLE HandleTable;
  /* 0x0040 */ struct _KALPC_MESSAGE* CloseMessage;
} ALPC_COMMUNICATION_INFO, *PALPC_COMMUNICATION_INFO; /* size: 0x0048 */

typedef struct _HANDLE_TABLE_FREE_LIST
{
  /* 0x0000 */ struct _EX_PUSH_LOCK FreeListLock;
  /* 0x0008 */ struct _HANDLE_TABLE_ENTRY* FirstFreeHandleEntry;
  /* 0x0010 */ struct _HANDLE_TABLE_ENTRY* LastFreeHandleEntry;
  /* 0x0018 */ long HandleCount;
  /* 0x001c */ unsigned long HighWaterMark;
  /* 0x0020 */ unsigned long Reserved[8];
} HANDLE_TABLE_FREE_LIST, *PHANDLE_TABLE_FREE_LIST; /* size: 0x0040 */

typedef struct _HANDLE_TABLE
{
  /* 0x0000 */ unsigned long NextHandleNeedingPool;
  /* 0x0004 */ long ExtraInfoPages;
  /* 0x0008 */ volatile unsigned __int64 TableCode;
  /* 0x0010 */ struct _EPROCESS* QuotaProcess;
  /* 0x0018 */ struct _LIST_ENTRY HandleTableList;
  /* 0x0028 */ unsigned long UniqueProcessId;
  union
  {
    /* 0x002c */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x002c */ unsigned char StrictFIFO : 1; /* bit position: 0 */
      /* 0x002c */ unsigned char EnableHandleExceptions : 1; /* bit position: 1 */
      /* 0x002c */ unsigned char Rundown : 1; /* bit position: 2 */
      /* 0x002c */ unsigned char Duplicated : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _EX_PUSH_LOCK HandleContentionEvent;
  /* 0x0038 */ struct _EX_PUSH_LOCK HandleTableLock;
  union
  {
    /* 0x0040 */ struct _HANDLE_TABLE_FREE_LIST FreeLists[1];
    struct
    {
      /* 0x0040 */ unsigned char ActualEntry[32];
      /* 0x0060 */ struct _HANDLE_TRACE_DEBUG_INFO* DebugInfo;
      /* 0x0068 */ long __PADDING__[6];
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
} HANDLE_TABLE, *PHANDLE_TABLE; /* size: 0x0080 */

typedef struct _HANDLE_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ volatile __int64 VolatileLowValue;
    /* 0x0000 */ __int64 LowValue;
    /* 0x0000 */ struct _HANDLE_TABLE_ENTRY_INFO* volatile InfoTable;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Unlocked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 RefCnt : 16; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Attributes : 3; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 ObjectPointerBits : 44; /* bit position: 20 */
    }; /* bitfield */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0008 */ __int64 HighValue;
    /* 0x0008 */ struct _HANDLE_TABLE_ENTRY* NextFreeHandleEntry;
    /* 0x0008 */ struct _EXHANDLE LeafHandleValue;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned long GrantedAccessBits : 25; /* bit position: 0 */
        /* 0x0008 */ unsigned long NoRightsUpgrade : 1; /* bit position: 25 */
        /* 0x0008 */ unsigned long Spare : 6; /* bit position: 26 */
      }; /* bitfield */
      /* 0x000c */ unsigned long TypeInfo;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY; /* size: 0x0010 */

typedef struct _KALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ void* ClientContext;
  /* 0x0008 */ void* ServerContext;
  /* 0x0010 */ void* PortContext;
  /* 0x0018 */ void* CancelPortContext;
  /* 0x0020 */ struct _KALPC_SECURITY_DATA* SecurityData;
  /* 0x0028 */ struct _KALPC_VIEW* View;
  /* 0x0030 */ struct _KALPC_HANDLE_DATA* HandleData;
} KALPC_MESSAGE_ATTRIBUTES, *PKALPC_MESSAGE_ATTRIBUTES; /* size: 0x0038 */

typedef struct _KALPC_MESSAGE
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ struct _ALPC_PORT* PortQueue;
  /* 0x0018 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0020 */ struct _ETHREAD* WaitingThread;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0028 */ unsigned long QueueType : 2; /* bit position: 0 */
          /* 0x0028 */ unsigned long QueuePortType : 4; /* bit position: 2 */
          /* 0x0028 */ unsigned long Canceled : 1; /* bit position: 6 */
          /* 0x0028 */ unsigned long Ready : 1; /* bit position: 7 */
          /* 0x0028 */ unsigned long ReleaseMessage : 1; /* bit position: 8 */
          /* 0x0028 */ unsigned long SharedQuota : 1; /* bit position: 9 */
          /* 0x0028 */ unsigned long ReplyWaitReply : 1; /* bit position: 10 */
          /* 0x0028 */ unsigned long OwnerPortReference : 1; /* bit position: 11 */
          /* 0x0028 */ unsigned long ReserveReference : 1; /* bit position: 12 */
          /* 0x0028 */ unsigned long ReceiverReference : 1; /* bit position: 13 */
          /* 0x0028 */ unsigned long ViewAttributeRetrieved : 1; /* bit position: 14 */
          /* 0x0028 */ unsigned long InDispatch : 1; /* bit position: 15 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x0028 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x002c */ long SequenceNo;
  union
  {
    /* 0x0030 */ struct _EPROCESS* QuotaProcess;
    /* 0x0030 */ void* QuotaBlock;
  }; /* size: 0x0008 */
  /* 0x0038 */ struct _ALPC_PORT* CancelSequencePort;
  /* 0x0040 */ struct _ALPC_PORT* CancelQueuePort;
  /* 0x0048 */ long CancelSequenceNo;
  /* 0x004c */ long Padding_232;
  /* 0x0050 */ struct _LIST_ENTRY CancelListEntry;
  /* 0x0060 */ struct _KALPC_RESERVE* Reserve;
  /* 0x0068 */ struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;
  /* 0x00a0 */ void* DataUserVa;
  /* 0x00a8 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x00b0 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x00b8 */ struct _ETHREAD* ServerThread;
  /* 0x00c0 */ void* WakeReference;
  /* 0x00c8 */ void* ExtensionBuffer;
  /* 0x00d0 */ unsigned __int64 ExtensionBufferSize;
  /* 0x00d8 */ struct _PORT_MESSAGE PortMessage;
} KALPC_MESSAGE, *PKALPC_MESSAGE; /* size: 0x0100 */

typedef struct _HEAP_COUNTERS
{
  /* 0x0000 */ unsigned __int64 TotalMemoryReserved;
  /* 0x0008 */ unsigned __int64 TotalMemoryCommitted;
  /* 0x0010 */ unsigned __int64 TotalMemoryLargeUCR;
  /* 0x0018 */ unsigned __int64 TotalSizeInVirtualBlocks;
  /* 0x0020 */ unsigned long TotalSegments;
  /* 0x0024 */ unsigned long TotalUCRs;
  /* 0x0028 */ unsigned long CommittOps;
  /* 0x002c */ unsigned long DeCommitOps;
  /* 0x0030 */ unsigned long LockAcquires;
  /* 0x0034 */ unsigned long LockCollisions;
  /* 0x0038 */ unsigned long CommitRate;
  /* 0x003c */ unsigned long DecommittRate;
  /* 0x0040 */ unsigned long CommitFailures;
  /* 0x0044 */ unsigned long InBlockCommitFailures;
  /* 0x0048 */ unsigned long PollIntervalCounter;
  /* 0x004c */ unsigned long DecommitsSinceLastCheck;
  /* 0x0050 */ unsigned long HeapPollInterval;
  /* 0x0054 */ unsigned long AllocAndFreeOps;
  /* 0x0058 */ unsigned long AllocationIndicesActive;
  /* 0x005c */ unsigned long InBlockDeccommits;
  /* 0x0060 */ unsigned __int64 InBlockDeccomitSize;
  /* 0x0068 */ unsigned __int64 HighWatermarkSize;
  /* 0x0070 */ unsigned __int64 LastPolledSize;
} HEAP_COUNTERS, *PHEAP_COUNTERS; /* size: 0x0078 */

typedef struct _HEAP_TUNING_PARAMETERS
{
  /* 0x0000 */ unsigned long CommittThresholdShift;
  /* 0x0004 */ long Padding_233;
  /* 0x0008 */ unsigned __int64 MaxPreCommittThreshold;
} HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS; /* size: 0x0010 */

typedef struct _HEAP
{
  /* 0x0000 */ struct _HEAP_ENTRY Entry;
  /* 0x0010 */ unsigned long SegmentSignature;
  /* 0x0014 */ unsigned long SegmentFlags;
  /* 0x0018 */ struct _LIST_ENTRY SegmentListEntry;
  /* 0x0028 */ struct _HEAP* Heap;
  /* 0x0030 */ void* BaseAddress;
  /* 0x0038 */ unsigned long NumberOfPages;
  /* 0x003c */ long Padding_234;
  /* 0x0040 */ struct _HEAP_ENTRY* FirstEntry;
  /* 0x0048 */ struct _HEAP_ENTRY* LastValidEntry;
  /* 0x0050 */ unsigned long NumberOfUnCommittedPages;
  /* 0x0054 */ unsigned long NumberOfUnCommittedRanges;
  /* 0x0058 */ unsigned short SegmentAllocatorBackTraceIndex;
  /* 0x005a */ unsigned short Reserved;
  /* 0x005c */ long Padding_235;
  /* 0x0060 */ struct _LIST_ENTRY UCRSegmentList;
  /* 0x0070 */ unsigned long Flags;
  /* 0x0074 */ unsigned long ForceFlags;
  /* 0x0078 */ unsigned long CompatibilityFlags;
  /* 0x007c */ unsigned long EncodeFlagMask;
  /* 0x0080 */ struct _HEAP_ENTRY Encoding;
  /* 0x0090 */ unsigned long Interceptor;
  /* 0x0094 */ unsigned long VirtualMemoryThreshold;
  /* 0x0098 */ unsigned long Signature;
  /* 0x009c */ long Padding_236;
  /* 0x00a0 */ unsigned __int64 SegmentReserve;
  /* 0x00a8 */ unsigned __int64 SegmentCommit;
  /* 0x00b0 */ unsigned __int64 DeCommitFreeBlockThreshold;
  /* 0x00b8 */ unsigned __int64 DeCommitTotalFreeThreshold;
  /* 0x00c0 */ unsigned __int64 TotalFreeSize;
  /* 0x00c8 */ unsigned __int64 MaximumAllocationSize;
  /* 0x00d0 */ unsigned short ProcessHeapsListIndex;
  /* 0x00d2 */ unsigned short HeaderValidateLength;
  /* 0x00d4 */ long Padding_237;
  /* 0x00d8 */ void* HeaderValidateCopy;
  /* 0x00e0 */ unsigned short NextAvailableTagIndex;
  /* 0x00e2 */ unsigned short MaximumTagIndex;
  /* 0x00e4 */ long Padding_238;
  /* 0x00e8 */ struct _HEAP_TAG_ENTRY* TagEntries;
  /* 0x00f0 */ struct _LIST_ENTRY UCRList;
  /* 0x0100 */ unsigned __int64 AlignRound;
  /* 0x0108 */ unsigned __int64 AlignMask;
  /* 0x0110 */ struct _LIST_ENTRY VirtualAllocdBlocks;
  /* 0x0120 */ struct _LIST_ENTRY SegmentList;
  /* 0x0130 */ unsigned short AllocatorBackTraceIndex;
  /* 0x0132 */ char Padding_239[2];
  /* 0x0134 */ unsigned long NonDedicatedListLength;
  /* 0x0138 */ void* BlocksIndex;
  /* 0x0140 */ void* UCRIndex;
  /* 0x0148 */ struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;
  /* 0x0150 */ struct _LIST_ENTRY FreeLists;
  /* 0x0160 */ struct _HEAP_LOCK* LockVariable;
  /* 0x0168 */ void* CommitRoutine /* function */;
  /* 0x0170 */ void* FrontEndHeap;
  /* 0x0178 */ unsigned short FrontHeapLockCount;
  /* 0x017a */ unsigned char FrontEndHeapType;
  /* 0x017b */ unsigned char RequestedFrontEndHeapType;
  /* 0x017c */ long Padding_240;
  /* 0x0180 */ unsigned short* FrontEndHeapUsageData;
  /* 0x0188 */ unsigned short FrontEndHeapMaximumIndex;
  /* 0x018a */ volatile unsigned char FrontEndHeapStatusBitmap[129];
  /* 0x020b */ char Padding_241[5];
  /* 0x0210 */ struct _HEAP_COUNTERS Counters;
  /* 0x0288 */ struct _HEAP_TUNING_PARAMETERS TuningParameters;
} HEAP, *PHEAP; /* size: 0x0298 */

typedef struct _OBJECT_NAME_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION; /* size: 0x0010 */

typedef struct _MI_USER_VA_INFO
{
  /* 0x0000 */ unsigned long NumberOfCommittedPageTables;
  /* 0x0004 */ unsigned long PhysicalMappingCount;
  /* 0x0008 */ unsigned long VadBitMapHint;
  /* 0x000c */ unsigned long LastAllocationSizeHint;
  /* 0x0010 */ unsigned long LastAllocationSize;
  /* 0x0014 */ unsigned long LowestBottomUpVadBit;
  /* 0x0018 */ unsigned long VadBitMapSize;
  /* 0x001c */ unsigned long VadBitMapCommitment;
  /* 0x0020 */ unsigned long MaximumLastVadBit;
  /* 0x0024 */ long VadsBeingDeleted;
  /* 0x0028 */ struct _KEVENT* LastVadDeletionEvent;
  /* 0x0030 */ unsigned long* VadBitBuffer;
  /* 0x0038 */ void* LowestBottomUpAllocationAddress;
  /* 0x0040 */ void* HighestTopDownAllocationAddress;
  /* 0x0048 */ void* FreeTebHint;
  /* 0x0050 */ unsigned char NumaAware;
  /* 0x0051 */ char Padding_242[7];
  /* 0x0058 */ unsigned __int64 PrivateFixupVadCount;
  /* 0x0060 */ struct _MI_CFG_BITMAP_INFO CfgBitMap[3];
  /* 0x00c0 */ unsigned long CommittedPageTableBufferForTopLevel[8];
  /* 0x00e0 */ struct _RTL_BITMAP CommittedPageTableBitmaps[3];
  /* 0x0110 */ unsigned long PageTableBitmapPages[3];
  /* 0x011c */ long Padding_243;
  /* 0x0120 */ void* FreeUmsTebHint;
} MI_USER_VA_INFO, *PMI_USER_VA_INFO; /* size: 0x0128 */

typedef struct _MMWSL
{
  /* 0x0000 */ unsigned __int64 FirstFree;
  /* 0x0008 */ unsigned __int64 FirstDynamic;
  /* 0x0010 */ unsigned __int64 LastEntry;
  /* 0x0018 */ unsigned __int64 NextSlot;
  /* 0x0020 */ unsigned __int64 LastInitializedWsle;
  /* 0x0028 */ unsigned __int64 NextAgingSlot;
  /* 0x0030 */ unsigned __int64 NextAccessClearingSlot;
  /* 0x0038 */ unsigned long LastAccessClearingRemainder;
  /* 0x003c */ unsigned long LastAgingRemainder;
  /* 0x0040 */ unsigned long WsleSize;
  /* 0x0044 */ long Padding_244;
  /* 0x0048 */ unsigned __int64 NonDirectCount;
  /* 0x0050 */ void* LowestPagableAddress;
  /* 0x0058 */ struct _MMWSLE_NONDIRECT_HASH* NonDirectHash;
  /* 0x0060 */ struct _MMWSLE_HASH* HashTableStart;
  /* 0x0068 */ struct _MMWSLE_HASH* HighestPermittedHashAddress;
  /* 0x0070 */ unsigned __int64 ActiveWsleCounts[8];
  /* 0x00b0 */ struct _MI_ACTIVE_WSLE_LISTHEAD ActiveWsles[8];
  /* 0x0130 */ struct _MMWSLE* Wsle;
  /* 0x0138 */ struct _MI_USER_VA_INFO UserVaInfo;
} MMWSL, *PMMWSL; /* size: 0x0260 */

typedef struct _HEAP_PSEUDO_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned __int64 Size;
} HEAP_PSEUDO_TAG_ENTRY, *PHEAP_PSEUDO_TAG_ENTRY; /* size: 0x0010 */

typedef struct _MMWSLE_NONDIRECT_HASH
{
  /* 0x0000 */ void* Key;
  /* 0x0008 */ unsigned __int64 Index;
} MMWSLE_NONDIRECT_HASH, *PMMWSLE_NONDIRECT_HASH; /* size: 0x0010 */

typedef struct _MMWSLE_HASH
{
  /* 0x0000 */ unsigned __int64 Index;
} MMWSLE_HASH, *PMMWSLE_HASH; /* size: 0x0008 */

typedef struct _MMWSLE
{
  union
  {
    union
    {
      /* 0x0000 */ void* VirtualAddress;
      /* 0x0000 */ unsigned __int64 Long;
      /* 0x0000 */ struct _MMWSLENTRY e1;
      /* 0x0000 */ struct _MMWSLE_FREE_ENTRY e2;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} MMWSLE, *PMMWSLE; /* size: 0x0008 */

typedef struct _ALPC_PORT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x0010 */ unsigned __int64 MaxMessageLength;
  /* 0x0018 */ unsigned __int64 MemoryBandwidth;
  /* 0x0020 */ unsigned __int64 MaxPoolUsage;
  /* 0x0028 */ unsigned __int64 MaxSectionSize;
  /* 0x0030 */ unsigned __int64 MaxViewSize;
  /* 0x0038 */ unsigned __int64 MaxTotalSectionSize;
  /* 0x0040 */ unsigned long DupObjectTypes;
  /* 0x0044 */ unsigned long Reserved;
} ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES; /* size: 0x0048 */

typedef struct _KALPC_HANDLE_DATA
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ObjectType;
  /* 0x0008 */ struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext;
} KALPC_HANDLE_DATA, *PKALPC_HANDLE_DATA; /* size: 0x0030 */

typedef struct _MMVAD_FLAGS2
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long FileOffset : 24; /* bit position: 0 */
    /* 0x0000 */ unsigned long Large : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long TrimBehind : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long Inherit : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long CopyOnWrite : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long NoValidationNeeded : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned long Spare : 3; /* bit position: 29 */
  }; /* bitfield */
} MMVAD_FLAGS2, *PMMVAD_FLAGS2; /* size: 0x0004 */

typedef struct _MMVAD
{
  /* 0x0000 */ struct _MMVAD_SHORT Core;
  union
  {
    union
    {
      /* 0x0040 */ unsigned long LongFlags2;
      /* 0x0040 */ struct _MMVAD_FLAGS2 VadFlags2;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  /* 0x0044 */ long Padding_245;
  /* 0x0048 */ struct _SUBSECTION* Subsection;
  /* 0x0050 */ struct _MMPTE* FirstPrototypePte;
  /* 0x0058 */ struct _MMPTE* LastContiguousPte;
  /* 0x0060 */ struct _LIST_ENTRY ViewLinks;
  /* 0x0070 */ struct _EPROCESS* VadsProcess;
  union
  {
    union
    {
      /* 0x0078 */ struct _MI_VAD_SEQUENTIAL_INFO SequentialVa;
      /* 0x0078 */ struct _MMEXTEND_INFO* ExtendedInfo;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u4;
} MMVAD, *PMMVAD; /* size: 0x0080 */

typedef struct _ALPC_COMPLETION_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ struct _EPROCESS* OwnerProcess;
  /* 0x0018 */ struct _EX_PUSH_LOCK CompletionListLock;
  /* 0x0020 */ struct _MDL* Mdl;
  /* 0x0028 */ void* UserVa;
  /* 0x0030 */ void* UserLimit;
  /* 0x0038 */ void* DataUserVa;
  /* 0x0040 */ void* SystemVa;
  /* 0x0048 */ unsigned __int64 TotalSize;
  /* 0x0050 */ struct _ALPC_COMPLETION_LIST_HEADER* Header;
  /* 0x0058 */ void* List;
  /* 0x0060 */ unsigned __int64 ListSize;
  /* 0x0068 */ void* Bitmap;
  /* 0x0070 */ unsigned __int64 BitmapSize;
  /* 0x0078 */ void* Data;
  /* 0x0080 */ unsigned __int64 DataSize;
  /* 0x0088 */ unsigned long BitmapLimit;
  /* 0x008c */ unsigned long BitmapNextHint;
  /* 0x0090 */ unsigned long ConcurrencyCount;
  /* 0x0094 */ unsigned long AttributeFlags;
  /* 0x0098 */ unsigned long AttributeSize;
  /* 0x009c */ long __PADDING__[1];
} ALPC_COMPLETION_LIST, *PALPC_COMPLETION_LIST; /* size: 0x00a0 */

typedef struct _MI_PHYSMEM_BLOCK
{
  /* 0x0000 */ struct _MMIO_TRACKER* IoTracker;
} MI_PHYSMEM_BLOCK, *PMI_PHYSMEM_BLOCK; /* size: 0x0008 */

typedef struct _MI_VAD_EVENT_BLOCK
{
  /* 0x0000 */ struct _MI_VAD_EVENT_BLOCK* Next;
  /* 0x0008 */ unsigned long WaitReason;
  /* 0x000c */ long Padding_246;
  union
  {
    /* 0x0010 */ struct _KGATE Gate;
    /* 0x0010 */ struct _MMADDRESS_LIST SecureInfo;
    /* 0x0010 */ struct _RTL_BITMAP_EX BitMap;
    /* 0x0010 */ struct _MMINPAGE_SUPPORT* InPageSupport;
    /* 0x0010 */ struct _MI_PHYSMEM_BLOCK PhysicalMemory;
    struct
    {
      /* 0x0010 */ struct _MI_LARGEPAGE_MEMORY_INFO* LargePage;
      /* 0x0018 */ long __PADDING__[4];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
} MI_VAD_EVENT_BLOCK, *PMI_VAD_EVENT_BLOCK; /* size: 0x0028 */

typedef struct _IOP_IRP_EXTENSION
{
  union
  {
    /* 0x0000 */ unsigned short ExtensionFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short Allocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short PropagateId : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short TimeStamped : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short SpareBits : 13; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short TypesAllocated;
  /* 0x0004 */ unsigned char GenericExtension[4];
  /* 0x0008 */ void* VerifierContext;
  /* 0x0010 */ struct _GUID ActivityId;
  /* 0x0020 */ union _LARGE_INTEGER Timestamp;
} IOP_IRP_EXTENSION, *PIOP_IRP_EXTENSION; /* size: 0x0028 */

typedef struct _HARDWARE_PTE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 reserved0 : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 36; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 reserved1 : 4; /* bit position: 48 */
    /* 0x0000 */ unsigned __int64 SoftwareWsIndex : 11; /* bit position: 52 */
    /* 0x0000 */ unsigned __int64 NoExecute : 1; /* bit position: 63 */
  }; /* bitfield */
} HARDWARE_PTE, *PHARDWARE_PTE; /* size: 0x0008 */

typedef struct _MMPTE_PROTOTYPE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 DemandFillProto : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 HiberVerifyConverted : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 Unused1 : 5; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 ReadOnly : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 Combined : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 11 */
    /* 0x0000 */ __int64 ProtoAddress : 48; /* bit position: 16 */
  }; /* bitfield */
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; /* size: 0x0008 */

typedef struct _MMPTE_TRANSITION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Spare : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 36; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 Unused : 16; /* bit position: 48 */
  }; /* bitfield */
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; /* size: 0x0008 */

typedef struct _MMPTE_SUBSECTION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Unused0 : 4; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Unused1 : 5; /* bit position: 11 */
    /* 0x0000 */ __int64 SubsectionAddress : 48; /* bit position: 16 */
  }; /* bitfield */
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; /* size: 0x0008 */

typedef struct _MMPTE
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned __int64 Long;
      /* 0x0000 */ volatile unsigned __int64 VolatileLong;
      /* 0x0000 */ struct _MMPTE_HARDWARE Hard;
      /* 0x0000 */ struct _HARDWARE_PTE Flush;
      /* 0x0000 */ struct _MMPTE_PROTOTYPE Proto;
      /* 0x0000 */ struct _MMPTE_SOFTWARE Soft;
      /* 0x0000 */ struct _MMPTE_TIMESTAMP TimeStamp;
      /* 0x0000 */ struct _MMPTE_TRANSITION Trans;
      /* 0x0000 */ struct _MMPTE_SUBSECTION Subsect;
      /* 0x0000 */ struct _MMPTE_LIST List;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} MMPTE, *PMMPTE; /* size: 0x0008 */

typedef struct _MMINPAGE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char InjectRetry : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char CrossThreadPadding : 7; /* bit position: 1 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char PrefetchSystemVmType : 2; /* bit position: 0 */
    /* 0x0001 */ unsigned char VaPrefetchReadBlock : 1; /* bit position: 2 */
    /* 0x0001 */ unsigned char CollidedFlowThrough : 1; /* bit position: 3 */
    /* 0x0001 */ unsigned char ForceCollisions : 1; /* bit position: 4 */
    /* 0x0001 */ unsigned char InPageExpanded : 1; /* bit position: 5 */
    /* 0x0001 */ unsigned char IssuedAtLowPriority : 1; /* bit position: 6 */
    /* 0x0001 */ unsigned char FaultFromStore : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char PagePriority : 3; /* bit position: 0 */
    /* 0x0002 */ unsigned char PerformRelocations : 1; /* bit position: 3 */
    /* 0x0002 */ unsigned char ClusteredPagePriority : 3; /* bit position: 4 */
    /* 0x0002 */ unsigned char MakeClusterValid : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char ZeroLastPage : 1; /* bit position: 0 */
    /* 0x0003 */ unsigned char UserFault : 1; /* bit position: 1 */
    /* 0x0003 */ unsigned char BoostedPriority : 1; /* bit position: 2 */
    /* 0x0003 */ unsigned char StandbyProtectionNeeded : 1; /* bit position: 3 */
    /* 0x0003 */ unsigned char PteChanged : 1; /* bit position: 4 */
    /* 0x0003 */ unsigned char PageFileFault : 1; /* bit position: 5 */
    /* 0x0003 */ unsigned char PageFilePageHashActive : 1; /* bit position: 6 */
    /* 0x0003 */ unsigned char Spare1 : 1; /* bit position: 7 */
  }; /* bitfield */
} MMINPAGE_FLAGS, *PMMINPAGE_FLAGS; /* size: 0x0004 */

typedef struct _MMINPAGE_SUPPORT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _LIST_ENTRY ListHead;
  /* 0x0020 */ struct _KEVENT Event;
  /* 0x0038 */ struct _KEVENT CollidedEvent;
  /* 0x0050 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0060 */ union _LARGE_INTEGER ReadOffset;
  /* 0x0068 */ struct _MMPTE PteContents;
  /* 0x0070 */ struct _ETHREAD* Thread;
  /* 0x0078 */ struct _MMPFN* LockedProtoPfn;
  /* 0x0080 */ volatile long WaitCount;
  /* 0x0084 */ unsigned long ByteCount;
  union
  {
    union
    {
      /* 0x0088 */ unsigned long ImagePteOffset;
      /* 0x0088 */ unsigned long TossPage;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u3;
  union
  {
    union
    {
      /* 0x008c */ struct _MMINPAGE_FLAGS e1;
      /* 0x008c */ unsigned long LongFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0090 */ struct _FILE_OBJECT* FilePointer;
  /* 0x0098 */ struct _CONTROL_AREA* ControlArea;
  /* 0x00a0 */ void* Autoboost;
  /* 0x00a8 */ void* FaultingAddress;
  /* 0x00b0 */ struct _MMPTE* PointerPte;
  /* 0x00b8 */ struct _MMPTE* BasePte;
  /* 0x00c0 */ struct _MMPFN* Pfn;
  /* 0x00c8 */ struct _MDL* PrefetchMdl;
  /* 0x00d0 */ struct _MDL Mdl;
  /* 0x0100 */ unsigned __int64 Page[16];
} MMINPAGE_SUPPORT, *PMMINPAGE_SUPPORT; /* size: 0x0180 */

typedef struct _RELATIVE_SYMLINK_INFO
{
  /* 0x0000 */ unsigned short ExposedNamespaceLength;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned short DeviceNameLength;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ struct _RELATIVE_SYMLINK_INFO* InteriorMountPoint;
  /* 0x0010 */ struct _UNICODE_STRING OpenedName;
} RELATIVE_SYMLINK_INFO, *PRELATIVE_SYMLINK_INFO; /* size: 0x0020 */

typedef struct _MMPFNENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char PageLocation : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char WriteInProgress : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char Modified : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char ReadInProgress : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char CacheAttribute : 2; /* bit position: 6 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char Priority : 3; /* bit position: 0 */
    /* 0x0001 */ unsigned char OnProtectedStandby : 1; /* bit position: 3 */
    /* 0x0001 */ unsigned char InPageError : 1; /* bit position: 4 */
    /* 0x0001 */ unsigned char Spare : 1; /* bit position: 5 */
    /* 0x0001 */ unsigned char RemovalRequested : 1; /* bit position: 6 */
    /* 0x0001 */ unsigned char ParityError : 1; /* bit position: 7 */
  }; /* bitfield */
} MMPFNENTRY, *PMMPFNENTRY; /* size: 0x0002 */

typedef struct _MMPFN
{
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Flink : 36; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 NodeFlinkHigh : 28; /* bit position: 36 */
      }; /* bitfield */
      /* 0x0000 */ unsigned __int64 WsIndex;
      /* 0x0000 */ struct _KEVENT* Event;
      /* 0x0000 */ void* Next;
      /* 0x0000 */ void* volatile VolatileNext;
      /* 0x0000 */ struct _KTHREAD* KernelStackOwner;
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY NextStackPfn;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 Blink : 36; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 NodeBlinkHigh : 20; /* bit position: 36 */
        /* 0x0008 */ unsigned __int64 TbFlushStamp : 4; /* bit position: 56 */
        /* 0x0008 */ unsigned __int64 SpareBlink : 4; /* bit position: 60 */
      }; /* bitfield */
      /* 0x0008 */ struct _MMPTE* ImageProtoPte;
      /* 0x0008 */ unsigned __int64 ShareCount;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u2;
  union
  {
    /* 0x0010 */ struct _MMPTE* PteAddress;
    /* 0x0010 */ void* volatile VolatilePteAddress;
    /* 0x0010 */ volatile long Lock;
    /* 0x0010 */ unsigned __int64 PteLong;
  }; /* size: 0x0008 */
  union
  {
    union
    {
      struct
      {
        /* 0x0018 */ unsigned short ReferenceCount;
        /* 0x001a */ struct _MMPFNENTRY e1;
      }; /* size: 0x0004 */
      struct
      {
        union
        {
          /* 0x0018 */ unsigned short ReferenceCount;
          /* 0x0018 */ volatile short VolatileReferenceCount;
        }; /* size: 0x0002 */
        union
        {
          /* 0x001a */ unsigned short ShortFlags;
          /* 0x001a */ volatile unsigned short VolatileShortFlags;
        }; /* size: 0x0002 */
      } /* size: 0x0004 */ e2;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u3;
  /* 0x001c */ unsigned short NodeBlinkLow;
  struct /* bitfield */
  {
    /* 0x001e */ unsigned char Unused : 4; /* bit position: 0 */
    /* 0x001e */ unsigned char VaType : 4; /* bit position: 4 */
  }; /* bitfield */
  union
  {
    /* 0x001f */ unsigned char ViewCount;
    /* 0x001f */ unsigned char NodeFlinkLow;
  }; /* size: 0x0001 */
  /* 0x0020 */ struct _MMPTE OriginalPte;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0028 */ unsigned __int64 PteFrame : 36; /* bit position: 0 */
        /* 0x0028 */ unsigned __int64 Channel : 2; /* bit position: 36 */
        /* 0x0028 */ unsigned __int64 Unused1 : 1; /* bit position: 38 */
        /* 0x0028 */ unsigned __int64 Unused2 : 1; /* bit position: 39 */
        /* 0x0028 */ unsigned __int64 Unused3 : 13; /* bit position: 40 */
        /* 0x0028 */ unsigned __int64 PfnExists : 1; /* bit position: 53 */
        /* 0x0028 */ unsigned __int64 PageIdentity : 3; /* bit position: 54 */
        /* 0x0028 */ unsigned __int64 PrototypePte : 1; /* bit position: 57 */
        /* 0x0028 */ unsigned __int64 PageColor : 6; /* bit position: 58 */
      }; /* bitfield */
      /* 0x0028 */ unsigned __int64 EntireField;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u4;
} MMPFN, *PMMPFN; /* size: 0x0030 */

typedef struct _MAILSLOT_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long MailslotQuota;
  /* 0x0004 */ unsigned long MaximumMessageSize;
  /* 0x0008 */ union _LARGE_INTEGER ReadTimeout;
  /* 0x0010 */ unsigned char TimeoutSpecified;
  /* 0x0011 */ char __PADDING__[7];
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS; /* size: 0x0018 */

typedef struct _MMSECTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int BeingDeleted : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int BeingCreated : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int BeingPurged : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int NoModifiedWriting : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int FailAllIo : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned int Image : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned int Based : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned int File : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned int AttemptingDelete : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned int PrefetchCreated : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned int PhysicalMemory : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned int CopyOnWrite : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned int Reserve : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned int Commit : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned int NoChange : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned int WasPurged : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned int UserReference : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned int GlobalMemory : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned int DeleteOnClose : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned int FilePointerNull : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned int PreferredNode : 6; /* bit position: 20 */
    /* 0x0000 */ unsigned int GlobalOnlyPerSession : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned int UserWritable : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned int Spare : 4; /* bit position: 28 */
  }; /* bitfield */
} MMSECTION_FLAGS, *PMMSECTION_FLAGS; /* size: 0x0004 */

typedef struct _CONTROL_AREA
{
  /* 0x0000 */ struct _SEGMENT* Segment;
  /* 0x0008 */ struct _LIST_ENTRY ListHead;
  /* 0x0018 */ unsigned __int64 NumberOfSectionReferences;
  /* 0x0020 */ unsigned __int64 NumberOfPfnReferences;
  /* 0x0028 */ unsigned __int64 NumberOfMappedViews;
  /* 0x0030 */ unsigned __int64 NumberOfUserReferences;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long LongFlags;
      /* 0x0038 */ struct _MMSECTION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x003c */ long Padding_247;
  /* 0x0040 */ struct _EX_FAST_REF FilePointer;
  /* 0x0048 */ volatile long ControlAreaLock;
  /* 0x004c */ unsigned long ModifiedWriteCount;
  /* 0x0050 */ struct _MI_CONTROL_AREA_WAIT_BLOCK* WaitList;
  union
  {
    struct
    {
      union
      {
        /* 0x0058 */ unsigned long NumberOfSystemCacheViews;
        /* 0x0058 */ unsigned long ImageRelocationStartBit;
      }; /* size: 0x0004 */
      union
      {
        /* 0x005c */ volatile long WritableUserReferences;
        struct /* bitfield */
        {
          /* 0x005c */ unsigned long ImageRelocationSizeIn64k : 16; /* bit position: 0 */
          /* 0x005c */ unsigned long Unused : 12; /* bit position: 16 */
          /* 0x005c */ unsigned long CantMove : 1; /* bit position: 28 */
          /* 0x005c */ unsigned long BitMap : 2; /* bit position: 29 */
          /* 0x005c */ unsigned long ImageActive : 1; /* bit position: 31 */
        }; /* bitfield */
      }; /* size: 0x0004 */
      union
      {
        /* 0x0060 */ unsigned long FlushInProgressCount;
        /* 0x0060 */ unsigned long NumberOfSubsections;
        /* 0x0060 */ struct _MI_IMAGE_SECURITY_REFERENCE* SeImageStub;
      }; /* size: 0x0008 */
    } /* size: 0x0010 */ e2;
  } /* size: 0x0010 */ u2;
  /* 0x0068 */ volatile unsigned __int64 LockedPages;
  /* 0x0070 */ struct _EX_PUSH_LOCK FileObjectLock;
} CONTROL_AREA, *PCONTROL_AREA; /* size: 0x0078 */

typedef struct _SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0008 */ unsigned long TotalNumberOfPtes;
  /* 0x000c */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x0010 */ unsigned __int64 NumberOfCommittedPages;
  /* 0x0018 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0020 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0020 */ void* BasedAddress;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _EX_PUSH_LOCK SegmentLock;
  union
  {
    union
    {
      /* 0x0030 */ unsigned __int64 ImageCommitment;
      /* 0x0030 */ struct _EPROCESS* CreatingProcess;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  union
  {
    union
    {
      /* 0x0038 */ struct _MI_SECTION_IMAGE_INFORMATION* ImageInformation;
      /* 0x0038 */ void* FirstMappedVa;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u2;
  /* 0x0040 */ struct _MMPTE* PrototypePte;
} SEGMENT, *PSEGMENT; /* size: 0x0048 */

typedef struct _MMEXTEND_INFO
{
  /* 0x0000 */ unsigned __int64 CommittedSize;
  /* 0x0008 */ unsigned long ReferenceCount;
  /* 0x000c */ long __PADDING__[1];
} MMEXTEND_INFO, *PMMEXTEND_INFO; /* size: 0x0010 */

typedef struct _SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ void* TransferAddress;
  /* 0x0008 */ unsigned long ZeroBits;
  /* 0x000c */ long Padding_248;
  /* 0x0010 */ unsigned __int64 MaximumStackSize;
  /* 0x0018 */ unsigned __int64 CommittedStackSize;
  /* 0x0020 */ unsigned long SubSystemType;
  union
  {
    struct
    {
      /* 0x0024 */ unsigned short SubSystemMinorVersion;
      /* 0x0026 */ unsigned short SubSystemMajorVersion;
    }; /* size: 0x0004 */
    /* 0x0024 */ unsigned long SubSystemVersion;
  }; /* size: 0x0004 */
  /* 0x0028 */ unsigned long GpValue;
  /* 0x002c */ unsigned short ImageCharacteristics;
  /* 0x002e */ unsigned short DllCharacteristics;
  /* 0x0030 */ unsigned short Machine;
  /* 0x0032 */ unsigned char ImageContainsCode;
  union
  {
    /* 0x0033 */ unsigned char ImageFlags;
    struct /* bitfield */
    {
      /* 0x0033 */ unsigned char ComPlusNativeReady : 1; /* bit position: 0 */
      /* 0x0033 */ unsigned char ComPlusILOnly : 1; /* bit position: 1 */
      /* 0x0033 */ unsigned char ImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0033 */ unsigned char ImageMappedFlat : 1; /* bit position: 3 */
      /* 0x0033 */ unsigned char BaseBelow4gb : 1; /* bit position: 4 */
      /* 0x0033 */ unsigned char Reserved : 3; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0034 */ unsigned long LoaderFlags;
  /* 0x0038 */ unsigned long ImageFileSize;
  /* 0x003c */ unsigned long CheckSum;
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION; /* size: 0x0040 */

typedef struct _MI_SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;
  /* 0x0040 */ struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;
} MI_SECTION_IMAGE_INFORMATION, *PMI_SECTION_IMAGE_INFORMATION; /* size: 0x0048 */

typedef struct _MI_CONTROL_AREA_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_CONTROL_AREA_WAIT_BLOCK* Next;
  /* 0x0008 */ unsigned long WaitReason;
  /* 0x000c */ unsigned long WaitResponse;
  /* 0x0010 */ struct _KGATE Gate;
} MI_CONTROL_AREA_WAIT_BLOCK, *PMI_CONTROL_AREA_WAIT_BLOCK; /* size: 0x0028 */

typedef struct _MI_CACHED_PTE
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long GlobalTimeStamp;
      /* 0x0004 */ unsigned long PteIndex;
    }; /* size: 0x0008 */
    /* 0x0000 */ __int64 Long;
  }; /* size: 0x0008 */
} MI_CACHED_PTE, *PMI_CACHED_PTE; /* size: 0x0008 */

typedef struct _IMAGE_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ void* PageHashes;
    /* 0x0000 */ unsigned __int64 Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 SecurityBeingCreated : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 SecurityMandatory : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 PageHashPointer : 61; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} IMAGE_SECURITY_CONTEXT, *PIMAGE_SECURITY_CONTEXT; /* size: 0x0008 */

typedef struct _MI_IMAGE_SECURITY_REFERENCE
{
  /* 0x0000 */ struct _IMAGE_SECURITY_CONTEXT SecurityContext;
  /* 0x0008 */ void* DynamicRelocations;
} MI_IMAGE_SECURITY_REFERENCE, *PMI_IMAGE_SECURITY_REFERENCE; /* size: 0x0010 */

typedef union _MM_STORE_KEY
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 KeyLow : 60; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 KeyHigh : 4; /* bit position: 60 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 EntireKey;
  }; /* size: 0x0008 */
} MM_STORE_KEY, *PMM_STORE_KEY; /* size: 0x0008 */

typedef struct _DBGKD_READ_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY32, *PDBGKD_READ_MEMORY32; /* size: 0x000c */

typedef struct _DBGKD_WRITE_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY32, *PDBGKD_WRITE_MEMORY32; /* size: 0x000c */

typedef struct _DBGKD_READ_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY64, *PDBGKD_READ_MEMORY64; /* size: 0x0010 */

typedef struct _DBGKD_GET_CONTEXT
{
  /* 0x0000 */ unsigned long Unused;
} DBGKD_GET_CONTEXT, *PDBGKD_GET_CONTEXT; /* size: 0x0004 */

typedef struct _DBGKD_RESTORE_BREAKPOINT
{
  /* 0x0000 */ unsigned long BreakPointHandle;
} DBGKD_RESTORE_BREAKPOINT, *PDBGKD_RESTORE_BREAKPOINT; /* size: 0x0004 */

typedef struct _DBGKD_CONTINUE
{
  /* 0x0000 */ long ContinueStatus;
} DBGKD_CONTINUE, *PDBGKD_CONTINUE; /* size: 0x0004 */

typedef struct _X86_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned long Dr7;
  /* 0x0008 */ unsigned long CurrentSymbolStart;
  /* 0x000c */ unsigned long CurrentSymbolEnd;
} X86_DBGKD_CONTROL_SET, *PX86_DBGKD_CONTROL_SET; /* size: 0x0010 */

typedef struct _IA64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned __int64 CurrentSymbolStart;
  /* 0x000c */ unsigned __int64 CurrentSymbolEnd;
} IA64_DBGKD_CONTROL_SET, *PIA64_DBGKD_CONTROL_SET; /* size: 0x0014 */

typedef struct _ARM_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARM_DBGKD_CONTROL_SET, *PARM_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _ARMCE_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARMCE_DBGKD_CONTROL_SET, *PARMCE_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _PPC_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} PPC_DBGKD_CONTROL_SET, *PPPC_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _DBGKD_ANY_CONTROL_SET
{
  union
  {
    /* 0x0000 */ struct _X86_DBGKD_CONTROL_SET X86ControlSet;
    /* 0x0000 */ unsigned long AlphaControlSet;
    /* 0x0000 */ struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;
    /* 0x0000 */ struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
    /* 0x0000 */ struct _ARM_DBGKD_CONTROL_SET ArmControlSet;
    /* 0x0000 */ struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
    struct
    {
      /* 0x0000 */ struct _PPC_DBGKD_CONTROL_SET PpcControlSet;
      /* 0x000c */ long __PADDING__[4];
    }; /* size: 0x001c */
  }; /* size: 0x001c */
} DBGKD_ANY_CONTROL_SET, *PDBGKD_ANY_CONTROL_SET; /* size: 0x001c */

typedef struct _DBGKD_CONTINUE2
{
  /* 0x0000 */ long ContinueStatus;
  union
  {
    /* 0x0004 */ struct _AMD64_DBGKD_CONTROL_SET ControlSet;
    /* 0x0004 */ struct _DBGKD_ANY_CONTROL_SET AnyControlSet;
  }; /* size: 0x001c */
} DBGKD_CONTINUE2, *PDBGKD_CONTINUE2; /* size: 0x0020 */

typedef struct _DBGKD_READ_WRITE_IO32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long IoAddress;
  /* 0x0008 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO32, *PDBGKD_READ_WRITE_IO32; /* size: 0x000c */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned long IoAddress;
  /* 0x0014 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO_EXTENDED32, *PDBGKD_READ_WRITE_IO_EXTENDED32; /* size: 0x0018 */

typedef struct _DBGKD_QUERY_SPECIAL_CALLS
{
  /* 0x0000 */ unsigned long NumberOfSpecialCalls;
} DBGKD_QUERY_SPECIAL_CALLS, *PDBGKD_QUERY_SPECIAL_CALLS; /* size: 0x0004 */

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Calls;
  /* 0x000c */ unsigned long MaxCallsPerPeriod;
  /* 0x0010 */ unsigned long MinInstructions;
  /* 0x0014 */ unsigned long MaxInstructions;
  /* 0x0018 */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT32, *PDBGKD_GET_INTERNAL_BREAKPOINT32; /* size: 0x001c */

typedef struct _DBGKD_GET_VERSION32
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned short ProtocolVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned long KernBase;
  /* 0x000c */ unsigned long PsLoadedModuleList;
  /* 0x0010 */ unsigned short MachineType;
  /* 0x0012 */ unsigned short ThCallbackStack;
  /* 0x0014 */ unsigned short NextCallback;
  /* 0x0016 */ unsigned short FramePointer;
  /* 0x0018 */ unsigned long KiCallUserMode;
  /* 0x001c */ unsigned long KeUserCallbackDispatcher;
  /* 0x0020 */ unsigned long BreakpointWithStatus;
  /* 0x0024 */ unsigned long DebuggerDataList;
} DBGKD_GET_VERSION32, *PDBGKD_GET_VERSION32; /* size: 0x0028 */

typedef struct _DBGKD_BREAKPOINTEX
{
  /* 0x0000 */ unsigned long BreakPointCount;
  /* 0x0004 */ long ContinueStatus;
} DBGKD_BREAKPOINTEX, *PDBGKD_BREAKPOINTEX; /* size: 0x0008 */

typedef struct _DBGKD_READ_WRITE_MSR
{
  /* 0x0000 */ unsigned long Msr;
  /* 0x0004 */ unsigned long DataValueLow;
  /* 0x0008 */ unsigned long DataValueHigh;
} DBGKD_READ_WRITE_MSR, *PDBGKD_READ_WRITE_MSR; /* size: 0x000c */

typedef struct _DBGKD_SEARCH_MEMORY
{
  union
  {
    /* 0x0000 */ unsigned __int64 SearchAddress;
    /* 0x0000 */ unsigned __int64 FoundAddress;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 SearchLength;
  /* 0x0010 */ unsigned long PatternLength;
  /* 0x0014 */ long __PADDING__[1];
} DBGKD_SEARCH_MEMORY, *PDBGKD_SEARCH_MEMORY; /* size: 0x0018 */

typedef struct _DBGKD_CONTEXT_EX
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long ByteCount;
  /* 0x0008 */ unsigned long BytesCopied;
} DBGKD_CONTEXT_EX, *PDBGKD_CONTEXT_EX; /* size: 0x000c */

typedef struct _MI_LARGEPAGE_MEMORY_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ struct _COLORED_PAGE_INFO* ColoredPageInfoBase;
  /* 0x0018 */ unsigned long PagesNeedZeroing;
  /* 0x001c */ long __PADDING__[1];
} MI_LARGEPAGE_MEMORY_INFO, *PMI_LARGEPAGE_MEMORY_INFO; /* size: 0x0020 */

typedef struct _POP_RW_LOCK
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _KTHREAD* Thread;
} POP_RW_LOCK, *PPOP_RW_LOCK; /* size: 0x0010 */

typedef union _POP_FX_DEVICE_STATUS
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SystemTransition : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PepD0Notify : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long IdleTimerOn : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long IgnoreIdleTimeout : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long IrpInUse : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long IrpPending : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long DPNRDeviceNotified : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long DPNRReceivedFromPep : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} POP_FX_DEVICE_STATUS, *PPOP_FX_DEVICE_STATUS; /* size: 0x0004 */

typedef struct _PO_DIAG_STACK_RECORD
{
  /* 0x0000 */ unsigned long StackDepth;
  /* 0x0004 */ long Padding_249;
  /* 0x0008 */ void* Stack[1];
} PO_DIAG_STACK_RECORD, *PPO_DIAG_STACK_RECORD; /* size: 0x0010 */

typedef struct _HEAP_FREE_ENTRY
{
  union
  {
    struct
    {
      /* 0x0000 */ void* PreviousBlockPrivateData;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short Size;
          /* 0x000a */ unsigned char Flags;
          /* 0x000b */ unsigned char SmallTagIndex;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long SubSegmentCode;
          /* 0x000c */ unsigned short PreviousSize;
          union
          {
            /* 0x000e */ unsigned char SegmentOffset;
            struct
            {
              /* 0x000e */ unsigned char LFHFlags;
              /* 0x000f */ unsigned char UnusedBytes;
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 CompactHeader;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ void* Reserved;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short FunctionIndex;
          /* 0x000a */ unsigned short ContextValue;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long InterceptorValue;
          /* 0x000c */ unsigned short UnusedBytesLength;
          /* 0x000e */ unsigned char EntryOffset;
          /* 0x000f */ unsigned char ExtendedBlockSignature;
        }; /* size: 0x0008 */
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ void* ReservedForAlignment;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned long Code1;
          union
          {
            struct
            {
              /* 0x000c */ unsigned short Code2;
              /* 0x000e */ unsigned char Code3;
              /* 0x000f */ unsigned char Code4;
            }; /* size: 0x0004 */
            /* 0x000c */ unsigned long Code234;
          }; /* size: 0x0004 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 AgregateCode;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0010 */ struct _LIST_ENTRY FreeList;
} HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY; /* size: 0x0020 */

typedef struct _DYNAMIC_FUNCTION_TABLE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;
  /* 0x0018 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0020 */ unsigned __int64 MinimumAddress;
  /* 0x0028 */ unsigned __int64 MaximumAddress;
  /* 0x0030 */ unsigned __int64 BaseAddress;
  /* 0x0038 */ void* Callback /* function */;
  /* 0x0040 */ void* Context;
  /* 0x0048 */ unsigned short* OutOfProcessCallbackDll;
  /* 0x0050 */ enum _FUNCTION_TABLE_TYPE Type;
  /* 0x0054 */ unsigned long EntryCount;
} DYNAMIC_FUNCTION_TABLE, *PDYNAMIC_FUNCTION_TABLE; /* size: 0x0058 */

typedef struct _HEAP_ENTRY_EXTRA
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short AllocatorBackTraceIndex;
      /* 0x0002 */ unsigned short TagIndex;
      /* 0x0004 */ long Padding_250;
      /* 0x0008 */ unsigned __int64 Settable;
    }; /* size: 0x000c */
    struct
    {
      /* 0x0000 */ unsigned __int64 ZeroInit;
      /* 0x0008 */ unsigned __int64 ZeroInit1;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA; /* size: 0x0010 */

typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ struct _HEAP_ENTRY_EXTRA ExtraStuff;
  /* 0x0020 */ unsigned __int64 CommitSize;
  /* 0x0028 */ unsigned __int64 ReserveSize;
  /* 0x0030 */ struct _HEAP_ENTRY BusyBlock;
} HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY; /* size: 0x0040 */

typedef struct _PO_HIBER_PERF
{
  /* 0x0000 */ unsigned __int64 HiberIoTicks;
  /* 0x0008 */ unsigned __int64 HiberIoCpuTicks;
  /* 0x0010 */ unsigned __int64 HiberInitTicks;
  /* 0x0018 */ unsigned __int64 HiberHiberFileTicks;
  /* 0x0020 */ unsigned __int64 HiberCompressTicks;
  /* 0x0028 */ unsigned __int64 HiberSharedBufferTicks;
  /* 0x0030 */ union _LARGE_INTEGER TotalHibernateTime;
  /* 0x0038 */ unsigned long POSTTime;
  /* 0x003c */ unsigned long ResumeBootMgrTime;
  /* 0x0040 */ unsigned long BootmgrUserInputTime;
  /* 0x0044 */ long Padding_251;
  /* 0x0048 */ unsigned __int64 ResumeAppTicks;
  /* 0x0050 */ unsigned __int64 ResumeAppStartTimestamp;
  /* 0x0058 */ unsigned __int64 ResumeLibraryInitTicks;
  /* 0x0060 */ unsigned __int64 ResumeInitTicks;
  /* 0x0068 */ unsigned __int64 ResumeRestoreImageStartTimestamp;
  /* 0x0070 */ unsigned __int64 ResumeHiberFileTicks;
  /* 0x0078 */ unsigned __int64 ResumeIoTicks;
  /* 0x0080 */ unsigned __int64 ResumeDecompressTicks;
  /* 0x0088 */ unsigned __int64 ResumeAllocateTicks;
  /* 0x0090 */ unsigned __int64 ResumeUserInOutTicks;
  /* 0x0098 */ unsigned __int64 ResumeMapTicks;
  /* 0x00a0 */ unsigned __int64 ResumeUnmapTicks;
  /* 0x00a8 */ unsigned __int64 ResumeKernelSwitchTimestamp;
  /* 0x00b0 */ unsigned __int64 WriteLogDataTimestamp;
  /* 0x00b8 */ unsigned __int64 KernelReturnFromHandler;
  /* 0x00c0 */ unsigned __int64 TimeStampCounterAtSwitchTime;
  /* 0x00c8 */ unsigned __int64 HalTscOffset;
  /* 0x00d0 */ unsigned __int64 HvlTscOffset;
  /* 0x00d8 */ unsigned __int64 SleeperThreadEnd;
  /* 0x00e0 */ unsigned __int64 KernelReturnSystemPowerStateTimestamp;
  /* 0x00e8 */ unsigned __int64 IoBoundedness;
  /* 0x00f0 */ unsigned __int64 KernelDecompressTicks;
  /* 0x00f8 */ unsigned __int64 KernelIoTicks;
  /* 0x0100 */ unsigned __int64 KernelCopyTicks;
  /* 0x0108 */ unsigned __int64 ReadCheckCount;
  /* 0x0110 */ unsigned __int64 KernelInitTicks;
  /* 0x0118 */ unsigned __int64 KernelResumeHiberFileTicks;
  /* 0x0120 */ unsigned __int64 KernelIoCpuTicks;
  /* 0x0128 */ unsigned __int64 KernelSharedBufferTicks;
  /* 0x0130 */ unsigned __int64 KernelAnimationTicks;
  /* 0x0138 */ union _LARGE_INTEGER AnimationStart;
  /* 0x0140 */ union _LARGE_INTEGER AnimationStop;
  /* 0x0148 */ unsigned long DeviceResumeTime;
  /* 0x014c */ long Padding_252;
  /* 0x0150 */ unsigned __int64 BootPagesProcessed;
  /* 0x0158 */ unsigned __int64 KernelPagesProcessed;
  /* 0x0160 */ unsigned __int64 BootBytesWritten;
  /* 0x0168 */ unsigned __int64 KernelBytesWritten;
  /* 0x0170 */ unsigned __int64 BootPagesWritten;
  /* 0x0178 */ unsigned __int64 KernelPagesWritten;
  /* 0x0180 */ unsigned __int64 BytesWritten;
  /* 0x0188 */ unsigned long PagesWritten;
  /* 0x018c */ unsigned long FileRuns;
  /* 0x0190 */ unsigned long NoMultiStageResumeReason;
  /* 0x0194 */ unsigned long MaxHuffRatio;
  /* 0x0198 */ unsigned __int64 AdjustedTotalResumeTime;
  /* 0x01a0 */ unsigned __int64 ResumeCompleteTimestamp;
} PO_HIBER_PERF, *PPO_HIBER_PERF; /* size: 0x01a8 */

struct PO_MEMORY_IMAGE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long ImageType;
  /* 0x0008 */ unsigned long CheckSum;
  /* 0x000c */ unsigned long LengthSelf;
  /* 0x0010 */ unsigned __int64 PageSelf;
  /* 0x0018 */ unsigned long PageSize;
  /* 0x001c */ long Padding_253;
  /* 0x0020 */ union _LARGE_INTEGER SystemTime;
  /* 0x0028 */ unsigned __int64 InterruptTime;
  /* 0x0030 */ unsigned __int64 FeatureFlags;
  /* 0x0038 */ unsigned char HiberFlags;
  /* 0x0039 */ unsigned char spare[3];
  /* 0x003c */ unsigned long NoHiberPtes;
  /* 0x0040 */ unsigned __int64 HiberVa;
  /* 0x0048 */ unsigned long NoFreePages;
  /* 0x004c */ unsigned long FreeMapCheck;
  /* 0x0050 */ unsigned long WakeCheck;
  /* 0x0054 */ long Padding_254;
  /* 0x0058 */ unsigned __int64 NumPagesForLoader;
  /* 0x0060 */ unsigned __int64 FirstBootRestorePage;
  /* 0x0068 */ unsigned __int64 FirstKernelRestorePage;
  /* 0x0070 */ struct _PO_HIBER_PERF PerfInfo;
  /* 0x0218 */ unsigned long FirmwareRuntimeInformationPages;
  /* 0x021c */ long Padding_255;
  /* 0x0220 */ unsigned __int64 FirmwareRuntimeInformation[1];
  /* 0x0228 */ unsigned long SiLogOffset;
  /* 0x022c */ unsigned long NoBootLoaderLogPages;
  /* 0x0230 */ unsigned __int64 BootLoaderLogPages[24];
  /* 0x02f0 */ unsigned long NotUsed;
  /* 0x02f4 */ unsigned long ResumeContextCheck;
  /* 0x02f8 */ unsigned long ResumeContextPages;
  /* 0x02fc */ unsigned char Hiberboot;
  /* 0x02fd */ char Padding_256[3];
  /* 0x0300 */ unsigned __int64 HvCr3;
  /* 0x0308 */ unsigned __int64 HvEntryPoint;
  /* 0x0310 */ unsigned __int64 HvReservedTransitionAddress;
  /* 0x0318 */ unsigned __int64 HvReservedTransitionAddressSize;
  /* 0x0320 */ unsigned __int64 BootFlags;
  /* 0x0328 */ unsigned __int64 HalEntryPointPhysical;
  /* 0x0330 */ unsigned __int64 HighestPhysicalPage;
  /* 0x0338 */ unsigned __int64 BitlockerKeyPfns[4];
  /* 0x0358 */ unsigned long HardwareSignature;
  /* 0x035c */ long __PADDING__[1];
}; /* size: 0x0360 */

typedef struct _HEAP_LIST_LOOKUP
{
  /* 0x0000 */ struct _HEAP_LIST_LOOKUP* ExtendedLookup;
  /* 0x0008 */ unsigned long ArraySize;
  /* 0x000c */ unsigned long ExtraItem;
  /* 0x0010 */ unsigned long ItemCount;
  /* 0x0014 */ unsigned long OutOfRangeItems;
  /* 0x0018 */ unsigned long BaseIndex;
  /* 0x001c */ long Padding_257;
  /* 0x0020 */ struct _LIST_ENTRY* ListHead;
  /* 0x0028 */ unsigned long* ListsInUseUlong;
  /* 0x0030 */ struct _LIST_ENTRY** ListHints;
} HEAP_LIST_LOOKUP, *PHEAP_LIST_LOOKUP; /* size: 0x0038 */

typedef struct _HEAP_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ unsigned short TagIndex;
  /* 0x0012 */ unsigned short CreatorBackTraceIndex;
  /* 0x0014 */ wchar_t TagName[24];
  /* 0x0044 */ long __PADDING__[1];
} HEAP_TAG_ENTRY, *PHEAP_TAG_ENTRY; /* size: 0x0048 */

typedef struct _VF_POOL_TRACE
{
  /* 0x0000 */ void* Address;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ struct _ETHREAD* Thread;
  /* 0x0018 */ void* StackTrace[13];
} VF_POOL_TRACE, *PVF_POOL_TRACE; /* size: 0x0080 */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _IO_MINI_COMPLETION_PACKET_USER* Packet;
  /* 0x0010 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* Lookaside;
} ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY, *PALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY; /* size: 0x0018 */

struct POWER_ACTION_POLICY
{
  /* 0x0000 */ enum POWER_ACTION Action;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EventCode;
}; /* size: 0x000c */

struct SYSTEM_POWER_LEVEL
{
  /* 0x0000 */ unsigned char Enable;
  /* 0x0001 */ unsigned char Spare[3];
  /* 0x0004 */ unsigned long BatteryLevel;
  /* 0x0008 */ struct POWER_ACTION_POLICY PowerPolicy;
  /* 0x0014 */ enum _SYSTEM_POWER_STATE MinSystemState;
}; /* size: 0x0018 */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long ActiveCount;
  /* 0x0010 */ unsigned long PendingNullCount;
  /* 0x0014 */ unsigned long PendingCheckCompletionListCount;
  /* 0x0018 */ unsigned long PendingDelete;
  /* 0x001c */ long Padding_258;
  /* 0x0020 */ struct _SINGLE_LIST_ENTRY FreeListHead;
  /* 0x0028 */ void* CompletionPort;
  /* 0x0030 */ void* CompletionKey;
  /* 0x0038 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];
} ALPC_COMPLETION_PACKET_LOOKASIDE, *PALPC_COMPLETION_PACKET_LOOKASIDE; /* size: 0x0050 */

typedef struct _DEVOBJ_EXTENSION
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long Padding_259;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ unsigned long PowerFlags;
  /* 0x0014 */ long Padding_260;
  /* 0x0018 */ struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;
  /* 0x0020 */ unsigned long ExtensionFlags;
  /* 0x0024 */ long Padding_261;
  /* 0x0028 */ void* DeviceNode;
  /* 0x0030 */ struct _DEVICE_OBJECT* AttachedTo;
  /* 0x0038 */ long StartIoCount;
  /* 0x003c */ long StartIoKey;
  /* 0x0040 */ unsigned long StartIoFlags;
  /* 0x0044 */ long Padding_262;
  /* 0x0048 */ struct _VPB* Vpb;
  /* 0x0050 */ void* DependencyNode;
  /* 0x0058 */ void* VerifierContext;
} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION; /* size: 0x0060 */

typedef struct _SYSTEM_POWER_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ struct POWER_ACTION_POLICY PowerButton;
  /* 0x0010 */ struct POWER_ACTION_POLICY SleepButton;
  /* 0x001c */ struct POWER_ACTION_POLICY LidClose;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE LidOpenWake;
  /* 0x002c */ unsigned long Reserved;
  /* 0x0030 */ struct POWER_ACTION_POLICY Idle;
  /* 0x003c */ unsigned long IdleTimeout;
  /* 0x0040 */ unsigned char IdleSensitivity;
  /* 0x0041 */ unsigned char DynamicThrottle;
  /* 0x0042 */ unsigned char Spare2[2];
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* 0x004c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep;
  /* 0x0050 */ unsigned long WinLogonFlags;
  /* 0x0054 */ unsigned long Spare3;
  /* 0x0058 */ unsigned long DozeS4Timeout;
  /* 0x005c */ unsigned long BroadcastCapacityResolution;
  /* 0x0060 */ struct SYSTEM_POWER_LEVEL DischargePolicy[4];
  /* 0x00c0 */ unsigned long VideoTimeout;
  /* 0x00c4 */ unsigned char VideoDimDisplay;
  /* 0x00c5 */ char Padding_263[3];
  /* 0x00c8 */ unsigned long VideoReserved[3];
  /* 0x00d4 */ unsigned long SpindownTimeout;
  /* 0x00d8 */ unsigned char OptimizeForPower;
  /* 0x00d9 */ unsigned char FanThrottleTolerance;
  /* 0x00da */ unsigned char ForcedThrottle;
  /* 0x00db */ unsigned char MinThrottle;
  /* 0x00dc */ struct POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY; /* size: 0x00e8 */

typedef struct _BLOB_TYPE
{
  /* 0x0000 */ enum _BLOB_ID ResourceId;
  /* 0x0004 */ unsigned long PoolTag;
  /* 0x0008 */ unsigned long LookasideIndex;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ struct _BLOB_COUNTERS* Counters;
  /* 0x0018 */ void* DeleteProcedure /* function */;
  /* 0x0020 */ void* DestroyProcedure /* function */;
  /* 0x0028 */ unsigned __int64 UsualSize;
} BLOB_TYPE, *PBLOB_TYPE; /* size: 0x0030 */

typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ unsigned long AllocatedAttributes;
  /* 0x0004 */ unsigned long ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES; /* size: 0x0008 */

typedef struct _COMPRESSED_DATA_INFO
{
  /* 0x0000 */ unsigned short CompressionFormatAndEngine;
  /* 0x0002 */ unsigned char CompressionUnitShift;
  /* 0x0003 */ unsigned char ChunkShift;
  /* 0x0004 */ unsigned char ClusterShift;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ unsigned short NumberOfChunks;
  /* 0x0008 */ unsigned long CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO; /* size: 0x000c */

typedef struct _DIRTY_PAGE_STATISTICS
{
  /* 0x0000 */ unsigned __int64 DirtyPages;
  /* 0x0008 */ unsigned __int64 DirtyPagesLastScan;
  /* 0x0010 */ unsigned long DirtyPagesScheduledLastScan;
  /* 0x0014 */ long __PADDING__[1];
} DIRTY_PAGE_STATISTICS, *PDIRTY_PAGE_STATISTICS; /* size: 0x0018 */

typedef struct _CC_EXTERNAL_CACHE_INFO
{
  /* 0x0000 */ void* Callback /* function */;
  /* 0x0008 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0020 */ struct _LIST_ENTRY Links;
} CC_EXTERNAL_CACHE_INFO, *PCC_EXTERNAL_CACHE_INFO; /* size: 0x0030 */

typedef struct _CM_TRANS
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0010 */ struct _LIST_ENTRY KCBUoWListHead;
  /* 0x0020 */ struct _LIST_ENTRY LazyCommitListEntry;
  /* 0x0030 */ void* KtmTrans;
  /* 0x0038 */ struct _CM_RM* CmRm;
  /* 0x0040 */ struct _KENLISTMENT* KtmEnlistmentObject;
  /* 0x0048 */ void* KtmEnlistmentHandle;
  /* 0x0050 */ struct _GUID KtmUow;
  /* 0x0060 */ unsigned __int64 StartLsn;
  /* 0x0068 */ unsigned long TransState;
  /* 0x006c */ unsigned long HiveCount;
  /* 0x0070 */ struct _CMHIVE* HiveArray[7];
} CM_TRANS, *PCM_TRANS; /* size: 0x00a8 */

typedef struct _CM_WORKITEM
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long Private;
  /* 0x0014 */ long Padding_264;
  /* 0x0018 */ void* WorkerRoutine /* function */;
  /* 0x0020 */ void* Parameter;
} CM_WORKITEM, *PCM_WORKITEM; /* size: 0x0028 */

typedef struct _CMHIVE
{
  /* 0x0000 */ struct _HHIVE Hive;
  /* 0x05a0 */ void* FileHandles[6];
  /* 0x05d0 */ struct _LIST_ENTRY NotifyList;
  /* 0x05e0 */ struct _LIST_ENTRY HiveList;
  /* 0x05f0 */ struct _LIST_ENTRY PreloadedHiveList;
  /* 0x0600 */ struct _EX_RUNDOWN_REF HiveRundown;
  /* 0x0608 */ struct _LIST_ENTRY ParseCacheEntries;
  /* 0x0618 */ struct _CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;
  /* 0x0620 */ unsigned long KcbCacheTableSize;
  /* 0x0624 */ long Padding_265;
  /* 0x0628 */ struct _CM_KEY_HASH_TABLE_ENTRY* DeletedKcbTable;
  /* 0x0630 */ unsigned long DeletedKcbTableSize;
  /* 0x0634 */ unsigned long Identity;
  /* 0x0638 */ struct _FAST_MUTEX* HiveLock;
  /* 0x0640 */ struct _FAST_MUTEX* WriterLock;
  /* 0x0648 */ struct _ERESOURCE* FlusherLock;
  /* 0x0650 */ struct _RTL_BITMAP FlushDirtyVector;
  /* 0x0660 */ unsigned long FlushDirtyVectorSize;
  /* 0x0664 */ long Padding_266;
  /* 0x0668 */ unsigned char* FlushLogEntry;
  /* 0x0670 */ unsigned long FlushLogEntrySize;
  /* 0x0674 */ unsigned long FlushHiveTruncated;
  /* 0x0678 */ unsigned char FlushBaseBlockDirty;
  /* 0x0679 */ char Padding_267[7];
  /* 0x0680 */ struct _RTL_BITMAP CapturedUnreconciledVector;
  /* 0x0690 */ unsigned long CapturedUnreconciledVectorSize;
  /* 0x0694 */ long Padding_268;
  /* 0x0698 */ struct CMP_OFFSET_ARRAY* UnreconciledOffsetArray;
  /* 0x06a0 */ unsigned long UnreconciledOffsetArrayCount;
  /* 0x06a4 */ long Padding_269;
  /* 0x06a8 */ struct _HBASE_BLOCK* UnreconciledBaseBlock;
  /* 0x06b0 */ struct _EX_PUSH_LOCK SecurityLock;
  /* 0x06b8 */ unsigned long UseCount;
  /* 0x06bc */ unsigned long LastShrinkHiveSize;
  /* 0x06c0 */ union _LARGE_INTEGER ActualFileSize;
  /* 0x06c8 */ union _LARGE_INTEGER LogFileSizes[2];
  /* 0x06d8 */ struct _UNICODE_STRING FileFullPath;
  /* 0x06e8 */ struct _UNICODE_STRING FileUserName;
  /* 0x06f8 */ struct _UNICODE_STRING HiveRootPath;
  /* 0x0708 */ unsigned long SecurityCount;
  /* 0x070c */ unsigned long SecurityCacheSize;
  /* 0x0710 */ long SecurityHitHint;
  /* 0x0714 */ long Padding_270;
  /* 0x0718 */ struct _CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;
  /* 0x0720 */ struct _LIST_ENTRY SecurityHash[64];
  /* 0x0b20 */ unsigned long UnloadEventCount;
  /* 0x0b24 */ long Padding_271;
  /* 0x0b28 */ struct _KEVENT** UnloadEventArray;
  /* 0x0b30 */ struct _CM_KEY_CONTROL_BLOCK* RootKcb;
  /* 0x0b38 */ unsigned char Frozen;
  /* 0x0b39 */ char Padding_272[7];
  /* 0x0b40 */ struct _CM_WORKITEM* UnloadWorkItem;
  /* 0x0b48 */ struct _CM_WORKITEM UnloadWorkItemHolder;
  /* 0x0b70 */ unsigned char GrowOnlyMode;
  /* 0x0b71 */ char Padding_273[3];
  /* 0x0b74 */ unsigned long GrowOffset;
  /* 0x0b78 */ struct _LIST_ENTRY KcbConvertListHead;
  /* 0x0b88 */ struct _LIST_ENTRY KnodeConvertListHead;
  /* 0x0b98 */ struct _CM_CELL_REMAP_BLOCK* CellRemapArray;
  /* 0x0ba0 */ struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;
  /* 0x10a8 */ unsigned long Flags;
  /* 0x10ac */ long Padding_274;
  /* 0x10b0 */ struct _LIST_ENTRY TrustClassEntry;
  /* 0x10c0 */ unsigned __int64 DirtyTime;
  /* 0x10c8 */ unsigned __int64 UnreconciledTime;
  /* 0x10d0 */ struct _CM_RM* CmRm;
  /* 0x10d8 */ unsigned long CmRmInitFailPoint;
  /* 0x10dc */ long CmRmInitFailStatus;
  /* 0x10e0 */ struct _KTHREAD* CreatorOwner;
  /* 0x10e8 */ struct _KTHREAD* RundownThread;
  /* 0x10f0 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x10f8 */ struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;
  /* 0x1110 */ struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;
  union
  {
    /* 0x1128 */ unsigned long FlushFlags;
    struct /* bitfield */
    {
      /* 0x1128 */ unsigned long FlushActive : 1; /* bit position: 0 */
      /* 0x1128 */ unsigned long ReconcileActive : 1; /* bit position: 1 */
      /* 0x1128 */ unsigned long PrimaryFilePurged : 1; /* bit position: 2 */
      /* 0x1128 */ unsigned long DiskFileBad : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x112c */ unsigned long PrimaryFileSizeBeforeLastFlush;
  /* 0x1130 */ volatile long ReferenceCount;
  /* 0x1134 */ long UnloadHistoryIndex;
  /* 0x1138 */ unsigned long UnloadHistory[128];
  /* 0x1338 */ unsigned long BootStart;
  /* 0x133c */ unsigned long UnaccessedStart;
  /* 0x1340 */ unsigned long UnaccessedEnd;
  /* 0x1344 */ unsigned long LoadedKeyCount;
  /* 0x1348 */ volatile unsigned long HandleClosePending;
  /* 0x134c */ long Padding_275;
  /* 0x1350 */ struct _EX_PUSH_LOCK HandleClosePendingEvent;
} CMHIVE, *PCMHIVE; /* size: 0x1358 */

struct _LDRP_DLL_SNAP_CONTEXT;

typedef struct _IO_SECURITY_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0008 */ struct _ACCESS_STATE* AccessState;
  /* 0x0010 */ unsigned long DesiredAccess;
  /* 0x0014 */ unsigned long FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT; /* size: 0x0018 */

typedef struct _INTERRUPT_HT_INTR_INFO
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long Mask : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned long Polarity : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned long MessageType : 3; /* bit position: 2 */
          /* 0x0000 */ unsigned long RequestEOI : 1; /* bit position: 5 */
          /* 0x0000 */ unsigned long DestinationMode : 1; /* bit position: 6 */
          /* 0x0000 */ unsigned long MessageType3 : 1; /* bit position: 7 */
          /* 0x0000 */ unsigned long Destination : 8; /* bit position: 8 */
          /* 0x0000 */ unsigned long Vector : 8; /* bit position: 16 */
          /* 0x0000 */ unsigned long ExtendedAddress : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ LowPart;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long ExtendedDestination : 24; /* bit position: 0 */
          /* 0x0004 */ unsigned long Reserved : 6; /* bit position: 24 */
          /* 0x0004 */ unsigned long PassPW : 1; /* bit position: 30 */
          /* 0x0004 */ unsigned long WaitingForEOI : 1; /* bit position: 31 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0004 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighPart;
} INTERRUPT_HT_INTR_INFO, *PINTERRUPT_HT_INTR_INFO; /* size: 0x0008 */

typedef struct _NAMED_PIPE_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long NamedPipeType;
  /* 0x0004 */ unsigned long ReadMode;
  /* 0x0008 */ unsigned long CompletionMode;
  /* 0x000c */ unsigned long MaximumInstances;
  /* 0x0010 */ unsigned long InboundQuota;
  /* 0x0014 */ unsigned long OutboundQuota;
  /* 0x0018 */ union _LARGE_INTEGER DefaultTimeout;
  /* 0x0020 */ unsigned char TimeoutSpecified;
  /* 0x0021 */ char __PADDING__[7];
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS; /* size: 0x0028 */

typedef struct _CM_KEY_CONTROL_BLOCK
{
  /* 0x0000 */ unsigned long RefCount;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long ExtFlags : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned long PrivateAlloc : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long Delete : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long HiveUnloaded : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long Decommissioned : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long LockTablePresent : 1; /* bit position: 20 */
    /* 0x0004 */ unsigned long TotalLevels : 10; /* bit position: 21 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long DelayedDeref : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long DelayedClose : 1; /* bit position: 1 */
    /* 0x0008 */ unsigned long Parking : 1; /* bit position: 2 */
  }; /* bitfield */
  /* 0x000c */ long Padding_276;
  union
  {
    /* 0x0010 */ struct _CM_KEY_HASH KeyHash;
    struct
    {
      /* 0x0010 */ unsigned long ConvKey;
      /* 0x0014 */ long Padding_277;
      /* 0x0018 */ struct _CM_KEY_HASH* NextHash;
      /* 0x0020 */ struct _HHIVE* KeyHive;
      /* 0x0028 */ unsigned long KeyCell;
    }; /* size: 0x0018 */
  }; /* size: 0x0020 */
  /* 0x0030 */ struct _EX_PUSH_LOCK KcbPushlock;
  union
  {
    /* 0x0038 */ struct _KTHREAD* Owner;
    /* 0x0038 */ long SharedCount;
  }; /* size: 0x0008 */
  /* 0x0040 */ unsigned long SlotHint;
  /* 0x0044 */ long Padding_278;
  /* 0x0048 */ struct _CM_KEY_CONTROL_BLOCK* ParentKcb;
  /* 0x0050 */ struct _CM_NAME_CONTROL_BLOCK* NameBlock;
  /* 0x0058 */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
  /* 0x0060 */ struct _CACHED_CHILD_LIST ValueCache;
  union
  {
    /* 0x0070 */ struct _CM_INDEX_HINT_BLOCK* IndexHint;
    /* 0x0070 */ unsigned long HashKey;
    /* 0x0070 */ unsigned long SubKeyCount;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0078 */ struct _LIST_ENTRY KeyBodyListHead;
    /* 0x0078 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  /* 0x0088 */ struct _CM_KEY_BODY* KeyBodyArray[4];
  /* 0x00a8 */ union _LARGE_INTEGER KcbLastWriteTime;
  /* 0x00b0 */ unsigned short KcbMaxNameLen;
  /* 0x00b2 */ unsigned short KcbMaxValueNameLen;
  /* 0x00b4 */ unsigned long KcbMaxValueDataLen;
  struct /* bitfield */
  {
    /* 0x00b8 */ unsigned long KcbUserFlags : 4; /* bit position: 0 */
    /* 0x00b8 */ unsigned long KcbVirtControlFlags : 4; /* bit position: 4 */
    /* 0x00b8 */ unsigned long KcbDebug : 8; /* bit position: 8 */
    /* 0x00b8 */ unsigned long Flags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x00bc */ long Padding_279;
  /* 0x00c0 */ char* RealKeyName;
  /* 0x00c8 */ struct _LIST_ENTRY KCBUoWListHead;
  union
  {
    /* 0x00d8 */ struct _LIST_ENTRY DelayQueueEntry;
    /* 0x00d8 */ volatile unsigned char* Stolen;
  }; /* size: 0x0010 */
  /* 0x00e8 */ struct _CM_TRANS* TransKCBOwner;
  /* 0x00f0 */ struct _CM_INTENT_LOCK KCBLock;
  /* 0x0100 */ struct _CM_INTENT_LOCK KeyLock;
  /* 0x0110 */ struct _CHILD_LIST TransValueCache;
  /* 0x0118 */ struct _CM_TRANS* TransValueListOwner;
  /* 0x0120 */ struct _UNICODE_STRING* FullKCBName;
} CM_KEY_CONTROL_BLOCK, *PCM_KEY_CONTROL_BLOCK; /* size: 0x0128 */

typedef struct _CM_KEY_SECURITY_CACHE
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ unsigned long ConvKey;
  /* 0x0008 */ struct _LIST_ENTRY List;
  /* 0x0018 */ unsigned long DescriptorLength;
  /* 0x001c */ unsigned long RealRefCount;
  /* 0x0020 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
  /* 0x0034 */ long __PADDING__[1];
} CM_KEY_SECURITY_CACHE, *PCM_KEY_SECURITY_CACHE; /* size: 0x0038 */

typedef struct _SID_IDENTIFIER_AUTHORITY
{
  /* 0x0000 */ unsigned char Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; /* size: 0x0006 */

typedef struct _SID
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char SubAuthorityCount;
  /* 0x0002 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* 0x0008 */ unsigned long SubAuthority[1];
} SID, *PSID; /* size: 0x000c */

typedef struct _FILE_GET_QUOTA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long SidLength;
  /* 0x0008 */ struct _SID Sid;
} FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION; /* size: 0x0014 */

typedef struct _INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_280;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
} INTERFACE, *PINTERFACE; /* size: 0x0020 */

typedef struct _DEVICE_CAPABILITIES
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long DeviceD1 : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long DeviceD2 : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long LockSupported : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long EjectSupported : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Removable : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long DockDevice : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long UniqueID : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long SilentInstall : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned long RawDeviceOK : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned long SurpriseRemovalOK : 1; /* bit position: 9 */
    /* 0x0004 */ unsigned long WakeFromD0 : 1; /* bit position: 10 */
    /* 0x0004 */ unsigned long WakeFromD1 : 1; /* bit position: 11 */
    /* 0x0004 */ unsigned long WakeFromD2 : 1; /* bit position: 12 */
    /* 0x0004 */ unsigned long WakeFromD3 : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned long HardwareDisabled : 1; /* bit position: 14 */
    /* 0x0004 */ unsigned long NonDynamic : 1; /* bit position: 15 */
    /* 0x0004 */ unsigned long WarmEjectSupported : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long NoDisplayInUI : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long Reserved1 : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long WakeFromInterrupt : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long Reserved : 12; /* bit position: 20 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long Address;
  /* 0x000c */ unsigned long UINumber;
  /* 0x0010 */ enum _DEVICE_POWER_STATE DeviceState[7];
  /* 0x002c */ enum _SYSTEM_POWER_STATE SystemWake;
  /* 0x0030 */ enum _DEVICE_POWER_STATE DeviceWake;
  /* 0x0034 */ unsigned long D1Latency;
  /* 0x0038 */ unsigned long D2Latency;
  /* 0x003c */ unsigned long D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES; /* size: 0x0040 */

typedef struct _CM_KCB_UOW
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0010 */ struct _CM_INTENT_LOCK* KCBLock;
  /* 0x0018 */ struct _CM_INTENT_LOCK* KeyLock;
  /* 0x0020 */ struct _LIST_ENTRY KCBListEntry;
  /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0038 */ struct _CM_TRANS* Transaction;
  /* 0x0040 */ unsigned long UoWState;
  /* 0x0044 */ enum UoWActionType ActionType;
  /* 0x0048 */ enum HSTORAGE_TYPE StorageType;
  /* 0x004c */ long Padding_281;
  union
  {
    /* 0x0050 */ struct _CM_KEY_CONTROL_BLOCK* ChildKCB;
    /* 0x0050 */ unsigned long VolatileKeyCell;
    struct
    {
      /* 0x0050 */ unsigned long OldValueCell;
      /* 0x0054 */ unsigned long NewValueCell;
    }; /* size: 0x0008 */
    /* 0x0050 */ unsigned long UserFlags;
    /* 0x0050 */ union _LARGE_INTEGER LastWriteTime;
    /* 0x0050 */ unsigned long TxSecurityCell;
    struct
    {
      /* 0x0050 */ struct _CM_KEY_CONTROL_BLOCK* OldChildKCB;
      /* 0x0058 */ struct _CM_KEY_CONTROL_BLOCK* NewChildKCB;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0050 */ struct _CM_KEY_CONTROL_BLOCK* OtherChildKCB;
      /* 0x0058 */ unsigned long ThisVolatileKeyCell;
      /* 0x005c */ long __PADDING__[1];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} CM_KCB_UOW, *PCM_KCB_UOW; /* size: 0x0060 */

typedef struct _SEP_TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned __int64 Present;
  /* 0x0008 */ unsigned __int64 Enabled;
  /* 0x0010 */ unsigned __int64 EnabledByDefault;
} SEP_TOKEN_PRIVILEGES, *PSEP_TOKEN_PRIVILEGES; /* size: 0x0018 */

typedef struct _KENLISTMENT
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ long Padding_282;
  /* 0x0008 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0030 */ struct _GUID EnlistmentId;
  /* 0x0040 */ struct _KMUTANT Mutex;
  /* 0x0078 */ struct _LIST_ENTRY NextSameTx;
  /* 0x0088 */ struct _LIST_ENTRY NextSameRm;
  /* 0x0098 */ struct _KRESOURCEMANAGER* ResourceManager;
  /* 0x00a0 */ struct _KTRANSACTION* Transaction;
  /* 0x00a8 */ enum _KENLISTMENT_STATE State;
  /* 0x00ac */ unsigned long Flags;
  /* 0x00b0 */ unsigned long NotificationMask;
  /* 0x00b4 */ long Padding_283;
  /* 0x00b8 */ void* Key;
  /* 0x00c0 */ unsigned long KeyRefCount;
  /* 0x00c4 */ long Padding_284;
  /* 0x00c8 */ void* RecoveryInformation;
  /* 0x00d0 */ unsigned long RecoveryInformationLength;
  /* 0x00d4 */ long Padding_285;
  /* 0x00d8 */ void* DynamicNameInformation;
  /* 0x00e0 */ unsigned long DynamicNameInformationLength;
  /* 0x00e4 */ long Padding_286;
  /* 0x00e8 */ struct _KTMNOTIFICATION_PACKET* FinalNotification;
  /* 0x00f0 */ struct _KENLISTMENT* SupSubEnlistment;
  /* 0x00f8 */ void* SupSubEnlHandle;
  /* 0x0100 */ void* SubordinateTxHandle;
  /* 0x0108 */ struct _GUID CrmEnlistmentEnId;
  /* 0x0118 */ struct _GUID CrmEnlistmentTmId;
  /* 0x0128 */ struct _GUID CrmEnlistmentRmId;
  /* 0x0138 */ unsigned long NextHistory;
  /* 0x013c */ struct _KENLISTMENT_HISTORY History[20];
  /* 0x01dc */ long __PADDING__[1];
} KENLISTMENT, *PKENLISTMENT; /* size: 0x01e0 */

typedef struct _MI_VERIFIER_POOL_HEADER
{
  /* 0x0000 */ struct _VI_POOL_ENTRY* VerifierPoolEntry;
} MI_VERIFIER_POOL_HEADER, *PMI_VERIFIER_POOL_HEADER; /* size: 0x0008 */

typedef struct _POWER_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceD1;
  /* 0x0004 */ unsigned long SequenceD2;
  /* 0x0008 */ unsigned long SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE; /* size: 0x000c */

typedef struct _VI_POOL_ENTRY_INUSE
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0008 */ void* CallingAddress;
  /* 0x0010 */ unsigned __int64 NumberOfBytes;
  /* 0x0018 */ unsigned __int64 Tag;
} VI_POOL_ENTRY_INUSE, *PVI_POOL_ENTRY_INUSE; /* size: 0x0020 */

typedef struct _CM_RESOURCE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _ETW_PMC_SUPPORT
{
  /* 0x0000 */ enum _KPROFILE_SOURCE Source[4];
  /* 0x0010 */ volatile unsigned long HookIdCount;
  /* 0x0014 */ unsigned short HookId[4];
  /* 0x001c */ volatile unsigned long CountersCount;
  /* 0x0020 */ struct _HAL_PMC_COUNTERS* ProcessorCtrs[1];
} ETW_PMC_SUPPORT, *PETW_PMC_SUPPORT; /* size: 0x0028 */

struct _HAL_PMC_COUNTERS;

typedef struct _ETW_LAST_ENABLE_INFO
{
  /* 0x0000 */ union _LARGE_INTEGER EnableFlags;
  /* 0x0008 */ unsigned short LoggerId;
  /* 0x000a */ unsigned char Level;
  struct /* bitfield */
  {
    /* 0x000b */ unsigned char Enabled : 1; /* bit position: 0 */
    /* 0x000b */ unsigned char InternalFlag : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x000c */ long __PADDING__[1];
} ETW_LAST_ENABLE_INFO, *PETW_LAST_ENABLE_INFO; /* size: 0x0010 */

typedef struct _TRACE_ENABLE_INFO
{
  /* 0x0000 */ unsigned long IsEnabled;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short LoggerId;
  /* 0x0008 */ unsigned long EnableProperty;
  /* 0x000c */ unsigned long Reserved2;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
} TRACE_ENABLE_INFO, *PTRACE_ENABLE_INFO; /* size: 0x0020 */

typedef struct _ETW_GUID_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY GuidList;
  /* 0x0010 */ volatile __int64 RefCount;
  /* 0x0018 */ struct _GUID Guid;
  /* 0x0028 */ struct _LIST_ENTRY RegListHead;
  /* 0x0038 */ void* SecurityDescriptor;
  union
  {
    /* 0x0040 */ struct _ETW_LAST_ENABLE_INFO LastEnable;
    /* 0x0040 */ unsigned __int64 MatchId;
  }; /* size: 0x0010 */
  /* 0x0050 */ struct _TRACE_ENABLE_INFO ProviderEnableInfo;
  /* 0x0070 */ struct _TRACE_ENABLE_INFO EnableInfo[8];
  /* 0x0170 */ struct _ETW_FILTER_HEADER* FilterData;
} ETW_GUID_ENTRY, *PETW_GUID_ENTRY; /* size: 0x0178 */

typedef struct _IO_TIMER
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short TimerFlag;
  /* 0x0004 */ long Padding_287;
  /* 0x0008 */ struct _LIST_ENTRY TimerList;
  /* 0x0018 */ void* TimerRoutine /* function */;
  /* 0x0020 */ void* Context;
  /* 0x0028 */ struct _DEVICE_OBJECT* DeviceObject;
} IO_TIMER, *PIO_TIMER; /* size: 0x0030 */

struct PROCESSOR_IDLESTATE_INFO
{
  /* 0x0000 */ unsigned long TimeCheck;
  /* 0x0004 */ unsigned char DemotePercent;
  /* 0x0005 */ unsigned char PromotePercent;
  /* 0x0006 */ unsigned char Spare[2];
}; /* size: 0x0008 */

typedef struct _OBJECT_DIRECTORY_ENTRY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* ChainLink;
  /* 0x0008 */ void* Object;
  /* 0x0010 */ unsigned long HashValue;
  /* 0x0014 */ long __PADDING__[1];
} OBJECT_DIRECTORY_ENTRY, *POBJECT_DIRECTORY_ENTRY; /* size: 0x0018 */

typedef struct _SEP_LOWBOX_NUMBER_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ void* PackageSid;
  /* 0x0028 */ unsigned long LowboxNumber;
  /* 0x002c */ long Padding_288;
  /* 0x0030 */ void* AtomTable;
} SEP_LOWBOX_NUMBER_ENTRY, *PSEP_LOWBOX_NUMBER_ENTRY; /* size: 0x0038 */

typedef struct _LOCK_HEADER
{
  /* 0x0000 */ struct _RTL_AVL_TREE LockTree;
  /* 0x0008 */ unsigned __int64 Count;
  /* 0x0010 */ unsigned __int64 Lock;
  /* 0x0018 */ unsigned long Valid;
  /* 0x001c */ long __PADDING__[1];
} LOCK_HEADER, *PLOCK_HEADER; /* size: 0x0020 */

typedef struct _DEVICE_OBJECT_POWER_EXTENSION
{
  /* 0x0000 */ volatile unsigned long IdleCount;
  /* 0x0004 */ volatile unsigned long BusyCount;
  /* 0x0008 */ volatile unsigned long BusyReference;
  /* 0x000c */ unsigned long TotalBusyCount;
  /* 0x0010 */ unsigned long ConservationIdleTime;
  /* 0x0014 */ unsigned long PerformanceIdleTime;
  /* 0x0018 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0020 */ struct _LIST_ENTRY IdleList;
  /* 0x0030 */ enum _POP_DEVICE_IDLE_TYPE IdleType;
  /* 0x0034 */ enum _DEVICE_POWER_STATE IdleState;
  /* 0x0038 */ enum _DEVICE_POWER_STATE CurrentState;
  /* 0x003c */ long Padding_289;
  /* 0x0040 */ struct _LIST_ENTRY Volume;
  union
  {
    struct
    {
      /* 0x0050 */ unsigned long IdleTime;
      /* 0x0054 */ unsigned long NonIdleTime;
    } /* size: 0x0008 */ Disk;
  } /* size: 0x0008 */ Specific;
} DEVICE_OBJECT_POWER_EXTENSION, *PDEVICE_OBJECT_POWER_EXTENSION; /* size: 0x0058 */

typedef struct _KTM
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ long Padding_290;
  /* 0x0008 */ struct _KMUTANT Mutex;
  /* 0x0040 */ enum KTM_STATE State;
  /* 0x0044 */ long Padding_291;
  /* 0x0048 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0070 */ struct _GUID TmIdentity;
  /* 0x0080 */ unsigned long Flags;
  /* 0x0084 */ unsigned long VolatileFlags;
  /* 0x0088 */ struct _UNICODE_STRING LogFileName;
  /* 0x0098 */ struct _FILE_OBJECT* LogFileObject;
  /* 0x00a0 */ void* MarshallingContext;
  /* 0x00a8 */ void* LogManagementContext;
  /* 0x00b0 */ struct _KTMOBJECT_NAMESPACE Transactions;
  /* 0x0158 */ struct _KTMOBJECT_NAMESPACE ResourceManagers;
  /* 0x0200 */ struct _KMUTANT LsnOrderedMutex;
  /* 0x0238 */ struct _LIST_ENTRY LsnOrderedList;
  /* 0x0248 */ union _LARGE_INTEGER CommitVirtualClock;
  /* 0x0250 */ struct _FAST_MUTEX CommitVirtualClockMutex;
  /* 0x0288 */ union _CLS_LSN BaseLsn;
  /* 0x0290 */ union _CLS_LSN CurrentReadLsn;
  /* 0x0298 */ union _CLS_LSN LastRecoveredLsn;
  /* 0x02a0 */ void* TmRmHandle;
  /* 0x02a8 */ struct _KRESOURCEMANAGER* TmRm;
  /* 0x02b0 */ struct _KEVENT LogFullNotifyEvent;
  /* 0x02c8 */ struct _WORK_QUEUE_ITEM CheckpointWorkItem;
  /* 0x02e8 */ union _CLS_LSN CheckpointTargetLsn;
  /* 0x02f0 */ struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem;
  /* 0x0310 */ struct _ERESOURCE LogWriteResource;
  /* 0x0378 */ unsigned long LogFlags;
  /* 0x037c */ long LogFullStatus;
  /* 0x0380 */ long RecoveryStatus;
  /* 0x0384 */ long Padding_292;
  /* 0x0388 */ union _CLS_LSN LastCheckBaseLsn;
  /* 0x0390 */ struct _LIST_ENTRY RestartOrderedList;
  /* 0x03a0 */ struct _WORK_QUEUE_ITEM OfflineWorkItem;
} KTM, *PKTM; /* size: 0x03c0 */

typedef struct _OBJECT_HEADER
{
  /* 0x0000 */ __int64 PointerCount;
  union
  {
    /* 0x0008 */ __int64 HandleCount;
    /* 0x0008 */ void* NextToFree;
  }; /* size: 0x0008 */
  /* 0x0010 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0018 */ unsigned char TypeIndex;
  union
  {
    /* 0x0019 */ unsigned char TraceFlags;
    struct /* bitfield */
    {
      /* 0x0019 */ unsigned char DbgRefTrace : 1; /* bit position: 0 */
      /* 0x0019 */ unsigned char DbgTracePermanent : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x001a */ unsigned char InfoMask;
  union
  {
    /* 0x001b */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x001b */ unsigned char NewObject : 1; /* bit position: 0 */
      /* 0x001b */ unsigned char KernelObject : 1; /* bit position: 1 */
      /* 0x001b */ unsigned char KernelOnlyAccess : 1; /* bit position: 2 */
      /* 0x001b */ unsigned char ExclusiveObject : 1; /* bit position: 3 */
      /* 0x001b */ unsigned char PermanentObject : 1; /* bit position: 4 */
      /* 0x001b */ unsigned char DefaultSecurityQuota : 1; /* bit position: 5 */
      /* 0x001b */ unsigned char SingleHandleEntry : 1; /* bit position: 6 */
      /* 0x001b */ unsigned char DeletedInline : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x001c */ unsigned long Spare;
  union
  {
    /* 0x0020 */ struct _OBJECT_CREATE_INFORMATION* ObjectCreateInfo;
    /* 0x0020 */ void* QuotaBlockCharged;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* SecurityDescriptor;
  /* 0x0030 */ struct _QUAD Body;
} OBJECT_HEADER, *POBJECT_HEADER; /* size: 0x0038 */

typedef struct _ETW_SYSTEMTIME
{
  /* 0x0000 */ unsigned short Year;
  /* 0x0002 */ unsigned short Month;
  /* 0x0004 */ unsigned short DayOfWeek;
  /* 0x0006 */ unsigned short Day;
  /* 0x0008 */ unsigned short Hour;
  /* 0x000a */ unsigned short Minute;
  /* 0x000c */ unsigned short Second;
  /* 0x000e */ unsigned short Milliseconds;
} ETW_SYSTEMTIME, *PETW_SYSTEMTIME; /* size: 0x0010 */

typedef struct _IO_DRIVER_CREATE_CONTEXT
{
  /* 0x0000 */ short Size;
  /* 0x0002 */ char Padding_293[6];
  /* 0x0008 */ struct _ECP_LIST* ExtraCreateParameter;
  /* 0x0010 */ void* DeviceObjectHint;
  /* 0x0018 */ struct _TXN_PARAMETER_BLOCK* TxnParameters;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT; /* size: 0x0020 */

typedef struct _RTL_TIME_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _TIME_FIELDS StandardStart;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _TIME_FIELDS DaylightStart;
  /* 0x00a8 */ long DaylightBias;
} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION; /* size: 0x00ac */

typedef struct _OBJECT_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long HandleAttributes;
  /* 0x0004 */ unsigned long GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION; /* size: 0x0008 */

typedef struct _EVENT_DATA_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Reserved;
} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  /* 0x0000 */ unsigned short Reserved1;
  /* 0x0002 */ unsigned short ExtType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned short Linkage : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned short Reserved2 : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0006 */ unsigned short DataSize;
  /* 0x0008 */ unsigned __int64 DataPtr;
} EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM; /* size: 0x0010 */

typedef struct _PERFINFO_GROUPMASK
{
  /* 0x0000 */ unsigned long Masks[8];
} PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK; /* size: 0x0020 */

typedef struct _MM_PAGE_ACCESS_INFO_HEADER
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0008 */ enum _MM_PAGE_ACCESS_TYPE Type;
  union
  {
    /* 0x000c */ unsigned long EmptySequenceNumber;
    /* 0x000c */ unsigned long CurrentFileIndex;
  }; /* size: 0x0004 */
  /* 0x0010 */ unsigned __int64 CreateTime;
  union
  {
    /* 0x0018 */ unsigned __int64 EmptyTime;
    /* 0x0018 */ struct _MM_PAGE_ACCESS_INFO* TempEntry;
  }; /* size: 0x0008 */
  union
  {
    struct
    {
      /* 0x0020 */ struct _MM_PAGE_ACCESS_INFO* PageEntry;
      /* 0x0028 */ unsigned __int64* FileEntry;
      /* 0x0030 */ unsigned __int64* FirstFileEntry;
      /* 0x0038 */ struct _EPROCESS* Process;
      /* 0x0040 */ unsigned long SessionId;
    }; /* size: 0x0024 */
    struct
    {
      /* 0x0020 */ unsigned __int64* PageFrameEntry;
      /* 0x0028 */ unsigned __int64* LastPageFrameEntry;
      /* 0x0030 */ long __PADDING__[6];
    }; /* size: 0x0028 */
  }; /* size: 0x0028 */
} MM_PAGE_ACCESS_INFO_HEADER, *PMM_PAGE_ACCESS_INFO_HEADER; /* size: 0x0048 */

typedef struct _POP_ACTION_TRIGGER
{
  /* 0x0000 */ enum POWER_POLICY_DEVICE_TYPE Type;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _POP_TRIGGER_WAIT* Wait;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned long Level;
    } /* size: 0x0004 */ Battery;
    struct
    {
      /* 0x0010 */ unsigned long Type;
    } /* size: 0x0004 */ Button;
  }; /* size: 0x0004 */
  /* 0x0014 */ long __PADDING__[1];
} POP_ACTION_TRIGGER, *PPOP_ACTION_TRIGGER; /* size: 0x0018 */

typedef union _WHEA_ERROR_PACKET_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved1 : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long HypervisorError : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved2 : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_PACKET_V2
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ union _WHEA_ERROR_PACKET_FLAGS Flags;
  /* 0x0010 */ enum _WHEA_ERROR_TYPE ErrorType;
  /* 0x0014 */ enum _WHEA_ERROR_SEVERITY ErrorSeverity;
  /* 0x0018 */ unsigned long ErrorSourceId;
  /* 0x001c */ enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
  /* 0x0020 */ struct _GUID NotifyType;
  /* 0x0030 */ unsigned __int64 Context;
  /* 0x0038 */ enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
  /* 0x003c */ unsigned long Reserved1;
  /* 0x0040 */ unsigned long DataOffset;
  /* 0x0044 */ unsigned long DataLength;
  /* 0x0048 */ unsigned long PshedDataOffset;
  /* 0x004c */ unsigned long PshedDataLength;
} WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2; /* size: 0x0050 */

typedef struct _PHYSICAL_MEMORY_RUN
{
  /* 0x0000 */ unsigned __int64 BasePage;
  /* 0x0008 */ unsigned __int64 PageCount;
} PHYSICAL_MEMORY_RUN, *PPHYSICAL_MEMORY_RUN; /* size: 0x0010 */

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR
{
  /* 0x0000 */ unsigned long NumberOfRuns;
  /* 0x0004 */ long Padding_294;
  /* 0x0008 */ unsigned __int64 NumberOfPages;
  /* 0x0010 */ struct _PHYSICAL_MEMORY_RUN Run[1];
} PHYSICAL_MEMORY_DESCRIPTOR, *PPHYSICAL_MEMORY_DESCRIPTOR; /* size: 0x0020 */

typedef struct _VF_ADDRESS_RANGE
{
  /* 0x0000 */ unsigned char* Start;
  /* 0x0008 */ unsigned char* End;
} VF_ADDRESS_RANGE, *PVF_ADDRESS_RANGE; /* size: 0x0010 */

typedef struct _VI_DEADLOCK_GLOBALS
{
  /* 0x0000 */ __int64 TimeAcquire;
  /* 0x0008 */ __int64 TimeRelease;
  /* 0x0010 */ struct _LIST_ENTRY* ResourceDatabase;
  /* 0x0018 */ unsigned __int64 ResourceDatabaseCount;
  /* 0x0020 */ struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];
  /* 0x4010 */ struct _LIST_ENTRY* ThreadDatabase;
  /* 0x4018 */ unsigned __int64 ThreadDatabaseCount;
  /* 0x4020 */ struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];
  /* 0x8010 */ unsigned long AllocationFailures;
  /* 0x8014 */ unsigned long NodesTrimmedBasedOnAge;
  /* 0x8018 */ unsigned long NodesTrimmedBasedOnCount;
  /* 0x801c */ unsigned long NodesSearched;
  /* 0x8020 */ unsigned long MaxNodesSearched;
  /* 0x8024 */ unsigned long SequenceNumber;
  /* 0x8028 */ unsigned long RecursionDepthLimit;
  /* 0x802c */ unsigned long SearchedNodesLimit;
  /* 0x8030 */ unsigned long DepthLimitHits;
  /* 0x8034 */ unsigned long SearchLimitHits;
  /* 0x8038 */ unsigned long StackLimitHits;
  /* 0x803c */ unsigned long ABC_ACB_Skipped;
  /* 0x8040 */ unsigned long OutOfOrderReleases;
  /* 0x8044 */ unsigned long NodesReleasedOutOfOrder;
  /* 0x8048 */ unsigned long TotalReleases;
  /* 0x804c */ unsigned long RootNodesDeleted;
  /* 0x8050 */ unsigned long ForgetHistoryCounter;
  /* 0x8054 */ long Padding_295;
  /* 0x8058 */ void* Instigator;
  /* 0x8060 */ unsigned long NumberOfParticipants;
  /* 0x8064 */ long Padding_296;
  /* 0x8068 */ struct _VI_DEADLOCK_NODE* Participant[32];
  /* 0x8168 */ long ChildrenCountWatermark;
  /* 0x816c */ enum _KERNEL_STACK_LIMITS StackType;
  /* 0x8170 */ unsigned __int64 StackLowLimit;
  /* 0x8178 */ unsigned __int64 StackHighLimit;
} VI_DEADLOCK_GLOBALS, *PVI_DEADLOCK_GLOBALS; /* size: 0x8180 */

typedef struct _FSRTL_ADVANCED_FCB_HEADER
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned char Flags;
  /* 0x0005 */ unsigned char IsFastIoPossible;
  /* 0x0006 */ unsigned char Flags2;
  struct /* bitfield */
  {
    /* 0x0007 */ unsigned char Reserved : 4; /* bit position: 0 */
    /* 0x0007 */ unsigned char Version : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0008 */ struct _ERESOURCE* Resource;
  /* 0x0010 */ struct _ERESOURCE* PagingIoResource;
  /* 0x0018 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0020 */ union _LARGE_INTEGER FileSize;
  /* 0x0028 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0030 */ struct _FAST_MUTEX* FastMutex;
  /* 0x0038 */ struct _LIST_ENTRY FilterContexts;
  /* 0x0048 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x0050 */ void** FileContextSupportPointer;
  union
  {
    /* 0x0058 */ void* Oplock;
    /* 0x0058 */ void* ReservedForRemote;
  }; /* size: 0x0008 */
  /* 0x0060 */ void* ReservedContext;
} FSRTL_ADVANCED_FCB_HEADER, *PFSRTL_ADVANCED_FCB_HEADER; /* size: 0x0068 */

typedef struct _HEAP_FREE_ENTRY_EXTRA
{
  /* 0x0000 */ unsigned short TagIndex;
  /* 0x0002 */ unsigned short FreeBackTraceIndex;
} HEAP_FREE_ENTRY_EXTRA, *PHEAP_FREE_ENTRY_EXTRA; /* size: 0x0004 */

typedef struct _iobuf
{
  /* 0x0000 */ char* _ptr;
  /* 0x0008 */ int _cnt;
  /* 0x000c */ long Padding_297;
  /* 0x0010 */ char* _base;
  /* 0x0018 */ int _flag;
  /* 0x001c */ int _file;
  /* 0x0020 */ int _charbuf;
  /* 0x0024 */ int _bufsiz;
  /* 0x0028 */ char* _tmpfname;
} iobuf, *Piobuf; /* size: 0x0030 */

typedef struct _KLOCK_QUEUE_HANDLE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE LockQueue;
  /* 0x0010 */ unsigned char OldIrql;
  /* 0x0011 */ char __PADDING__[7];
} KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE; /* size: 0x0018 */

typedef struct _MMPFNLIST
{
  /* 0x0000 */ unsigned __int64 Total;
  /* 0x0008 */ enum _MMLISTS ListName;
  /* 0x000c */ long Padding_298;
  /* 0x0010 */ unsigned __int64 Flink;
  /* 0x0018 */ unsigned __int64 Blink;
  /* 0x0020 */ unsigned __int64 Lock;
} MMPFNLIST, *PMMPFNLIST; /* size: 0x0028 */

typedef struct _EVENT_PAYLOAD_PREDICATE
{
  /* 0x0000 */ unsigned short FieldIndex;
  /* 0x0002 */ unsigned short CompareOp;
  /* 0x0004 */ long Padding_299;
  /* 0x0008 */ unsigned __int64 Value[2];
} EVENT_PAYLOAD_PREDICATE, *PEVENT_PAYLOAD_PREDICATE; /* size: 0x0018 */

typedef struct _AGGREGATED_PAYLOAD_FILTER
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short MagicValue : 12; /* bit position: 0 */
    /* 0x0000 */ unsigned short DescriptorVersion : 4; /* bit position: 12 */
  }; /* bitfield */
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short PredicateCount;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ unsigned __int64 HashedEventIdBitmap;
  /* 0x0010 */ struct _GUID ProviderGuid;
  /* 0x0020 */ unsigned short EachEventTableOffset;
  /* 0x0022 */ unsigned short EachEventTableLength;
  /* 0x0024 */ unsigned short PayloadDecoderTableOffset;
  /* 0x0026 */ unsigned short PayloadDecoderTableLength;
  /* 0x0028 */ unsigned short EventFilterTableOffset;
  /* 0x002a */ unsigned short EventFilterTableLength;
  /* 0x002c */ unsigned short UNICODEStringTableOffset;
  /* 0x002e */ unsigned short UNICODEStringTableLength;
  /* 0x0030 */ unsigned short ANSIStringTableOffset;
  /* 0x0032 */ unsigned short ANSIStringTableLength;
  /* 0x0034 */ long Padding_300;
  /* 0x0038 */ struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];
} AGGREGATED_PAYLOAD_FILTER, *PAGGREGATED_PAYLOAD_FILTER; /* size: 0x0050 */

typedef struct _MMPAGING_FILE
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ unsigned __int64 MaximumSize;
  /* 0x0010 */ unsigned __int64 MinimumSize;
  /* 0x0018 */ unsigned __int64 FreeSpace;
  /* 0x0020 */ unsigned __int64 PeakUsage;
  /* 0x0028 */ unsigned __int64 HighestPage;
  /* 0x0030 */ unsigned __int64 FreeReservationSpace;
  /* 0x0038 */ unsigned __int64 LargestReserveCluster;
  /* 0x0040 */ struct _FILE_OBJECT* File;
  /* 0x0048 */ struct _MMMOD_WRITER_MDL_ENTRY* Entry[2];
  /* 0x0058 */ long Padding_301[2];
  /* 0x0060 */ union _SLIST_HEADER PfnsToFree;
  /* 0x0070 */ struct _UNICODE_STRING PageFileName;
  /* 0x0080 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Bitmaps;
  /* 0x0088 */ unsigned long AllocationBitmapHint;
  /* 0x008c */ unsigned long ReservationBitmapHint;
  /* 0x0090 */ unsigned long LargestNonReservedClusterSize;
  /* 0x0094 */ unsigned long RefreshClusterSize;
  /* 0x0098 */ unsigned long LastRefreshClusterSize;
  /* 0x009c */ unsigned long ReservedClusterSizeAggregate;
  /* 0x00a0 */ unsigned long ToBeEvictedCount;
  /* 0x00a4 */ unsigned long HybridPriority;
  struct /* bitfield */
  {
    /* 0x00a8 */ unsigned short PageFileNumber : 4; /* bit position: 0 */
    /* 0x00a8 */ unsigned short BootPartition : 1; /* bit position: 4 */
    /* 0x00a8 */ unsigned short WsSwapPagefile : 1; /* bit position: 5 */
    /* 0x00a8 */ unsigned short NoReservations : 1; /* bit position: 6 */
    /* 0x00a8 */ unsigned short Spare0 : 9; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x00aa */ unsigned char AdriftMdls : 1; /* bit position: 0 */
    /* 0x00aa */ unsigned char Spare1 : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x00ab */ unsigned char Spare2 : 8; /* bit position: 0 */
  /* 0x00ac */ unsigned long PageHashPages;
  /* 0x00b0 */ unsigned long PageHashPagesPeak;
  /* 0x00b4 */ long Padding_302;
  /* 0x00b8 */ unsigned long* PageHash;
  /* 0x00c0 */ void* FileHandle;
  /* 0x00c8 */ unsigned __int64 Lock;
  /* 0x00d0 */ struct _ETHREAD* LockOwner;
  /* 0x00d8 */ long __PADDING__[2];
} MMPAGING_FILE, *PMMPAGING_FILE; /* size: 0x00e0 */

typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_303[6];
  /* 0x0008 */ unsigned short* String;
} ETW_FILTER_STRING_TOKEN_ELEMENT, *PETW_FILTER_STRING_TOKEN_ELEMENT; /* size: 0x0010 */

typedef struct _MODWRITER_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long KeepForever : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Networked : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long IoPriority : 3; /* bit position: 2 */
  }; /* bitfield */
} MODWRITER_FLAGS, *PMODWRITER_FLAGS; /* size: 0x0004 */

typedef struct _MMMOD_WRITER_MDL_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  union
  {
    /* 0x0010 */ struct _IO_STATUS_BLOCK IoStatus;
  } /* size: 0x0010 */ u;
  /* 0x0020 */ struct _IRP* Irp;
  /* 0x0028 */ struct _MODWRITER_FLAGS u1;
  /* 0x002c */ unsigned long ByteCount;
  /* 0x0030 */ struct _MMPAGING_FILE* PagingFile;
  /* 0x0038 */ struct _FILE_OBJECT* File;
  /* 0x0040 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0048 */ struct _ERESOURCE* FileResource;
  /* 0x0050 */ union _LARGE_INTEGER WriteOffset;
  /* 0x0058 */ union _LARGE_INTEGER IssueTime;
  /* 0x0060 */ struct _MDL* PointerMdl;
  /* 0x0068 */ struct _MDL Mdl;
  /* 0x0098 */ unsigned __int64 Page[1];
} MMMOD_WRITER_MDL_ENTRY, *PMMMOD_WRITER_MDL_ENTRY; /* size: 0x00a0 */

typedef struct _OBJECT_HEADER_HANDLE_INFO
{
  union
  {
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_DATABASE* HandleCountDataBase;
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
  }; /* size: 0x0010 */
} OBJECT_HEADER_HANDLE_INFO, *POBJECT_HEADER_HANDLE_INFO; /* size: 0x0010 */

typedef struct _MI_PAGING_FILE_SPACE_BITMAPS
{
  union
  {
    /* 0x0000 */ unsigned long RefCount;
    /* 0x0000 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Anchor;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _RTL_BITMAP AllocationBitmap;
  /* 0x0018 */ struct _RTL_BITMAP ReservationBitmap;
  /* 0x0028 */ struct _RTL_BITMAP* EvictStoreBitmap;
} MI_PAGING_FILE_SPACE_BITMAPS, *PMI_PAGING_FILE_SPACE_BITMAPS; /* size: 0x0030 */

struct tagSWITCH_CONTEXT_ATTRIBUTE
{
  /* 0x0000 */ unsigned __int64 ulContextUpdateCounter;
  /* 0x0008 */ int fAllowContextUpdate;
  /* 0x000c */ int fEnableTrace;
  /* 0x0010 */ unsigned __int64 EtwHandle;
}; /* size: 0x0018 */

struct tagSWITCH_CONTEXT
{
  /* 0x0000 */ struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute;
  /* 0x0018 */ struct tagSWITCH_CONTEXT_DATA Data;
}; /* size: 0x0060 */

typedef struct _OBP_LOOKUP_CONTEXT
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0008 */ void* Object;
  /* 0x0010 */ struct _OBJECT_DIRECTORY_ENTRY** EntryLink;
  /* 0x0018 */ unsigned long HashValue;
  /* 0x001c */ unsigned short HashIndex;
  /* 0x001e */ unsigned char DirectoryLocked;
  /* 0x001f */ unsigned char LockedExclusive;
  /* 0x0020 */ unsigned long LockStateSignature;
  /* 0x0024 */ long __PADDING__[1];
} OBP_LOOKUP_CONTEXT, *POBP_LOOKUP_CONTEXT; /* size: 0x0028 */

typedef union _WHEA_ERROR_STATUS
{
  union
  {
    /* 0x0000 */ unsigned __int64 ErrorStatus;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ErrorType : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Address : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Control : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 Data : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned __int64 Responder : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned __int64 Requester : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 FirstError : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned __int64 Overflow : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 41; /* bit position: 23 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} WHEA_ERROR_STATUS, *PWHEA_ERROR_STATUS; /* size: 0x0008 */

typedef struct _WHEAP_ERROR_SOURCE_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Count;
  /* 0x0008 */ struct _LIST_ENTRY Items;
  /* 0x0018 */ struct _KEVENT InsertLock;
} WHEAP_ERROR_SOURCE_TABLE, *PWHEAP_ERROR_SOURCE_TABLE; /* size: 0x0030 */

typedef struct _MI_SESSION_DRIVER_UNLOAD
{
  union
  {
    /* 0x0000 */ void* Function /* function */;
    /* 0x0000 */ unsigned __int64 FunctionValue;
  }; /* size: 0x0008 */
} MI_SESSION_DRIVER_UNLOAD, *PMI_SESSION_DRIVER_UNLOAD; /* size: 0x0008 */

typedef struct _VF_AVL_TREE_NODE
{
  /* 0x0000 */ void* p;
  /* 0x0008 */ unsigned __int64 RangeSize;
} VF_AVL_TREE_NODE, *PVF_AVL_TREE_NODE; /* size: 0x0010 */

typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
{
  /* 0x0000 */ struct _VERIFIER_SHARED_EXPORT_THUNK* SharedExportThunks;
  /* 0x0008 */ struct _VERIFIER_SHARED_EXPORT_THUNK* PoolSharedExportThunks;
  /* 0x0010 */ struct _VERIFIER_SHARED_EXPORT_THUNK* OrderDependentSharedExportThunks;
  /* 0x0018 */ struct _VERIFIER_SHARED_EXPORT_THUNK* XdvSharedExportThunks;
} VF_TARGET_ALL_SHARED_EXPORT_THUNKS, *PVF_TARGET_ALL_SHARED_EXPORT_THUNKS; /* size: 0x0020 */

typedef struct _VF_TARGET_DRIVER
{
  /* 0x0000 */ struct _VF_AVL_TREE_NODE TreeNode;
  union
  {
    union
    {
      /* 0x0010 */ struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0010 */ unsigned long SnapSharedExportsFailed : 1; /* bit position: 0 */
          /* 0x0010 */ unsigned long Spare : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ u1;
  /* 0x0030 */ struct _VF_TARGET_VERIFIED_DRIVER_DATA* VerifiedData;
} VF_TARGET_DRIVER, *PVF_TARGET_DRIVER; /* size: 0x0038 */

typedef struct _KALPC_SECTION
{
  /* 0x0000 */ void* SectionObject;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0018 */ void* SectionHandle;
  /* 0x0020 */ struct _EPROCESS* OwnerProcess;
  /* 0x0028 */ struct _ALPC_PORT* OwnerPort;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0030 */ unsigned long Internal : 1; /* bit position: 0 */
        /* 0x0030 */ unsigned long Secure : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x0034 */ unsigned long NumberOfRegions;
  /* 0x0038 */ struct _LIST_ENTRY RegionListHead;
} KALPC_SECTION, *PKALPC_SECTION; /* size: 0x0048 */

typedef struct _HBASE_BLOCK
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Sequence1;
  /* 0x0008 */ unsigned long Sequence2;
  /* 0x000c */ union _LARGE_INTEGER TimeStamp;
  /* 0x0014 */ unsigned long Major;
  /* 0x0018 */ unsigned long Minor;
  /* 0x001c */ unsigned long Type;
  /* 0x0020 */ unsigned long Format;
  /* 0x0024 */ unsigned long RootCell;
  /* 0x0028 */ unsigned long Length;
  /* 0x002c */ unsigned long Cluster;
  /* 0x0030 */ unsigned char FileName[64];
  /* 0x0070 */ struct _GUID RmId;
  /* 0x0080 */ struct _GUID LogId;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ struct _GUID TmId;
  /* 0x00a4 */ unsigned long GuidSignature;
  /* 0x00a8 */ unsigned __int64 LastReorganizeTime;
  /* 0x00b0 */ unsigned long Reserved1[83];
  /* 0x01fc */ unsigned long CheckSum;
  /* 0x0200 */ unsigned long Reserved2[882];
  /* 0x0fc8 */ struct _GUID ThawTmId;
  /* 0x0fd8 */ struct _GUID ThawRmId;
  /* 0x0fe8 */ struct _GUID ThawLogId;
  /* 0x0ff8 */ unsigned long BootType;
  /* 0x0ffc */ unsigned long BootRecover;
} HBASE_BLOCK, *PHBASE_BLOCK; /* size: 0x1000 */

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_QUERY_ARBITRATE_PARAMETERS, *PARBITER_QUERY_ARBITRATE_PARAMETERS; /* size: 0x0008 */

typedef struct _HMAP_TABLE
{
  /* 0x0000 */ struct _HMAP_ENTRY Table[512];
} HMAP_TABLE, *PHMAP_TABLE; /* size: 0x3000 */

typedef struct _HBIN
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long FileOffset;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Reserved1[2];
  /* 0x0014 */ union _LARGE_INTEGER TimeStamp;
  /* 0x001c */ unsigned long Spare;
} HBIN, *PHBIN; /* size: 0x0020 */

typedef struct _HCELL
{
  /* 0x0000 */ long Size;
  union
  {
    struct
    {
      union
      {
        union
        {
          /* 0x0004 */ unsigned long UserData;
          /* 0x0004 */ unsigned long Next;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u;
    } /* size: 0x0004 */ NewCell;
  } /* size: 0x0004 */ u;
} HCELL, *PHCELL; /* size: 0x0008 */

typedef struct _HIVE_LOAD_FAILURE
{
  /* 0x0000 */ struct _HHIVE* Hive;
  /* 0x0008 */ unsigned long Index;
  /* 0x000c */ unsigned long RecoverableIndex;
  /* 0x0010 */ struct
  {
    /* 0x0010 */ enum _CM_LOAD_FAILURE_TYPE Failure;
    /* 0x0014 */ long Status;
    /* 0x0018 */ unsigned long Point;
  } /* size: 0x000c */ Locations[8];
  /* 0x0070 */ struct
  {
    /* 0x0070 */ enum _CM_LOAD_FAILURE_TYPE Failure;
    /* 0x0074 */ long Status;
    /* 0x0078 */ unsigned long Point;
  } /* size: 0x000c */ RecoverableLocations[8];
  struct
  {
    /* 0x00d0 */ unsigned long Action;
    /* 0x0004 */ long Padding_304;
    /* 0x00d8 */ void* Handle;
    /* 0x00e0 */ long Status;
    /* 0x00e4 */ long __PADDING__[1];
  } /* size: 0x0018 */ RegistryIO;
  struct
  {
    /* 0x00e8 */ void* CheckStack;
  } /* size: 0x0008 */ CheckRegistry2;
  struct
  {
    /* 0x00f0 */ unsigned long Cell;
    /* 0x0004 */ long Padding_305;
    /* 0x00f8 */ struct _CELL_DATA* CellPoint;
    /* 0x0100 */ void* RootPoint;
    /* 0x0108 */ unsigned long Index;
    /* 0x010c */ long __PADDING__[1];
  } /* size: 0x0020 */ CheckKey;
  struct
  {
    /* 0x0110 */ struct _CELL_DATA* List;
    /* 0x0118 */ unsigned long Index;
    /* 0x011c */ unsigned long Cell;
    /* 0x0120 */ struct _CELL_DATA* CellPoint;
  } /* size: 0x0018 */ CheckValueList;
  struct
  {
    /* 0x0128 */ unsigned long Space;
    /* 0x012c */ unsigned long MapPoint;
    /* 0x0130 */ struct _HBIN* BinPoint;
  } /* size: 0x0010 */ CheckHive;
  struct
  {
    /* 0x0138 */ unsigned long Space;
    /* 0x013c */ unsigned long MapPoint;
    /* 0x0140 */ struct _HBIN* BinPoint;
  } /* size: 0x0010 */ CheckHive1;
  struct
  {
    /* 0x0148 */ struct _HBIN* Bin;
    /* 0x0150 */ struct _HCELL* CellPoint;
  } /* size: 0x0010 */ CheckBin;
  struct
  {
    /* 0x0158 */ unsigned long FileOffset;
  } /* size: 0x0004 */ RecoverData;
  /* 0x015c */ long __PADDING__[1];
} HIVE_LOAD_FAILURE, *PHIVE_LOAD_FAILURE; /* size: 0x0160 */

struct _PCW_REGISTRATION;

typedef struct _CLIENT_ID32
{
  /* 0x0000 */ unsigned long UniqueProcess;
  /* 0x0004 */ unsigned long UniqueThread;
} CLIENT_ID32, *PCLIENT_ID32; /* size: 0x0008 */

typedef struct _DUMP_INITIALIZATION_CONTEXT
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* MemoryBlock;
  /* 0x0010 */ void* CommonBuffer[2];
  /* 0x0020 */ union _LARGE_INTEGER PhysicalAddress[2];
  /* 0x0030 */ void* StallRoutine /* function */;
  /* 0x0038 */ void* OpenRoutine /* function */;
  /* 0x0040 */ void* WriteRoutine /* function */;
  /* 0x0048 */ void* FinishRoutine /* function */;
  /* 0x0050 */ struct _ADAPTER_OBJECT* AdapterObject;
  /* 0x0058 */ void* MappedRegisterBase;
  /* 0x0060 */ void* PortConfiguration;
  /* 0x0068 */ unsigned char CrashDump;
  /* 0x0069 */ unsigned char MarkMemoryOnly;
  /* 0x006a */ unsigned char HiberResume;
  /* 0x006b */ unsigned char Reserved1;
  /* 0x006c */ unsigned long MaximumTransferSize;
  /* 0x0070 */ unsigned long CommonBufferSize;
  /* 0x0074 */ long Padding_306;
  /* 0x0078 */ void* TargetAddress;
  /* 0x0080 */ void* WritePendingRoutine /* function */;
  /* 0x0088 */ unsigned long PartitionStyle;
  union
  {
    union
    {
      struct
      {
        /* 0x008c */ unsigned long Signature;
        /* 0x0090 */ unsigned long CheckSum;
      } /* size: 0x0008 */ Mbr;
      struct
      {
        /* 0x008c */ struct _GUID DiskId;
      } /* size: 0x0010 */ Gpt;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ DiskInfo;
  /* 0x009c */ long Padding_307;
  /* 0x00a0 */ void* ReadRoutine /* function */;
  /* 0x00a8 */ void* GetDriveTelemetryRoutine /* function */;
  /* 0x00b0 */ unsigned long LogSectionTruncateSize;
  /* 0x00b4 */ unsigned long Parameters[16];
  /* 0x00f4 */ long Padding_308;
  /* 0x00f8 */ void* GetTransferSizesRoutine /* function */;
  /* 0x0100 */ void* DumpNotifyRoutine /* function */;
} DUMP_INITIALIZATION_CONTEXT, *PDUMP_INITIALIZATION_CONTEXT; /* size: 0x0108 */

typedef union _FILE_SEGMENT_ELEMENT
{
  union
  {
    /* 0x0000 */ void* Buffer;
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0008 */
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT; /* size: 0x0008 */

struct _PCW_BUFFER;

typedef struct _PCW_DATA
{
  /* 0x0000 */ const void* Data;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ long __PADDING__[1];
} PCW_DATA, *PPCW_DATA; /* size: 0x0010 */

typedef struct _CONTEXT32_UPDATE
{
  /* 0x0000 */ unsigned long NumberEntries;
} CONTEXT32_UPDATE, *PCONTEXT32_UPDATE; /* size: 0x0004 */

typedef struct _KALPC_SECURITY_DATA
{
  /* 0x0000 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0008 */ void* ContextHandle;
  /* 0x0010 */ struct _EPROCESS* OwningProcess;
  /* 0x0018 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0020 */ struct _SECURITY_CLIENT_CONTEXT DynamicSecurity;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0068 */ unsigned long Revoked : 1; /* bit position: 0 */
        /* 0x0068 */ unsigned long Impersonated : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x006c */ long __PADDING__[1];
} KALPC_SECURITY_DATA, *PKALPC_SECURITY_DATA; /* size: 0x0070 */

typedef struct _HV_HYPERVISOR_INTERFACE_INFO
{
  /* 0x0000 */ unsigned int Interface;
  /* 0x0004 */ unsigned int ReservedEbx;
  /* 0x0008 */ unsigned int ReservedEcx;
  /* 0x000c */ unsigned int ReservedEdx;
} HV_HYPERVISOR_INTERFACE_INFO, *PHV_HYPERVISOR_INTERFACE_INFO; /* size: 0x0010 */

typedef union _HV_PARTITION_PRIVILEGE_MASK
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 AccessVpRunTimeMsr : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceCounter : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 AccessSynicMsrs : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 AccessSyntheticTimerMsrs : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 AccessApicMsrs : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 AccessHypercallMsrs : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 AccessVpIndex : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 AccessResetMsr : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 AccessStatsMsr : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceTsc : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 AccessGuestIdleMsr : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 AccessFrequencyMsrs : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 AccessDebugMsrs : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 Reserved1 : 19; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 CreatePartitions : 1; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 AccessPartitionId : 1; /* bit position: 33 */
      /* 0x0000 */ unsigned __int64 AccessMemoryPool : 1; /* bit position: 34 */
      /* 0x0000 */ unsigned __int64 AdjustMessageBuffers : 1; /* bit position: 35 */
      /* 0x0000 */ unsigned __int64 PostMessages : 1; /* bit position: 36 */
      /* 0x0000 */ unsigned __int64 SignalEvents : 1; /* bit position: 37 */
      /* 0x0000 */ unsigned __int64 CreatePort : 1; /* bit position: 38 */
      /* 0x0000 */ unsigned __int64 ConnectPort : 1; /* bit position: 39 */
      /* 0x0000 */ unsigned __int64 AccessStats : 1; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 2; /* bit position: 41 */
      /* 0x0000 */ unsigned __int64 Debugging : 1; /* bit position: 43 */
      /* 0x0000 */ unsigned __int64 CpuManagement : 1; /* bit position: 44 */
      /* 0x0000 */ unsigned __int64 ConfigureProfiler : 1; /* bit position: 45 */
      /* 0x0000 */ unsigned __int64 EnableExpandedStackwalking : 1; /* bit position: 46 */
      /* 0x0000 */ unsigned __int64 Reserved3 : 17; /* bit position: 47 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} HV_PARTITION_PRIVILEGE_MASK, *PHV_PARTITION_PRIVILEGE_MASK; /* size: 0x0008 */

typedef struct _HV_HYPERVISOR_FEATURES
{
  /* 0x0000 */ union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned int MaxSupportedCState : 4; /* bit position: 0 */
    /* 0x0008 */ unsigned int HpetNeededForC3PowerState : 1; /* bit position: 4 */
    /* 0x0008 */ unsigned int Reserved : 27; /* bit position: 5 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x000c */ unsigned int MwaitAvailable : 1; /* bit position: 0 */
    /* 0x000c */ unsigned int GuestDebuggingAvailable : 1; /* bit position: 1 */
    /* 0x000c */ unsigned int PerformanceMonitorsAvailable : 1; /* bit position: 2 */
    /* 0x000c */ unsigned int CpuDynamicPartitioningAvailable : 1; /* bit position: 3 */
    /* 0x000c */ unsigned int XmmRegistersForFastHypercallAvailable : 1; /* bit position: 4 */
    /* 0x000c */ unsigned int GuestIdleAvailable : 1; /* bit position: 5 */
    /* 0x000c */ unsigned int HypervisorSleepStateSupportAvailable : 1; /* bit position: 6 */
    /* 0x000c */ unsigned int NumaDistanceQueryAvailable : 1; /* bit position: 7 */
    /* 0x000c */ unsigned int FrequencyMsrsAvailable : 1; /* bit position: 8 */
    /* 0x000c */ unsigned int SyntheticMachineCheckAvailable : 1; /* bit position: 9 */
    /* 0x000c */ unsigned int GuestCrashMsrsAvailable : 1; /* bit position: 10 */
    /* 0x000c */ unsigned int DebugMsrsAvailable : 1; /* bit position: 11 */
    /* 0x000c */ unsigned int Npiep1Available : 1; /* bit position: 12 */
    /* 0x000c */ unsigned int DisableHypervisorAvailable : 1; /* bit position: 13 */
    /* 0x000c */ unsigned int Reserved1 : 18; /* bit position: 14 */
  }; /* bitfield */
} HV_HYPERVISOR_FEATURES, *PHV_HYPERVISOR_FEATURES; /* size: 0x0010 */

typedef struct _HV_ENLIGHTENMENT_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int UseHypercallForAddressSpaceSwitch : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int UseHypercallForLocalFlush : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int UseHypercallForRemoteFlush : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int UseApicMsrs : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int UseMsrForReset : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned int UseRelaxedTiming : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned int UseDmaRemapping : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned int UseInterruptRemapping : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned int UseX2ApicMsrs : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned int DeprecateAutoEoi : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned int Reserved : 22; /* bit position: 10 */
  }; /* bitfield */
  /* 0x0004 */ unsigned int LongSpinWaitCount;
  /* 0x0008 */ unsigned int ReservedEcx;
  /* 0x000c */ unsigned int ReservedEdx;
} HV_ENLIGHTENMENT_INFORMATION, *PHV_ENLIGHTENMENT_INFORMATION; /* size: 0x0010 */

typedef struct _HV_IMPLEMENTATION_LIMITS
{
  /* 0x0000 */ unsigned int MaxVirtualProcessorCount;
  /* 0x0004 */ unsigned int MaxLogicalProcessorCount;
  /* 0x0008 */ unsigned int MaxInterruptMappingCount;
  /* 0x000c */ unsigned int ReservedEdx;
} HV_IMPLEMENTATION_LIMITS, *PHV_IMPLEMENTATION_LIMITS; /* size: 0x0010 */

typedef union _HV_CPUID_RESULT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int Eax;
      /* 0x0004 */ unsigned int Ebx;
      /* 0x0008 */ unsigned int Ecx;
      /* 0x000c */ unsigned int Edx;
    }; /* size: 0x0010 */
    /* 0x0000 */ unsigned int AsUINT32[4];
    struct
    {
      /* 0x0000 */ unsigned int ReservedEax;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned int ReservedEbx : 24; /* bit position: 0 */
        /* 0x0004 */ unsigned int InitialApicId : 8; /* bit position: 24 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned int ReservedEcx : 31; /* bit position: 0 */
        /* 0x0008 */ unsigned int HypervisorPresent : 1; /* bit position: 31 */
      }; /* bitfield */
      /* 0x000c */ unsigned int ReservedEdx;
    } /* size: 0x0010 */ VersionAndFeatures;
    /* 0x0000 */ struct _HV_VENDOR_AND_MAX_FUNCTION HvVendorAndMaxFunction;
    /* 0x0000 */ struct _HV_HYPERVISOR_INTERFACE_INFO HvInterface;
    /* 0x0000 */ struct _HV_HYPERVISOR_VERSION_INFO MsHvVersion;
    /* 0x0000 */ struct _HV_HYPERVISOR_FEATURES MsHvFeatures;
    /* 0x0000 */ struct _HV_ENLIGHTENMENT_INFORMATION MsHvEnlightenmentInformation;
    /* 0x0000 */ struct _HV_IMPLEMENTATION_LIMITS MsHvImplementationLimits;
    /* 0x0000 */ struct _HV_HYPERVISOR_HARDWARE_FEATURES MsHvHardwareFeatures;
  }; /* size: 0x0010 */
} HV_CPUID_RESULT, *PHV_CPUID_RESULT; /* size: 0x0010 */

typedef struct _KALPC_VIEW
{
  /* 0x0000 */ struct _LIST_ENTRY ViewListEntry;
  /* 0x0010 */ struct _KALPC_REGION* Region;
  /* 0x0018 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0020 */ struct _EPROCESS* OwnerProcess;
  /* 0x0028 */ void* Address;
  /* 0x0030 */ unsigned __int64 Size;
  /* 0x0038 */ void* SecureViewHandle;
  /* 0x0040 */ void* WriteAccessHandle;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0048 */ unsigned long WriteAccess : 1; /* bit position: 0 */
        /* 0x0048 */ unsigned long AutoRelease : 1; /* bit position: 1 */
        /* 0x0048 */ unsigned long ForceUnlink : 1; /* bit position: 2 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x004c */ unsigned long NumberOfOwnerMessages;
  /* 0x0050 */ struct _LIST_ENTRY ProcessViewListEntry;
} KALPC_VIEW, *PKALPC_VIEW; /* size: 0x0060 */

typedef struct _EVENT_FILTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Type;
} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR; /* size: 0x0010 */

typedef struct _DIAGNOSTIC_BUFFER
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ enum _REQUESTER_TYPE CallerType;
  /* 0x000c */ long Padding_309;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned __int64 ProcessImageNameOffset;
      /* 0x0018 */ unsigned long ProcessId;
      /* 0x001c */ unsigned long ServiceTag;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0010 */ unsigned __int64 DeviceDescriptionOffset;
      /* 0x0018 */ unsigned __int64 DevicePathOffset;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0020 */ unsigned __int64 ReasonOffset;
} DIAGNOSTIC_BUFFER, *PDIAGNOSTIC_BUFFER; /* size: 0x0028 */

typedef struct _POP_FX_WORK_ORDER
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0020 */ long WorkCount;
  /* 0x0024 */ long Padding_310;
  /* 0x0028 */ void* Context;
  /* 0x0030 */ struct _POP_FX_WORK_ORDER_WATCHDOG_INFO* WatchdogTimerInfo;
} POP_FX_WORK_ORDER, *PPOP_FX_WORK_ORDER; /* size: 0x0038 */

typedef struct _POP_FX_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ struct _POP_IRP_DATA* IrpData;
  /* 0x0020 */ volatile union _POP_FX_DEVICE_STATUS Status;
  /* 0x0024 */ volatile long PowerReqCall;
  /* 0x0028 */ volatile long PowerNotReqCall;
  /* 0x002c */ long Padding_311;
  /* 0x0030 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0038 */ struct PEPHANDLE__* PluginHandle;
  /* 0x0040 */ struct _POP_FX_PLUGIN* MiniPlugin;
  /* 0x0048 */ struct PEPHANDLE__* MiniPluginHandle;
  /* 0x0050 */ struct _DEVICE_NODE* DevNode;
  /* 0x0058 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0060 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0068 */ struct _POP_FX_DRIVER_CALLBACKS Callbacks;
  /* 0x00a0 */ void* DriverContext;
  /* 0x00a8 */ struct _IO_REMOVE_LOCK RemoveLock;
  /* 0x00c8 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0100 */ unsigned __int64 IdleLock;
  /* 0x0108 */ struct _KTIMER IdleTimer;
  /* 0x0148 */ struct _KDPC IdleDpc;
  /* 0x0188 */ unsigned __int64 IdleTimeout;
  /* 0x0190 */ unsigned __int64 IdleStamp;
  /* 0x0198 */ struct _DEVICE_OBJECT* NextIrpDeviceObject;
  /* 0x01a0 */ union _POWER_STATE NextIrpPowerState;
  /* 0x01a4 */ long Padding_312;
  /* 0x01a8 */ void* NextIrpCallerCompletion /* function */;
  /* 0x01b0 */ void* NextIrpCallerContext;
  /* 0x01b8 */ struct _KEVENT IrpCompleteEvent;
  /* 0x01d0 */ void* PowerOnDumpDeviceCallback /* function */;
  /* 0x01d8 */ struct _POP_FX_ACCOUNTING Accounting;
  /* 0x0208 */ unsigned long ComponentCount;
  /* 0x020c */ long Padding_313;
  /* 0x0210 */ struct _POP_FX_COMPONENT* Components[1];
} POP_FX_DEVICE, *PPOP_FX_DEVICE; /* size: 0x0218 */

typedef struct _POP_IRP_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ struct _DEVICE_OBJECT* Pdo;
  /* 0x0020 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0028 */ struct _DEVICE_OBJECT* CurrentDevice;
  /* 0x0030 */ unsigned __int64 WatchdogStart;
  /* 0x0038 */ struct _KTIMER WatchdogTimer;
  /* 0x0078 */ struct _KDPC WatchdogDpc;
  /* 0x00b8 */ unsigned char MinorFunction;
  /* 0x00b9 */ char Padding_314[3];
  /* 0x00bc */ enum _POWER_STATE_TYPE PowerStateType;
  /* 0x00c0 */ union _POWER_STATE PowerState;
  /* 0x00c4 */ unsigned char WatchdogEnabled;
  /* 0x00c5 */ char Padding_315[3];
  /* 0x00c8 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x00d0 */ unsigned char SystemTransition;
  /* 0x00d1 */ unsigned char NotifyPEP;
  /* 0x00d2 */ char Padding_316[6];
  union
  {
    struct
    {
      /* 0x00d8 */ void* CallerCompletion /* function */;
      /* 0x00e0 */ void* CallerContext;
      /* 0x00e8 */ struct _DEVICE_OBJECT* CallerDevice;
      /* 0x00f0 */ unsigned char SystemWake;
      /* 0x00f1 */ char __PADDING__[7];
    } /* size: 0x0020 */ Device;
    struct
    {
      struct
      {
        /* 0x00d8 */ struct _PO_DEVICE_NOTIFY* NotifyDevice;
        /* 0x00e0 */ unsigned char FxDeviceActivated;
        /* 0x00e1 */ char __PADDING__[7];
      } /* size: 0x0010 */ System;
      /* 0x00e8 */ long __PADDING__[4];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} POP_IRP_DATA, *PPOP_IRP_DATA; /* size: 0x00f8 */

typedef struct _DBGKD_FILL_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned short Flags;
  /* 0x000e */ unsigned short PatternLength;
} DBGKD_FILL_MEMORY, *PDBGKD_FILL_MEMORY; /* size: 0x0010 */

typedef struct _DBGKD_READ_WRITE_IO64
{
  /* 0x0000 */ unsigned __int64 IoAddress;
  /* 0x0008 */ unsigned long DataSize;
  /* 0x000c */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO64, *PDBGKD_READ_WRITE_IO64; /* size: 0x0010 */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned __int64 IoAddress;
  /* 0x0018 */ unsigned long DataValue;
  /* 0x001c */ long __PADDING__[1];
} DBGKD_READ_WRITE_IO_EXTENDED64, *PDBGKD_READ_WRITE_IO_EXTENDED64; /* size: 0x0020 */

typedef struct _DBGKD_SET_SPECIAL_CALL64
{
  /* 0x0000 */ unsigned __int64 SpecialCall;
} DBGKD_SET_SPECIAL_CALL64, *PDBGKD_SET_SPECIAL_CALL64; /* size: 0x0008 */

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long Calls;
  /* 0x0010 */ unsigned long MaxCallsPerPeriod;
  /* 0x0014 */ unsigned long MinInstructions;
  /* 0x0018 */ unsigned long MaxInstructions;
  /* 0x001c */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT64, *PDBGKD_GET_INTERNAL_BREAKPOINT64; /* size: 0x0020 */

typedef struct _DBGKD_GET_SET_BUS_DATA
{
  /* 0x0000 */ unsigned long BusDataType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ unsigned long SlotNumber;
  /* 0x000c */ unsigned long Offset;
  /* 0x0010 */ unsigned long Length;
} DBGKD_GET_SET_BUS_DATA, *PDBGKD_GET_SET_BUS_DATA; /* size: 0x0014 */

typedef struct _DBGKD_QUERY_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ unsigned long AddressSpace;
  /* 0x0014 */ unsigned long Flags;
} DBGKD_QUERY_MEMORY, *PDBGKD_QUERY_MEMORY; /* size: 0x0018 */

typedef struct _DBGKD_MANIPULATE_STATE64
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  /* 0x000c */ long Padding_317;
  union
  {
    union
    {
      /* 0x0010 */ struct _DBGKD_READ_MEMORY64 ReadMemory;
      /* 0x0010 */ struct _DBGKD_WRITE_MEMORY64 WriteMemory;
      /* 0x0010 */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x0010 */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x0010 */ struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
      /* 0x0010 */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x0010 */ struct _DBGKD_CONTINUE Continue;
      /* 0x0010 */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
      /* 0x0010 */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x0010 */ struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
      /* 0x0010 */ struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_VERSION64 GetVersion64;
      /* 0x0010 */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x0010 */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x0010 */ struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;
      /* 0x0010 */ struct _DBGKD_FILL_MEMORY FillMemory;
      /* 0x0010 */ struct _DBGKD_QUERY_MEMORY QueryMemory;
      /* 0x0010 */ struct _DBGKD_SWITCH_PARTITION SwitchPartition;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX SetContextEx;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE64, *PDBGKD_MANIPULATE_STATE64; /* size: 0x0038 */

typedef struct _POP_FX_PLUGIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ unsigned long Version;
  /* 0x0014 */ long Padding_318;
  /* 0x0018 */ unsigned __int64 Flags;
  /* 0x0020 */ struct _KQUEUE WorkQueue;
  /* 0x0060 */ void* AcceptDeviceNotification /* function */;
  /* 0x0068 */ void* AcceptProcessorNotification /* function */;
  /* 0x0070 */ unsigned long WorkOrderCount;
  /* 0x0074 */ long Padding_319;
  /* 0x0078 */ struct _POP_FX_WORK_ORDER WorkOrders[1];
} POP_FX_PLUGIN, *PPOP_FX_PLUGIN; /* size: 0x00b0 */

typedef union _CPU_INFO
{
  union
  {
    /* 0x0000 */ unsigned int AsUINT32[4];
    struct
    {
      /* 0x0000 */ unsigned long Eax;
      /* 0x0004 */ unsigned long Ebx;
      /* 0x0008 */ unsigned long Ecx;
      /* 0x000c */ unsigned long Edx;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} CPU_INFO, *PCPU_INFO; /* size: 0x0010 */

typedef struct _LAZY_WRITER
{
  /* 0x0000 */ struct _KDPC ScanDpc;
  /* 0x0040 */ struct _KTIMER ScanTimer;
  /* 0x0080 */ unsigned char ScanActive;
  /* 0x0081 */ unsigned char OtherWork;
  /* 0x0082 */ unsigned char PendingTeardownScan;
  /* 0x0083 */ unsigned char PendingPeriodicScan;
  /* 0x0084 */ unsigned char PendingLowMemoryScan;
  /* 0x0085 */ unsigned char PendingPowerScan;
  /* 0x0086 */ unsigned char PendingCoalescingFlushScan;
  /* 0x0087 */ char __PADDING__[1];
} LAZY_WRITER, *PLAZY_WRITER; /* size: 0x0088 */

typedef struct _HEAP_LOCK
{
  union
  {
    union
    {
      /* 0x0000 */ struct _RTL_CRITICAL_SECTION CriticalSection;
      /* 0x0000 */ struct _ERESOURCE Resource;
    }; /* size: 0x0068 */
  } /* size: 0x0068 */ Lock;
} HEAP_LOCK, *PHEAP_LOCK; /* size: 0x0068 */

typedef struct _ARBITER_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long AlternativeCount;
  /* 0x0014 */ long Padding_320;
  /* 0x0018 */ struct _IO_RESOURCE_DESCRIPTOR* Alternatives;
  /* 0x0020 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0028 */ enum _ARBITER_REQUEST_SOURCE RequestSource;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ __int64 WorkSpace;
  /* 0x0038 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x003c */ unsigned long SlotNumber;
  /* 0x0040 */ unsigned long BusNumber;
  /* 0x0044 */ long Padding_321;
  /* 0x0048 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* Assignment;
  /* 0x0050 */ struct _IO_RESOURCE_DESCRIPTOR* SelectedAlternative;
  /* 0x0058 */ enum _ARBITER_RESULT Result;
  /* 0x005c */ long __PADDING__[1];
} ARBITER_LIST_ENTRY, *PARBITER_LIST_ENTRY; /* size: 0x0060 */

typedef struct _MI_TRIAGE_DUMP_DATA
{
  /* 0x0000 */ unsigned __int64 BadPageCount;
  /* 0x0008 */ long BadPagesDetected;
  /* 0x000c */ long ZeroedPageSingleBitErrorsDetected;
  /* 0x0010 */ long ScrubPasses;
  /* 0x0014 */ long ScrubBadPagesFound;
  /* 0x0018 */ unsigned __int64 FeatureBits;
  /* 0x0020 */ unsigned long TimeZoneId;
  /* 0x0024 */ long __PADDING__[1];
} MI_TRIAGE_DUMP_DATA, *PMI_TRIAGE_DUMP_DATA; /* size: 0x0028 */

typedef struct _GDI_TEB_BATCH64
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_322;
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH64, *PGDI_TEB_BATCH64; /* size: 0x04e8 */

typedef struct _PEP_CRASHDUMP_INFORMATION
{
  /* 0x0000 */ struct PEPHANDLE__* DeviceHandle;
  /* 0x0008 */ void* DeviceContext;
} PEP_CRASHDUMP_INFORMATION, *PPEP_CRASHDUMP_INFORMATION; /* size: 0x0010 */

typedef struct _POP_FX_COMPONENT
{
  /* 0x0000 */ struct _GUID Id;
  /* 0x0010 */ unsigned long Index;
  /* 0x0014 */ long Padding_323;
  /* 0x0018 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0050 */ struct _POP_FX_DEVICE* Device;
  /* 0x0058 */ volatile union _POP_FX_COMPONENT_FLAGS Flags;
  /* 0x0060 */ volatile long Resident;
  /* 0x0064 */ long Padding_324;
  /* 0x0068 */ struct _KEVENT ActiveEvent;
  /* 0x0080 */ unsigned __int64 IdleLock;
  /* 0x0088 */ volatile long IdleConditionComplete;
  /* 0x008c */ volatile long IdleStateComplete;
  /* 0x0090 */ unsigned __int64 IdleStamp;
  /* 0x0098 */ volatile unsigned long CurrentIdleState;
  /* 0x009c */ unsigned long IdleStateCount;
  /* 0x00a0 */ struct _POP_FX_IDLE_STATE* IdleStates;
  /* 0x00a8 */ unsigned long DeepestWakeableIdleState;
  /* 0x00ac */ unsigned long ProviderCount;
  /* 0x00b0 */ struct _POP_FX_PROVIDER* Providers;
  /* 0x00b8 */ unsigned long IdleProviderCount;
  /* 0x00bc */ unsigned long DependentCount;
  /* 0x00c0 */ struct _POP_FX_DEPENDENT* Dependents;
  /* 0x00c8 */ struct _POP_FX_ACCOUNTING Accounting;
} POP_FX_COMPONENT, *PPOP_FX_COMPONENT; /* size: 0x00f8 */

typedef struct _OBJECT_REF_STACK_INFO
{
  /* 0x0000 */ unsigned long Sequence;
  /* 0x0004 */ unsigned short Index;
  /* 0x0006 */ unsigned short NumTraces;
  /* 0x0008 */ unsigned long Tag;
} OBJECT_REF_STACK_INFO, *POBJECT_REF_STACK_INFO; /* size: 0x000c */

typedef struct _POP_FX_DEPENDENT
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned long ProviderIndex;
} POP_FX_DEPENDENT, *PPOP_FX_DEPENDENT; /* size: 0x0008 */

typedef struct _PLUGPLAY_EVENT_BLOCK
{
  /* 0x0000 */ struct _GUID EventGuid;
  /* 0x0010 */ enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
  /* 0x0014 */ long Padding_325;
  /* 0x0018 */ unsigned long* Result;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long TotalSize;
  /* 0x0028 */ void* DeviceObject;
  union
  {
    union
    {
      struct
      {
        /* 0x0030 */ struct _GUID ClassGuid;
        /* 0x0040 */ wchar_t SymbolicLinkName[1];
        /* 0x0042 */ char __PADDING__[2];
      } /* size: 0x0014 */ DeviceClass;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ TargetDevice;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ InstallDevice;
      struct
      {
        /* 0x0030 */ void* NotificationStructure;
        /* 0x0038 */ wchar_t DeviceId[1];
        /* 0x003a */ char __PADDING__[6];
      } /* size: 0x0010 */ CustomNotification;
      struct
      {
        /* 0x0030 */ void* Notification;
      } /* size: 0x0008 */ ProfileNotification;
      struct
      {
        /* 0x0030 */ unsigned long NotificationCode;
        /* 0x0034 */ unsigned long NotificationData;
      } /* size: 0x0008 */ PowerNotification;
      struct
      {
        /* 0x0030 */ enum _PNP_VETO_TYPE VetoType;
        /* 0x0034 */ wchar_t DeviceIdVetoNameBuffer[1];
        /* 0x0036 */ char __PADDING__[2];
      } /* size: 0x0008 */ VetoNotification;
      struct
      {
        /* 0x0030 */ struct _GUID BlockedDriverGuid;
      } /* size: 0x0010 */ BlockedDriverNotification;
      struct
      {
        /* 0x0030 */ wchar_t ParentId[1];
      } /* size: 0x0002 */ InvalidIDNotification;
      struct
      {
        /* 0x0030 */ struct _GUID PowerSettingGuid;
        /* 0x0040 */ unsigned long Flags;
        /* 0x0044 */ unsigned long SessionId;
        /* 0x0048 */ unsigned long DataLength;
        /* 0x004c */ unsigned char Data[1];
        /* 0x004d */ char __PADDING__[3];
      } /* size: 0x0020 */ PowerSettingNotification;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ PropertyChangeNotification;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ DeviceInstanceNotification;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ u;
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK; /* size: 0x0050 */

typedef struct _PNP_DEVICE_EVENT_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long Argument;
  /* 0x0014 */ long Padding_326;
  /* 0x0018 */ struct _KEVENT* CallerEvent;
  /* 0x0020 */ void* Callback /* function */;
  /* 0x0028 */ void* Context;
  /* 0x0030 */ enum _PNP_VETO_TYPE* VetoType;
  /* 0x0038 */ struct _UNICODE_STRING* VetoName;
  /* 0x0040 */ unsigned long RefCount;
  /* 0x0044 */ unsigned long Lock;
  /* 0x0048 */ unsigned char Cancel;
  /* 0x0049 */ char Padding_327[7];
  /* 0x0050 */ struct _PNP_DEVICE_EVENT_ENTRY* Parent;
  /* 0x0058 */ struct _PLUGPLAY_EVENT_BLOCK Data;
} PNP_DEVICE_EVENT_ENTRY, *PPNP_DEVICE_EVENT_ENTRY; /* size: 0x00a8 */

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR* ConflictingResource;
  /* 0x0010 */ unsigned long* ConflictCount;
  /* 0x0018 */ struct _ARBITER_CONFLICT_INFO** Conflicts;
} ARBITER_QUERY_CONFLICT_PARAMETERS, *PARBITER_QUERY_CONFLICT_PARAMETERS; /* size: 0x0020 */

typedef struct _RELATION_LIST_ENTRY
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long MaxCount;
  /* 0x0008 */ struct _DEVICE_OBJECT_LIST_ENTRY Devices[1];
} RELATION_LIST_ENTRY, *PRELATION_LIST_ENTRY; /* size: 0x0018 */

typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT
{
  /* 0x0000 */ unsigned long IncludeFailedDevices;
  /* 0x0004 */ unsigned long DeviceCount;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceList[1];
} PNP_ASSIGN_RESOURCES_CONTEXT, *PPNP_ASSIGN_RESOURCES_CONTEXT; /* size: 0x0010 */

typedef struct _PNP_RESOURCE_REQUEST
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDevice;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ enum _ARBITER_REQUEST_SOURCE AllocationType;
  /* 0x0010 */ unsigned long Priority;
  /* 0x0014 */ unsigned long Position;
  /* 0x0018 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x0020 */ void* ReqList;
  /* 0x0028 */ struct _CM_RESOURCE_LIST* ResourceAssignment;
  /* 0x0030 */ struct _CM_RESOURCE_LIST* TranslatedResourceAssignment;
  /* 0x0038 */ long Status;
  /* 0x003c */ long __PADDING__[1];
} PNP_RESOURCE_REQUEST, *PPNP_RESOURCE_REQUEST; /* size: 0x0040 */

typedef struct _ALPC_HANDLE_ENTRY
{
  /* 0x0000 */ void* Object;
} ALPC_HANDLE_ENTRY, *PALPC_HANDLE_ENTRY; /* size: 0x0008 */

typedef struct _EXCEPTION_RECORD32
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned long ExceptionRecord;
  /* 0x000c */ unsigned long ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32; /* size: 0x0050 */

typedef struct _DBGKM_EXCEPTION32
{
  /* 0x0000 */ struct _EXCEPTION_RECORD32 ExceptionRecord;
  /* 0x0050 */ unsigned long FirstChance;
} DBGKM_EXCEPTION32, *PDBGKM_EXCEPTION32; /* size: 0x0054 */

typedef struct _DBGKD_LOAD_SYMBOLS64
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ long Padding_328;
  /* 0x0008 */ unsigned __int64 BaseOfDll;
  /* 0x0010 */ unsigned __int64 ProcessId;
  /* 0x0018 */ unsigned long CheckSum;
  /* 0x001c */ unsigned long SizeOfImage;
  /* 0x0020 */ unsigned char UnloadSymbols;
  /* 0x0021 */ char __PADDING__[7];
} DBGKD_LOAD_SYMBOLS64, *PDBGKD_LOAD_SYMBOLS64; /* size: 0x0028 */

typedef struct _DBGKD_LOAD_SYMBOLS32
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ unsigned long BaseOfDll;
  /* 0x0008 */ unsigned long ProcessId;
  /* 0x000c */ unsigned long CheckSum;
  /* 0x0010 */ unsigned long SizeOfImage;
  /* 0x0014 */ unsigned char UnloadSymbols;
  /* 0x0015 */ char __PADDING__[3];
} DBGKD_LOAD_SYMBOLS32, *PDBGKD_LOAD_SYMBOLS32; /* size: 0x0018 */

typedef struct _BLOB
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ResourceList;
    /* 0x0000 */ struct _SLIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0010 */ unsigned char ReferenceCache : 1; /* bit position: 0 */
          /* 0x0010 */ unsigned char Lookaside : 1; /* bit position: 1 */
          /* 0x0010 */ unsigned char Initializing : 1; /* bit position: 2 */
          /* 0x0010 */ unsigned char Deleted : 1; /* bit position: 3 */
        }; /* bitfield */
      } /* size: 0x0001 */ s1;
      /* 0x0010 */ unsigned char Flags;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ u1;
  /* 0x0011 */ unsigned char ResourceId;
  /* 0x0012 */ short CachedReferences;
  /* 0x0014 */ long Padding_329;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0028 */ long __PADDING__[2];
} BLOB, *PBLOB; /* size: 0x0030 */

typedef struct _CACHE_UNINITIALIZE_EVENT
{
  /* 0x0000 */ struct _CACHE_UNINITIALIZE_EVENT* Next;
  /* 0x0008 */ struct _KEVENT Event;
} CACHE_UNINITIALIZE_EVENT, *PCACHE_UNINITIALIZE_EVENT; /* size: 0x0020 */

typedef struct _ARBITER_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_330;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
  /* 0x0020 */ void* ArbiterHandler /* function */;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ long __PADDING__[1];
} ARBITER_INTERFACE, *PARBITER_INTERFACE; /* size: 0x0030 */

typedef struct _LPCP_PORT_QUEUE
{
  /* 0x0000 */ struct _LPCP_NONPAGED_PORT_QUEUE* NonPagedPortQueue;
  /* 0x0008 */ struct _KSEMAPHORE* Semaphore;
  /* 0x0010 */ struct _LIST_ENTRY ReceiveHead;
} LPCP_PORT_QUEUE, *PLPCP_PORT_QUEUE; /* size: 0x0020 */

typedef struct _LPCP_PORT_OBJECT
{
  /* 0x0000 */ struct _LPCP_PORT_OBJECT* ConnectionPort;
  /* 0x0008 */ struct _LPCP_PORT_OBJECT* ConnectedPort;
  /* 0x0010 */ struct _LPCP_PORT_QUEUE MsgQueue;
  /* 0x0030 */ struct _CLIENT_ID Creator;
  /* 0x0040 */ void* ClientSectionBase;
  /* 0x0048 */ void* ServerSectionBase;
  /* 0x0050 */ void* PortContext;
  /* 0x0058 */ struct _ETHREAD* ClientThread;
  /* 0x0060 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x006c */ long Padding_331;
  /* 0x0070 */ struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  /* 0x00b8 */ struct _LIST_ENTRY LpcReplyChainHead;
  /* 0x00c8 */ struct _LIST_ENTRY LpcDataInfoChainHead;
  union
  {
    /* 0x00d8 */ struct _EPROCESS* ServerProcess;
    /* 0x00d8 */ struct _EPROCESS* MappingProcess;
  }; /* size: 0x0008 */
  /* 0x00e0 */ unsigned short MaxMessageLength;
  /* 0x00e2 */ unsigned short MaxConnectionInfoLength;
  /* 0x00e4 */ unsigned long Flags;
  /* 0x00e8 */ struct _KEVENT WaitEvent;
} LPCP_PORT_OBJECT, *PLPCP_PORT_OBJECT; /* size: 0x0100 */

typedef struct _DBGKD_MANIPULATE_STATE32
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  union
  {
    union
    {
      /* 0x000c */ struct _DBGKD_READ_MEMORY32 ReadMemory;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY32 WriteMemory;
      /* 0x000c */ struct _DBGKD_READ_MEMORY64 ReadMemory64;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY64 WriteMemory64;
      /* 0x000c */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x000c */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x000c */ struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
      /* 0x000c */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x000c */ struct _DBGKD_CONTINUE Continue;
      /* 0x000c */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
      /* 0x000c */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x000c */ struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
      /* 0x000c */ struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_VERSION32 GetVersion32;
      /* 0x000c */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x000c */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x000c */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX SetContextEx;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE32, *PDBGKD_MANIPULATE_STATE32; /* size: 0x0034 */

typedef struct _DIRTY_PAGE_THRESHOLDS
{
  /* 0x0000 */ unsigned __int64 DirtyPageThreshold;
  /* 0x0008 */ unsigned __int64 DirtyPageThresholdTop;
  /* 0x0010 */ unsigned __int64 DirtyPageThresholdBottom;
  /* 0x0018 */ unsigned long DirtyPageTarget;
  /* 0x001c */ long Padding_332;
  /* 0x0020 */ unsigned __int64 AggregateAvailablePages;
  /* 0x0028 */ unsigned __int64 AggregateDirtyPages;
  /* 0x0030 */ unsigned long AvailableHistory;
  /* 0x0034 */ long __PADDING__[1];
} DIRTY_PAGE_THRESHOLDS, *PDIRTY_PAGE_THRESHOLDS; /* size: 0x0038 */

typedef struct _LOG_HANDLE_CONTEXT
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0008 */ void* FlushToLsnRoutine /* function */;
  /* 0x0010 */ void* QueryLogHandleInfoRoutine /* function */;
  /* 0x0018 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0030 */ struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  /* 0x0068 */ unsigned long AdditionalPagesToWrite;
  /* 0x006c */ unsigned long CcLWScanDPThreshold;
  /* 0x0070 */ union _LARGE_INTEGER LargestLsnForCurrentLWScan;
  /* 0x0078 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0080 */ unsigned __int64 LargestLsnFileObjectKey;
  /* 0x0088 */ union _LARGE_INTEGER LastLWTimeStamp;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ long __PADDING__[1];
} LOG_HANDLE_CONTEXT, *PLOG_HANDLE_CONTEXT; /* size: 0x0098 */

typedef struct _VOLUME_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteCode;
  /* 0x0004 */ unsigned long UseCount;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _LIST_ENTRY VolumeCacheMapLinks;
  /* 0x0020 */ unsigned __int64 DirtyPages;
  /* 0x0028 */ struct _LOG_HANDLE_CONTEXT LogHandleContext;
  /* 0x00c0 */ unsigned long Flags;
  /* 0x00c4 */ unsigned long PagesQueuedToDisk;
  /* 0x00c8 */ unsigned long LoggedPagesQueuedToDisk;
  /* 0x00cc */ long __PADDING__[1];
} VOLUME_CACHE_MAP, *PVOLUME_CACHE_MAP; /* size: 0x00d0 */

typedef struct _DELAY_ACK_FO
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ struct _FILE_OBJECT* OriginalFileObject;
} DELAY_ACK_FO, *PDELAY_ACK_FO; /* size: 0x0018 */

typedef struct _VACB_ARRAY_HEADER
{
  /* 0x0000 */ unsigned long VacbArrayIndex;
  /* 0x0004 */ unsigned long MappingCount;
  /* 0x0008 */ unsigned long HighestMappedIndex;
  /* 0x000c */ unsigned long Reserved;
} VACB_ARRAY_HEADER, *PVACB_ARRAY_HEADER; /* size: 0x0010 */

typedef struct _CACHE_MANAGER_CALLBACKS
{
  /* 0x0000 */ void* AcquireForLazyWrite /* function */;
  /* 0x0008 */ void* ReleaseFromLazyWrite /* function */;
  /* 0x0010 */ void* AcquireForReadAhead /* function */;
  /* 0x0018 */ void* ReleaseFromReadAhead /* function */;
} CACHE_MANAGER_CALLBACKS, *PCACHE_MANAGER_CALLBACKS; /* size: 0x0020 */

typedef struct _BLOB_COUNTERS
{
  /* 0x0000 */ unsigned long CreatedObjects;
  /* 0x0004 */ unsigned long DeletedObjects;
} BLOB_COUNTERS, *PBLOB_COUNTERS; /* size: 0x0008 */

typedef struct _ALPC_PORT
{
  /* 0x0000 */ struct _LIST_ENTRY PortListEntry;
  /* 0x0010 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x0018 */ struct _EPROCESS* OwnerProcess;
  /* 0x0020 */ void* CompletionPort;
  /* 0x0028 */ void* CompletionKey;
  /* 0x0030 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* CompletionPacketLookaside;
  /* 0x0038 */ void* PortContext;
  /* 0x0040 */ struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  /* 0x0088 */ struct _EX_PUSH_LOCK IncomingQueueLock;
  /* 0x0090 */ struct _LIST_ENTRY MainQueue;
  /* 0x00a0 */ struct _LIST_ENTRY LargeMessageQueue;
  /* 0x00b0 */ struct _EX_PUSH_LOCK PendingQueueLock;
  /* 0x00b8 */ struct _LIST_ENTRY PendingQueue;
  /* 0x00c8 */ struct _EX_PUSH_LOCK WaitQueueLock;
  /* 0x00d0 */ struct _LIST_ENTRY WaitQueue;
  union
  {
    /* 0x00e0 */ struct _KSEMAPHORE* Semaphore;
    /* 0x00e0 */ struct _KEVENT* DummyEvent;
  }; /* size: 0x0008 */
  /* 0x00e8 */ struct _ALPC_PORT_ATTRIBUTES PortAttributes;
  /* 0x0130 */ struct _EX_PUSH_LOCK ResourceListLock;
  /* 0x0138 */ struct _LIST_ENTRY ResourceListHead;
  /* 0x0148 */ struct _EX_PUSH_LOCK PortObjectLock;
  /* 0x0150 */ struct _ALPC_COMPLETION_LIST* CompletionList;
  /* 0x0158 */ struct _CALLBACK_OBJECT* CallbackObject;
  /* 0x0160 */ void* CallbackContext;
  /* 0x0168 */ struct _LIST_ENTRY CanceledQueue;
  /* 0x0178 */ long SequenceNo;
  /* 0x017c */ long ReferenceNo;
  /* 0x0180 */ struct _PALPC_PORT_REFERENCE_WAIT_BLOCK* ReferenceNoWait;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0188 */ unsigned long Initialized : 1; /* bit position: 0 */
          /* 0x0188 */ unsigned long Type : 2; /* bit position: 1 */
          /* 0x0188 */ unsigned long ConnectionPending : 1; /* bit position: 3 */
          /* 0x0188 */ unsigned long ConnectionRefused : 1; /* bit position: 4 */
          /* 0x0188 */ unsigned long Disconnected : 1; /* bit position: 5 */
          /* 0x0188 */ unsigned long Closed : 1; /* bit position: 6 */
          /* 0x0188 */ unsigned long NoFlushOnClose : 1; /* bit position: 7 */
          /* 0x0188 */ unsigned long ReturnExtendedInfo : 1; /* bit position: 8 */
          /* 0x0188 */ unsigned long Waitable : 1; /* bit position: 9 */
          /* 0x0188 */ unsigned long DynamicSecurity : 1; /* bit position: 10 */
          /* 0x0188 */ unsigned long Wow64CompletionList : 1; /* bit position: 11 */
          /* 0x0188 */ unsigned long Lpc : 1; /* bit position: 12 */
          /* 0x0188 */ unsigned long LpcToLpc : 1; /* bit position: 13 */
          /* 0x0188 */ unsigned long HasCompletionList : 1; /* bit position: 14 */
          /* 0x0188 */ unsigned long HadCompletionList : 1; /* bit position: 15 */
          /* 0x0188 */ unsigned long EnableCompletionList : 1; /* bit position: 16 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x0188 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x018c */ long Padding_333;
  /* 0x0190 */ struct _ALPC_PORT* TargetQueuePort;
  /* 0x0198 */ struct _ALPC_PORT* TargetSequencePort;
  /* 0x01a0 */ struct _KALPC_MESSAGE* CachedMessage;
  /* 0x01a8 */ unsigned long MainQueueLength;
  /* 0x01ac */ unsigned long LargeMessageQueueLength;
  /* 0x01b0 */ unsigned long PendingQueueLength;
  /* 0x01b4 */ unsigned long CanceledQueueLength;
  /* 0x01b8 */ unsigned long WaitQueueLength;
  /* 0x01bc */ long __PADDING__[1];
} ALPC_PORT, *PALPC_PORT; /* size: 0x01c0 */

typedef struct _KALPC_RESERVE
{
  /* 0x0000 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0008 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0010 */ void* Handle;
  /* 0x0018 */ struct _KALPC_MESSAGE* Message;
  /* 0x0020 */ long Active;
  /* 0x0024 */ long __PADDING__[1];
} KALPC_RESERVE, *PKALPC_RESERVE; /* size: 0x0028 */

typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK
{
  /* 0x0000 */ struct _KEVENT DesiredReferenceNoEvent;
  /* 0x0018 */ long DesiredReferenceNo;
  /* 0x001c */ long __PADDING__[1];
} PALPC_PORT_REFERENCE_WAIT_BLOCK, *PPALPC_PORT_REFERENCE_WAIT_BLOCK; /* size: 0x0020 */

typedef struct _OBJECT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_334;
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ struct _UNICODE_STRING* ObjectName;
  /* 0x0018 */ unsigned long Attributes;
  /* 0x001c */ long Padding_335;
  /* 0x0020 */ void* SecurityDescriptor;
  /* 0x0028 */ void* SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES; /* size: 0x0030 */

typedef struct _OBJECT_DUMP_CONTROL
{
  /* 0x0000 */ void* Stream;
  /* 0x0008 */ unsigned long Detail;
  /* 0x000c */ long __PADDING__[1];
} OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL; /* size: 0x0010 */

typedef struct _RSDS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _GUID Guid;
  /* 0x0014 */ unsigned long Age;
  /* 0x0018 */ char PdbName[1];
  /* 0x0019 */ char __PADDING__[3];
} RSDS, *PRSDS; /* size: 0x001c */

typedef struct _ETW_PAYLOAD_FILTER
{
  /* 0x0000 */ long RefCount;
  /* 0x0004 */ long Padding_336;
  /* 0x0008 */ struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter;
} ETW_PAYLOAD_FILTER, *PETW_PAYLOAD_FILTER; /* size: 0x0058 */

typedef struct _PORT_MESSAGE32
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ short DataLength;
        /* 0x0002 */ short TotalLength;
      } /* size: 0x0004 */ s1;
      /* 0x0000 */ unsigned long Length;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ short Type;
        /* 0x0006 */ short DataInfoOffset;
      } /* size: 0x0004 */ s2;
      /* 0x0004 */ unsigned long ZeroInit;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  union
  {
    /* 0x0008 */ struct _CLIENT_ID32 ClientId;
    /* 0x0008 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
  /* 0x0010 */ unsigned long MessageId;
  union
  {
    /* 0x0014 */ unsigned long ClientViewSize;
    /* 0x0014 */ unsigned long CallbackId;
  }; /* size: 0x0004 */
} PORT_MESSAGE32, *PPORT_MESSAGE32; /* size: 0x0018 */

typedef struct _ALPC_DISPATCH_CONTEXT
{
  /* 0x0000 */ struct _ALPC_PORT* PortObject;
  /* 0x0008 */ struct _KALPC_MESSAGE* Message;
  /* 0x0010 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x0018 */ struct _ETHREAD* TargetThread;
  /* 0x0020 */ struct _ALPC_PORT* TargetPort;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ unsigned short TotalLength;
  /* 0x002e */ unsigned short Type;
  /* 0x0030 */ unsigned short DataInfoOffset;
  /* 0x0032 */ unsigned char SignalCompletion;
  /* 0x0033 */ unsigned char PostedToCompletionList;
  /* 0x0034 */ long __PADDING__[1];
} ALPC_DISPATCH_CONTEXT, *PALPC_DISPATCH_CONTEXT; /* size: 0x0038 */

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ErrorStatus : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 PhysicalAddress : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 PhysicalAddressMask : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 Node : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Card : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Module : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 Bank : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 Device : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 Row : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Column : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 BitPosition : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 RequesterId : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 ResponderId : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 TargetId : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 ErrorType : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned __int64 Reserved : 49; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 ValidBits;
  }; /* size: 0x0008 */
} WHEA_MEMORY_ERROR_SECTION_VALIDBITS, *PWHEA_MEMORY_ERROR_SECTION_VALIDBITS; /* size: 0x0008 */

typedef struct _REMOTE_PORT_VIEW
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_337;
  /* 0x0008 */ unsigned __int64 ViewSize;
  /* 0x0010 */ void* ViewBase;
} REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW; /* size: 0x0018 */

typedef struct _IOP_FILE_OBJECT_EXTENSION
{
  /* 0x0000 */ unsigned long FoExtFlags;
  /* 0x0004 */ long Padding_338;
  /* 0x0008 */ void* FoExtPerTypeExtension[7];
  /* 0x0040 */ enum _IOP_PRIORITY_HINT FoIoPriorityHint;
  /* 0x0044 */ long __PADDING__[1];
} IOP_FILE_OBJECT_EXTENSION, *PIOP_FILE_OBJECT_EXTENSION; /* size: 0x0048 */

typedef struct _OPEN_PACKET
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_339;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ long FinalStatus;
  /* 0x0014 */ long Padding_340;
  /* 0x0018 */ unsigned __int64 Information;
  /* 0x0020 */ unsigned long ParseCheck;
  /* 0x0024 */ long Padding_341;
  union
  {
    /* 0x0028 */ struct _FILE_OBJECT* RelatedFileObject;
    /* 0x0028 */ struct _DEVICE_OBJECT* ReferencedDeviceObject;
  }; /* size: 0x0008 */
  /* 0x0030 */ struct _OBJECT_ATTRIBUTES* OriginalAttributes;
  /* 0x0038 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0040 */ unsigned long CreateOptions;
  /* 0x0044 */ unsigned short FileAttributes;
  /* 0x0046 */ unsigned short ShareAccess;
  /* 0x0048 */ void* EaBuffer;
  /* 0x0050 */ unsigned long EaLength;
  /* 0x0054 */ unsigned long Options;
  /* 0x0058 */ unsigned long Disposition;
  /* 0x005c */ long Padding_342;
  /* 0x0060 */ struct _FILE_BASIC_INFORMATION* BasicInformation;
  /* 0x0068 */ struct _FILE_NETWORK_OPEN_INFORMATION* NetworkInformation;
  /* 0x0070 */ enum _CREATE_FILE_TYPE CreateFileType;
  /* 0x0074 */ long Padding_343;
  /* 0x0078 */ void* MailslotOrPipeParameters;
  /* 0x0080 */ unsigned char Override;
  /* 0x0081 */ unsigned char QueryOnly;
  /* 0x0082 */ unsigned char DeleteOnly;
  /* 0x0083 */ unsigned char FullAttributes;
  /* 0x0084 */ long Padding_344;
  /* 0x0088 */ struct _DUMMY_FILE_OBJECT* LocalFileObject;
  /* 0x0090 */ unsigned long InternalFlags;
  /* 0x0094 */ char AccessMode;
  /* 0x0095 */ char Padding_345[3];
  /* 0x0098 */ struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;
} OPEN_PACKET, *POPEN_PACKET; /* size: 0x00b8 */

typedef struct _DUMMY_FILE_OBJECT
{
  /* 0x0000 */ struct _OBJECT_HEADER ObjectHeader;
  /* 0x0038 */ char FileObjectBody[216];
} DUMMY_FILE_OBJECT, *PDUMMY_FILE_OBJECT; /* size: 0x0110 */

typedef struct _POP_THERMAL_ZONE_METRICS
{
  /* 0x0000 */ unsigned long ActiveCount;
  /* 0x0004 */ unsigned long PassiveCount;
  /* 0x0008 */ unsigned __int64 LastActiveStartTime;
  /* 0x0010 */ unsigned __int64 AverageActiveTime;
  /* 0x0018 */ unsigned __int64 LastPassiveStartTime;
  /* 0x0020 */ unsigned __int64 AveragePassiveTime;
  /* 0x0028 */ union _LARGE_INTEGER StartTickSinceLastReset;
} POP_THERMAL_ZONE_METRICS, *PPOP_THERMAL_ZONE_METRICS; /* size: 0x0030 */

typedef struct _TRACE_LOGFILE_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char MajorVersion;
      /* 0x0005 */ unsigned char MinorVersion;
      /* 0x0006 */ unsigned char SubVersion;
      /* 0x0007 */ unsigned char SubMinorVersion;
    } /* size: 0x0004 */ VersionDetail;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ProviderVersion;
  /* 0x000c */ unsigned long NumberOfProcessors;
  /* 0x0010 */ union _LARGE_INTEGER EndTime;
  /* 0x0018 */ unsigned long TimerResolution;
  /* 0x001c */ unsigned long MaximumFileSize;
  /* 0x0020 */ unsigned long LogFileMode;
  /* 0x0024 */ unsigned long BuffersWritten;
  union
  {
    /* 0x0028 */ struct _GUID LogInstanceGuid;
    struct
    {
      /* 0x0028 */ unsigned long StartBuffers;
      /* 0x002c */ unsigned long PointerSize;
      /* 0x0030 */ unsigned long EventsLost;
      /* 0x0034 */ unsigned long CpuSpeedInMHz;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0038 */ unsigned short* LoggerName;
  /* 0x0040 */ unsigned short* LogFileName;
  /* 0x0048 */ struct _RTL_TIME_ZONE_INFORMATION TimeZone;
  /* 0x00f4 */ long Padding_346;
  /* 0x00f8 */ union _LARGE_INTEGER BootTime;
  /* 0x0100 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0108 */ union _LARGE_INTEGER StartTime;
  /* 0x0110 */ unsigned long ReservedFlags;
  /* 0x0114 */ unsigned long BuffersLost;
} TRACE_LOGFILE_HEADER, *PTRACE_LOGFILE_HEADER; /* size: 0x0118 */

struct _ETW_STACK_CACHE;

typedef struct _WMI_BUFFER_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  /* 0x0004 */ unsigned long SavedOffset;
  /* 0x0008 */ volatile unsigned long CurrentOffset;
  /* 0x000c */ volatile long ReferenceCount;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ __int64 SequenceNumber;
  union
  {
    struct /* bitfield */
    {
      /* 0x0020 */ unsigned __int64 ClockType : 3; /* bit position: 0 */
      /* 0x0020 */ unsigned __int64 Frequency : 61; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0020 */ struct _SINGLE_LIST_ENTRY SlistEntry;
    /* 0x0020 */ struct _WMI_BUFFER_HEADER* NextBuffer;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _ETW_BUFFER_CONTEXT ClientContext;
  /* 0x002c */ enum _ETW_BUFFER_STATE State;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned short BufferFlag;
  /* 0x0036 */ unsigned short BufferType;
  union
  {
    /* 0x0038 */ unsigned long Padding1[4];
    /* 0x0038 */ struct _ETW_REF_CLOCK ReferenceTime;
    /* 0x0038 */ struct _LIST_ENTRY GlobalEntry;
    struct
    {
      /* 0x0038 */ void* Pointer0;
      /* 0x0040 */ void* Pointer1;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} WMI_BUFFER_HEADER, *PWMI_BUFFER_HEADER; /* size: 0x0048 */

typedef struct _ETW_LOGGER_HANDLE
{
  /* 0x0000 */ unsigned char DereferenceAndLeave;
} ETW_LOGGER_HANDLE, *PETW_LOGGER_HANDLE; /* size: 0x0001 */

typedef struct _SEP_AUDIT_POLICY
{
  /* 0x0000 */ struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;
  /* 0x001d */ unsigned char PolicySetStatus;
} SEP_AUDIT_POLICY, *PSEP_AUDIT_POLICY; /* size: 0x001e */

typedef struct _TOKEN
{
  /* 0x0000 */ struct _TOKEN_SOURCE TokenSource;
  /* 0x0010 */ struct _LUID TokenId;
  /* 0x0018 */ struct _LUID AuthenticationId;
  /* 0x0020 */ struct _LUID ParentTokenId;
  /* 0x0028 */ union _LARGE_INTEGER ExpirationTime;
  /* 0x0030 */ struct _ERESOURCE* TokenLock;
  /* 0x0038 */ struct _LUID ModifiedId;
  /* 0x0040 */ struct _SEP_TOKEN_PRIVILEGES Privileges;
  /* 0x0058 */ struct _SEP_AUDIT_POLICY AuditPolicy;
  /* 0x0076 */ char Padding_347[2];
  /* 0x0078 */ unsigned long SessionId;
  /* 0x007c */ unsigned long UserAndGroupCount;
  /* 0x0080 */ unsigned long RestrictedSidCount;
  /* 0x0084 */ unsigned long VariableLength;
  /* 0x0088 */ unsigned long DynamicCharged;
  /* 0x008c */ unsigned long DynamicAvailable;
  /* 0x0090 */ unsigned long DefaultOwnerIndex;
  /* 0x0094 */ long Padding_348;
  /* 0x0098 */ struct _SID_AND_ATTRIBUTES* UserAndGroups;
  /* 0x00a0 */ struct _SID_AND_ATTRIBUTES* RestrictedSids;
  /* 0x00a8 */ void* PrimaryGroup;
  /* 0x00b0 */ unsigned long* DynamicPart;
  /* 0x00b8 */ struct _ACL* DefaultDacl;
  /* 0x00c0 */ enum _TOKEN_TYPE TokenType;
  /* 0x00c4 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x00c8 */ unsigned long TokenFlags;
  /* 0x00cc */ unsigned char TokenInUse;
  /* 0x00cd */ char Padding_349[3];
  /* 0x00d0 */ unsigned long IntegrityLevelIndex;
  /* 0x00d4 */ unsigned long MandatoryPolicy;
  /* 0x00d8 */ struct _SEP_LOGON_SESSION_REFERENCES* LogonSession;
  /* 0x00e0 */ struct _LUID OriginatingLogonSession;
  /* 0x00e8 */ struct _SID_AND_ATTRIBUTES_HASH SidHash;
  /* 0x01f8 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
  /* 0x0308 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pSecurityAttributes;
  /* 0x0310 */ void* Package;
  /* 0x0318 */ struct _SID_AND_ATTRIBUTES* Capabilities;
  /* 0x0320 */ unsigned long CapabilityCount;
  /* 0x0324 */ long Padding_350;
  /* 0x0328 */ struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
  /* 0x0438 */ struct _SEP_LOWBOX_NUMBER_ENTRY* LowboxNumberEntry;
  /* 0x0440 */ struct _SEP_LOWBOX_HANDLES_ENTRY* LowboxHandlesEntry;
  /* 0x0448 */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* pClaimAttributes;
  /* 0x0450 */ void* TrustLevelSid;
  /* 0x0458 */ struct _TOKEN* TrustLinkedToken;
  /* 0x0460 */ unsigned __int64 VariablePart;
} TOKEN, *PTOKEN; /* size: 0x0468 */

typedef struct _ACL
{
  /* 0x0000 */ unsigned char AclRevision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short AclSize;
  /* 0x0004 */ unsigned short AceCount;
  /* 0x0006 */ unsigned short Sbz2;
} ACL, *PACL; /* size: 0x0008 */

typedef struct _SEP_LOWBOX_HANDLES_TABLE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
} SEP_LOWBOX_HANDLES_TABLE, *PSEP_LOWBOX_HANDLES_TABLE; /* size: 0x0010 */

typedef struct _SEP_LOGON_SESSION_REFERENCES
{
  /* 0x0000 */ struct _SEP_LOGON_SESSION_REFERENCES* Next;
  /* 0x0008 */ struct _LUID LogonId;
  /* 0x0010 */ struct _LUID BuddyLogonId;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long Padding_351;
  /* 0x0028 */ struct _DEVICE_MAP* pDeviceMap;
  /* 0x0030 */ void* Token;
  /* 0x0038 */ struct _UNICODE_STRING AccountName;
  /* 0x0048 */ struct _UNICODE_STRING AuthorityName;
  /* 0x0058 */ struct _SEP_LOWBOX_HANDLES_TABLE LowBoxHandlesTable;
} SEP_LOGON_SESSION_REFERENCES, *PSEP_LOGON_SESSION_REFERENCES; /* size: 0x0068 */

typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
{
  /* 0x0000 */ unsigned long SecurityAttributeCount;
  /* 0x0004 */ long Padding_352;
  /* 0x0008 */ struct _LIST_ENTRY SecurityAttributesList;
  /* 0x0018 */ unsigned long WorkingSecurityAttributeCount;
  /* 0x001c */ long Padding_353;
  /* 0x0020 */ struct _LIST_ENTRY WorkingSecurityAttributesList;
} AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION, *PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION; /* size: 0x0030 */

typedef struct _OBJECT_HEADER_QUOTA_INFO
{
  /* 0x0000 */ unsigned long PagedPoolCharge;
  /* 0x0004 */ unsigned long NonPagedPoolCharge;
  /* 0x0008 */ unsigned long SecurityDescriptorCharge;
  /* 0x000c */ long Padding_354;
  /* 0x0010 */ void* SecurityDescriptorQuotaBlock;
  /* 0x0018 */ unsigned __int64 Reserved;
} OBJECT_HEADER_QUOTA_INFO, *POBJECT_HEADER_QUOTA_INFO; /* size: 0x0020 */

typedef struct _OBJECT_HEADER_PROCESS_INFO
{
  /* 0x0000 */ struct _EPROCESS* ExclusiveProcess;
  /* 0x0008 */ unsigned __int64 Reserved;
} OBJECT_HEADER_PROCESS_INFO, *POBJECT_HEADER_PROCESS_INFO; /* size: 0x0010 */

typedef struct _PO_NOTIFY_ORDER_LEVEL
{
  /* 0x0000 */ unsigned long DeviceCount;
  /* 0x0004 */ unsigned long ActiveCount;
  /* 0x0008 */ struct _LIST_ENTRY WaitSleep;
  /* 0x0018 */ struct _LIST_ENTRY ReadySleep;
  /* 0x0028 */ struct _LIST_ENTRY ReadyS0;
  /* 0x0038 */ struct _LIST_ENTRY WaitS0;
} PO_NOTIFY_ORDER_LEVEL, *PPO_NOTIFY_ORDER_LEVEL; /* size: 0x0048 */

typedef struct _OBJECT_HEADER_CREATOR_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0010 */ void* CreatorUniqueProcess;
  /* 0x0018 */ unsigned short CreatorBackTraceIndex;
  /* 0x001a */ unsigned short Reserved;
  /* 0x001c */ long __PADDING__[1];
} OBJECT_HEADER_CREATOR_INFO, *POBJECT_HEADER_CREATOR_INFO; /* size: 0x0020 */

typedef struct _OBJECT_HEADER_AUDIT_INFO
{
  /* 0x0000 */ void* SecurityDescriptor;
  /* 0x0008 */ unsigned __int64 Reserved;
} OBJECT_HEADER_AUDIT_INFO, *POBJECT_HEADER_AUDIT_INFO; /* size: 0x0010 */

typedef struct _WHEAP_WORK_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ unsigned __int64 ListLock;
  /* 0x0018 */ volatile long ItemCount;
  /* 0x001c */ long Padding_355;
  /* 0x0020 */ struct _KDPC Dpc;
  /* 0x0060 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0080 */ void* WorkRoutine /* function */;
} WHEAP_WORK_QUEUE, *PWHEAP_WORK_QUEUE; /* size: 0x0088 */

typedef struct _RTL_ATOM_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ volatile long ReferenceCount;
  /* 0x0008 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x0010 */ struct _HANDLE_TABLE* ExHandleTable;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long NumberOfBuckets;
  /* 0x0020 */ struct _RTL_ATOM_TABLE_ENTRY* Buckets[1];
} RTL_ATOM_TABLE, *PRTL_ATOM_TABLE; /* size: 0x0028 */

typedef struct _INTERRUPT_VECTOR_DATA
{
  /* 0x0000 */ enum INTERRUPT_CONNECTION_TYPE Type;
  /* 0x0004 */ unsigned long Vector;
  /* 0x0008 */ unsigned char Irql;
  /* 0x0009 */ char Padding_356[3];
  /* 0x000c */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0010 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0014 */ long Padding_357;
  /* 0x0018 */ struct _GROUP_AFFINITY TargetProcessors;
  /* 0x0028 */ struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
  union
  {
    struct
    {
      /* 0x0038 */ unsigned long Gsiv;
      struct /* bitfield */
      {
        /* 0x003c */ unsigned long WakeInterrupt : 1; /* bit position: 0 */
        /* 0x003c */ unsigned long ReservedFlags : 31; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0008 */ ControllerInput;
    struct
    {
      /* 0x0038 */ union _LARGE_INTEGER Address;
      /* 0x0040 */ unsigned long DataPayload;
      /* 0x0044 */ long __PADDING__[1];
    } /* size: 0x0010 */ XapicMessage;
    struct
    {
      /* 0x0038 */ struct _INTERRUPT_HT_INTR_INFO IntrInfo;
    } /* size: 0x0008 */ Hypertransport;
    struct
    {
      /* 0x0038 */ union _LARGE_INTEGER Address;
      /* 0x0040 */ unsigned long DataPayload;
      /* 0x0044 */ long __PADDING__[1];
    } /* size: 0x0010 */ GenericMessage;
    struct
    {
      struct
      {
        /* 0x0038 */ enum HAL_APIC_DESTINATION_MODE DestinationMode;
      } /* size: 0x0004 */ MessageRequest;
      /* 0x003c */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} INTERRUPT_VECTOR_DATA, *PINTERRUPT_VECTOR_DATA; /* size: 0x0048 */

typedef struct _INTERRUPT_CONNECTION_DATA
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_358;
  /* 0x0008 */ struct _GROUP_AFFINITY OriginalAffinity;
  /* 0x0018 */ struct _LIST_ENTRY SteeringListEntry;
  /* 0x0028 */ void* SteeringListRoot;
  /* 0x0030 */ unsigned __int64 IsrTime;
  /* 0x0038 */ unsigned __int64 DpcTime;
  /* 0x0040 */ unsigned long IsrLoad;
  /* 0x0044 */ unsigned long DpcLoad;
  /* 0x0048 */ unsigned char IsPrimaryInterrupt;
  /* 0x0049 */ char Padding_359[7];
  /* 0x0050 */ struct _KINTERRUPT** InterruptObjectArray;
  /* 0x0058 */ unsigned long InterruptObjectCount;
  /* 0x005c */ long Padding_360;
  /* 0x0060 */ struct _INTERRUPT_VECTOR_DATA Vectors[1];
} INTERRUPT_CONNECTION_DATA, *PINTERRUPT_CONNECTION_DATA; /* size: 0x00a8 */

typedef struct _VI_POOL_ENTRY
{
  union
  {
    /* 0x0000 */ struct _VI_POOL_PAGE_HEADER PageHeader;
    /* 0x0000 */ struct _VI_POOL_ENTRY_INUSE InUse;
    struct
    {
      /* 0x0000 */ struct _SLIST_ENTRY* NextFree;
      /* 0x0008 */ long __PADDING__[6];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} VI_POOL_ENTRY, *PVI_POOL_ENTRY; /* size: 0x0020 */

typedef struct _SYSPTES_HEADER
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ unsigned __int64 Count;
  /* 0x0018 */ unsigned __int64 NumberOfEntries;
  /* 0x0020 */ unsigned __int64 NumberOfEntriesPeak;
} SYSPTES_HEADER, *PSYSPTES_HEADER; /* size: 0x0028 */

typedef struct _POOL_TRACKER_BIG_PAGES
{
  /* 0x0000 */ volatile unsigned __int64 Va;
  /* 0x0008 */ unsigned long Key;
  /* 0x000c */ unsigned long PoolType;
  /* 0x0010 */ unsigned __int64 NumberOfBytes;
} POOL_TRACKER_BIG_PAGES, *PPOOL_TRACKER_BIG_PAGES; /* size: 0x0018 */

typedef struct _CM_KEY_BODY
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ long Padding_361;
  /* 0x0008 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0010 */ struct _CM_NOTIFY_BLOCK* NotifyBlock;
  /* 0x0018 */ void* ProcessID;
  /* 0x0020 */ struct _LIST_ENTRY KeyBodyList;
  struct /* bitfield */
  {
    /* 0x0030 */ unsigned long Flags : 16; /* bit position: 0 */
    /* 0x0030 */ unsigned long HandleTags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0034 */ long Padding_362;
  /* 0x0038 */ void* KtmTrans;
  /* 0x0040 */ struct _GUID* KtmUow;
  /* 0x0048 */ struct _LIST_ENTRY ContextListHead;
} CM_KEY_BODY, *PCM_KEY_BODY; /* size: 0x0058 */

typedef struct _CM_KEY_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _KTHREAD* Owner;
  /* 0x0010 */ struct _CM_KEY_HASH* Entry;
} CM_KEY_HASH_TABLE_ENTRY, *PCM_KEY_HASH_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _POP_PER_PROCESSOR_CONTEXT
{
  /* 0x0000 */ unsigned char* UncompressedData;
  /* 0x0008 */ void* MappingVa;
  /* 0x0010 */ void* XpressEncodeWorkspace;
  /* 0x0018 */ unsigned char* CompressedDataBuffer;
  /* 0x0020 */ unsigned __int64 CopyTicks;
  /* 0x0028 */ unsigned __int64 CompressTicks;
  /* 0x0030 */ unsigned __int64 BytesCopied;
  /* 0x0038 */ unsigned __int64 PagesProcessed;
  /* 0x0040 */ unsigned __int64 DecompressTicks;
  /* 0x0048 */ unsigned __int64 ResumeCopyTicks;
  /* 0x0050 */ unsigned __int64 SharedBufferTicks;
  /* 0x0058 */ unsigned __int64 DecompressTicksByMethod[2];
  /* 0x0068 */ unsigned __int64 DecompressSizeByMethod[2];
  /* 0x0078 */ unsigned long CompressCount;
  /* 0x007c */ unsigned long HuffCompressCount;
} POP_PER_PROCESSOR_CONTEXT, *PPOP_PER_PROCESSOR_CONTEXT; /* size: 0x0080 */

typedef struct _MM_SESSION_SPACE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Initialized : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long DeletePending : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long PoolInitialized : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long DynamicVaInitialized : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long WsInitialized : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long PoolDestroyed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long ObjectInitialized : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long Filler : 25; /* bit position: 7 */
  }; /* bitfield */
} MM_SESSION_SPACE_FLAGS, *PMM_SESSION_SPACE_FLAGS; /* size: 0x0004 */

struct _KTMNOTIFICATION_PACKET;

typedef struct _THERMAL_INFORMATION_EX
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ unsigned long SamplingPeriod;
  /* 0x0010 */ unsigned long CurrentTemperature;
  /* 0x0014 */ unsigned long PassiveTripPoint;
  /* 0x0018 */ unsigned long CriticalTripPoint;
  /* 0x001c */ unsigned char ActiveTripPointCount;
  /* 0x001d */ char Padding_363[3];
  /* 0x0020 */ unsigned long ActiveTripPoint[10];
  /* 0x0048 */ unsigned long S4TransitionTripPoint;
  /* 0x004c */ unsigned long MinimumThrottle;
} THERMAL_INFORMATION_EX, *PTHERMAL_INFORMATION_EX; /* size: 0x0050 */

typedef struct _VI_VERIFIER_ISSUE
{
  /* 0x0000 */ unsigned __int64 IssueType;
  /* 0x0008 */ void* Address;
  /* 0x0010 */ unsigned __int64 Parameters[2];
} VI_VERIFIER_ISSUE, *PVI_VERIFIER_ISSUE; /* size: 0x0020 */

typedef struct _EXCEPTION_POINTERS
{
  /* 0x0000 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0008 */ struct _CONTEXT* ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS; /* size: 0x0010 */

typedef struct _OBJECT_REF_INFO
{
  /* 0x0000 */ struct _OBJECT_HEADER* ObjectHeader;
  /* 0x0008 */ void* NextRef;
  /* 0x0010 */ unsigned char ImageFileName[16];
  /* 0x0020 */ unsigned short NextPos;
  /* 0x0022 */ unsigned short MaxStacks;
  union
  {
    /* 0x0024 */ struct _OBJECT_REF_STACK_INFO* StackInfo /* zero-length array */;
    /* 0x0024 */ long __PADDING__[1];
  }; /* size: 0x0004 */
} OBJECT_REF_INFO, *POBJECT_REF_INFO; /* size: 0x0028 */

typedef struct _LEARNING_MODE_DATA
{
  /* 0x0000 */ unsigned long Settings;
  /* 0x0004 */ unsigned char Enabled;
  /* 0x0005 */ unsigned char PermissiveModeEnabled;
  /* 0x0006 */ char __PADDING__[2];
} LEARNING_MODE_DATA, *PLEARNING_MODE_DATA; /* size: 0x0008 */

typedef struct _HEAP_UCR_DESCRIPTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _LIST_ENTRY SegmentEntry;
  /* 0x0020 */ void* Address;
  /* 0x0028 */ unsigned __int64 Size;
} HEAP_UCR_DESCRIPTOR, *PHEAP_UCR_DESCRIPTOR; /* size: 0x0030 */

typedef struct _POOL_DESCRIPTOR
{
  /* 0x0000 */ enum _POOL_TYPE PoolType;
  /* 0x0004 */ long Padding_364;
  union
  {
    /* 0x0008 */ struct _FAST_MUTEX PagedLock;
    /* 0x0008 */ unsigned __int64 NonPagedLock;
  }; /* size: 0x0038 */
  /* 0x0040 */ volatile long RunningAllocs;
  /* 0x0044 */ volatile long RunningDeAllocs;
  /* 0x0048 */ volatile long TotalBigPages;
  /* 0x004c */ volatile long ThreadsProcessingDeferrals;
  /* 0x0050 */ volatile unsigned __int64 TotalBytes;
  /* 0x0058 */ long Padding_365[10];
  /* 0x0080 */ unsigned long PoolIndex;
  /* 0x0084 */ long Padding_366[15];
  /* 0x00c0 */ volatile long TotalPages;
  /* 0x00c4 */ long Padding_367[15];
  /* 0x0100 */ volatile struct _SINGLE_LIST_ENTRY PendingFrees;
  /* 0x0108 */ volatile long PendingFreeDepth;
  /* 0x010c */ long Padding_368[13];
  /* 0x0140 */ struct _LIST_ENTRY ListHeads[256];
} POOL_DESCRIPTOR, *PPOOL_DESCRIPTOR; /* size: 0x1140 */

typedef struct _HIVE_LIST_ENTRY
{
  /* 0x0000 */ unsigned short* FileName;
  /* 0x0008 */ unsigned short* BaseName;
  /* 0x0010 */ unsigned short* RegRootName;
  /* 0x0018 */ struct _CMHIVE* CmHive;
  /* 0x0020 */ unsigned long HHiveFlags;
  /* 0x0024 */ unsigned long CmHiveFlags;
  /* 0x0028 */ unsigned long CmKcbCacheSize;
  /* 0x002c */ long Padding_369;
  /* 0x0030 */ struct _CMHIVE* CmHive2;
  /* 0x0038 */ unsigned char HiveMounted;
  /* 0x0039 */ unsigned char ThreadFinished;
  /* 0x003a */ unsigned char ThreadStarted;
  /* 0x003b */ unsigned char Allocate;
  /* 0x003c */ unsigned char WinPERequired;
  /* 0x003d */ char Padding_370[3];
  /* 0x0040 */ struct _KEVENT StartEvent;
  /* 0x0058 */ struct _KEVENT FinishedEvent;
  /* 0x0070 */ struct _KEVENT MountLock;
} HIVE_LIST_ENTRY, *PHIVE_LIST_ENTRY; /* size: 0x0088 */

typedef struct _IOV_FORCED_PENDING_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0008 */ struct _ETHREAD* Thread;
  /* 0x0010 */ void* StackTrace[62];
} IOV_FORCED_PENDING_TRACE, *PIOV_FORCED_PENDING_TRACE; /* size: 0x0200 */

typedef struct _IOP_IRP_EXTENSION_STATUS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ActivityId;
  /* 0x0008 */ unsigned long IoTracking;
} IOP_IRP_EXTENSION_STATUS, *PIOP_IRP_EXTENSION_STATUS; /* size: 0x000c */

typedef struct _PI_BUS_EXTENSION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char NumberCSNs;
  /* 0x0005 */ char Padding_371[3];
  /* 0x0008 */ unsigned char* ReadDataPort;
  /* 0x0010 */ unsigned char DataPortMapped;
  /* 0x0011 */ char Padding_372[7];
  /* 0x0018 */ unsigned char* AddressPort;
  /* 0x0020 */ unsigned char AddrPortMapped;
  /* 0x0021 */ char Padding_373[7];
  /* 0x0028 */ unsigned char* CommandPort;
  /* 0x0030 */ unsigned char CmdPortMapped;
  /* 0x0031 */ char Padding_374[3];
  /* 0x0034 */ unsigned long NextSlotNumber;
  /* 0x0038 */ struct _SINGLE_LIST_ENTRY DeviceList;
  /* 0x0040 */ struct _SINGLE_LIST_ENTRY CardList;
  /* 0x0048 */ struct _DEVICE_OBJECT* PhysicalBusDevice;
  /* 0x0050 */ struct _DEVICE_OBJECT* FunctionalBusDevice;
  /* 0x0058 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0060 */ unsigned long BusNumber;
  /* 0x0064 */ enum _SYSTEM_POWER_STATE SystemPowerState;
  /* 0x0068 */ enum _DEVICE_POWER_STATE DevicePowerState;
  /* 0x006c */ long __PADDING__[1];
} PI_BUS_EXTENSION, *PPI_BUS_EXTENSION; /* size: 0x0070 */

typedef struct _DEVICE_DESCRIPTION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char Master;
  /* 0x0005 */ unsigned char ScatterGather;
  /* 0x0006 */ unsigned char DemandMode;
  /* 0x0007 */ unsigned char AutoInitialize;
  /* 0x0008 */ unsigned char Dma32BitAddresses;
  /* 0x0009 */ unsigned char IgnoreCount;
  /* 0x000a */ unsigned char Reserved1;
  /* 0x000b */ unsigned char Dma64BitAddresses;
  /* 0x000c */ unsigned long BusNumber;
  /* 0x0010 */ unsigned long DmaChannel;
  /* 0x0014 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0018 */ enum _DMA_WIDTH DmaWidth;
  /* 0x001c */ enum _DMA_SPEED DmaSpeed;
  /* 0x0020 */ unsigned long MaximumLength;
  /* 0x0024 */ unsigned long DmaPort;
  /* 0x0028 */ unsigned long DmaAddressWidth;
  /* 0x002c */ unsigned long DmaControllerInstance;
  /* 0x0030 */ unsigned long DmaRequestLine;
  /* 0x0034 */ long Padding_375;
  /* 0x0038 */ union _LARGE_INTEGER DeviceAddress;
} DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION; /* size: 0x0040 */

typedef struct _IO_WORKITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0020 */ void* Routine /* function */;
  /* 0x0028 */ void* IoObject;
  /* 0x0030 */ void* Context;
  /* 0x0038 */ unsigned long Type;
  /* 0x003c */ struct _GUID ActivityId;
  /* 0x004c */ long __PADDING__[1];
} IO_WORKITEM, *PIO_WORKITEM; /* size: 0x0050 */

typedef struct _UNEXPECTED_INTERRUPT
{
  /* 0x0000 */ unsigned char PushImm;
  /* 0x0001 */ unsigned char Vector;
  /* 0x0002 */ unsigned char PushRbp;
  /* 0x0003 */ unsigned char JmpOp;
  /* 0x0004 */ long JmpOffset;
} UNEXPECTED_INTERRUPT, *PUNEXPECTED_INTERRUPT; /* size: 0x0008 */

typedef struct _HEAP_STOP_ON_TAG
{
  union
  {
    /* 0x0000 */ unsigned long HeapAndTagIndex;
    struct
    {
      /* 0x0000 */ unsigned short TagIndex;
      /* 0x0002 */ unsigned short HeapIndex;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} HEAP_STOP_ON_TAG, *PHEAP_STOP_ON_TAG; /* size: 0x0004 */

typedef struct _HEAP_STOP_ON_VALUES
{
  /* 0x0000 */ unsigned __int64 AllocAddress;
  /* 0x0008 */ struct _HEAP_STOP_ON_TAG AllocTag;
  /* 0x000c */ long Padding_376;
  /* 0x0010 */ unsigned __int64 ReAllocAddress;
  /* 0x0018 */ struct _HEAP_STOP_ON_TAG ReAllocTag;
  /* 0x001c */ long Padding_377;
  /* 0x0020 */ unsigned __int64 FreeAddress;
  /* 0x0028 */ struct _HEAP_STOP_ON_TAG FreeTag;
  /* 0x002c */ long __PADDING__[1];
} HEAP_STOP_ON_VALUES, *PHEAP_STOP_ON_VALUES; /* size: 0x0030 */

typedef struct _CALL_HASH_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ void* CallersAddress;
  /* 0x0018 */ void* CallersCaller;
  /* 0x0020 */ unsigned long CallCount;
  /* 0x0024 */ long __PADDING__[1];
} CALL_HASH_ENTRY, *PCALL_HASH_ENTRY; /* size: 0x0028 */

typedef struct _VF_TRACKER_STAMP
{
  /* 0x0000 */ void* Thread;
  /* 0x0008 */ unsigned char Flags : 8; /* bit position: 0 */
  /* 0x0009 */ unsigned char OldIrql : 8; /* bit position: 0 */
  /* 0x000a */ unsigned char NewIrql : 8; /* bit position: 0 */
  /* 0x000b */ unsigned char Processor : 8; /* bit position: 0 */
  /* 0x000c */ long __PADDING__[1];
} VF_TRACKER_STAMP, *PVF_TRACKER_STAMP; /* size: 0x0010 */

typedef struct _VI_TRACK_IRQL
{
  /* 0x0000 */ void* Thread;
  /* 0x0008 */ unsigned char OldIrql;
  /* 0x0009 */ unsigned char NewIrql;
  /* 0x000a */ unsigned short Processor;
  /* 0x000c */ unsigned long TickCount;
  /* 0x0010 */ void* StackTrace[5];
} VI_TRACK_IRQL, *PVI_TRACK_IRQL; /* size: 0x0038 */

typedef struct _RH_OP_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ struct _IRP* OplockRequestIrp;
  /* 0x0018 */ struct _FILE_OBJECT* OplockRequestFileObject;
  /* 0x0020 */ struct _EPROCESS* OplockRequestProcess;
  /* 0x0028 */ struct _ETHREAD* OplockOwnerThread;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ long Padding_378;
  /* 0x0038 */ struct _LIST_ENTRY AtomicLinks;
} RH_OP_CONTEXT, *PRH_OP_CONTEXT; /* size: 0x0048 */

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ enum _TYPE_OF_MEMORY MemoryType;
  /* 0x0014 */ long Padding_379;
  /* 0x0018 */ unsigned __int64 BasePage;
  /* 0x0020 */ unsigned __int64 PageCount;
} MEMORY_ALLOCATION_DESCRIPTOR, *PMEMORY_ALLOCATION_DESCRIPTOR; /* size: 0x0028 */

typedef struct _THERMAL_INFORMATION
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ long Padding_380;
  /* 0x0010 */ unsigned __int64 Processors;
  /* 0x0018 */ unsigned long SamplingPeriod;
  /* 0x001c */ unsigned long CurrentTemperature;
  /* 0x0020 */ unsigned long PassiveTripPoint;
  /* 0x0024 */ unsigned long CriticalTripPoint;
  /* 0x0028 */ unsigned char ActiveTripPointCount;
  /* 0x0029 */ char Padding_381[3];
  /* 0x002c */ unsigned long ActiveTripPoint[10];
  /* 0x0054 */ long __PADDING__[1];
} THERMAL_INFORMATION, *PTHERMAL_INFORMATION; /* size: 0x0058 */

typedef struct _MAPPED_FILE_SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0008 */ unsigned long TotalNumberOfPtes;
  /* 0x000c */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x0010 */ unsigned __int64 NumberOfCommittedPages;
  /* 0x0018 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0020 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0020 */ void* BasedAddress;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _EX_PUSH_LOCK SegmentLock;
} MAPPED_FILE_SEGMENT, *PMAPPED_FILE_SEGMENT; /* size: 0x0030 */

typedef struct _NT_TIB64
{
  /* 0x0000 */ unsigned __int64 ExceptionList;
  /* 0x0008 */ unsigned __int64 StackBase;
  /* 0x0010 */ unsigned __int64 StackLimit;
  /* 0x0018 */ unsigned __int64 SubSystemTib;
  union
  {
    /* 0x0020 */ unsigned __int64 FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ unsigned __int64 ArbitraryUserPointer;
  /* 0x0030 */ unsigned __int64 Self;
} NT_TIB64, *PNT_TIB64; /* size: 0x0038 */

typedef struct _CLIENT_ID64
{
  /* 0x0000 */ unsigned __int64 UniqueProcess;
  /* 0x0008 */ unsigned __int64 UniqueThread;
} CLIENT_ID64, *PCLIENT_ID64; /* size: 0x0010 */

typedef struct _TEB64
{
  /* 0x0000 */ struct _NT_TIB64 NtTib;
  /* 0x0038 */ unsigned __int64 EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID64 ClientId;
  /* 0x0050 */ unsigned __int64 ActiveRpcHandle;
  /* 0x0058 */ unsigned __int64 ThreadLocalStoragePointer;
  /* 0x0060 */ unsigned __int64 ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ unsigned __int64 CsrClientThread;
  /* 0x0078 */ unsigned __int64 Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x00fc */ long Padding_382;
  /* 0x0100 */ unsigned __int64 WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ unsigned __int64 SystemReserved1[54];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c4 */ unsigned char Padding0[4];
  /* 0x02c8 */ unsigned __int64 ActivationContextStackPointer;
  /* 0x02d0 */ unsigned char SpareBytes[24];
  /* 0x02e8 */ unsigned long TxFsContext;
  /* 0x02ec */ unsigned char Padding1[4];
  /* 0x02f0 */ struct _GDI_TEB_BATCH64 GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID64 RealClientId;
  /* 0x07e8 */ unsigned __int64 GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ unsigned __int64 GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ unsigned __int64 glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ unsigned __int64 glReserved2;
  /* 0x1228 */ unsigned __int64 glSectionInfo;
  /* 0x1230 */ unsigned __int64 glSection;
  /* 0x1238 */ unsigned __int64 glTable;
  /* 0x1240 */ unsigned __int64 glCurrentRC;
  /* 0x1248 */ unsigned __int64 glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1254 */ unsigned char Padding2[4];
  /* 0x1258 */ struct _STRING64 StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1472 */ unsigned char Padding3[6];
  /* 0x1478 */ unsigned __int64 DeallocationStack;
  /* 0x1480 */ unsigned __int64 TlsSlots[64];
  /* 0x1680 */ struct LIST_ENTRY64 TlsLinks;
  /* 0x1690 */ unsigned __int64 Vdm;
  /* 0x1698 */ unsigned __int64 ReservedForNtRpc;
  /* 0x16a0 */ unsigned __int64 DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b4 */ unsigned char Padding4[4];
  /* 0x16b8 */ unsigned __int64 Instrumentation[11];
  /* 0x1710 */ struct _GUID ActivityId;
  /* 0x1720 */ unsigned __int64 SubProcessTag;
  /* 0x1728 */ unsigned __int64 PerflibData;
  /* 0x1730 */ unsigned __int64 EtwTraceData;
  /* 0x1738 */ unsigned __int64 WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x1744 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x1744 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x1744 */ unsigned char ReservedPad0;
      /* 0x1745 */ unsigned char ReservedPad1;
      /* 0x1746 */ unsigned char ReservedPad2;
      /* 0x1747 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x1748 */ unsigned long GuaranteedStackBytes;
  /* 0x174c */ unsigned char Padding5[4];
  /* 0x1750 */ unsigned __int64 ReservedForPerf;
  /* 0x1758 */ unsigned __int64 ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1764 */ unsigned char Padding6[4];
  /* 0x1768 */ unsigned __int64 SavedPriorityState;
  /* 0x1770 */ unsigned __int64 ReservedForCodeCoverage;
  /* 0x1778 */ unsigned __int64 ThreadPoolData;
  /* 0x1780 */ unsigned __int64 TlsExpansionSlots;
  /* 0x1788 */ unsigned __int64 DeallocationBStore;
  /* 0x1790 */ unsigned __int64 BStoreLimit;
  /* 0x1798 */ unsigned long MuiGeneration;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ unsigned __int64 NlsCache;
  /* 0x17a8 */ unsigned __int64 pShimData;
  /* 0x17b0 */ unsigned short HeapVirtualAffinity;
  /* 0x17b2 */ unsigned short LowFragHeapDataSlot;
  /* 0x17b4 */ unsigned char Padding7[4];
  /* 0x17b8 */ unsigned __int64 CurrentTransactionHandle;
  /* 0x17c0 */ unsigned __int64 ActiveFrame;
  /* 0x17c8 */ unsigned __int64 FlsData;
  /* 0x17d0 */ unsigned __int64 PreferredLanguages;
  /* 0x17d8 */ unsigned __int64 UserPrefLanguages;
  /* 0x17e0 */ unsigned __int64 MergedPrefLanguages;
  /* 0x17e8 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x17ec */ volatile unsigned short CrossTebFlags;
    /* 0x17ec */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x17ee */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x17ee */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x17ee */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x17ee */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x17ee */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x17ee */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x17ee */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x17ee */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x17ee */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x17ee */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x17ee */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x17ee */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x17ee */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x17ee */ unsigned short SpareSameTebBits : 4; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x17f0 */ unsigned __int64 TxnScopeEnterCallback;
  /* 0x17f8 */ unsigned __int64 TxnScopeExitCallback;
  /* 0x1800 */ unsigned __int64 TxnScopeContext;
  /* 0x1808 */ unsigned long LockCount;
  /* 0x180c */ unsigned long SpareUlong0;
  /* 0x1810 */ unsigned __int64 ResourceRetValue;
  /* 0x1818 */ unsigned __int64 ReservedForWdf;
} TEB64, *PTEB64; /* size: 0x1820 */

typedef struct _ETIMER
{
  /* 0x0000 */ struct _KTIMER KeTimer;
  /* 0x0040 */ unsigned __int64 Lock;
  /* 0x0048 */ struct _KAPC TimerApc;
  /* 0x00a0 */ struct _KDPC TimerDpc;
  /* 0x00e0 */ struct _LIST_ENTRY ActiveTimerListEntry;
  /* 0x00f0 */ unsigned long Period;
  union
  {
    /* 0x00f4 */ char TimerFlags;
    struct /* bitfield */
    {
      /* 0x00f4 */ unsigned char ApcAssociated : 1; /* bit position: 0 */
      /* 0x00f4 */ unsigned char FlushDpcs : 1; /* bit position: 1 */
      /* 0x00f4 */ unsigned char Paused : 1; /* bit position: 2 */
      /* 0x00f4 */ unsigned char Spare1 : 5; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x00f5 */ unsigned char DueTimeType;
  /* 0x00f6 */ unsigned short Spare2;
  /* 0x00f8 */ struct _DIAGNOSTIC_CONTEXT* volatile WakeReason;
  /* 0x0100 */ struct _LIST_ENTRY WakeTimerListEntry;
  /* 0x0110 */ void* VirtualizedTimerCookie;
  /* 0x0118 */ struct _LIST_ENTRY VirtualizedTimerLinks;
  /* 0x0128 */ unsigned __int64 DueTime;
  /* 0x0130 */ unsigned long CoalescingWindow;
  /* 0x0134 */ long __PADDING__[1];
} ETIMER, *PETIMER; /* size: 0x0138 */

typedef struct _DIAGNOSTIC_CONTEXT
{
  /* 0x0000 */ enum _REQUESTER_TYPE CallerType;
  /* 0x0004 */ long Padding_383;
  union
  {
    struct
    {
      /* 0x0008 */ struct _EPROCESS* Process;
      /* 0x0010 */ unsigned long ServiceTag;
    }; /* size: 0x000c */
    /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  }; /* size: 0x000c */
  /* 0x0014 */ long Padding_384;
  /* 0x0018 */ unsigned __int64 ReasonSize;
} DIAGNOSTIC_CONTEXT, *PDIAGNOSTIC_CONTEXT; /* size: 0x0020 */

typedef struct _LOCK_TRACKER
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE LockTrackerNode;
  /* 0x0018 */ struct _MDL* Mdl;
  /* 0x0020 */ void* StartVa;
  /* 0x0028 */ unsigned __int64 Count;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned long Length;
  /* 0x0038 */ unsigned __int64 Page;
  /* 0x0040 */ void* StackTrace[8];
  /* 0x0080 */ unsigned long Who;
  /* 0x0084 */ long Padding_385;
  /* 0x0088 */ struct _EPROCESS* Process;
} LOCK_TRACKER, *PLOCK_TRACKER; /* size: 0x0090 */

typedef struct _POOL_HEADER
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short PreviousSize : 8; /* bit position: 0 */
        /* 0x0000 */ unsigned short PoolIndex : 8; /* bit position: 8 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short BlockSize : 8; /* bit position: 0 */
        /* 0x0002 */ unsigned short PoolType : 8; /* bit position: 8 */
      }; /* bitfield */
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long Ulong1;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long PoolTag;
  union
  {
    /* 0x0008 */ struct _EPROCESS* ProcessBilled;
    struct
    {
      /* 0x0008 */ unsigned short AllocatorBackTraceIndex;
      /* 0x000a */ unsigned short PoolTagHash;
      /* 0x000c */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} POOL_HEADER, *PPOOL_HEADER; /* size: 0x0010 */

typedef struct _POOL_BLOCK_HEAD
{
  /* 0x0000 */ struct _POOL_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY List;
} POOL_BLOCK_HEAD, *PPOOL_BLOCK_HEAD; /* size: 0x0020 */

typedef struct _ARBITER_ORDERING_LIST
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Maximum;
  /* 0x0004 */ long Padding_386;
  /* 0x0008 */ struct _ARBITER_ORDERING* Orderings;
} ARBITER_ORDERING_LIST, *PARBITER_ORDERING_LIST; /* size: 0x0010 */

typedef struct _ARBITER_INSTANCE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Padding_387;
  /* 0x0008 */ struct _KEVENT* MutexEvent;
  /* 0x0010 */ unsigned short* Name;
  /* 0x0018 */ unsigned short* OrderingName;
  /* 0x0020 */ int ResourceType;
  /* 0x0024 */ long Padding_388;
  /* 0x0028 */ struct _RTL_RANGE_LIST* Allocation;
  /* 0x0030 */ struct _RTL_RANGE_LIST* PossibleAllocation;
  /* 0x0038 */ struct _ARBITER_ORDERING_LIST OrderingList;
  /* 0x0048 */ struct _ARBITER_ORDERING_LIST ReservedList;
  /* 0x0058 */ long ReferenceCount;
  /* 0x005c */ long Padding_389;
  /* 0x0060 */ struct _ARBITER_INTERFACE* Interface;
  /* 0x0068 */ unsigned long AllocationStackMaxSize;
  /* 0x006c */ long Padding_390;
  /* 0x0070 */ struct _ARBITER_ALLOCATION_STATE* AllocationStack;
  /* 0x0078 */ void* UnpackRequirement /* function */;
  /* 0x0080 */ void* PackResource /* function */;
  /* 0x0088 */ void* UnpackResource /* function */;
  /* 0x0090 */ void* ScoreRequirement /* function */;
  /* 0x0098 */ void* TestAllocation /* function */;
  /* 0x00a0 */ void* RetestAllocation /* function */;
  /* 0x00a8 */ void* CommitAllocation /* function */;
  /* 0x00b0 */ void* RollbackAllocation /* function */;
  /* 0x00b8 */ void* BootAllocation /* function */;
  /* 0x00c0 */ void* QueryArbitrate /* function */;
  /* 0x00c8 */ void* QueryConflict /* function */;
  /* 0x00d0 */ void* AddReserved /* function */;
  /* 0x00d8 */ void* StartArbiter /* function */;
  /* 0x00e0 */ void* PreprocessEntry /* function */;
  /* 0x00e8 */ void* AllocateEntry /* function */;
  /* 0x00f0 */ void* GetNextAllocationRange /* function */;
  /* 0x00f8 */ void* FindSuitableRange /* function */;
  /* 0x0100 */ void* AddAllocation /* function */;
  /* 0x0108 */ void* BacktrackAllocation /* function */;
  /* 0x0110 */ void* OverrideConflict /* function */;
  /* 0x0118 */ void* InitializeRangeList /* function */;
  /* 0x0120 */ unsigned char TransactionInProgress;
  /* 0x0121 */ char Padding_391[7];
  /* 0x0128 */ struct _KEVENT* TransactionEvent;
  /* 0x0130 */ void* Extension;
  /* 0x0138 */ struct _DEVICE_OBJECT* BusDeviceObject;
  /* 0x0140 */ void* ConflictCallbackContext;
  /* 0x0148 */ void* ConflictCallback /* function */;
} ARBITER_INSTANCE, *PARBITER_INSTANCE; /* size: 0x0150 */

typedef struct _RTL_RANGE_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long Count;
  /* 0x0018 */ unsigned long Stamp;
  /* 0x001c */ long __PADDING__[1];
} RTL_RANGE_LIST, *PRTL_RANGE_LIST; /* size: 0x0020 */

typedef struct _ARBITER_ORDERING
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
} ARBITER_ORDERING, *PARBITER_ORDERING; /* size: 0x0010 */

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0008 */ unsigned long AllocateFromCount;
  /* 0x000c */ long Padding_392;
  /* 0x0010 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_TEST_ALLOCATION_PARAMETERS, *PARBITER_TEST_ALLOCATION_PARAMETERS; /* size: 0x0018 */

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0008 */ unsigned long AllocateFromCount;
  /* 0x000c */ long Padding_393;
  /* 0x0010 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_RETEST_ALLOCATION_PARAMETERS, *PARBITER_RETEST_ALLOCATION_PARAMETERS; /* size: 0x0018 */

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_BOOT_ALLOCATION_PARAMETERS, *PARBITER_BOOT_ALLOCATION_PARAMETERS; /* size: 0x0008 */

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
{
  /* 0x0000 */ struct _CM_PARTIAL_RESOURCE_LIST** AllocatedResources;
} ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, *PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS; /* size: 0x0008 */

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* ReserveDevice;
} ARBITER_ADD_RESERVED_PARAMETERS, *PARBITER_ADD_RESERVED_PARAMETERS; /* size: 0x0008 */

typedef struct _ARBITER_PARAMETERS
{
  union
  {
    union
    {
      /* 0x0000 */ struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
      /* 0x0000 */ struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
      /* 0x0000 */ struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
      /* 0x0000 */ struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
      /* 0x0000 */ struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
      /* 0x0000 */ struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
      /* 0x0000 */ struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ Parameters;
} ARBITER_PARAMETERS, *PARBITER_PARAMETERS; /* size: 0x0020 */

typedef struct _ARBITER_CONFLICT_INFO
{
  /* 0x0000 */ struct _DEVICE_OBJECT* OwningObject;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 End;
} ARBITER_CONFLICT_INFO, *PARBITER_CONFLICT_INFO; /* size: 0x0018 */

typedef struct _ARBITER_ALLOCATION_STATE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ unsigned __int64 CurrentMinimum;
  /* 0x0018 */ unsigned __int64 CurrentMaximum;
  /* 0x0020 */ struct _ARBITER_LIST_ENTRY* Entry;
  /* 0x0028 */ struct _ARBITER_ALTERNATIVE* CurrentAlternative;
  /* 0x0030 */ unsigned long AlternativeCount;
  /* 0x0034 */ long Padding_394;
  /* 0x0038 */ struct _ARBITER_ALTERNATIVE* Alternatives;
  /* 0x0040 */ unsigned short Flags;
  /* 0x0042 */ unsigned char RangeAttributes;
  /* 0x0043 */ unsigned char RangeAvailableAttributes;
  /* 0x0044 */ long Padding_395;
  /* 0x0048 */ unsigned __int64 WorkSpace;
} ARBITER_ALLOCATION_STATE, *PARBITER_ALLOCATION_STATE; /* size: 0x0050 */

typedef struct _ARBITER_ALTERNATIVE
{
  /* 0x0000 */ unsigned __int64 Minimum;
  /* 0x0008 */ unsigned __int64 Maximum;
  /* 0x0010 */ unsigned __int64 Length;
  /* 0x0018 */ unsigned __int64 Alignment;
  /* 0x0020 */ long Priority;
  /* 0x0024 */ unsigned long Flags;
  /* 0x0028 */ struct _IO_RESOURCE_DESCRIPTOR* Descriptor;
  /* 0x0030 */ unsigned long Reserved[3];
  /* 0x003c */ long __PADDING__[1];
} ARBITER_ALTERNATIVE, *PARBITER_ALTERNATIVE; /* size: 0x0040 */

typedef struct _RTL_RANGE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ void* UserData;
  /* 0x0018 */ void* Owner;
  /* 0x0020 */ unsigned char Attributes;
  /* 0x0021 */ unsigned char Flags;
  /* 0x0022 */ char __PADDING__[6];
} RTL_RANGE, *PRTL_RANGE; /* size: 0x0028 */

typedef struct _POP_POLICY_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x0014 */ long Padding_396;
  /* 0x0018 */ void* Notification;
  /* 0x0020 */ struct _UNICODE_STRING Name;
  /* 0x0030 */ struct _DEVICE_OBJECT* Device;
  /* 0x0038 */ struct _IRP* Irp;
} POP_POLICY_DEVICE, *PPOP_POLICY_DEVICE; /* size: 0x0040 */

typedef struct _THERMAL_POLICY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char WaitForUpdate;
  /* 0x0005 */ unsigned char Hibernate;
  /* 0x0006 */ unsigned char Critical;
  /* 0x0007 */ char Padding_397;
  /* 0x0008 */ unsigned long ActivationReasons;
  /* 0x000c */ unsigned long PassiveLimit;
  /* 0x0010 */ unsigned long ActiveLevel;
} THERMAL_POLICY, *PTHERMAL_POLICY; /* size: 0x0014 */

typedef struct _POP_THERMAL_ZONE
{
  union
  {
    /* 0x0000 */ struct _POP_POLICY_DEVICE PolicyDevice;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY Link;
      /* 0x0010 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
      /* 0x0014 */ long Padding_398;
      /* 0x0018 */ void* Notification;
      /* 0x0020 */ struct _UNICODE_STRING Name;
      /* 0x0030 */ struct _DEVICE_OBJECT* Device;
      /* 0x0038 */ struct _IRP* Irp;
    }; /* size: 0x003c */
  }; /* size: 0x0040 */
  /* 0x0040 */ unsigned char State;
  /* 0x0041 */ unsigned char Flags;
  /* 0x0042 */ unsigned char Removing;
  /* 0x0043 */ unsigned char Mode;
  /* 0x0044 */ unsigned char PendingMode;
  /* 0x0045 */ unsigned char ActivePoint;
  /* 0x0046 */ unsigned char PendingActivePoint;
  /* 0x0047 */ unsigned char Critical;
  /* 0x0048 */ long HighPrecisionThrottle;
  /* 0x004c */ long Throttle;
  /* 0x0050 */ long PendingThrottle;
  /* 0x0054 */ unsigned long ThrottleReasons;
  /* 0x0058 */ unsigned __int64 LastTime;
  /* 0x0060 */ unsigned long SampleRate;
  /* 0x0064 */ unsigned long LastTemp;
  /* 0x0068 */ struct _KTIMER PassiveTimer;
  /* 0x00a8 */ struct _KDPC PassiveDpc;
  /* 0x00e8 */ struct _THERMAL_INFORMATION_EX Info;
  /* 0x0138 */ union _LARGE_INTEGER InfoLastUpdateTime;
  /* 0x0140 */ struct _THERMAL_POLICY Policy;
  /* 0x0154 */ unsigned char PolicyDriver;
  /* 0x0155 */ char Padding_399[3];
  /* 0x0158 */ struct _POP_THERMAL_ZONE_METRICS Metrics;
  /* 0x0188 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x01a8 */ struct _POP_RW_LOCK Lock;
  /* 0x01b8 */ struct _KEVENT ZoneStopped;
  /* 0x01d0 */ struct _KEVENT TemperatureUpdated;
  /* 0x01e8 */ unsigned long InstanceId;
  /* 0x01ec */ long __PADDING__[1];
} POP_THERMAL_ZONE, *PPOP_THERMAL_ZONE; /* size: 0x01f0 */

typedef struct _POOL_HACKER
{
  /* 0x0000 */ struct _POOL_HEADER Header;
  /* 0x0010 */ unsigned long Contents[8];
} POOL_HACKER, *PPOOL_HACKER; /* size: 0x0030 */

struct _VERIFIER_SHARED_EXPORT_THUNK;

typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA
{
  /* 0x0000 */ struct _VF_SUSPECT_DRIVER_ENTRY* SuspectDriverEntry;
  /* 0x0008 */ void* WMICallback;
  /* 0x0010 */ struct _LIST_ENTRY EtwHandlesListHead;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0020 */ unsigned long MissedEtwRegistration : 1; /* bit position: 0 */
          /* 0x0020 */ unsigned long Spare : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x0020 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0024 */ long Padding_400;
  /* 0x0028 */ unsigned __int64 Signature;
  /* 0x0030 */ union _SLIST_HEADER PoolPageHeaders;
  /* 0x0040 */ union _SLIST_HEADER PoolTrackers;
  /* 0x0050 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x0054 */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0058 */ unsigned long PeakPagedPoolAllocations;
  /* 0x005c */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0060 */ volatile unsigned __int64 PagedBytes;
  /* 0x0068 */ volatile unsigned __int64 NonPagedBytes;
  /* 0x0070 */ unsigned __int64 PeakPagedBytes;
  /* 0x0078 */ unsigned __int64 PeakNonPagedBytes;
  /* 0x0080 */ unsigned long RaiseIrqls;
  /* 0x0084 */ unsigned long AcquireSpinLocks;
  /* 0x0088 */ unsigned long SynchronizeExecutions;
  /* 0x008c */ unsigned long AllocationsWithNoTag;
  /* 0x0090 */ unsigned long AllocationsFailed;
  /* 0x0094 */ unsigned long AllocationsFailedDeliberately;
  /* 0x0098 */ unsigned __int64 LockedBytes;
  /* 0x00a0 */ unsigned __int64 PeakLockedBytes;
  /* 0x00a8 */ unsigned __int64 MappedLockedBytes;
  /* 0x00b0 */ unsigned __int64 PeakMappedLockedBytes;
  /* 0x00b8 */ unsigned __int64 MappedIoSpaceBytes;
  /* 0x00c0 */ unsigned __int64 PeakMappedIoSpaceBytes;
  /* 0x00c8 */ unsigned __int64 PagesForMdlBytes;
  /* 0x00d0 */ unsigned __int64 PeakPagesForMdlBytes;
  /* 0x00d8 */ unsigned __int64 ContiguousMemoryBytes;
  /* 0x00e0 */ unsigned __int64 PeakContiguousMemoryBytes;
  /* 0x00e8 */ struct _LIST_ENTRY ContiguousMemoryListHead;
  /* 0x00f8 */ long __PADDING__[2];
} VF_TARGET_VERIFIED_DRIVER_DATA, *PVF_TARGET_VERIFIED_DRIVER_DATA; /* size: 0x0100 */

typedef struct _VF_SUSPECT_DRIVER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ unsigned long Loads;
  /* 0x0014 */ unsigned long Unloads;
  /* 0x0018 */ struct _UNICODE_STRING BaseName;
} VF_SUSPECT_DRIVER_ENTRY, *PVF_SUSPECT_DRIVER_ENTRY; /* size: 0x0028 */

typedef struct _BUS_EXTENSION_LIST
{
  /* 0x0000 */ void* Next;
  /* 0x0008 */ struct _PI_BUS_EXTENSION* BusExtension;
} BUS_EXTENSION_LIST, *PBUS_EXTENSION_LIST; /* size: 0x0010 */

typedef struct _WAITING_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ void* CompletionRoutine /* function */;
  /* 0x0020 */ void* Context;
  /* 0x0028 */ struct _KEVENT* Event;
  /* 0x0030 */ unsigned long Information;
  /* 0x0034 */ unsigned char BreakAllRH;
  /* 0x0035 */ char __PADDING__[3];
} WAITING_IRP, *PWAITING_IRP; /* size: 0x0038 */

typedef struct _POP_SYSTEM_IDLE
{
  /* 0x0000 */ long AverageIdleness;
  /* 0x0004 */ long LowestIdleness;
  /* 0x0008 */ unsigned long Time;
  /* 0x000c */ unsigned long Timeout;
  /* 0x0010 */ unsigned long LastUserInput;
  /* 0x0014 */ struct POWER_ACTION_POLICY Action;
  /* 0x0020 */ enum _SYSTEM_POWER_STATE MinState;
  /* 0x0024 */ unsigned long SystemRequired;
  /* 0x0028 */ unsigned char IdleWorker;
  /* 0x0029 */ unsigned char Sampling;
  /* 0x002a */ char Padding_401[6];
  /* 0x0030 */ unsigned __int64 LastTick;
  /* 0x0038 */ unsigned long LastSystemRequiredTime;
  /* 0x003c */ long __PADDING__[1];
} POP_SYSTEM_IDLE, *PPOP_SYSTEM_IDLE; /* size: 0x0040 */

typedef struct _POP_IRP_WORKER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _ETHREAD* Thread;
  /* 0x0018 */ struct _IRP* Irp;
  /* 0x0020 */ struct _DEVICE_OBJECT* Device;
  /* 0x0028 */ unsigned char Static;
  /* 0x0029 */ char __PADDING__[7];
} POP_IRP_WORKER_ENTRY, *PPOP_IRP_WORKER_ENTRY; /* size: 0x0030 */

typedef struct _IMAGE_SECTION_HEADER
{
  /* 0x0000 */ unsigned char Name[8];
  union
  {
    union
    {
      /* 0x0008 */ unsigned long PhysicalAddress;
      /* 0x0008 */ unsigned long VirtualSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Misc;
  /* 0x000c */ unsigned long VirtualAddress;
  /* 0x0010 */ unsigned long SizeOfRawData;
  /* 0x0014 */ unsigned long PointerToRawData;
  /* 0x0018 */ unsigned long PointerToRelocations;
  /* 0x001c */ unsigned long PointerToLinenumbers;
  /* 0x0020 */ unsigned short NumberOfRelocations;
  /* 0x0022 */ unsigned short NumberOfLinenumbers;
  /* 0x0024 */ unsigned long Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; /* size: 0x0028 */

typedef struct _IMAGE_DEBUG_DIRECTORY
{
  /* 0x0000 */ unsigned long Characteristics;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned long SizeOfData;
  /* 0x0014 */ unsigned long AddressOfRawData;
  /* 0x0018 */ unsigned long PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY; /* size: 0x001c */

typedef struct _ETW_WMITRACE_WORK
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long SpareUlong;
  union
  {
    struct
    {
      /* 0x0008 */ char LoggerName[65];
      /* 0x0049 */ char FileName[129];
      /* 0x00ca */ char Padding_402[2];
      /* 0x00cc */ unsigned long MaximumFileSize;
      /* 0x00d0 */ unsigned long MinBuffers;
      /* 0x00d4 */ unsigned long MaxBuffers;
      /* 0x00d8 */ unsigned long BufferSize;
      /* 0x00dc */ unsigned long Mode;
      /* 0x00e0 */ unsigned long FlushTimer;
    }; /* size: 0x00da */
    struct
    {
      /* 0x0008 */ unsigned __int64 MatchAny;
      /* 0x0010 */ unsigned __int64 MatchAll;
      /* 0x0018 */ unsigned long EnableProperty;
      /* 0x001c */ struct _GUID Guid;
      /* 0x002c */ unsigned char Level;
      /* 0x002d */ char Padding_403[187];
      /* 0x00e8 */ long Status;
      /* 0x00ec */ long __PADDING__[1];
    }; /* size: 0x002d */
  }; /* size: 0x00da */
} ETW_WMITRACE_WORK, *PETW_WMITRACE_WORK; /* size: 0x00f0 */

typedef struct _PNP_DEVICE_COMPLETION_REQUEST
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x0018 */ void* Context;
  /* 0x0020 */ enum _PNP_DEVNODE_STATE CompletionState;
  /* 0x0024 */ unsigned long IrpPended;
  /* 0x0028 */ long Status;
  /* 0x002c */ long Padding_404;
  /* 0x0030 */ void* Information;
  /* 0x0038 */ long ReferenceCount;
  /* 0x003c */ long __PADDING__[1];
} PNP_DEVICE_COMPLETION_REQUEST, *PPNP_DEVICE_COMPLETION_REQUEST; /* size: 0x0040 */

typedef struct _SECTION_OBJECT
{
  /* 0x0000 */ void* StartingVa;
  /* 0x0008 */ void* EndingVa;
  /* 0x0010 */ void* Parent;
  /* 0x0018 */ void* LeftChild;
  /* 0x0020 */ void* RightChild;
  /* 0x0028 */ struct _SEGMENT_OBJECT* Segment;
} SECTION_OBJECT, *PSECTION_OBJECT; /* size: 0x0030 */

typedef struct _HEAP_LOOKASIDE
{
  /* 0x0000 */ union _SLIST_HEADER ListHead;
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  /* 0x0018 */ unsigned long AllocateMisses;
  /* 0x001c */ unsigned long TotalFrees;
  /* 0x0020 */ unsigned long FreeMisses;
  /* 0x0024 */ unsigned long LastTotalAllocates;
  /* 0x0028 */ unsigned long LastAllocateMisses;
  /* 0x002c */ unsigned long Counters[2];
  /* 0x0034 */ long __PADDING__[3];
} HEAP_LOOKASIDE, *PHEAP_LOOKASIDE; /* size: 0x0040 */

typedef struct _RTL_ATOM_TABLE_REFERENCE
{
  /* 0x0000 */ struct _LIST_ENTRY LowBoxList;
  /* 0x0010 */ unsigned long LowBoxID;
  /* 0x0014 */ unsigned short ReferenceCount;
  /* 0x0016 */ unsigned short Flags;
} RTL_ATOM_TABLE_REFERENCE, *PRTL_ATOM_TABLE_REFERENCE; /* size: 0x0018 */

typedef struct _RTL_ATOM_TABLE_ENTRY
{
  /* 0x0000 */ struct _RTL_ATOM_TABLE_ENTRY* HashLink;
  /* 0x0008 */ unsigned short HandleIndex;
  /* 0x000a */ unsigned short Atom;
  /* 0x000c */ long Padding_405;
  /* 0x0010 */ struct _RTL_ATOM_TABLE_REFERENCE Reference;
  /* 0x0028 */ unsigned char NameLength;
  /* 0x0029 */ char Padding_406;
  /* 0x002a */ wchar_t Name[1];
  /* 0x002c */ long __PADDING__[1];
} RTL_ATOM_TABLE_ENTRY, *PRTL_ATOM_TABLE_ENTRY; /* size: 0x0030 */

struct BATTERY_REPORTING_SCALE
{
  /* 0x0000 */ unsigned long Granularity;
  /* 0x0004 */ unsigned long Capacity;
}; /* size: 0x0008 */

struct SYSTEM_POWER_CAPABILITIES
{
  /* 0x0000 */ unsigned char PowerButtonPresent;
  /* 0x0001 */ unsigned char SleepButtonPresent;
  /* 0x0002 */ unsigned char LidPresent;
  /* 0x0003 */ unsigned char SystemS1;
  /* 0x0004 */ unsigned char SystemS2;
  /* 0x0005 */ unsigned char SystemS3;
  /* 0x0006 */ unsigned char SystemS4;
  /* 0x0007 */ unsigned char SystemS5;
  /* 0x0008 */ unsigned char HiberFilePresent;
  /* 0x0009 */ unsigned char FullWake;
  /* 0x000a */ unsigned char VideoDimPresent;
  /* 0x000b */ unsigned char ApmPresent;
  /* 0x000c */ unsigned char UpsPresent;
  /* 0x000d */ unsigned char ThermalControl;
  /* 0x000e */ unsigned char ProcessorThrottle;
  /* 0x000f */ unsigned char ProcessorMinThrottle;
  /* 0x0010 */ unsigned char ProcessorMaxThrottle;
  /* 0x0011 */ unsigned char FastSystemS4;
  /* 0x0012 */ unsigned char Hiberboot;
  /* 0x0013 */ unsigned char WakeAlarmPresent;
  /* 0x0014 */ unsigned char AoAc;
  /* 0x0015 */ unsigned char DiskSpinDown;
  /* 0x0016 */ unsigned char spare3[8];
  /* 0x001e */ unsigned char SystemBatteriesPresent;
  /* 0x001f */ unsigned char BatteriesAreShortTerm;
  /* 0x0020 */ struct BATTERY_REPORTING_SCALE BatteryScale[3];
  /* 0x0038 */ enum _SYSTEM_POWER_STATE AcOnLineWake;
  /* 0x003c */ enum _SYSTEM_POWER_STATE SoftLidWake;
  /* 0x0040 */ enum _SYSTEM_POWER_STATE RtcWake;
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
}; /* size: 0x004c */

typedef struct _POP_POWER_ACTION
{
  /* 0x0000 */ unsigned char Updates;
  /* 0x0001 */ unsigned char State;
  /* 0x0002 */ unsigned char Shutdown;
  /* 0x0003 */ char Padding_407;
  /* 0x0004 */ enum POWER_ACTION Action;
  /* 0x0008 */ enum _SYSTEM_POWER_STATE LightestState;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ long Status;
  /* 0x0014 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x0018 */ unsigned long DeviceTypeFlags;
  /* 0x001c */ unsigned char IrpMinor;
  /* 0x001d */ unsigned char Waking;
  /* 0x001e */ char Padding_408[2];
  /* 0x0020 */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0024 */ enum _SYSTEM_POWER_STATE NextSystemState;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE EffectiveSystemState;
  /* 0x002c */ enum _SYSTEM_POWER_STATE CurrentSystemState;
  /* 0x0030 */ struct _POP_SHUTDOWN_BUG_CHECK* ShutdownBugCode;
  /* 0x0038 */ struct _POP_DEVICE_SYS_STATE* DevState;
  /* 0x0040 */ struct _POP_HIBER_CONTEXT* HiberContext;
  /* 0x0048 */ unsigned __int64 WakeTime;
  /* 0x0050 */ unsigned __int64 SleepTime;
  /* 0x0058 */ enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;
  /* 0x005c */ long Padding_409;
  /* 0x0060 */ struct
  {
    /* 0x0060 */ unsigned __int64 ProgrammedTime;
    /* 0x0068 */ struct _DIAGNOSTIC_BUFFER* TimerInfo;
  } /* size: 0x0010 */ WakeAlarm[3];
  /* 0x0090 */ struct SYSTEM_POWER_CAPABILITIES FilteredCapabilities;
  /* 0x00dc */ long __PADDING__[1];
} POP_POWER_ACTION, *PPOP_POWER_ACTION; /* size: 0x00e0 */

typedef struct _POP_SHUTDOWN_BUG_CHECK
{
  /* 0x0000 */ struct _ETHREAD* InitiatingThread;
  /* 0x0008 */ struct _EPROCESS* InitiatingProcess;
  /* 0x0010 */ void* ThreadId;
  /* 0x0018 */ void* ProcessId;
  /* 0x0020 */ unsigned long Code;
  /* 0x0024 */ long Padding_410;
  /* 0x0028 */ unsigned __int64 Parameter1;
  /* 0x0030 */ unsigned __int64 Parameter2;
  /* 0x0038 */ unsigned __int64 Parameter3;
  /* 0x0040 */ unsigned __int64 Parameter4;
} POP_SHUTDOWN_BUG_CHECK, *PPOP_SHUTDOWN_BUG_CHECK; /* size: 0x0048 */

typedef struct _PO_DEVICE_NOTIFY_ORDER
{
  /* 0x0000 */ unsigned char Locked;
  /* 0x0001 */ char Padding_411[7];
  /* 0x0008 */ struct _DEVICE_OBJECT** WarmEjectPdoPointer;
  /* 0x0010 */ struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];
} PO_DEVICE_NOTIFY_ORDER, *PPO_DEVICE_NOTIFY_ORDER; /* size: 0x0178 */

typedef struct _POP_DEVICE_SYS_STATE
{
  /* 0x0000 */ unsigned char IrpMinor;
  /* 0x0001 */ char Padding_412[3];
  /* 0x0004 */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0008 */ unsigned __int64 SpinLock;
  /* 0x0010 */ struct _KTHREAD* Thread;
  /* 0x0018 */ struct _KEVENT* AbortEvent;
  /* 0x0020 */ struct _KSEMAPHORE* ReadySemaphore;
  /* 0x0028 */ struct _KSEMAPHORE* FinishedSemaphore;
  /* 0x0030 */ struct _PO_DEVICE_NOTIFY_ORDER Order;
  /* 0x01a8 */ struct _LIST_ENTRY Pending;
  /* 0x01b8 */ long Status;
  /* 0x01bc */ long Padding_413;
  /* 0x01c0 */ struct _DEVICE_OBJECT* FailedDevice;
  /* 0x01c8 */ unsigned char Waking;
  /* 0x01c9 */ unsigned char Cancelled;
  /* 0x01ca */ unsigned char IgnoreErrors;
  /* 0x01cb */ unsigned char IgnoreNotImplemented;
  /* 0x01cc */ unsigned char TimeRefreshLockAcquired;
  /* 0x01cd */ char __PADDING__[3];
} POP_DEVICE_SYS_STATE, *PPOP_DEVICE_SYS_STATE; /* size: 0x01d0 */

typedef struct _POP_IO_INFO
{
  /* 0x0000 */ struct _MDL* DumpMdl;
  /* 0x0008 */ enum _POP_IO_STATUS IoStatus;
  /* 0x000c */ long Padding_414;
  /* 0x0010 */ unsigned __int64 IoStartCount;
  /* 0x0018 */ unsigned __int64 IoBytesCompleted;
  /* 0x0020 */ unsigned __int64 IoBytesInProgress;
  /* 0x0028 */ unsigned __int64 RequestSize;
  /* 0x0030 */ union _LARGE_INTEGER IoLocation;
  /* 0x0038 */ unsigned __int64 FileOffset;
  /* 0x0040 */ void* Buffer;
  /* 0x0048 */ unsigned char AsyncCapable;
  /* 0x0049 */ char Padding_415[7];
  /* 0x0050 */ unsigned __int64 BytesToRead;
  /* 0x0058 */ unsigned long Pages;
  /* 0x005c */ long __PADDING__[1];
} POP_IO_INFO, *PPOP_IO_INFO; /* size: 0x0060 */

typedef struct _POP_HIBER_CONTEXT
{
  /* 0x0000 */ unsigned char Reset;
  /* 0x0001 */ unsigned char HiberFlags;
  /* 0x0002 */ unsigned char WroteHiberFile;
  /* 0x0003 */ unsigned char VerifyKernelPhaseOnResume;
  /* 0x0004 */ unsigned char KernelPhaseVerificationActive;
  /* 0x0005 */ volatile unsigned char InitializationFinished;
  /* 0x0006 */ char Padding_416[2];
  /* 0x0008 */ volatile long NextTableLockHeld;
  /* 0x000c */ volatile long BootPhaseFinishedBarrier;
  /* 0x0010 */ volatile long KernelResumeFinishedBarrier;
  /* 0x0014 */ unsigned char MapFrozen;
  /* 0x0015 */ char Padding_417[3];
  union
  {
    /* 0x0018 */ struct _RTL_BITMAP DiscardMap;
    /* 0x0018 */ struct _RTL_BITMAP KernelPhaseMap;
  }; /* size: 0x0010 */
  /* 0x0028 */ struct _RTL_BITMAP BootPhaseMap;
  /* 0x0038 */ struct _LIST_ENTRY ClonedRanges;
  /* 0x0048 */ unsigned long ClonedRangeCount;
  /* 0x004c */ long Padding_418;
  /* 0x0050 */ unsigned __int64 ClonedPageCount;
  /* 0x0058 */ struct _RTL_BITMAP* CurrentMap;
  /* 0x0060 */ struct _LIST_ENTRY* NextCloneRange;
  /* 0x0068 */ unsigned __int64 NextPreserve;
  /* 0x0070 */ struct _MDL* LoaderMdl;
  /* 0x0078 */ struct _MDL* AllocatedMdl;
  /* 0x0080 */ unsigned __int64 PagesOut;
  /* 0x0088 */ void* IoPages;
  /* 0x0090 */ unsigned long IoPagesCount;
  /* 0x0094 */ long Padding_419;
  /* 0x0098 */ void* CurrentMcb;
  /* 0x00a0 */ struct _DUMP_STACK_CONTEXT* DumpStack;
  /* 0x00a8 */ struct _KPROCESSOR_STATE* WakeState;
  /* 0x00b0 */ unsigned long IoProgress;
  /* 0x00b4 */ long Status;
  /* 0x00b8 */ unsigned long GraphicsProc;
  /* 0x00bc */ long Padding_420;
  /* 0x00c0 */ struct PO_MEMORY_IMAGE* MemoryImage;
  /* 0x00c8 */ unsigned long* PerformanceStats;
  /* 0x00d0 */ struct _MDL* BootLoaderLogMdl;
  /* 0x00d8 */ unsigned long SiLogOffset;
  /* 0x00dc */ long Padding_421;
  /* 0x00e0 */ struct _MDL* FirmwareRuntimeInformationMdl;
  /* 0x00e8 */ void* FirmwareRuntimeInformationVa;
  /* 0x00f0 */ void* ResumeContext;
  /* 0x00f8 */ unsigned long ResumeContextPages;
  /* 0x00fc */ unsigned long ProcessorCount;
  /* 0x0100 */ struct _POP_PER_PROCESSOR_CONTEXT* ProcessorContext;
  /* 0x0108 */ char* ProdConsBuffer;
  /* 0x0110 */ unsigned long ProdConsSize;
  /* 0x0114 */ unsigned long MaxDataPages;
  /* 0x0118 */ void* ExtraBuffer;
  /* 0x0120 */ unsigned __int64 ExtraBufferSize;
  /* 0x0128 */ void* ExtraMapVa;
  /* 0x0130 */ unsigned __int64 BitlockerKeyPFN;
  /* 0x0138 */ struct _POP_IO_INFO IoInfo;
  /* 0x0198 */ unsigned long HardwareConfigurationSignature;
  /* 0x019c */ long __PADDING__[1];
} POP_HIBER_CONTEXT, *PPOP_HIBER_CONTEXT; /* size: 0x01a0 */

typedef struct _DUMP_STACK_CONTEXT
{
  /* 0x0000 */ struct _DUMP_INITIALIZATION_CONTEXT Init;
  /* 0x0108 */ union _LARGE_INTEGER PartitionOffset;
  /* 0x0110 */ void* DumpPointers;
  /* 0x0118 */ unsigned long PointersLength;
  /* 0x011c */ long Padding_422;
  /* 0x0120 */ unsigned short* ModulePrefix;
  /* 0x0128 */ struct _LIST_ENTRY DriverList;
  /* 0x0138 */ struct _STRING InitMsg;
  /* 0x0148 */ struct _STRING ProgMsg;
  /* 0x0158 */ struct _STRING DoneMsg;
  /* 0x0168 */ void* FileObject;
  /* 0x0170 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;
  /* 0x0174 */ long __PADDING__[1];
} DUMP_STACK_CONTEXT, *PDUMP_STACK_CONTEXT; /* size: 0x0178 */

struct _ADAPTER_OBJECT;

typedef struct _PI_RESOURCE_ARBITER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x0010 */ unsigned char ResourceType;
  /* 0x0011 */ char Padding_423[7];
  /* 0x0018 */ struct _ARBITER_INTERFACE* ArbiterInterface;
  /* 0x0020 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x0028 */ struct _LIST_ENTRY ResourceList;
  /* 0x0038 */ struct _LIST_ENTRY BestResourceList;
  /* 0x0048 */ struct _LIST_ENTRY BestConfig;
  /* 0x0058 */ struct _LIST_ENTRY ActiveArbiterList;
  /* 0x0068 */ unsigned char State;
  /* 0x0069 */ unsigned char ResourcesChanged;
  /* 0x006a */ char __PADDING__[6];
} PI_RESOURCE_ARBITER_ENTRY, *PPI_RESOURCE_ARBITER_ENTRY; /* size: 0x0070 */

typedef struct _SECURITY_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ long Padding_424;
  /* 0x0008 */ void* Owner;
  /* 0x0010 */ void* Group;
  /* 0x0018 */ struct _ACL* Sacl;
  /* 0x0020 */ struct _ACL* Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR; /* size: 0x0028 */

typedef struct _PEB64
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char SpareBits : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned char Padding0[4];
  /* 0x0008 */ unsigned __int64 Mutant;
  /* 0x0010 */ unsigned __int64 ImageBaseAddress;
  /* 0x0018 */ unsigned __int64 Ldr;
  /* 0x0020 */ unsigned __int64 ProcessParameters;
  /* 0x0028 */ unsigned __int64 SubSystemData;
  /* 0x0030 */ unsigned __int64 ProcessHeap;
  /* 0x0038 */ unsigned __int64 FastPebLock;
  /* 0x0040 */ unsigned __int64 AtlThunkSListPtr;
  /* 0x0048 */ unsigned __int64 IFEOKey;
  union
  {
    /* 0x0050 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0050 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0050 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0050 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0050 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0050 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0050 */ unsigned long ReservedBits0 : 27; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0054 */ unsigned char Padding1[4];
  union
  {
    /* 0x0058 */ unsigned __int64 KernelCallbackTable;
    /* 0x0058 */ unsigned __int64 UserSharedInfoPtr;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned long SystemReserved[1];
  /* 0x0064 */ unsigned long AtlThunkSListPtr32;
  /* 0x0068 */ unsigned __int64 ApiSetMap;
  /* 0x0070 */ unsigned long TlsExpansionCounter;
  /* 0x0074 */ unsigned char Padding2[4];
  /* 0x0078 */ unsigned __int64 TlsBitmap;
  /* 0x0080 */ unsigned long TlsBitmapBits[2];
  /* 0x0088 */ unsigned __int64 ReadOnlySharedMemoryBase;
  /* 0x0090 */ unsigned __int64 SparePvoid0;
  /* 0x0098 */ unsigned __int64 ReadOnlyStaticServerData;
  /* 0x00a0 */ unsigned __int64 AnsiCodePageData;
  /* 0x00a8 */ unsigned __int64 OemCodePageData;
  /* 0x00b0 */ unsigned __int64 UnicodeCaseTableData;
  /* 0x00b8 */ unsigned long NumberOfProcessors;
  /* 0x00bc */ unsigned long NtGlobalFlag;
  /* 0x00c0 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x00c8 */ unsigned __int64 HeapSegmentReserve;
  /* 0x00d0 */ unsigned __int64 HeapSegmentCommit;
  /* 0x00d8 */ unsigned __int64 HeapDeCommitTotalFreeThreshold;
  /* 0x00e0 */ unsigned __int64 HeapDeCommitFreeBlockThreshold;
  /* 0x00e8 */ unsigned long NumberOfHeaps;
  /* 0x00ec */ unsigned long MaximumNumberOfHeaps;
  /* 0x00f0 */ unsigned __int64 ProcessHeaps;
  /* 0x00f8 */ unsigned __int64 GdiSharedHandleTable;
  /* 0x0100 */ unsigned __int64 ProcessStarterHelper;
  /* 0x0108 */ unsigned long GdiDCAttributeList;
  /* 0x010c */ unsigned char Padding3[4];
  /* 0x0110 */ unsigned __int64 LoaderLock;
  /* 0x0118 */ unsigned long OSMajorVersion;
  /* 0x011c */ unsigned long OSMinorVersion;
  /* 0x0120 */ unsigned short OSBuildNumber;
  /* 0x0122 */ unsigned short OSCSDVersion;
  /* 0x0124 */ unsigned long OSPlatformId;
  /* 0x0128 */ unsigned long ImageSubsystem;
  /* 0x012c */ unsigned long ImageSubsystemMajorVersion;
  /* 0x0130 */ unsigned long ImageSubsystemMinorVersion;
  /* 0x0134 */ unsigned char Padding4[4];
  /* 0x0138 */ unsigned __int64 ActiveProcessAffinityMask;
  /* 0x0140 */ unsigned long GdiHandleBuffer[60];
  /* 0x0230 */ unsigned __int64 PostProcessInitRoutine;
  /* 0x0238 */ unsigned __int64 TlsExpansionBitmap;
  /* 0x0240 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x02c0 */ unsigned long SessionId;
  /* 0x02c4 */ unsigned char Padding5[4];
  /* 0x02c8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x02d0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x02d8 */ unsigned __int64 pShimData;
  /* 0x02e0 */ unsigned __int64 AppCompatInfo;
  /* 0x02e8 */ struct _STRING64 CSDVersion;
  /* 0x02f8 */ unsigned __int64 ActivationContextData;
  /* 0x0300 */ unsigned __int64 ProcessAssemblyStorageMap;
  /* 0x0308 */ unsigned __int64 SystemDefaultActivationContextData;
  /* 0x0310 */ unsigned __int64 SystemAssemblyStorageMap;
  /* 0x0318 */ unsigned __int64 MinimumStackCommit;
  /* 0x0320 */ unsigned __int64 FlsCallback;
  /* 0x0328 */ struct LIST_ENTRY64 FlsListHead;
  /* 0x0338 */ unsigned __int64 FlsBitmap;
  /* 0x0340 */ unsigned long FlsBitmapBits[4];
  /* 0x0350 */ unsigned long FlsHighIndex;
  /* 0x0354 */ long Padding_425;
  /* 0x0358 */ unsigned __int64 WerRegistrationData;
  /* 0x0360 */ unsigned __int64 WerShipAssertPtr;
  /* 0x0368 */ unsigned __int64 pUnused;
  /* 0x0370 */ unsigned __int64 pImageHeaderHash;
  union
  {
    /* 0x0378 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0378 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0378 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0378 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0378 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x037c */ unsigned char Padding6[4];
  /* 0x0380 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
} PEB64, *PPEB64; /* size: 0x0388 */

typedef struct _MMSESSION
{
  /* 0x0000 */ struct _FAST_MUTEX SystemSpaceViewLock;
  /* 0x0038 */ struct _FAST_MUTEX* SystemSpaceViewLockPointer;
  /* 0x0040 */ struct _MMVIEW* SystemSpaceViewTable;
  /* 0x0048 */ unsigned long SystemSpaceHashSize;
  /* 0x004c */ unsigned long SystemSpaceHashEntries;
  /* 0x0050 */ unsigned long SystemSpaceHashKey;
  /* 0x0054 */ unsigned long BitmapFailures;
} MMSESSION, *PMMSESSION; /* size: 0x0058 */

typedef struct _MM_PAGED_POOL_INFO
{
  /* 0x0000 */ struct _FAST_MUTEX Mutex;
  /* 0x0038 */ struct _RTL_BITMAP_EX PagedPoolAllocationMap;
  /* 0x0048 */ struct _MMPTE* FirstPteForPagedPool;
  /* 0x0050 */ unsigned __int64 MaximumSize;
  /* 0x0058 */ unsigned __int64 PagedPoolHint;
  /* 0x0060 */ unsigned __int64 AllocatedPagedPool;
} MM_PAGED_POOL_INFO, *PMM_PAGED_POOL_INFO; /* size: 0x0068 */

typedef struct _MI_PTE_CHAIN_HEAD
{
  /* 0x0000 */ struct _MMPTE Flink;
  /* 0x0008 */ struct _MMPTE Blink;
  /* 0x0010 */ struct _MMPTE* PteBase;
} MI_PTE_CHAIN_HEAD, *PMI_PTE_CHAIN_HEAD; /* size: 0x0018 */

typedef struct _MI_SPECIAL_POOL
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ struct _MI_PTE_CHAIN_HEAD Paged;
  /* 0x0020 */ struct _MI_PTE_CHAIN_HEAD NonPaged;
  /* 0x0038 */ volatile unsigned __int64 PagesInUse;
  /* 0x0040 */ struct _RTL_BITMAP SpecialPoolPdes;
} MI_SPECIAL_POOL, *PMI_SPECIAL_POOL; /* size: 0x0050 */

typedef struct _MM_SESSION_SPACE
{
  /* 0x0000 */ volatile long ReferenceCount;
  union
  {
    union
    {
      /* 0x0004 */ unsigned long LongFlags;
      /* 0x0004 */ struct _MM_SESSION_SPACE_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ volatile long ProcessReferenceToSession;
  /* 0x0010 */ struct _LIST_ENTRY ProcessList;
  /* 0x0020 */ unsigned __int64 SessionPageDirectoryIndex;
  /* 0x0028 */ volatile unsigned __int64 NonPagablePages;
  /* 0x0030 */ volatile unsigned __int64 CommittedPages;
  /* 0x0038 */ void* PagedPoolStart;
  /* 0x0040 */ void* PagedPoolEnd;
  /* 0x0048 */ void* SessionObject;
  /* 0x0050 */ void* SessionObjectHandle;
  /* 0x0058 */ unsigned long SessionPoolAllocationFailures[4];
  /* 0x0068 */ struct _LIST_ENTRY ImageList;
  /* 0x0078 */ unsigned long LocaleId;
  /* 0x007c */ unsigned long AttachCount;
  /* 0x0080 */ struct _KGATE AttachGate;
  /* 0x0098 */ struct _LIST_ENTRY WsListEntry;
  /* 0x00a8 */ long Padding_426[6];
  /* 0x00c0 */ struct _GENERAL_LOOKASIDE Lookaside[21];
  /* 0x0b40 */ struct _MMSESSION Session;
  /* 0x0b98 */ struct _MM_PAGED_POOL_INFO PagedPoolInfo;
  /* 0x0c00 */ struct _MMSUPPORT Vm;
  /* 0x0cd8 */ struct _MMWSLE* Wsle;
  /* 0x0ce0 */ struct _MI_SESSION_DRIVER_UNLOAD DriverUnload;
  /* 0x0ce8 */ long Padding_427[6];
  /* 0x0d00 */ struct _POOL_DESCRIPTOR PagedPool;
  /* 0x1e40 */ struct _MMPTE PageDirectory;
  /* 0x1e48 */ struct _FAST_MUTEX SessionVaLock;
  /* 0x1e80 */ struct _RTL_BITMAP DynamicVaBitMap;
  /* 0x1e90 */ unsigned long DynamicVaHint;
  /* 0x1e94 */ long Padding_428;
  /* 0x1e98 */ struct _MI_SPECIAL_POOL SpecialPool;
  /* 0x1ee8 */ struct _FAST_MUTEX SessionPteLock;
  /* 0x1f20 */ long PoolBigEntriesInUse;
  /* 0x1f24 */ unsigned long PagedPoolPdeCount;
  /* 0x1f28 */ unsigned long SpecialPoolPdeCount;
  /* 0x1f2c */ unsigned long DynamicSessionPdeCount;
  /* 0x1f30 */ struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  /* 0x1f98 */ void* PoolTrackTableExpansion;
  /* 0x1fa0 */ unsigned __int64 PoolTrackTableExpansionSize;
  /* 0x1fa8 */ void* PoolTrackBigPages;
  /* 0x1fb0 */ unsigned __int64 PoolTrackBigPagesSize;
  /* 0x1fb8 */ enum _IO_SESSION_STATE IoState;
  /* 0x1fbc */ unsigned long IoStateSequence;
  /* 0x1fc0 */ struct _KEVENT IoNotificationEvent;
  /* 0x1fd8 */ long __PADDING__[10];
} MM_SESSION_SPACE, *PMM_SESSION_SPACE; /* size: 0x2000 */

typedef union _MMVIEW_CONTROL_AREA
{
  union
  {
    /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Writable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ExceptionForInPageErrors : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Unused : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 UsedForControlArea : 61; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} MMVIEW_CONTROL_AREA, *PMMVIEW_CONTROL_AREA; /* size: 0x0008 */

typedef struct _MMVIEW
{
  /* 0x0000 */ unsigned __int64 PteOffset;
  /* 0x0008 */ unsigned __int64 Entry;
  /* 0x0010 */ union _MMVIEW_CONTROL_AREA u1;
  /* 0x0018 */ struct _LIST_ENTRY ViewLinks;
  /* 0x0028 */ void* SessionViewVa;
  /* 0x0030 */ unsigned long SessionId;
  /* 0x0034 */ unsigned long SessionIdForGlobalSubsections;
} MMVIEW, *PMMVIEW; /* size: 0x0038 */

typedef struct _NONOPAQUE_OPLOCK
{
  /* 0x0000 */ struct _IRP* IrpExclusiveOplock;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ struct _EPROCESS* ExclusiveOplockOwner;
  /* 0x0018 */ struct _ETHREAD* ExclusiveOplockOwnerThread;
  /* 0x0020 */ unsigned char WaiterPriority;
  /* 0x0021 */ char Padding_429[7];
  /* 0x0028 */ struct _LIST_ENTRY IrpOplocksR;
  /* 0x0038 */ struct _LIST_ENTRY IrpOplocksRH;
  /* 0x0048 */ struct _LIST_ENTRY RHBreakQueue;
  /* 0x0058 */ struct _LIST_ENTRY WaitingIrps;
  /* 0x0068 */ struct _LIST_ENTRY DelayAckFileObjectQueue;
  /* 0x0078 */ struct _LIST_ENTRY AtomicQueue;
  /* 0x0088 */ struct _GUID* DeleterParentKey;
  /* 0x0090 */ unsigned long OplockState;
  /* 0x0094 */ long Padding_430;
  /* 0x0098 */ struct _FAST_MUTEX* FastMutex;
} NONOPAQUE_OPLOCK, *PNONOPAQUE_OPLOCK; /* size: 0x00a0 */

typedef struct _WHEA_MEMORY_ERROR_SECTION
{
  /* 0x0000 */ union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
  /* 0x0008 */ union _WHEA_ERROR_STATUS ErrorStatus;
  /* 0x0010 */ unsigned __int64 PhysicalAddress;
  /* 0x0018 */ unsigned __int64 PhysicalAddressMask;
  /* 0x0020 */ unsigned short Node;
  /* 0x0022 */ unsigned short Card;
  /* 0x0024 */ unsigned short Module;
  /* 0x0026 */ unsigned short Bank;
  /* 0x0028 */ unsigned short Device;
  /* 0x002a */ unsigned short Row;
  /* 0x002c */ unsigned short Column;
  /* 0x002e */ unsigned short BitPosition;
  /* 0x0030 */ unsigned __int64 RequesterId;
  /* 0x0038 */ unsigned __int64 ResponderId;
  /* 0x0040 */ unsigned __int64 TargetId;
  /* 0x0048 */ unsigned char ErrorType;
} WHEA_MEMORY_ERROR_SECTION, *PWHEA_MEMORY_ERROR_SECTION; /* size: 0x0049 */

typedef struct _VI_DEADLOCK_RESOURCE
{
  /* 0x0000 */ enum _VI_DEADLOCK_RESOURCE_TYPE Type;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long NodeCount : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned long RecursionCount : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0008 */ void* ResourceAddress;
  /* 0x0010 */ struct _VI_DEADLOCK_THREAD* ThreadOwner;
  /* 0x0018 */ struct _LIST_ENTRY ResourceList;
  union
  {
    /* 0x0028 */ struct _LIST_ENTRY HashChainList;
    /* 0x0028 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  /* 0x0038 */ void* StackTrace[8];
  /* 0x0078 */ void* LastAcquireTrace[8];
  /* 0x00b8 */ void* LastReleaseTrace[8];
} VI_DEADLOCK_RESOURCE, *PVI_DEADLOCK_RESOURCE; /* size: 0x00f8 */

typedef struct _VI_DEADLOCK_THREAD
{
  /* 0x0000 */ struct _KTHREAD* Thread;
  /* 0x0008 */ struct _VI_DEADLOCK_NODE* CurrentSpinNode;
  /* 0x0010 */ struct _VI_DEADLOCK_NODE* CurrentOtherNode;
  union
  {
    /* 0x0018 */ struct _LIST_ENTRY ListEntry;
    /* 0x0018 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  /* 0x0028 */ unsigned long NodeCount;
  /* 0x002c */ unsigned long PagingCount;
  /* 0x0030 */ unsigned char ThreadUsesEresources;
  /* 0x0031 */ char __PADDING__[7];
} VI_DEADLOCK_THREAD, *PVI_DEADLOCK_THREAD; /* size: 0x0038 */

typedef struct _VI_DEADLOCK_NODE
{
  /* 0x0000 */ struct _VI_DEADLOCK_NODE* Parent;
  /* 0x0008 */ struct _LIST_ENTRY ChildrenList;
  /* 0x0018 */ struct _LIST_ENTRY SiblingsList;
  union
  {
    /* 0x0028 */ struct _LIST_ENTRY ResourceList;
    /* 0x0028 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  /* 0x0038 */ struct _VI_DEADLOCK_RESOURCE* Root;
  /* 0x0040 */ struct _VI_DEADLOCK_THREAD* ThreadEntry;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0048 */ unsigned long Active : 1; /* bit position: 0 */
        /* 0x0048 */ unsigned long OnlyTryAcquireUsed : 1; /* bit position: 1 */
        /* 0x0048 */ unsigned long ReleasedOutOfOrder : 1; /* bit position: 2 */
        /* 0x0048 */ unsigned long SequenceNumber : 29; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0048 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x004c */ long ChildrenCount;
  /* 0x0050 */ void* StackTrace[8];
  /* 0x0090 */ void* ParentStackTrace[8];
} VI_DEADLOCK_NODE, *PVI_DEADLOCK_NODE; /* size: 0x00d0 */

typedef struct _MI_REVERSE_VIEW_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ViewLinks;
  union
  {
    /* 0x0010 */ void* SystemCacheVa;
    /* 0x0010 */ void* SessionViewVa;
    /* 0x0010 */ struct _EPROCESS* VadsProcess;
    /* 0x0010 */ unsigned __int64 Type : 2; /* bit position: 0 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0018 */ struct _SUBSECTION* Subsection;
    /* 0x0018 */ unsigned __int64 SubsectionType : 1; /* bit position: 0 */
  }; /* size: 0x0008 */
  /* 0x0020 */ unsigned __int64 SectionOffset;
} MI_REVERSE_VIEW_MAP, *PMI_REVERSE_VIEW_MAP; /* size: 0x0028 */

typedef struct _POP_CURRENT_BROADCAST
{
  /* 0x0000 */ unsigned char InProgress;
  /* 0x0001 */ char Padding_431[3];
  /* 0x0004 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemContext;
  /* 0x0008 */ enum POWER_ACTION PowerAction;
  /* 0x000c */ long Padding_432;
  /* 0x0010 */ struct _POP_DEVICE_SYS_STATE* DeviceState;
} POP_CURRENT_BROADCAST, *PPOP_CURRENT_BROADCAST; /* size: 0x0018 */

typedef struct _PNP_DEVICE_EVENT_LIST
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ long Padding_433;
  /* 0x0008 */ struct _KMUTANT EventQueueMutex;
  /* 0x0040 */ struct _FAST_MUTEX Lock;
  /* 0x0078 */ struct _LIST_ENTRY List;
} PNP_DEVICE_EVENT_LIST, *PPNP_DEVICE_EVENT_LIST; /* size: 0x0088 */

typedef struct _IOV_IRP_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0008 */ struct _KTHREAD* Thread;
  union
  {
    struct
    {
      /* 0x0010 */ short KernelApcDisable;
      /* 0x0012 */ short SpecialApcDisable;
    }; /* size: 0x0004 */
    /* 0x0010 */ unsigned long CombinedApcDisable;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned char Irql;
  /* 0x0015 */ char Padding_434[3];
  /* 0x0018 */ void* StackTrace[13];
} IOV_IRP_TRACE, *PIOV_IRP_TRACE; /* size: 0x0080 */

typedef struct _POP_TRIGGER_WAIT
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0018 */ long Status;
  /* 0x001c */ long Padding_435;
  /* 0x0020 */ struct _LIST_ENTRY Link;
  /* 0x0030 */ struct _POP_ACTION_TRIGGER* Trigger;
} POP_TRIGGER_WAIT, *PPOP_TRIGGER_WAIT; /* size: 0x0038 */

typedef struct _RTLP_RANGE_LIST_ENTRY
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  union
  {
    struct
    {
      /* 0x0010 */ void* UserData;
      /* 0x0018 */ void* Owner;
    } /* size: 0x0010 */ Allocated;
    struct
    {
      /* 0x0010 */ struct _LIST_ENTRY ListHead;
    } /* size: 0x0010 */ Merged;
  }; /* size: 0x0010 */
  /* 0x0020 */ unsigned char Attributes;
  /* 0x0021 */ unsigned char PublicFlags;
  /* 0x0022 */ unsigned short PrivateFlags;
  /* 0x0024 */ long Padding_436;
  /* 0x0028 */ struct _LIST_ENTRY ListEntry;
} RTLP_RANGE_LIST_ENTRY, *PRTLP_RANGE_LIST_ENTRY; /* size: 0x0038 */

struct PROCESSOR_IDLESTATE_POLICY
{
  /* 0x0000 */ unsigned short Revision;
  union
  {
    union
    {
      /* 0x0002 */ unsigned short AsUSHORT;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short AllowScaling : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned short Disabled : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned short Reserved : 14; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ Flags;
  /* 0x0004 */ unsigned long PolicyCount;
  /* 0x0008 */ struct PROCESSOR_IDLESTATE_INFO Policy[3];
}; /* size: 0x0020 */

typedef struct _PTE_TRACKER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _MDL* Mdl;
  /* 0x0018 */ unsigned __int64 Count;
  /* 0x0020 */ void* SystemVa;
  /* 0x0028 */ void* StartVa;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned long Length;
  /* 0x0038 */ unsigned __int64 Page;
  struct /* bitfield */
  {
    /* 0x0040 */ unsigned long IoMapping : 1; /* bit position: 0 */
    /* 0x0040 */ unsigned long Matched : 1; /* bit position: 1 */
    /* 0x0040 */ unsigned long CacheAttribute : 2; /* bit position: 2 */
    /* 0x0040 */ unsigned long Spare : 28; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0044 */ long Padding_437;
  /* 0x0048 */ void* StackTrace[7];
} PTE_TRACKER, *PPTE_TRACKER; /* size: 0x0080 */

typedef struct _SHARED_CACHE_MAP_LIST_CURSOR
{
  /* 0x0000 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} SHARED_CACHE_MAP_LIST_CURSOR, *PSHARED_CACHE_MAP_LIST_CURSOR; /* size: 0x0018 */

typedef struct _PNP_DEVICE_ACTION_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ enum _PNP_DEVICE_ACTION_REQUEST RequestType;
  /* 0x001c */ unsigned char ReorderingBarrier;
  /* 0x001d */ char Padding_438[3];
  /* 0x0020 */ unsigned __int64 RequestArgument;
  /* 0x0028 */ struct _KEVENT* CompletionEvent;
  /* 0x0030 */ long* CompletionStatus;
} PNP_DEVICE_ACTION_ENTRY, *PPNP_DEVICE_ACTION_ENTRY; /* size: 0x0038 */

typedef struct _ETW_REG_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY RegList;
  /* 0x0010 */ struct _ETW_GUID_ENTRY* GuidEntry;
  union
  {
    /* 0x0018 */ struct _ETW_REPLY_QUEUE* ReplyQueue;
    /* 0x0018 */ struct _ETW_QUEUE_ENTRY* ReplySlot[4];
    struct
    {
      /* 0x0018 */ void* Caller;
      /* 0x0020 */ unsigned long SessionId;
    }; /* size: 0x000c */
  }; /* size: 0x0020 */
  union
  {
    /* 0x0038 */ struct _EPROCESS* Process;
    /* 0x0038 */ void* CallbackContext;
  }; /* size: 0x0008 */
  /* 0x0040 */ void* Callback;
  /* 0x0048 */ unsigned short Index;
  union
  {
    /* 0x004a */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x004a */ unsigned char DbgKernelRegistration : 1; /* bit position: 0 */
      /* 0x004a */ unsigned char DbgUserRegistration : 1; /* bit position: 1 */
      /* 0x004a */ unsigned char DbgReplyRegistration : 1; /* bit position: 2 */
      /* 0x004a */ unsigned char DbgClassicRegistration : 1; /* bit position: 3 */
      /* 0x004a */ unsigned char DbgSessionSpaceRegistration : 1; /* bit position: 4 */
      /* 0x004a */ unsigned char DbgModernRegistration : 1; /* bit position: 5 */
      /* 0x004a */ unsigned char DbgClosed : 1; /* bit position: 6 */
      /* 0x004a */ unsigned char DbgInserted : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x004b */ unsigned char EnableMask;
  /* 0x004c */ long __PADDING__[1];
} ETW_REG_ENTRY, *PETW_REG_ENTRY; /* size: 0x0050 */

typedef struct _ETW_FILTER_HEADER
{
  /* 0x0000 */ long FilterFlags;
  /* 0x0004 */ long Padding_439;
  /* 0x0008 */ struct _ETW_FILTER_PID* PidFilter;
  /* 0x0010 */ struct _ETW_FILTER_STRING_TOKEN* ExeFilter;
  /* 0x0018 */ struct _ETW_FILTER_STRING_TOKEN* PkgIdFilter;
  /* 0x0020 */ struct _ETW_FILTER_STRING_TOKEN* PkgAppIdFilter;
  /* 0x0028 */ struct _ETW_PERFECT_HASH_FUNCTION* StackWalkFilter;
  /* 0x0030 */ struct _ETW_PERFECT_HASH_FUNCTION* EventIdFilter;
  /* 0x0038 */ struct _ETW_PAYLOAD_FILTER* PayloadFilter;
  /* 0x0040 */ struct _EVENT_FILTER_HEADER* ProviderSideFilter;
} ETW_FILTER_HEADER, *PETW_FILTER_HEADER; /* size: 0x0048 */

typedef struct _ETW_FILTER_PID
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Pids[8];
} ETW_FILTER_PID, *PETW_FILTER_PID; /* size: 0x0024 */

typedef struct _ETW_FILTER_STRING_TOKEN
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ char Padding_440[6];
  /* 0x0008 */ struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];
} ETW_FILTER_STRING_TOKEN, *PETW_FILTER_STRING_TOKEN; /* size: 0x0018 */

struct _ETW_PERFECT_HASH_FUNCTION;

typedef struct _EVENT_FILTER_HEADER
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Reserved[5];
  /* 0x0008 */ unsigned __int64 InstanceId;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long NextOffset;
} EVENT_FILTER_HEADER, *PEVENT_FILTER_HEADER; /* size: 0x0018 */

typedef struct _ETW_REPLY_QUEUE
{
  /* 0x0000 */ struct _KQUEUE Queue;
  /* 0x0040 */ long EventsLost;
  /* 0x0044 */ long __PADDING__[1];
} ETW_REPLY_QUEUE, *PETW_REPLY_QUEUE; /* size: 0x0048 */

typedef struct _ETW_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _ETWP_NOTIFICATION_HEADER* DataBlock;
  /* 0x0018 */ struct _ETW_REG_ENTRY* RegEntry;
  /* 0x0020 */ struct _ETW_REG_ENTRY* ReplyObject;
  /* 0x0028 */ void* WakeReference;
  /* 0x0030 */ unsigned short RegIndex;
  /* 0x0032 */ unsigned short ReplyIndex;
  /* 0x0034 */ unsigned long Flags;
} ETW_QUEUE_ENTRY, *PETW_QUEUE_ENTRY; /* size: 0x0038 */

typedef struct _ETWP_NOTIFICATION_HEADER
{
  /* 0x0000 */ enum _ETW_NOTIFICATION_TYPE NotificationType;
  /* 0x0004 */ unsigned long NotificationSize;
  /* 0x0008 */ long RefCount;
  /* 0x000c */ unsigned char ReplyRequested;
  /* 0x000d */ char Padding_441[3];
  union
  {
    /* 0x0010 */ unsigned long ReplyIndex;
    /* 0x0010 */ unsigned long Timeout;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ unsigned long ReplyCount;
    /* 0x0014 */ unsigned long NotifyeeCount;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ unsigned __int64 ReplyHandle;
    /* 0x0018 */ void* ReplyObject;
    /* 0x0018 */ unsigned long RegIndex;
  }; /* size: 0x0008 */
  /* 0x0020 */ unsigned long TargetPID;
  /* 0x0024 */ unsigned long SourcePID;
  /* 0x0028 */ struct _GUID DestinationGuid;
  /* 0x0038 */ struct _GUID SourceGuid;
} ETWP_NOTIFICATION_HEADER, *PETWP_NOTIFICATION_HEADER; /* size: 0x0048 */

typedef struct _LPCP_NONPAGED_PORT_QUEUE
{
  /* 0x0000 */ struct _KSEMAPHORE Semaphore;
  /* 0x0020 */ struct _LPCP_PORT_OBJECT* BackPointer;
} LPCP_NONPAGED_PORT_QUEUE, *PLPCP_NONPAGED_PORT_QUEUE; /* size: 0x0028 */

typedef struct _LDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0010 */ struct _LIST_ENTRY InMemoryOrderLinks;
  union
  {
    /* 0x0020 */ struct _LIST_ENTRY InInitializationOrderLinks;
    /* 0x0020 */ struct _LIST_ENTRY InProgressLinks;
  }; /* size: 0x0010 */
  /* 0x0030 */ void* DllBase;
  /* 0x0038 */ void* EntryPoint;
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ long Padding_442;
  /* 0x0048 */ struct _UNICODE_STRING FullDllName;
  /* 0x0058 */ struct _UNICODE_STRING BaseDllName;
  union
  {
    /* 0x0068 */ unsigned char FlagGroup[4];
    /* 0x0068 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0068 */ unsigned long PackagedBinary : 1; /* bit position: 0 */
      /* 0x0068 */ unsigned long MarkedForRemoval : 1; /* bit position: 1 */
      /* 0x0068 */ unsigned long ImageDll : 1; /* bit position: 2 */
      /* 0x0068 */ unsigned long LoadNotificationsSent : 1; /* bit position: 3 */
      /* 0x0068 */ unsigned long TelemetryEntryProcessed : 1; /* bit position: 4 */
      /* 0x0068 */ unsigned long ProcessStaticImport : 1; /* bit position: 5 */
      /* 0x0068 */ unsigned long InLegacyLists : 1; /* bit position: 6 */
      /* 0x0068 */ unsigned long InIndexes : 1; /* bit position: 7 */
      /* 0x0068 */ unsigned long ShimDll : 1; /* bit position: 8 */
      /* 0x0068 */ unsigned long InExceptionTable : 1; /* bit position: 9 */
      /* 0x0068 */ unsigned long ReservedFlags1 : 2; /* bit position: 10 */
      /* 0x0068 */ unsigned long LoadInProgress : 1; /* bit position: 12 */
      /* 0x0068 */ unsigned long ReservedFlags2 : 1; /* bit position: 13 */
      /* 0x0068 */ unsigned long EntryProcessed : 1; /* bit position: 14 */
      /* 0x0068 */ unsigned long ReservedFlags3 : 3; /* bit position: 15 */
      /* 0x0068 */ unsigned long DontCallForThreads : 1; /* bit position: 18 */
      /* 0x0068 */ unsigned long ProcessAttachCalled : 1; /* bit position: 19 */
      /* 0x0068 */ unsigned long ProcessAttachFailed : 1; /* bit position: 20 */
      /* 0x0068 */ unsigned long CorDeferredValidate : 1; /* bit position: 21 */
      /* 0x0068 */ unsigned long CorImage : 1; /* bit position: 22 */
      /* 0x0068 */ unsigned long DontRelocate : 1; /* bit position: 23 */
      /* 0x0068 */ unsigned long CorILOnly : 1; /* bit position: 24 */
      /* 0x0068 */ unsigned long ReservedFlags5 : 3; /* bit position: 25 */
      /* 0x0068 */ unsigned long Redirected : 1; /* bit position: 28 */
      /* 0x0068 */ unsigned long ReservedFlags6 : 2; /* bit position: 29 */
      /* 0x0068 */ unsigned long CompatDatabaseProcessed : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x006c */ unsigned short ObsoleteLoadCount;
  /* 0x006e */ unsigned short TlsIndex;
  /* 0x0070 */ struct _LIST_ENTRY HashLinks;
  /* 0x0080 */ unsigned long TimeDateStamp;
  /* 0x0084 */ long Padding_443;
  /* 0x0088 */ struct _ACTIVATION_CONTEXT* EntryPointActivationContext;
  /* 0x0090 */ void* Spare;
  /* 0x0098 */ struct _LDR_DDAG_NODE* DdagNode;
  /* 0x00a0 */ struct _LIST_ENTRY NodeModuleLink;
  /* 0x00b0 */ struct _LDRP_DLL_SNAP_CONTEXT* SnapContext;
  /* 0x00b8 */ void* ParentDllBase;
  /* 0x00c0 */ void* SwitchBackContext;
  /* 0x00c8 */ struct _RTL_BALANCED_NODE BaseAddressIndexNode;
  /* 0x00e0 */ struct _RTL_BALANCED_NODE MappingInfoIndexNode;
  /* 0x00f8 */ unsigned __int64 OriginalBase;
  /* 0x0100 */ union _LARGE_INTEGER LoadTime;
  /* 0x0108 */ unsigned long BaseNameHashValue;
  /* 0x010c */ enum _LDR_DLL_LOAD_REASON LoadReason;
  /* 0x0110 */ unsigned long ImplicitPathOptions;
  /* 0x0114 */ long __PADDING__[1];
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY; /* size: 0x0118 */

typedef struct _LDRP_CSLIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Tail;
} LDRP_CSLIST, *PLDRP_CSLIST; /* size: 0x0008 */

typedef struct _LDR_DDAG_NODE
{
  /* 0x0000 */ struct _LIST_ENTRY Modules;
  /* 0x0010 */ struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;
  /* 0x0018 */ unsigned long LoadCount;
  /* 0x001c */ unsigned long ReferenceCount;
  /* 0x0020 */ unsigned long DependencyCount;
  /* 0x0024 */ long Padding_444;
  union
  {
    /* 0x0028 */ struct _LDRP_CSLIST Dependencies;
    /* 0x0028 */ struct _SINGLE_LIST_ENTRY RemovalLink;
  }; /* size: 0x0008 */
  /* 0x0030 */ struct _LDRP_CSLIST IncomingDependencies;
  /* 0x0038 */ enum _LDR_DDAG_STATE State;
  /* 0x003c */ long Padding_445;
  /* 0x0040 */ struct _SINGLE_LIST_ENTRY CondenseLink;
  /* 0x0048 */ unsigned long PreorderNumber;
  /* 0x004c */ unsigned long LowestLink;
} LDR_DDAG_NODE, *PLDR_DDAG_NODE; /* size: 0x0050 */

typedef struct _LDR_SERVICE_TAG_RECORD
{
  /* 0x0000 */ struct _LDR_SERVICE_TAG_RECORD* Next;
  /* 0x0008 */ unsigned long ServiceTag;
  /* 0x000c */ long __PADDING__[1];
} LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD; /* size: 0x0010 */

typedef struct _VF_KE_CRITICAL_REGION_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0008 */ void* StackTrace[7];
} VF_KE_CRITICAL_REGION_TRACE, *PVF_KE_CRITICAL_REGION_TRACE; /* size: 0x0040 */

typedef struct _NT_TIB32
{
  /* 0x0000 */ unsigned long ExceptionList;
  /* 0x0004 */ unsigned long StackBase;
  /* 0x0008 */ unsigned long StackLimit;
  /* 0x000c */ unsigned long SubSystemTib;
  union
  {
    /* 0x0010 */ unsigned long FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long ArbitraryUserPointer;
  /* 0x0018 */ unsigned long Self;
} NT_TIB32, *PNT_TIB32; /* size: 0x001c */

typedef struct _GDI_TEB_BATCH32
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH32, *PGDI_TEB_BATCH32; /* size: 0x04e0 */

typedef struct _TEB32
{
  /* 0x0000 */ struct _NT_TIB32 NtTib;
  /* 0x001c */ unsigned long EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID32 ClientId;
  /* 0x0028 */ unsigned long ActiveRpcHandle;
  /* 0x002c */ unsigned long ThreadLocalStoragePointer;
  /* 0x0030 */ unsigned long ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ unsigned long CsrClientThread;
  /* 0x0040 */ unsigned long Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ unsigned long WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ unsigned long SystemReserved1[54];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ unsigned long ActivationContextStackPointer;
  /* 0x01ac */ unsigned char SpareBytes[36];
  /* 0x01d0 */ unsigned long TxFsContext;
  /* 0x01d4 */ struct _GDI_TEB_BATCH32 GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID32 RealClientId;
  /* 0x06bc */ unsigned long GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ unsigned long GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ unsigned long glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ unsigned long glReserved2;
  /* 0x0be0 */ unsigned long glSectionInfo;
  /* 0x0be4 */ unsigned long glSection;
  /* 0x0be8 */ unsigned long glTable;
  /* 0x0bec */ unsigned long glCurrentRC;
  /* 0x0bf0 */ unsigned long glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _STRING32 StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0a */ char Padding_446[2];
  /* 0x0e0c */ unsigned long DeallocationStack;
  /* 0x0e10 */ unsigned long TlsSlots[64];
  /* 0x0f10 */ struct LIST_ENTRY32 TlsLinks;
  /* 0x0f18 */ unsigned long Vdm;
  /* 0x0f1c */ unsigned long ReservedForNtRpc;
  /* 0x0f20 */ unsigned long DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ unsigned long Instrumentation[9];
  /* 0x0f50 */ struct _GUID ActivityId;
  /* 0x0f60 */ unsigned long SubProcessTag;
  /* 0x0f64 */ unsigned long PerflibData;
  /* 0x0f68 */ unsigned long EtwTraceData;
  /* 0x0f6c */ unsigned long WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x0f74 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x0f74 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x0f74 */ unsigned char ReservedPad0;
      /* 0x0f75 */ unsigned char ReservedPad1;
      /* 0x0f76 */ unsigned char ReservedPad2;
      /* 0x0f77 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0f78 */ unsigned long GuaranteedStackBytes;
  /* 0x0f7c */ unsigned long ReservedForPerf;
  /* 0x0f80 */ unsigned long ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ unsigned long SavedPriorityState;
  /* 0x0f8c */ unsigned long ReservedForCodeCoverage;
  /* 0x0f90 */ unsigned long ThreadPoolData;
  /* 0x0f94 */ unsigned long TlsExpansionSlots;
  /* 0x0f98 */ unsigned long MuiGeneration;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ unsigned long NlsCache;
  /* 0x0fa4 */ unsigned long pShimData;
  /* 0x0fa8 */ unsigned short HeapVirtualAffinity;
  /* 0x0faa */ unsigned short LowFragHeapDataSlot;
  /* 0x0fac */ unsigned long CurrentTransactionHandle;
  /* 0x0fb0 */ unsigned long ActiveFrame;
  /* 0x0fb4 */ unsigned long FlsData;
  /* 0x0fb8 */ unsigned long PreferredLanguages;
  /* 0x0fbc */ unsigned long UserPrefLanguages;
  /* 0x0fc0 */ unsigned long MergedPrefLanguages;
  /* 0x0fc4 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x0fc8 */ volatile unsigned short CrossTebFlags;
    /* 0x0fc8 */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0fca */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x0fca */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x0fca */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x0fca */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x0fca */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x0fca */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x0fca */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x0fca */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x0fca */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x0fca */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x0fca */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x0fca */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x0fca */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x0fca */ unsigned short SpareSameTebBits : 4; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0fcc */ unsigned long TxnScopeEnterCallback;
  /* 0x0fd0 */ unsigned long TxnScopeExitCallback;
  /* 0x0fd4 */ unsigned long TxnScopeContext;
  /* 0x0fd8 */ unsigned long LockCount;
  /* 0x0fdc */ unsigned long SpareUlong0;
  /* 0x0fe0 */ unsigned long ResourceRetValue;
  /* 0x0fe4 */ unsigned long ReservedForWdf;
} TEB32, *PTEB32; /* size: 0x0fe8 */

typedef struct _VF_AVL_TREE
{
  /* 0x0000 */ unsigned __int64 NodeRangeSize;
  /* 0x0008 */ volatile unsigned __int64 NodeCount;
  /* 0x0010 */ struct _VF_AVL_TABLE* Tables;
  /* 0x0018 */ unsigned long TablesNo;
  union
  {
    union
    {
      /* 0x001c */ unsigned long NodeSize;
      /* 0x001c */ unsigned long UseLookaside;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} VF_AVL_TREE, *PVF_AVL_TREE; /* size: 0x0020 */

typedef struct _VF_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE RtlTable;
  /* 0x0068 */ struct _VF_AVL_TREE_NODE* ReservedNode;
  /* 0x0070 */ void* NodeToFree;
  /* 0x0078 */ long Padding_447[2];
  /* 0x0080 */ volatile long Lock;
  /* 0x0084 */ long __PADDING__[15];
} VF_AVL_TABLE, *PVF_AVL_TABLE; /* size: 0x00c0 */

typedef struct _NB10
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Offset;
  /* 0x0008 */ unsigned long TimeStamp;
  /* 0x000c */ unsigned long Age;
  /* 0x0010 */ char PdbName[1];
  /* 0x0011 */ char __PADDING__[3];
} NB10, *PNB10; /* size: 0x0014 */

typedef union _CVDD
{
  union
  {
    /* 0x0000 */ unsigned long Signature;
    /* 0x0000 */ struct _NB10 NB10;
    /* 0x0000 */ struct _RSDS RsDs;
  }; /* size: 0x001c */
} CVDD, *PCVDD; /* size: 0x001c */

typedef struct _PROVIDER_BINARY_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned char ConsumersNotified;
  /* 0x0011 */ unsigned char Spare[3];
  /* 0x0014 */ unsigned long DebugIdSize;
  /* 0x0018 */ union _CVDD DebugId;
  /* 0x0034 */ long __PADDING__[1];
} PROVIDER_BINARY_ENTRY, *PPROVIDER_BINARY_ENTRY; /* size: 0x0038 */

typedef struct _VF_WATCHDOG_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ unsigned long DueTickCount;
  /* 0x001c */ volatile unsigned char Inserted;
  /* 0x001d */ char TrackedStackLocation;
  /* 0x001e */ unsigned short CancelTimeoutTicks;
} VF_WATCHDOG_IRP, *PVF_WATCHDOG_IRP; /* size: 0x0020 */

typedef struct _OBJECT_SYMBOLIC_LINK
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ struct _UNICODE_STRING LinkTarget;
  /* 0x0018 */ unsigned long DosDeviceDriveIndex;
  /* 0x001c */ long __PADDING__[1];
} OBJECT_SYMBOLIC_LINK, *POBJECT_SYMBOLIC_LINK; /* size: 0x0020 */

typedef struct _VF_TRACKER
{
  /* 0x0000 */ unsigned long TrackerFlags;
  /* 0x0004 */ unsigned long TrackerSize;
  /* 0x0008 */ unsigned long TrackerIndex;
  /* 0x000c */ unsigned long TraceDepth;
} VF_TRACKER, *PVF_TRACKER; /* size: 0x0010 */

typedef struct _CALL_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ struct _LIST_ENTRY HashTable[64];
} CALL_PERFORMANCE_DATA, *PCALL_PERFORMANCE_DATA; /* size: 0x0408 */

typedef struct _STACK_TABLE
{
  /* 0x0000 */ unsigned short NumStackTraces;
  /* 0x0002 */ unsigned short TraceCapacity;
  /* 0x0004 */ long Padding_448;
  /* 0x0008 */ struct _OBJECT_REF_TRACE* StackTrace[16];
  /* 0x0088 */ unsigned short StackTableHash[16381];
  /* 0x8082 */ char __PADDING__[6];
} STACK_TABLE, *PSTACK_TABLE; /* size: 0x8088 */

typedef struct _OBJECT_REF_TRACE
{
  /* 0x0000 */ void* StackTrace[16];
} OBJECT_REF_TRACE, *POBJECT_REF_TRACE; /* size: 0x0080 */

typedef struct _DEFERRED_WRITE
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ long Padding_449;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ unsigned long BytesToWrite;
  /* 0x0014 */ long Padding_450;
  /* 0x0018 */ struct _LIST_ENTRY DeferredWriteLinks;
  /* 0x0028 */ struct _KEVENT* Event;
  /* 0x0030 */ void* PostRoutine /* function */;
  /* 0x0038 */ void* Context1;
  /* 0x0040 */ void* Context2;
} DEFERRED_WRITE, *PDEFERRED_WRITE; /* size: 0x0048 */

/*
?BTreeChangeKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAKPEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeDelete@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@KPEAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAUPATH_ENTRY@1@KPEAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAUPATH_ENTRY@1@KPEAUSEARCH_RESULT@1@@Z
?BTreeFindLeafSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAU23@K@Z
?BTreeFindLeafSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAU23@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAKPEAUSEARCH_RESULT@1@KPEAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAKPEAUSEARCH_RESULT@1@KPEAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAKPEAUSEARCH_RESULT@1@KPEAUPATH_ENTRY@1@@Z
?BTreeInsert@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@PEAU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@PEAUSEARCH_RESULT@1@@Z
?BTreeInsert@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAJPEAU1@PEAUSMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@PEAUSEARCH_RESULT@1@@Z
?BTreeInsertEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@PEAK@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@PEAT_SM_PAGE_KEY@@@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@PEAT_SM_PAGE_KEY@@@Z
?BTreeIteratorAttachEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAUITERATOR@1@PEAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAUITERATOR@1@PEAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAUITERATOR@1@PEAU1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUITERATOR@1@PEAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAXPEAU1@PEAUITERATOR@1@PEAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUITERATOR@1@PEAUSEARCH_RESULT@1@@Z
?BTreeMergeNodes@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@PEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNewNode@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PEAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@KK@Z
?BTreeNodeFree@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeRedistribute@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@KPEAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAJPEAU1@T_SM_PAGE_KEY@@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@T_SM_PAGE_KEY@@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultInit@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultInit@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultInitEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAUSEARCH_RESULT@1@PEAUPATH_ENTRY@1@KK@Z
?BTreeSearchResultInitEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAXPEAUSEARCH_RESULT@1@PEAUPATH_ENTRY@1@KK@Z
?BTreeSearchResultInitEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAXPEAUSEARCH_RESULT@1@PEAUPATH_ENTRY@1@KK@Z
?BTreeSplitChild@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@PEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU_SINGLE_LIST_ENTRY@@P6AJPEAX3PEA_K@Z3PEAPEAU23@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SAJPEAU1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU_SINGLE_LIST_ENTRY@@P6AJPEAX3PEA_K@Z3PEAPEAU23@@Z
?CompareLangIDs@@YAHPEBX0@Z
?CompareLangName@@YAHPEBX0@Z
?IsNeutralLanguageItem@@YAHPEBUCultureDataType@@@Z
?NpCleanup@NP_CONTEXT@@SAXPEAU1@K@Z
?NpGetResidentLeaf@NP_CONTEXT@@SAPEAUB_TREE_NODE_HDR@@PEAUNP_CTX@1@PEAT_NP_LEAF_PTR@@@Z
?NpLeafDerefInternal@NP_CONTEXT@@SAXPEAUNP_CTX@1@PEAPEAX@Z
?NpLeafRefInternal@NP_CONTEXT@@SAPEAXPEAUNP_CTX@1@PEAPEAXK@Z
?NpLeafRemoveInternal@NP_CONTEXT@@SAPEAXPEAUNP_CTX@1@PEAPEAX@Z
?NpNodeAllocate@NP_CONTEXT@@SAPEAXPEAUNP_CTX@1@KK@Z
?NpNodeFree@NP_CONTEXT@@SAXPEAUNP_CTX@1@PEAXK@Z
?NpStart@NP_CONTEXT@@SAJPEAU1@PEAU_NP_PARAMETERS@1@@Z
?NpiGetReservedBuffer@NP_CONTEXT@@SAPEAXPEAU1@PEAUNP_CTX@1@@Z
?NpiLeafPageIn@NP_CONTEXT@@SAXPEAU1@PEAUNP_CTX@1@PEAT_NP_LEAF_PTR@@@Z
?NpiPerformPageOut@NP_CONTEXT@@SAJPEAU1@PEAUNP_CTX@1@@Z
?NpiRebaseCallback@NP_CONTEXT@@SAJPEAX0PEA_K@Z
?NpiTreeWalkCallback@NP_CONTEXT@@SAJPEAX0PEA_K@Z
?RtlStringCbCopyUnicodeString@@YAJPEAG_KPEBU_UNICODE_STRING@@@Z
?SmAsyncReadQueueInsert@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_ASYNC_READ_QUEUE@1@PEAU_SM_ASYNC_DIRECT_READ_CTX@1@K@Z
?SmAsyncReadQueueWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAX@Z
?SmEmptyQueueToStores@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@K@Z
?SmEmptyStores@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@KK@Z
?SmEmptyWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAX@Z
?SmEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KPEAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmFeAddComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KPEAU_SM_PAGE_KEY_DESCRIPTOR@@KK@Z
?SmFeAddFirstPass@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KPEAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@PEAU_SM_PAGE_KEY_DESCRIPTOR@@K@Z
?SmFeAddInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KPEAU_SM_PAGE_KEY_DESCRIPTOR@@KPEAU_SM_QUEUE_CONTEXT@1@@Z
?SmFeCheckPresent@?$SMKM_STORE_MGR@USM_TRAITS@@@@SA?AT_SM_FE_CHECK_PRESENT_BITMAP@1@PEAU1@PEAT_SM_PAGE_KEY@@KK@Z
?SmFeEmpty@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@@Z
?SmFeEmptyComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@K@Z
?SmFeEmptyInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@K@Z
?SmFeEvictComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KK@Z
?SmFeEvictFirstPass@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@PEAK2PEAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@K@Z
?SmFeEvictInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@PEAK2PEAU_SM_PAGE_KEY_DESCRIPTOR@@2K@Z
?SmFeEvictQueued@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@K@Z
?SmFeMakePresentForUnpersist@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KK@Z
?SmFeReadFailComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KK@Z
?SmFeReadInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SA?AT_SM_FE_CHECK_PRESENT_BITMAP@1@PEAU1@PEAT_SM_PAGE_KEY@@KPEA_K@Z
?SmFeSetEvictFailed@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KPEAU_SM_PAGE_KEY_DESCRIPTOR@@PEAKK@Z
?SmFeStoreDelete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@K@Z
?SmFeStoreEtaQuery@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@KKPEA_K@Z
?SmFeStoreEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SA?AT_SM_FE_IO_COMPLETION_FLAGS@1@PEAU1@PEAT_SM_PAGE_KEY@@KPEAU_SM_PAGE_KEY_DESCRIPTOR@@K@Z
?SmFeUnpersistStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@KW4_SM_STORE_UNPERSIST_PHASE@@@Z
?SmInitialize@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SMKM_STORE_MGR_PARAMS@@@Z
?SmIoCtxPrepareToQueue@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SM_IO_CONTEXT@1@PEAU1@KPEAU_SM_WORK_ITEM@1@PEAU_SM_QUEUE_CONTEXT@1@@Z
?SmIoCtxQueueWork@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SM_IO_CONTEXT@1@PEAU1@KPEAX@Z
?SmIoCtxWorkItemComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU_ST_WORK_ITEM_HDR@@PEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmKmProbeAndLockAddress@@YAPEAU_MDL@@PEAX_K@Z
?SmLogRemoveBatch@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SM_PAGE_KEY_DESCRIPTOR@@PEAKKKK@Z
?SmPageCheckPresent@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@K@Z
?SmPageEvict@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KKPEAX@Z
?SmPageRead@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAT_SM_PAGE_KEY@@PEAU_MDL@@PEAXPEAU_IO_STATUS_BLOCK@@@Z
?SmPageWrite@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAT_SM_PAGE_KEY@@PEAU_SM_PAGE_KEY_DESCRIPTOR@@T_SM_PAGE_ADD_PARAM@@PEAU_MDL@@PEAXPEAU_IO_STATUS_BLOCK@@@Z
?SmPickStoreForWrite@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@K@Z
?SmProcessAddCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SM_WORK_ITEM@1@KPEAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmProcessIoCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SA?AT_SM_FE_IO_COMPLETION_FLAGS@1@PEAU1@PEAT_SM_PAGE_KEY@@KKJT_SM_LOG_ENTRY_FLAGS@@K@Z
?SmProcessReadCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SM_WORK_ITEM@1@KPEAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmQueueContextCleanup@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SM_QUEUE_CONTEXT@1@@Z
?SmReadPickStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAT_SM_PAGE_KEY@@KPEAK2@Z
?SmStCleanup@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?SmStDirectRead@?$SMKM_STORE@USM_TRAITS@@@@SAKPEAU1@PEAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@@Z
?SmStEtwFillStoreEvent@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStEtwFillStoreStatsEvent@?$SMKM_STORE@USM_TRAITS@@@@SAKPEAU1@PEAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStFindResetLockedRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEAU_SM_RESET_LOCKED_REGION@@PEAU1@KPEAX@Z
?SmStGetStoreStats@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@W4_ST_STATS_LEVEL@@PEAU_ST_STATS@@PEAK@Z
?SmStHelperSendCommand@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@W4_SMKM_STORE_HELPER_COMMAND@@PEAU_SMKM_STORE_HELPER_PARAMS@@K@Z
?SmStInitialize@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?SmStMakeRegionResetBitmap@?$SMKM_STORE@USM_TRAITS@@@@SAKPEAU1@KKPEAK1@Z
?SmStMapPhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEAXPEAU1@KKKK@Z
?SmStMapResetRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEAXPEAU1@KKKK@Z
?SmStReleaseResetRegion@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@KK@Z
?SmStStart@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_SMST_PARAMETERS@@@Z
?SmStStatsUpdate@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@J@Z
?SmStUnhandledExceptionFilter@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAXPEAU_EXCEPTION_POINTERS@@@Z
?SmStUnmapResetRegion@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@KKKPEAXK@Z
?SmStWorkItemGet@?$SMKM_STORE@USM_TRAITS@@@@SAPEAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@PEAU1@PEAK@Z
?SmStWorkItemQueue@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_ST_WORK_ITEM_HDR@@K@Z
?SmStWorker@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAX@Z
?SmStWorkerThread@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAX@Z
?SmStoreActionNotify@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@W4_SM_STORE_ACTION_TYPE@@PEAX@Z
?SmStoreContentsRundown@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmStoreMgrCallback@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SMKM_STORE_LIST@@PEAXW4_SMKM_CALLBACK_TYPE@@@Z
?SmStorePrepare@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@@Z
?SmStoreRequest@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@KPEAU_SM_WORK_ITEM@1@PEAU_KEVENT@@PEAU_IO_STATUS_BLOCK@@@Z
?SmStoreRequestEx@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@PEAU_SM_WORK_ITEM@1@PEAU_KEVENT@@PEAU_IO_STATUS_BLOCK@@@Z
?SmStoreTerminate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@W4_ST_ETW_TERMINATION_REASON@@J@Z
?SmStoresContentsRundown@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@@Z
?SmStoresEtaCheck@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@@Z
?SmWdCompleteWorkItems@@YAXPEAU_PF_QUEUE@@PEAXJK@Z
?SmWdRemoveWorkItems@@YAXPEAU_SMKM_STORE_QUEUE@@PEAU_PF_QUEUE@@K@Z
?SmWorkItemFree@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@PEAU_ST_WORK_ITEM_HDR@@PEAJ@Z
?SmpDeviceIoCompletion@@YAJPEAU_DEVICE_OBJECT@@PEAU_IRP@@PEAX@Z
?SmpIoCompletionApc@@YAXPEAXPEAU_IO_STATUS_BLOCK@@K@Z
?SmpPageEvict@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KKPEAX@Z
?SmpStoreMgrCallback@@YAJPEAU_SMKM_STORE_LIST@@PEAXW4_SMKM_CALLBACK_TYPE@@@Z
?StAcquireReadContext@?$ST_STORE@USM_TRAITS@@@@SAPEAXPEAU1@@Z
?StAddRemoveRegions@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?StCompactRegion@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEADK@Z
?StCompactRegions@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEADK1KKPEAK@Z
?StCompactionFindEmptiest@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEAPEAT_ST_REGION_STATE@1@KK@Z
?StCompactionPerformFile@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@K@Z
?StCompactionPerformInMem@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StCompactionPickPriority@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEAPEAT_ST_REGION_STATE@1@K1K@Z
?StCompactionWorker@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StCopyIoStats@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_IO_STATS@@PEAU_ST_IO_COUNTS@@@Z
?StDeviceIoBuild@?$ST_STORE@USM_TRAITS@@@@SAPEAU_ST_WORK_ITEM@1@PEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_LOCATION@1@KPEAX@Z
?StDeviceIoIssue@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_PF_QUEUE@@@Z
?StDeviceWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmCheckForCompaction@?$ST_STORE@USM_TRAITS@@@@SA?AW4_ST_COMPACTION_CHECK_RESULT@@PEAU_ST_DATA_MGR@1@@Z
?StDmCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@K@Z
?StDmComputeSpaceUsageForPriority@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@KPEAK11@Z
?StDmCurrentRegionFind@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@K@Z
?StDmCurrentRegionSet@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KK@Z
?StDmDeviceError@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@W4_ST_DEVICE_FAIL_TYPE@1@J@Z
?StDmDeviceIoCompletion@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmDeviceIoListBuild@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_LOCATION@1@KPEAXPEAU_PF_QUEUE@@PEAK@Z
?StDmDeviceIoTransfer@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@PEAU_ST_DEVICE_IO@1@@Z
?StDmEtaPerformIo@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KK@Z
?StDmEtaQueueRefresh@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmEtaRefresh@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmEtwPageRundown@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmEtwRegionRundown@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmGetSpaceStats@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAK1@Z
?StDmGetStatsBitmap@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KPEAEPEA_K@Z
?StDmInitialize@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@0@Z
?StDmLazyRegionsWorker@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@K@Z
?StDmLazyRemoveKeysWorker@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmLazyRemoveStatePrepare@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAT_SM_PAGE_KEY@@@Z
?StDmLazyRemoveStateUpdate@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAT_SM_PAGE_KEY@@K@Z
?StDmLazyWorkItemQueue@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmPageAdd@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmPageEntryLazyRemove@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_ENTRY@1@PEAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@@Z
?StDmPageError@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAD1PEAU_ST_PAGE_LOCATION@1@J@Z
?StDmPageMove@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@T_SM_PAGE_KEY@@K@Z
?StDmPageRemove@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@K@Z
?StDmPageRetrieve@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_READ_CONTEXT@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmPagesLazyRemove@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_SEARCH_RESULTS@1@T_SM_PAGE_KEY@@K@Z
?StDmPickRandomRegion@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@@Z
?StDmRegionEvict@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_SEARCH_RESULTS@1@PEAT_SM_PAGE_KEY@@KKKKK@Z
?StDmRegionGetKeys@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_SEARCH_RESULTS@1@KKKPEAT_SM_PAGE_KEY@@PEAK@Z
?StDmRegionRemove@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAK@Z
?StDmResetRegionEvict@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAU_STDM_SEARCH_RESULTS@1@PEAT_SM_PAGE_KEY@@KT_SM_RESET_UNDO_FAILED_INFO@@KK@Z
?StDmSinglePageCopy@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAXPEAD2PEAU_ST_PAGE_LOCATION@1@@Z
?StDmSinglePageRetrieveSync@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@T_SM_PAGE_KEY@@PEAXPEAU_ST_PAGE_ENTRY@1@@Z
?StDmSinglePageTransfer@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAXPEAD11PEAU_ST_PAGE_LOCATION@1@@Z
?StDmSparseBitmapAlloc@?$ST_STORE@USM_TRAITS@@@@SAPEAX_K@Z
?StDmSparseBitmapFree@?$ST_STORE@USM_TRAITS@@@@SAXPEAX@Z
?StDmStart@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_DATA_MGR@1@PEAU_STDM_PARAMETERS@@PEAU_RTL_BITMAP@@PEAKK@Z
?StDmStartDataLossCheck@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmUpdateRegionLazyCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@KK@Z
?StDmpCurrentRegionWrite@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@@Z
?StDmpSinglePageAdd@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_IO_PARAMS@1@@Z
?StDmpSinglePageFindSpace@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KPEAPEADPEAK@Z
?StDmpSinglePageInsert@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_IO_PARAMS@1@PEAU_ST_PAGE_ENTRY@1@@Z
?StDmpSinglePageRetrieve@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_READ_CONTEXT@1@PEAU_ST_IO_PARAMS@1@PEAXPEAU_ST_PAGE_LOCATION@1@@Z
?StDrainReadContextList@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?StEmptyStore@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@K@Z
?StGetStats@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StGetStatsWorker@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@W4_ST_STATS_LEVEL@@PEAU_ST_STATS@@PEAK@Z
?StInitialize@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?StLazyWorkMgrQueueWork@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@W4_ST_LAZY_WORK_TYPE@1@KK@Z
?StLazyWorkMgrResetIdle@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrRunExpiredWork@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@_K@Z
?StLazyWorkMgrSetSchedule@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@_K@Z
?StMapAndLockRegion@?$ST_STORE@USM_TRAITS@@@@SAPEADPEAU_ST_DATA_MGR@1@KKK@Z
?StMetaRegionsUpdate@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StNpEnumBTreeNodes@?$ST_STORE@USM_TRAITS@@@@SAJPEAUNP_CTX@NP_CONTEXT@@P6AJPEAX1PEA_K@Z1@Z
?StNpLeafDelete@?$ST_STORE@USM_TRAITS@@@@SAXPEAUNP_CTX@NP_CONTEXT@@_K@Z
?StNpLeafPageIn@?$ST_STORE@USM_TRAITS@@@@SAJPEAUNP_CTX@NP_CONTEXT@@PEAX_K@Z
?StNpLeafPageOut@?$ST_STORE@USM_TRAITS@@@@SA_KPEAUNP_CTX@NP_CONTEXT@@PEAX@Z
?StPageCopyExceptionFilter@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAD1_KKPEAU_EXCEPTION_POINTERS@@@Z
?StRegionFindCompact@?$ST_STORE@USM_TRAITS@@@@SAPEAT_ST_REGION_STATE@1@PEAU_ST_DATA_MGR@1@KK@Z
?StRegionFindRepurpose@?$ST_STORE@USM_TRAITS@@@@SAPEAT_ST_REGION_STATE@1@PEAU_ST_DATA_MGR@1@K@Z
?StRegionLATRebase@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@K@Z
?StReleaseReadContext@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@PEAX@Z
?StReleaseRegion@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@KK@Z
?StStagingRegionCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAU_ST_STAGING_REGION@1@@Z
?StStagingRegionFind@?$ST_STORE@USM_TRAITS@@@@SAPEAU_ST_STAGING_REGION@1@PEAU_ST_DATA_MGR@1@K@Z
?StStagingRegionIssueIo@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_STAGING_REGION@1@K@Z
?StStagingRegionMap@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KPEAPEAD@Z
?StStagingRegionReuse@?$ST_STORE@USM_TRAITS@@@@SAPEAU_ST_STAGING_REGION@1@PEAU_ST_DATA_MGR@1@@Z
?StStagingRegionStart@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_STAGING_REGION@1@K@Z
?StStart@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_CREATE_PARAMS@@@Z
?StStoreWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StUnlockAndUnmapRegion@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@KPEAD@Z
?StValidateResetRegion@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@K@Z
?StWorkItemProcess@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StpKeyCompare@?$ST_STORE@USM_TRAITS@@@@SAHPEBX0@Z
?StpLocationCompare@?$ST_STORE@USM_TRAITS@@@@SAHPEBX0@Z
?StringCchCopyNW@@YAJPEAG_KPEBG1@Z
ADD_MAP_REGISTERS
AdtpAppendString
AdtpAppendZString
AdtpBuildAccessesString
AdtpBuildGuidString
AdtpBuildHexInt64String
AdtpBuildIPv4Strings
AdtpBuildIPv6Strings
AdtpBuildLogonIdStrings
AdtpBuildMacStrings
AdtpBuildMessageString
AdtpBuildObjectTypeStrings
AdtpBuildRegistryValueString
AdtpBuildReplacementString
AdtpBuildSidListString
AdtpBuildSockAddrString
AdtpBuildStringListString
AdtpBuildUlongString
AdtpBuildUserAccountControlString
AdtpCleanupParameterAllocations
AdtpDsGuidToString
AdtpEtwBuildDashString
AdtpEtwBuildString
AdtpGetCategoryAndSubCategoryId
AdtpInitializeAuditingCommon
AdtpInitializeDriveLetters
AdtpIsCorrectlyFormedUnicodeString
AdtpLookupDriveLetter
AdtpNormalizeAuditInfo
AdtpObjsInitialize
AdtpPackageParameters
AdtpSubstituteDriveLetter
AdtpWriteToEtw
AhcAlloc
AhcCacheQueryHwId
AhcFreeUnicodeString
AhcTracePrintf
AlpcAddHandleTableEntry
AlpcConnectionDeleteProcedure
AlpcConnectionDestroyProcedure
AlpcDeleteBlobByHandle
AlpcGetHeaderSize
AlpcGetMessageAttribute
AlpcHandleDataDeleteProcedure
AlpcHandleDataDestroyProcedure
AlpcInitializeHandleTable
AlpcInitializeMessageAttribute
AlpcMessageDeleteProcedure
AlpcMessageDestroyProcedure
AlpcReferenceBlobByHandle
AlpcRegionDeleteProcedure
AlpcRegionDestroyProcedure
AlpcRegisterLogRoutine
AlpcReserveDeleteProcedure
AlpcReserveDestroyProcedure
AlpcSectionDeleteProcedure
AlpcSectionDestroyProcedure
AlpcSecurityDeleteProcedure
AlpcSecurityDestroyProcedure
AlpcUnregisterLogRoutine
AlpcViewDeleteProcedure
AlpcViewDestroyProcedure
AlpciDestroyDeferredMessageContext
AlpcpAcceptConnectPort
AlpcpAdjustCompletionListConcurrencyCount
AlpcpAllocateBlob
AlpcpAllocateBuffer
AlpcpAllocateCompletionPacketLookaside
AlpcpAllocateFromBitmap
AlpcpAllocateMessage
AlpcpAllocateMessageFromExtendedTables
AlpcpAllocateMessageFunction
AlpcpAllocateMessageLog
AlpcpAllocateSnapshotMessageLog
AlpcpAssociateIoCompletionPort
AlpcpCancelMessage
AlpcpCancelMessagesByRequestor
AlpcpCaptureAttributes
AlpcpCaptureContextAttribute
AlpcpCaptureContextAttribute32
AlpcpCaptureHandleAttribute
AlpcpCaptureHandleAttribute32
AlpcpCaptureHandleAttributeInternal
AlpcpCaptureMessageData
AlpcpCaptureMessageDataSafe
AlpcpCaptureSecurityAttribute
AlpcpCaptureSecurityAttribute32
AlpcpCaptureSecurityAttributeInternal
AlpcpCaptureViewAttribute
AlpcpCaptureViewAttribute32
AlpcpCaptureViewAttributeInternal
AlpcpCheckConnectionSecurity
AlpcpCleanupProcessViews
AlpcpClosePort
AlpcpCompleteDeferSignalRequestAndWait
AlpcpCompleteDispatchMessage
AlpcpConnectPort
AlpcpCopyRequestData
AlpcpCreateClientPort
AlpcpCreateConnectionPort
AlpcpCreateRegion
AlpcpCreateReserve
AlpcpCreateSection
AlpcpCreateSectionView
AlpcpCreateSecurityContext
AlpcpCreateView
AlpcpDeferredFreeCompletionPacketLookaside
AlpcpDeleteBlob
AlpcpDeletePort
AlpcpDestroyBlob
AlpcpDestroyPort
AlpcpDisconnectPort
AlpcpDispatchCloseMessage
AlpcpDispatchConnectionRequest
AlpcpDispatchNewMessage
AlpcpDispatchReplyToPort
AlpcpDispatchReplyToWaitingThread
AlpcpDoPortCleanup
AlpcpEndInitialization
AlpcpEnterAllocationEventMessageLog
AlpcpEnterFreeEventMessageLog
AlpcpEnterStateChangeEventMessageLog
AlpcpEnumerateResourcesPort
AlpcpExposeAttributes
AlpcpExposeContextAttribute
AlpcpExposeContextAttribute32
AlpcpExposeHandleAttribute
AlpcpExposeTokenAttribute
AlpcpExposeViewAttribute
AlpcpFlushCancelQueue
AlpcpFlushMessagesByRequestor
AlpcpFlushMessagesPort
AlpcpFlushQueue
AlpcpFlushResourcesPort
AlpcpForceUnlinkSecureView
AlpcpFormatConnectionRequest
AlpcpFreeBitmap
AlpcpFreeBuffer
AlpcpFreeCompletionList
AlpcpFreeCompletionPacketLookaside
AlpcpFreeMessageFunction
AlpcpGetDataFromUserVaSafe
AlpcpGetEffectiveTokenMessage
AlpcpGetPortNameInformation
AlpcpImpersonateMessage
AlpcpInitSystem
AlpcpInitializeCompletionList
AlpcpInitializeMessageLog
AlpcpInitializePort
AlpcpInvokeLogCallbacks
AlpcpLocateMessageLog
AlpcpLocateSectionView
AlpcpLocateView
AlpcpLogClosePort
AlpcpLogConnectFail
AlpcpLogConnectRequest
AlpcpLogConnectSuccess
AlpcpLogReceiveMessage
AlpcpLogSendMessage
AlpcpLogUnwait
AlpcpLogWaitForNewMessage
AlpcpLogWaitForReply
AlpcpLookasidePacketCallbackRoutine
AlpcpLookupMessage
AlpcpMapLegacyPortRemoteView
AlpcpMapLegacyPortView
AlpcpOpenPort
AlpcpPortQueryBasicInfo
AlpcpPortQueryConnectedSidInfo
AlpcpPortQueryServerInfo
AlpcpPrepareViewForDelivery
AlpcpProcessConnectionRequest
AlpcpProcessSynchronousRequest
AlpcpQueryRemoteView
AlpcpQuerySidMessage
AlpcpQuerySidToken
AlpcpQueryTokenModifiedIdMessage
AlpcpQueueIoCompletionPort
AlpcpReadMessageData
AlpcpReceiveLegacyConnectionReply
AlpcpReceiveLegacyMessage
AlpcpReceiveMessage
AlpcpReceiveMessagePort
AlpcpReceiveSynchronousReply
AlpcpReceiveView
AlpcpReferenceAndLockTargetPortsAndCommunicationInfo
AlpcpReferenceConnectedPort
AlpcpReferenceMessageByWaitingThread
AlpcpReferenceMessageByWaitingThreadPort
AlpcpReferenceMessageByWaitingThreadPortQueue
AlpcpReferenceReplyTargetPorts
AlpcpRegisterCompletionListDatabase
AlpcpReleaseAttributes
AlpcpReleaseMessageAttributesOnCancel
AlpcpReplyLegacySynchronousRequest
AlpcpRestoreWriteAccess
AlpcpReturnMessageOnInsufficientBuffer
AlpcpSendCloseMessage
AlpcpSendLegacySynchronousRequest
AlpcpSendMessage
AlpcpSetOwnerProcessPort
AlpcpSetupMessageDataForDeferredCopy
AlpcpSignal
AlpcpSignalAndWait
AlpcpStartInitialization
AlpcpUnlockAndDereferenceTargetPortsAndCommunicationInfo
AlpcpUnregisterCompletionListDatabase
AlpcpValidateAndSetPortAttributes
AlpcpValidateDataInformation
AlpcpViewSearchCallbackFunction
AlpcpWaitForPortReferences
AlpcpWalkConnectionList
AnFwConfigureProgressResources
AnFwDisableBackgroundUpdateTimer
AnFwDisplayBackgroundUpdate
AnFwDisplayFade
AnFwDisplayProgressIndicator
AnFwFadeCompletion
AnFwProgressIndicatorTransition
AnFwpBackgroundUpdateTimer
AnFwpDisableProgressTimer
AnFwpFadeAnimationTimer
AnFwpProgressAnimationManual
AnFwpProgressIndicatorTimer
ApiSetResolveToHost
ApiSetpSearchForApiSet
ApiSetpSearchForApiSetHost
ArbAddAllocation
ArbAddInaccessibleAllocationRange
ArbAddMmConfigRangeAsBootReserved
ArbAddOrdering
ArbAddReserved
ArbAllocateEntry
ArbArbiterHandler
ArbBacktrackAllocation
ArbBootAllocation
ArbBuildAssignmentOrdering
ArbCommitAllocation
ArbFindSuitableRange
ArbFreeOrderingList
ArbGetNextAllocationRange
ArbInitializeArbiterInstance
ArbInitializeOrderingList
ArbInitializeOsInaccessibleRange
ArbInitializeRangeList
ArbOverrideConflict
ArbPreprocessEntry
ArbPruneOrdering
ArbQueryArbitrate
ArbQueryConflict
ArbRetestAllocation
ArbRollbackAllocation
ArbShareDriverExclusive
ArbStartArbiter
ArbTestAllocation
ArbpBuildAllocationStack
ArbpBuildAlternative
ArbpGetRegistryValue
ArbpQueryConflictCallback
ArbpUpdatePriority
AuthzBasepAddAccessTypeList
AuthzBasepAddSecurityAttribute
AuthzBasepAddSecurityAttributeToLists
AuthzBasepAddSecurityAttributeValueToLists
AuthzBasepAddSecurityAttributeValues
AuthzBasepAllocateSecurityAttribute
AuthzBasepAllocateSecurityAttributeValue
AuthzBasepCommitSecurityAttributeChanges
AuthzBasepCompareFQBNOperands
AuthzBasepCompareIntegerOperands
AuthzBasepCompareLegacySecurityAttributesInformation
AuthzBasepCompareOctetStringOperands
AuthzBasepCompareSecurityAttribute
AuthzBasepCompareSecurityAttributesInformation
AuthzBasepCompareSigned
AuthzBasepCompareUnicodeStringOperands
AuthzBasepCompareUnsigned
AuthzBasepConvertRelativeToAbsoluteTokenAttribute
AuthzBasepCopyoutClaimAttributeValues
AuthzBasepCopyoutClaimAttributes
AuthzBasepCopyoutSecurityAttributeValues
AuthzBasepCopyoutSecurityAttributes
AuthzBasepDeleteAllSecurityAttributeValues
AuthzBasepDeleteAllSecurityAttributes
AuthzBasepDeleteSecurityAttribute
AuthzBasepDeleteSecurityAttributeValues
AuthzBasepDeviceMemberOf
AuthzBasepDuplicateSecurityAttributes
AuthzBasepEvaluateAceCondition
AuthzBasepEvaluateAttribute
AuthzBasepEvaluateExpression
AuthzBasepEvaluateSetRelationship
AuthzBasepFinaliseSecurityAttributesList
AuthzBasepFindSecurityAttribute
AuthzBasepFindSecurityAttributeValue
AuthzBasepFreeSecurityAttributeValues
AuthzBasepFreeSecurityAttributesList
AuthzBasepGetClaimAttributeValueCopyoutBufferSize
AuthzBasepGetClaimAttributesCopyoutBufferSize
AuthzBasepGetConstantOperand
AuthzBasepGetNextValue
AuthzBasepGetOperandStringCaseForEvaluation
AuthzBasepGetSecurityAttributeValueCopyoutBufferSize
AuthzBasepGetSecurityAttributesCopyoutBufferSize
AuthzBasepInitializeResourceClaimsFromSacl
AuthzBasepIsCompareRelevantAttribute
AuthzBasepIsValidExpression
AuthzBasepMemAlloc
AuthzBasepMemFree
AuthzBasepMemberOf
AuthzBasepMergeAccessReasons
AuthzBasepObjectInTypeList
AuthzBasepOperandValueTypesCompatible
AuthzBasepQueryClaimAttributesToken
AuthzBasepQuerySecurityAttributeAndValues
AuthzBasepQuerySecurityAttributesToken
AuthzBasepRemoveSecurityAttributeFromLists
AuthzBasepRemoveSecurityAttributeValueFromLists
AuthzBasepReplaceSecurityAttribute
AuthzBasepResetOperands
AuthzBasepRestartOperandValueEnumeration
AuthzBasepRollbackSecurityAttributeChanges
AuthzBasepSecurityAttributePresent
AuthzBasepSetAccessReasons
AuthzBasepSetAppContainerAccessReasons
AuthzBasepSetSecurityAttributesToken
AuthzBasepSetTypeListAccessReasons
AuthzBasepSupportSetOperation
AuthzBasepUnicodeStringFromOperandValue
AuthzBasepUpdateParentTypeList
AuthzBasepValidateSecurityAttributes
AuthzBasepValueInSet
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDecrypt
BCryptDestroyHash
BCryptDestroyKey
BCryptEncrypt
BCryptFinishHash
BCryptGenerateSymmetricKey
BCryptGetProperty
BCryptHashData
BCryptOpenAlgorithmProvider
BCryptSetProperty
BapdRecordFirmwareBootStats
BapdRegisterSiData
BapdWriteEtwEvents
BapdpGetTotalLogSize
BapdpProcessBootMetadata
BapdpProcessBootVhdSqm
BapdpProcessEDrvHintInfo
BapdpProcessEtwEvents
BapdpProcessFwUpdateResults
BapdpProcessLogResults
BapdpProcessResumeInformation
BapdpProcessSecureBootPolicy
BapdpProcessSiData
BapdpProcessWmdResults
BapdpQueryData
BapdpRegisterBootVhdSqm
BapdpRegisterEDrvHintInfo
BapdpRegisterFwUpdateResults
BapdpRegisterResumeInformation
BapdpRegisterWmdResult
BapdpSqmAddToStream
BapdpWriteEventDataToRegistry
BcdCloseObject
BcdCloseStore
BcdCreateObject
BcdDeleteElement
BcdDeleteObject
BcdEnumerateObjects
BcdForciblyUnloadStore
BcdGetElementData
BcdGetElementDataWithFlags
BcdInitializeBcdSyncMutant
BcdOpenObject
BcdOpenSystemStore
BcdQueryObject
BcdSetElementData
BcdSetElementDataWithFlags
BcpConvertProgressToString
BcpCursorLessThan
BcpDisplayCriticalCharacter
BcpDisplayCriticalString
BcpDisplayEarlyBugCheckScreen
BcpDisplayErrorInformation
BcpDisplayProgress
BcpFindMessage
BcpGetCharacterMaxResourceProfile
BcpGetDisplayType
BcpGetMaxResourceProfile
BcpGetMessageOffsets
BcpGetProgressMessages
BcpPrintSpaces
BcpSanitizeDriverName
BcpSetCursorPosition
BgConsoleDestroyInterface
BgConsoleGetInterface
BgDisplayBackgroundUpdate
BgDisplayFade
BgDisplayProgressIndicator
BgDisplayString
BgFreeContext
BgGetContext
BgLibraryDestroy
BgLibraryDisable
BgLibraryEnable
BgLibraryInitialize
BgMarkHiberPhase
BgQueryBootGraphicsInformation
BgkAcquireDisplayOwnership
BgkDestroy
BgkDisplayCharacter
BgkDisplayString
BgkDisplayStringEx
BgkDrawText
BgkGetConsoleState
BgkGetCursorState
BgkInitialize
BgkNotifyDisplayOwnershipChange
BgkNotifyDisplayOwnershipLost
BgkQueryBootGraphicsInformation
BgkResumeFinished
BgkResumePrepare
BgkSetCursor
BgkSetDisplayOwnership
BgkSetTextColor
BgkSolidColorFill
BgkpLockBgfxCodeSection
BgkpResetDisplay
BgkpUnlockBgfxCodeSection
BgkpVgaBltRoutine
BgpBcInitializeCriticalMode
BgpClearScreen
BgpConsoleClearScreen
BgpConsoleClearScreenEx
BgpConsoleDisplayCharacter
BgpConsoleDisplayCharacterEx
BgpConsoleDisplayString
BgpConsoleDrawCursor
BgpConsoleGetCursorState
BgpConsoleGetState
BgpConsoleInitialize
BgpConsoleScrollScreen
BgpConsoleSetCursor
BgpConsoleSetPointSize
BgpConsoleSetTextColor
BgpDisplayCharacter
BgpDisplayCharacterDestroyContext
BgpDisplayCharacterEx
BgpDisplayCharacterGetContext
BgpFmRoundDefault
BgpFmRoundUp
BgpFmSqrt
BgpFoDestroy
BgpFoDetermineFontInformation
BgpFoGetAdvanceWidth
BgpFoGetFontHandle
BgpFoGetStringAdvanceWidth
BgpFoGetTextMetrics
BgpFoInitialize
BgpFwAcquireLock
BgpFwAllocateMemory
BgpFwDisplayBugCheckProgressUpdate
BgpFwDisplayBugCheckScreen
BgpFwFreeMemory
BgpFwGetCurrentIrql
BgpFwInitializeLock
BgpFwInitializeReservePool
BgpFwLibraryDestroy
BgpFwLibraryDisable
BgpFwLibraryEnable
BgpFwLibraryInitialize
BgpFwMarkHiberPhase
BgpFwQueryBootGraphicsInformation
BgpFwQueryPerformanceCounter
BgpFwReleaseLock
BgpFwReserveAllocate
BgpFwReservePoolSwap
BgpGetBitsPerPixel
BgpGetResolution
BgpGxBlendColor
BgpGxBlendRectangle
BgpGxConvertRectangle
BgpGxCopyBitmapToRectangle
BgpGxCopyRectangle
BgpGxDrawBitmapImage
BgpGxDrawRectangle
BgpGxFillRectangle
BgpGxFindSubRectangle
BgpGxInitializeRectangle
BgpGxMarkClean
BgpGxParseBitmap
BgpGxReadRectangle
BgpGxRectangleCreate
BgpGxRectangleDestroy
BgpGxRectangleSize
BgpGxReservePoolRectangleSize
BgpRasGetGlyphAdvanceWidth
BgpRasGetGlyphTextCellDimensions
BgpRasInitializeRasterizer
BgpRasPrintGlyph
BgpTxtAdjustStaticRegion
BgpTxtClearRegion
BgpTxtCreateRegion
BgpTxtDestroyRegion
BgpTxtDisplayCharacter
BgpTxtDisplayString
BgpTxtGetRegionContext
BgpTxtRegionSize
BiAcquireBcdSyncMutant
BiAcquirePrivilege
BiAddBootEntry
BiAddBootEntryToEfiBootManagerDisplayOrder
BiAddBootEntryToNvramDisplayOrder
BiAddStoreFromFile
BiAdjustPrivilege
BiBindEfiBootManager
BiBindEfiEntries
BiBindEfiEntryToBcdObject
BiBindEfiNamespaceObjects
BiBuildIdentifierList
BiCleanupLoadedStores
BiCloseKey
BiCloseStore
BiConvertBootEnvironmentDeviceToNt
BiConvertBootEnvironmentDeviceToQualifiedPartition
BiConvertBootEnvironmentDeviceToUnknown
BiConvertElementFormatToValueType
BiConvertElementToRegistryData
BiConvertNtDeviceToBootEnvironment
BiConvertNtFilePathToBootEnvironment
BiConvertQualifiedPartitionToBootEnvironment
BiConvertRegistryDataToElement
BiCreateBootEntry
BiCreateEfiEntry
BiCreateFileDeviceElement
BiCreateKey
BiCreateKeySecurityDescriptor
BiCreateMergedBootEntry
BiCreateObject
BiCreatePartitionDevice
BiDeleteBootEntry
BiDeleteEfiVariable
BiDeleteKey
BiDeleteRegistryValue
BiDoesHiveExist
BiDoesHiveKeyExist
BiEnumerateBootEntries
BiEnumerateSubKeys
BiExportBcdObjects
BiExportEfiBootManager
BiExportStoreAlterationsToEfi
BiExportStoreAlterationsToFirmware
BiFreeIdentifierList
BiGetCurrentBootEntryIdentifier
BiGetDefaultBootEntryIdentifier
BiGetDeviceFromEfiPath
BiGetDriveLayoutBlock
BiGetDriveLayoutInformation
BiGetElement
BiGetFilePathFromEfiPath
BiGetFirmwareType
BiGetKeyName
BiGetNtPartitionPath
BiGetObjectDescription
BiGetObjectIdentifier
BiGetObjectReferenceFromEfiEntry
BiGetPartitionInformation
BiGetPartitionVhdFilePath
BiGetPhysicalDriveName
BiGetRegistryValue
BiGetSavedBootEntry
BiGetSystemPartition
BiGetSystemStorePath
BiGetVolumeDiskExtentsInformation
BiHandleFirmwareDefaultEntry
BiIsEnumerateMatch
BiIsObjectAliased
BiIsPortableWorkspaceBoot
BiIsSystemStore
BiIsValidObject
BiIsVolumePartitionInformationRetained
BiIsWinPEBoot
BiIssueGetDriveLayoutIoctl
BiLoadHive
BiLoadSystemStore
BiLookupObjectByBootEntry
BiLookupObjectByIdentifierAndBootEntry
BiMarkTreatAsSystemStore
BiModifyBootEntry
BiOpenKey
BiOpenKeyNonBcd
BiOpenSystemStore
BiQueryBootEntryOrder
BiQueryBootOptions
BiReleaseBcdSyncMutant
BiReleasePrivilege
BiResolveLocateDevice
BiRevertToSelf
BiSaveFirmwareVariable
BiSetBootEntryOrder
BiSetBootOptions
BiSetObjectDescription
BiSetRegistryValue
BiTranslateBootEntryId
BiTranslateBootOrder
BiTranslateDisplayOrder
BiTranslateFilePath
BiTranslateObjectIdentifier
BiTranslateSymbolicLink
BiTranslateSymbolicLinkFile
BiUnloadHiveByHandle
BiUnloadHiveByName
BiUpdateBcdObject
BiUpdateEfiEntry
BiUpdateObjectReferenceInEfiEntry
BiVerifyBootPartition
BootApplicationPersistentDataInitialize
BootApplicationPersistentDataProcess
BuildQueryDirectoryIrp
BvgaAcquireDisplayOwnership
BvgaAcquireLock
BvgaBitBlt
BvgaCheckDisplayOwnership
BvgaDisplayString
BvgaDriverInitialize
BvgaEnableBootDriver
BvgaGetDisplayState
BvgaGetResourceAddress
BvgaIndicateProgress
BvgaIsBootDriverInstalled
BvgaNotifyDisplayOwnershipChange
BvgaNotifyDisplayOwnershipLost
BvgaReleaseLock
BvgaReleaseResources
BvgaResetDisplay
BvgaSaveResources
BvgaSetDisplayOwnership
BvgaSetProgressBarSubset
BvgaSetScrollRegion
BvgaSetTextColor
BvgaSolidColorFill
BvgaUpdateProgressBar
CMFAllocFn
CMFCheckAccess
CMFCreateSecurityDescriptor
CMFFlushHitsFile
CMFFreeFn
CMFGetFileSizeEx
CMFGetLargePageSectionSize
CMFReadCompressedSegment
CMFRegisterEventTime
CMFSystemThreadRoutine
CMFUnmapModules
CanComposeHangul
CcAcquireByteRangeForWrite
CcAddDirtyPagesToExternalCache
CcAdjustBcbDepth
CcAdjustThrottle
CcAdjustVacbLevelLockCount
CcAdjustWriteBehindThreadPool
CcAdjustWriteBehindThreadPoolIfNeeded
CcAllocateInitializeBcb
CcAllocateInitializeMbcb
CcAllocateInitializeVacbArray
CcAllocateObcb
CcAllocateVacbLevels
CcApplyLowIoPriorityToThread
CcBcbProfiler
CcBoostLowPriorityWorkerThread
CcBuildUpHighPriorityMappings
CcCalculatePagesToWrite
CcCalculateVacbLevelLockCount
CcCanIWrite
CcCanIWriteStream
CcCanReuseVacb
CcCancelMmWaitForUninitializeCacheMap
CcChangeBackingFileObject
CcChargeThreadForReadAhead
CcCoalescingCallBack
CcCoherencyFlushAndPurgeCache
CcComputeNextScanTime
CcCopyBytesToUserBuffer
CcCopyRead
CcCopyReadEx
CcCopyReadExceptionFilter
CcCopyWrite
CcCopyWriteEx
CcCopyWriteWontFlush
CcCreateVacbArray
CcDeallocateBcb
CcDeductDirtyPagesFromExternalCache
CcDeferWrite
CcDeleteBcbs
CcDeleteMbcb
CcDeleteSharedCacheMap
CcDereferenceFileOffset
CcDereferenceVacbArray
CcExtendVacbArray
CcFastCopyRead
CcFastCopyWrite
CcFetchDataForRead
CcFindBcb
CcFindBitmapRangeToClean
CcFindBitmapRangeToDirty
CcFindNextWorkQueueEntry
CcFlushCache
CcFlushCachePriv
CcFlushCacheToLsn
CcFreeUnusedVacbLevels
CcFreeVacbArray
CcFreeVirtualAddress
CcGetBcbListHeadLargeOffset
CcGetDirtyPages
CcGetFileObjectFromBcb
CcGetFileObjectFromSectionPtrs
CcGetFileObjectFromSectionPtrsRef
CcGetFlushedValidData
CcGetLsnForFileObject
CcGetRandomVacbArrayWithReference
CcGetVacbFromFreeList
CcGetVacbLargeOffset
CcGetVacbMiss
CcGetVirtualAddress
CcGetVirtualAddressIfMapped
CcIncrementWriteBehindPriority
CcInitializeBcbProfiler
CcInitializeCacheManager
CcInitializeCacheMap
CcInitializeProcessor
CcInitializeVacbs
CcInitializeVolumeCacheMap
CcInsertVacbArray
CcIsThereDirtyData
CcIsThereDirtyDataEx
CcIsThereDirtyLoggedPages
CcLazyWriteScan
CcLogExtraWBThreadAction
CcMapAndCopyFromCache
CcMapAndCopyInToCache
CcMapAndRead
CcMapData
CcMapDataCommon
CcMapDataForOverwrite
CcMdlRead
CcMdlReadComplete
CcMdlReadComplete2
CcMdlWriteAbort
CcMdlWriteComplete
CcMdlWriteComplete2
CcMmLogLostDelayedWriteError
CcNotifyExternalCaches
CcNotifyOfMappedWrite
CcNotifyOfMappedWriteComplete
CcNotifyWriteBehind
CcOkToAddWriteBehindThread
CcPerfLogCanWriteFail
CcPerfLogExtraWBThreadAction
CcPerfLogFlushCache
CcPerfLogFlushSection
CcPerfLogLazyWriteScan
CcPerfLogLoggedStreamsStats
CcPerfLogReadAhead
CcPerfLogScheduleReadAhead
CcPerfLogVolumeLogHandleInfo
CcPerfLogWorkItemComplete
CcPerfLogWorkItemDequeue
CcPerfLogWorkItemEnqueue
CcPerformReadAhead
CcPinFileData
CcPinMappedData
CcPinRead
CcPostDeferredWrites
CcPostWorkQueue
CcPrepareMdlWrite
CcPreparePinWrite
CcPurgeAndClearCacheSection
CcPurgeCacheSection
CcQueueLazyWriteScanThread
CcReEngageWorkerThreads
CcRecalculateVacbArrayHighwaterMark
CcReferenceFileOffset
CcReferenceSharedCacheMapByVacb
CcReferenceVacbArray
CcRegisterExternalCache
CcReleaseByteRangeFromWrite
CcRemapBcb
CcRemoveVacbArray
CcRepinBcb
CcRescheduleLazyWriteScan
CcScanDpc
CcScanLogHandleList
CcScheduleLazyWriteScan
CcScheduleReadAhead
CcScheduleReadAheadEx
CcSetAdditionalCacheAttributes
CcSetAdditionalCacheAttributesEx
CcSetBcbOwnerPointer
CcSetDirtyInMask
CcSetDirtyPageThreshold
CcSetDirtyPinnedData
CcSetFileSizes
CcSetFileSizesEx
CcSetLazyWriteScanQueued
CcSetLogHandleForFile
CcSetLogHandleForFileEx
CcSetLoggedDataThreshold
CcSetParallelFlushFile
CcSetReadAheadGranularity
CcSetReadAheadGranularityEx
CcSetVacbInFreeList
CcSetVacbIntoList
CcSetVacbLargeOffset
CcSetValidData
CcShouldLazyWriteCacheMap
CcSlowReferenceSharedCacheMapFileObject
CcTestControl
CcUninitializeCacheMap
CcUninitializeVolumeCacheMap
CcUnmapAndPurge
CcUnmapFileOffsetFromSystemCache
CcUnmapInactiveViews
CcUnmapVacb
CcUnmapVacbArray
CcUnpinData
CcUnpinDataForThread
CcUnpinFileDataEx
CcUnpinRepinnedBcb
CcUnregisterExternalCache
CcUpdateReadHistory
CcUpdateSharedCacheMapFlag
CcUpdateTimeOnLogHandles
CcWaitForCurrentLazyWriterActivity
CcWaitForUninitializeCacheMap
CcWorkerThread
CcWriteBehind
CcWriteBehindInternal
CcZeroData
CcZeroDataInCache
CcZeroDataOnDisk
CcZeroEndOfLastPage
CheckOneBitValidFlag
ChkSum
CmAddLogForAction
CmCallbackGetKeyObjectID
CmCallbackGetKeyObjectIDEx
CmCallbackReleaseKeyObjectIDEx
CmCheckNoTxContext
CmCheckRegistry
CmCloseRmHandle
CmCloseTmHandle
CmConvertHandleToKernelHandle
CmCreateKey
CmDeleteKey
CmDeleteKeyRecursive
CmDeleteValueKey
CmDumpKey
CmEnumerateKey
CmEnumerateValueKey
CmEnumerateValueKeyFromMergedView
CmEqualTrans
CmEtwRunDown
CmFreezeRegistry
CmGetBoundTransaction
CmGetCallbackVersion
CmGetKCBCacheSecurity
CmGetKeyFlags
CmGetKeyLastWriteTime
CmGetSystemControlValues
CmGetSystemDriverList
CmGetVisibleMaxNameLenAndClassLen
CmGetVisibleMaxValueNameLenAndDataLen
CmGetVisibleSubkeyCount
CmGetVisibleValueCount
CmInitSystem1
CmInitializeProcessor
CmIsLastKnownGoodBoot
CmKeyBodyNeedsVirtualImage
CmKeyBodyRemapToVirtual
CmKeyBodyRemapToVirtualForEnum
CmKeyBodyReplicateToVirtual
CmKtmNotification
CmListGetNextElement
CmListGetPrevElement
CmLoadAppKey
CmLoadKey
CmLockKcbForWrite
CmLogMcUpdateStatus
CmLogTmRmAction
CmMoveKey
CmNotifyRunDown
CmObReferenceObjectByHandle
CmObliterateRMTxArray
CmOpenKey
CmPostCallbackNotification
CmQueryKey
CmQueryMultipleValueKey
CmQueryRegistryQuotaInformation
CmQueryValueKey
CmRealKCBToVirtualPath
CmReconcileAndValidateAllHives
CmReferenceKtmTransaction
CmRegisterCallback
CmRegisterCallbackEx
CmRegisterSystemHiveLimitCallback
CmReleaseLoadKeyContext
CmRenameKey
CmReplaceKey
CmRestoreKey
CmRmFinalizeRecovery
CmRmIsKCBDeleted
CmRmIsKCBVisible
CmSaveKey
CmSaveMergedKeys
CmSelectQualifiedInstallLanguage
CmSetAcpiHwProfile
CmSetCallbackObjectContext
CmSetKeyFlags
CmSetLastWriteTimeKey
CmSetLazyFlushState
CmSetRegistryQuotaInformation
CmSetTraceNotifyRoutines
CmSetValueKey
CmShutdownCmRM
CmShutdownSystem
CmSnapshotRMTxArray
CmThawRegistry
CmTmCreateEnlistment
CmUnRegisterCallback
CmUnloadKey
CmUnloadKeyEx
CmVirtualKCBToRealPath
CmWorkerEngineDequeueWorkItem
CmWorkerEngineQueueWorkItem
CmpAccountForLogReservation
CmpAddAcpiAliasEntry
CmpAddAliasEntry
CmpAddDockingInfo
CmpAddDriverToList
CmpAddInfoAfterParseFailure
CmpAddKeyHashToEntry
CmpAddProcessorConfigurationEntry
CmpAddRemoveContainerToCLFSLog
CmpAddRemoveRMLogContainer
CmpAddSecurityCellToCache
CmpAddStringToMapping
CmpAddSubKeyEx
CmpAddToDelayedClose
CmpAddToDelayedDeref
CmpAddToHiveFileList
CmpAddToLeaf
CmpAddValueKeyNew
CmpAddValueToListEx
CmpAdjustSecurityCacheSize
CmpAdminSystemSecurityDescriptor
CmpAllocate
CmpAllocateExtraHashInfo
CmpAllocateKeyControlBlock
CmpAllocatePostBlock
CmpAllocateUnitOfWork
CmpAppendDllSection
CmpAppendLine
CmpAppendSection
CmpAppendValue
CmpArmLazyWriter
CmpAssignSecurityDescriptor
CmpAssignSecurityDescriptorWrapper
CmpAssignSecurityToKcb
CmpBecomeActiveFlusherAndReconciler
CmpBindHiveToTrans
CmpBlockHiveWrites
CmpBlockTwoHiveWrites
CmpBoostActiveHiveWriter
CmpBuildAdminInformation
CmpBuildHashStackAndLookupCache
CmpBuildRegMultiSz
CmpBuildVirtualReplicationStack
CmpCallCallBacks
CmpCanGrowHive
CmpCancelSubordinatePost
CmpCheckAdminAccess
CmpCheckAndFixSecurityCellsRefcount
CmpCheckCreateAccess
CmpCheckKey
CmpCheckKeyAccess
CmpCheckKeyBodyAccess
CmpCheckLeaf
CmpCheckLexicographicalOrder
CmpCheckNotifyAccess
CmpCheckRegistry2
CmpCheckSecurityCellAccess
CmpCheckValueList
CmpCheckWrpKeyAccess
CmpCleanUpKCBCacheTable
CmpCleanUpKcbCacheWithLock
CmpCleanUpKcbValueCache
CmpCleanUpSubKeyInfo
CmpCleanupTransactionState
CmpClearKeyAccessBits
CmpCloneHwProfile
CmpCloneKCBValueListForTrans
CmpCloseKeyObject
CmpCmdHiveClose
CmpCmdHiveOpen
CmpCmdInit
CmpCmdRenameHive
CmpCoalescingCallback
CmpCommitAddKeyUoW
CmpCommitDeleteKeyUoW
CmpCommitDeleteValueKeyUoW
CmpCommitRenameKeyUoW
CmpCommitSetSecurityUoW
CmpCommitSetValueKeyUoW
CmpCompareCompressedName
CmpCompareInIndex
CmpCompareKeysByName
CmpCompareNewValueDataAgainstKCBCache
CmpCompareTwoCompressedNames
CmpCompareUnicodeString
CmpCompleteFlushAndPurgeIrp
CmpCompleteLazyWrite
CmpComputeHashKey
CmpComputeHashKeyForCompressedName
CmpComputeKcbConvKey
CmpComputeLogFillLevel
CmpConstructName
CmpConvertLangId
CmpCopyCell
CmpCopyCompressedName
CmpCopyKeyPartial
CmpCopyName
CmpCopySaclToVirtualKey
CmpCopySyncTree
CmpCopySyncTree2
CmpCopyValue
CmpCreateControlSet
CmpCreateEmptyKey
CmpCreateEvent
CmpCreateHwProfileFriendlyName
CmpCreateKeyControlBlock
CmpCreateLinkNode
CmpCreateObjectTypes
CmpCreatePerfKeys
CmpCreatePredefined
CmpCreateRegistryRoot
CmpCreateRootNode
CmpCreateTemporaryHive
CmpDecommisssionKcb
CmpDelayCloseWorker
CmpDelayDerefKCBTimerRoutine
CmpDelayDerefKCBWorker
CmpDelayDerefKeyControlBlock
CmpDelayFreeCmRm
CmpDelayFreeRMDpcRoutine
CmpDelayFreeRMWorker
CmpDelayedDerefKeys
CmpDeleteHive
CmpDeleteKcbCache
CmpDeleteKeyObject
CmpDeleteTree
CmpDereferenceHive
CmpDereferenceKeyControlBlock
CmpDereferenceKeyControlBlockWithLock
CmpDereferenceNameControlBlockWithLock
CmpDestroyHive
CmpDestroySecurityCache
CmpDestroyTemporaryHive
CmpDisableLazyFlush
CmpDiskFullWarning
CmpDiskFullWarningWorker
CmpDoAccessCheckOnKCB
CmpDoAccessCheckOnSubtree
CmpDoBuildVirtualStack
CmpDoCompareKeyName
CmpDoCreate
CmpDoCreateChild
CmpDoFileSetSize
CmpDoFileWrite
CmpDoFindSubKeyByNumber
CmpDoFlushAll
CmpDoFlushNextHive
CmpDoOpen
CmpDoQueueLateUnloadWorker
CmpDoQueueSystemHiveHysteresis
CmpDoReDoCreateKey
CmpDoReDoDeleteValue
CmpDoReDoRecord
CmpDoReDoRenameKey
CmpDoReDoSetKeyUserFlags
CmpDoReDoSetLastWriteTime
CmpDoReDoSetSecurityDescriptor
CmpDoReDoSetValueExisting
CmpDoReDoSetValueNew
CmpDoReOpenTransKey
CmpDoReadTxRBigLogRecord
CmpDoReconcileNextHive
CmpDoSort
CmpDoTransWriteLogRecord
CmpDummyApc
CmpDumpKeyBodyList
CmpDumpOneKeyBody
CmpDuplicateIndex
CmpDuplicateKey
CmpEnableLazyFlush
CmpEnableLazyFlushDpcRoutine
CmpEnumerateCallback
CmpEtwDumpKcb
CmpExamineSaclForAuditEvent
CmpFatalFilter
CmpFileFlush
CmpFileFlushAndPurge
CmpFileRead
CmpFileSetSize
CmpFileWrite
CmpFilterAcpiDockingState
CmpFindACPITable
CmpFindCellInIndex
CmpFindControlSet
CmpFindDrivers
CmpFindGroupOrderList
CmpFindKeyNameAtIndex
CmpFindMatchingDescriptorCell
CmpFindNameInList
CmpFindNameInListWithStatus
CmpFindPathByName
CmpFindRSDTTable
CmpFindSecurityCellCacheIndex
CmpFindSubKeyByHashWithStatus
CmpFindSubKeyByName
CmpFindSubKeyByNameWithStatus
CmpFindSubKeyByNumber
CmpFindSubKeyByNumberFromMergedView
CmpFindSubKeyInLeaf
CmpFindSubKeyInLeafWithStatus
CmpFindSubKeyInRoot
CmpFindSubkeyInHashByChildCell
CmpFindTagIndex
CmpFindValueByName
CmpFindValueByNameFromCache
CmpFinishBeingActiveFlusherAndReconciler
CmpFinishSystemHivesLoad
CmpFireCleanupNotifications
CmpFlushBackupHive
CmpFlushHive
CmpFlushNotifiesOnKeyBodyList
CmpFlushNotify
CmpForceFlushWorker
CmpFree
CmpFreeAllMemory
CmpFreeBootRegistry
CmpFreeCallbackObjectContexts
CmpFreeDriverList
CmpFreeExtraHashInfo
CmpFreeKeyBody
CmpFreeKeyByCell
CmpFreeKeyControlBlock
CmpFreeKeyValues
CmpFreeLineList
CmpFreeOffsetArray
CmpFreePostBlock
CmpFreeSectionList
CmpFreeSecurityDescriptor
CmpFreeSubordinatePost
CmpFreeValue
CmpFreeValueData
CmpFreezeThawDpcRoutine
CmpFreezeThawWorker
CmpGenerateAppHiveSecurityDescriptor
CmpGenerateFlushControlData
CmpGetAcpiProfileInformation
CmpGetBiosDate
CmpGetBiosVersion
CmpGetBootValueData
CmpGetCallbackObjectContext
CmpGetCmHiveFromVirtualPath
CmpGetConvKeyAtIndex
CmpGetKeyName
CmpGetLastHive
CmpGetMappingHiveForString
CmpGetNameControlBlock
CmpGetNextActiveHive
CmpGetNextHive
CmpGetNextName
CmpGetRegistryValue
CmpGetSectionLength
CmpGetSectionLineIndex
CmpGetSectionLineIndexValueCount
CmpGetSymbolicLink
CmpGetToken
CmpGetValueData
CmpGetValueDataFromCache
CmpGetValueForAudit
CmpGetValueKeyFromCache
CmpGetValueListFromCache
CmpGetVirtualStoreRoot
CmpGetVirtualizationID
CmpGetVirtualizationIDFromFullVirtualPath
CmpGetVolumeClusterSize
CmpGetVolumeClusterSizeCompletion
CmpHiveRootSecurityDescriptor
CmpHwprofileDefaultSelect
CmpInitBackupHive
CmpInitCallbacks
CmpInitCmRM
CmpInitDelayDerefKCBEngine
CmpInitGlobalQuotaAllowed
CmpInitHiveFromFile
CmpInitSIDToHiveMapping
CmpInitSecurityCache
CmpInitializeDelayedCloseTable
CmpInitializeFreezeThaw
CmpInitializeHardwareConfiguration
CmpInitializeHive
CmpInitializeKcbCache
CmpInitializeKeyNameString
CmpInitializeLazyWriters
CmpInitializeMachineDependentConfiguration
CmpInitializeNameCache
CmpInitializePreloadedHive
CmpInitializePreloadedHives
CmpInitializeRegistryNames
CmpInitializeRegistryNode
CmpInitializeSystemBiosInformation
CmpInitializeSystemHive
CmpInitializeSystemHivesLoad
CmpInitializeTransactions
CmpInitializeTrustedInstallerSid
CmpInitializeValueNameString
CmpInsertCallbackInListByAltitude
CmpInsertKeyHash
CmpInsertKeyHashToDeletedKcbTable
CmpInsertSecurityCellList
CmpInterlockedFunction
CmpIsCmRm
CmpIsHiveAlreadyLoaded
CmpIsHiveBoundToTrans
CmpIsHiveEligibleForLazyReconcile
CmpIsHiveLoadingOnOtherThread
CmpIsKcbLockAllowed
CmpIsLockAllowedByIndex
CmpIsMasterHive
CmpIsSystemEntity
CmpIsThisSameFile
CmpIsVirtEnabled
CmpKcbCacheLookup
CmpLateUnloadHiveWorker
CmpLazyCommitDpcRoutine
CmpLazyCommitWorker
CmpLazyFlushDpcRoutine
CmpLazyWriteWorker
CmpLinkHiveToMaster
CmpLinkKeyToHive
CmpLoadHiveThread
CmpLoadHiveVolatile
CmpLoadKeyCommon
CmpLockAppHiveLoadList
CmpLockCallbackListExclusive
CmpLockCallbackListShared
CmpLockContextListExclusive
CmpLockContextListShared
CmpLockDeletedHashEntryExclusiveByKcb
CmpLockHashEntryByIndexExclusive
CmpLockHashEntryByIndexShared
CmpLockHashEntryExclusive
CmpLockHashEntryExclusiveByKcb
CmpLockHashEntryShared
CmpLockHiveFlusherExclusive
CmpLockHiveFlusherShared
CmpLockHiveListExclusive
CmpLockHiveWriter
CmpLockIXLockExclusive
CmpLockIXLockIntent
CmpLockKcbExclusive
CmpLockKcbShared
CmpLockNameHashEntryExclusive
CmpLockRegistry
CmpLockRegistryExclusive
CmpLockRegistryFreezeAware
CmpLockTableAdd
CmpLockTableConvertSharedToExclusive
CmpLockTableRemove
CmpLockTwoKcbsExclusive
CmpLockTwoKcbsShared
CmpLockTwoSecurityCachesExclusiveShared
CmpLogCheckpoint
CmpLogClearAccessBitsEvent
CmpLogDirtyVectorUse
CmpLogEvent
CmpLogHiveDestroyEvent
CmpLogHiveInitializeEvent
CmpLogHiveLinkEvent
CmpLogHiveRundownEvent
CmpLogNotificationRegister
CmpLogReorganizeEvent
CmpLogTxrInitEvent
CmpMarkCurrentProfileDirty
CmpMarkCurrentValueDirty
CmpMarkIndexDirty
CmpMarkKcbDeleted
CmpMarkKcbDeletedAndCache
CmpMarkKeyDirty
CmpMarkKeyParentDirty
CmpMarkKeyValuesDirty
CmpMarkValueDataDirty
CmpMergeKeyValues
CmpMigrateOOBELanguageToInstallationLanguage
CmpMountPreloadedHives
CmpMoveBiosAliasTable
CmpNameFromAttributes
CmpNameSize
CmpNotifyChangeKey
CmpNotifyTriggerCheck
CmpOKToFollowLink
CmpOpenFileWithExtremePrejudice
CmpOpenHiveFile
CmpParseCacheAddHive
CmpParseCacheAddSymbolicLink
CmpParseCacheAllocEntry
CmpParseCacheClose
CmpParseCacheCompareUnicodeStrings
CmpParseCacheComputeRegHashKey
CmpParseCacheInit
CmpParseCacheLookup
CmpParseCacheLookupByHash
CmpParseCacheRemoveHive
CmpParseInfBuffer
CmpParseKey
CmpPostApc
CmpPostApcRunDown
CmpPostNotify
CmpPreserveSystemHiveData
CmpProcessForSimpleStringSub
CmpProtectPool
CmpPublishEventForPcaResolver
CmpQueryFileSecurityDescriptor
CmpQueryKeyData
CmpQueryKeyDataFromCache
CmpQueryKeyDataFromNode
CmpQueryKeyName
CmpQueryKeyValueData
CmpQueryNameString
CmpQueueLazyCommitWorker
CmpQuotaWarningWorker
CmpRealignLogBuffers
CmpRebuildKcbCache
CmpRecordUnloadEventForHive
CmpRecoverEnlistment
CmpReferenceHive
CmpReferenceKeyControlBlock
CmpReferenceKeyControlBlockUnsafe
CmpRefreshHive
CmpRefreshParent
CmpRefreshWorkerRoutine
CmpRegisterCallbackInternal
CmpRehashKcbSubtree
CmpReleaseGlobalQuota
CmpReleaseWriteQueue
CmpRemoveCellFromIndex
CmpRemoveFromDelayedClose
CmpRemoveFromDelayedDeref
CmpRemoveFromSecurityCache
CmpRemoveHiveFromMapping
CmpRemoveKeyHash
CmpRemoveKeyHashFromDeletedKcbTable
CmpRemoveSecurityCellList
CmpRemoveSubKey
CmpRemoveSubKeyCellNoCellRef
CmpRemoveValueFromList
CmpReorganizeHive
CmpReparseToVirtualPath
CmpReplicateKeyToVirtual
CmpReportAuditVirtualizationEvent
CmpReportNotify
CmpReportNotifyHelper
CmpRmAnalysisPhase
CmpRmReDoPhase
CmpRmUnDoPhase
CmpRollbackTransactionArray
CmpRunDownCmRM
CmpRunDownDelayDerefKCBEngine
CmpRundownUnitOfWork
CmpSaveBootControlSet
CmpSaveKeyByFileCopy
CmpSearchAddTrans
CmpSearchForOpenSubKeys
CmpSearchForTrans
CmpSearchKCBForTransChildByName
CmpSearchKeyControlBlockTree
CmpSearchLineInSectionByIndex
CmpSearchSectionByName
CmpSecConvKey
CmpSecurityMethod
CmpSelectLeaf
CmpSetConvKeyAtIndex
CmpSetGlobalQuotaAllowed
CmpSetIoPriorityThread
CmpSetNetworkValue
CmpSetPriorityThread
CmpSetSecurityDescriptorInfo
CmpSetSystemBiosInformation
CmpSetSystemValues
CmpSetValueDataExisting
CmpSetValueDataNew
CmpSetValueKeyExisting
CmpSetValueKeyNew
CmpSetVersionData
CmpSetVideoBiosInformation
CmpSetupConfigurationTree
CmpSignalDeferredPosts
CmpSignalUnloadEventArrayForHive
CmpSnapshotHiveToOffsetArray
CmpSnapshotKCBSecurity
CmpSnapshotTxOwnerArray
CmpSortByTag
CmpSortDriverList
CmpSplitLeaf
CmpStartCLFSLog
CmpStartRMLog
CmpStartRMLogs
CmpStopRMLog
CmpSyncKcbCacheForHive
CmpSyncKeyValues
CmpSyncNextBackupHive
CmpSyncSubKeysAfterDelete
CmpSystemHiveHysteresisWorker
CmpSystemQuotaWarningWorker
CmpTraceHiveFlushBoostedActiveFlusher
CmpTraceHiveFlushWroteLogFile
CmpTraceHiveFlushWrotePrimaryFile
CmpTraceHiveLoadStart
CmpTraceHiveLoadStop
CmpTraceHiveMountBaseFileMounted
CmpTraceHiveMountLogEntryApplied
CmpTraceHiveMountStart
CmpTraceHiveMountStop
CmpTraceHiveRestoreStart
CmpTraceHiveRestoreStop
CmpTraceHiveSaveFileCopied
CmpTraceHiveSaveFileWritten
CmpTraceHiveSaveStart
CmpTraceHiveSaveStop
CmpTraceHiveSaveTreeCopied
CmpTraceHiveUnloadStart
CmpTraceHiveUnloadStop
CmpTraceShutdownRundownComplete
CmpTraceShutdownStart
CmpTransMgrCommit
CmpTransMgrCommitUoW
CmpTransMgrFreeVolatileData
CmpTransMgrPrepare
CmpTransMgrRollback
CmpTransMgrSyncHive
CmpTransWriteLog
CmpTrimHive
CmpTryConvertKcbLockSharedToExclusive
CmpTryToLockHashEntryByIndexExclusive
CmpTryToRundownHive
CmpUnblockHiveWrites
CmpUnblockTwoHiveWrites
CmpUndoDeleteKeyForTrans
CmpUnlockAndLockKcbs
CmpUnlockAppHiveLoadList
CmpUnlockCallbackList
CmpUnlockContextList
CmpUnlockDeletedHashEntryByKcb
CmpUnlockHashEntry
CmpUnlockHashEntryByIndex
CmpUnlockHiveFlusher
CmpUnlockHiveList
CmpUnlockHiveWriter
CmpUnlockKcb
CmpUnlockNameHashEntry
CmpUnlockRegistry
CmpUnlockTwoKcbs
CmpUnlockTwoSecurityCaches
CmpUpdateGlobalQuotaAllowed
CmpUpdateKeyNodeAccessBits
CmpUpdateKeyNodeAccessBitsFlushNotHeld
CmpUpdateParentForEachSon
CmpUpdatePhaseAccessBit
CmpUpdateReorganizeRegistryValues
CmpUpdateSystemHiveHysteresis
CmpUpgradeKcbLockToExclusive
CmpUserPresenceCallback
CmpUuidCreate
CmpVEExecuteParseLogic
CmpValidateGlobalFlushControlFlags
CmpValidateHiveSecurityDescriptors
CmpValueToData
CmpVirtualBranchIsReplicated
CmpVirtualPathPresent
CmpWaitForHiveMount
CmpWaitForLateUnloadWorker
CmpWaitOnHiveWriteQueue
CmpWalkPath
CmpWorkerEngineWorker
CmpWriteOffsetArrayToFile
CompareFileTimeType
CompareNamesCaseSensitive
CompareObjectTypes
CompareUnicodeStrings
ComposeHangulLV
ComposeHangulLVT
ComputeNameLength
ComputeUnicodeNameLength
ConstraintEval
ConsumerGetBuffer
ConsumerPeekAndConsumeBuffer
ConvertDevpropcompkeyToString
ConvertDevpropertyToString
CountUTF8ToUnicode
CountUnicodeToUTF8
CpDoesPortExist
CpGetByte
CpReadLsr
CpSetBaud
CreateFileInfo
CreateMiniNtBootKey
CreateSystemRootLink
DECREMENT_ADAPTER_CHANNELS
DECREMENT_COMMON_BUFFERS
DECREMENT_SCATTER_GATHER_LISTS
DbgBreakPoint
DbgBreakPointWithStatus
DbgCommandString
DbgEnumerateCallback
DbgLoadImageSymbols
DbgLoadImageSymbolsUnicode
DbgLoadUserImageSymbols
DbgPrint
DbgPrintEx
DbgPrintReturnControlC
DbgPrompt
DbgQueryDebugFilterState
DbgSetDebugFilterState
DbgSetDebugPrintCallback
DbgUnLoadImageSymbols
DbgUnLoadImageSymbolsUnicode
DbgUnicodeStringToAnsiString
DbgUserBreakPoint
DbgkCaptureLiveDump
DbgkCaptureLiveKernelDump
DbgkClearProcessDebugObject
DbgkCopyProcessDebugPort
DbgkCreateMinimalProcess
DbgkCreateMinimalThread
DbgkCreateThread
DbgkExitProcess
DbgkExitThread
DbgkFlushErrorPort
DbgkForwardException
DbgkInitialize
DbgkLkmdRegisterCallback
DbgkLkmdUnregisterCallback
DbgkMapViewOfSection
DbgkOpenProcessDebugPort
DbgkRegisterErrorPort
DbgkSendSystemDllMessages
DbgkUnMapViewOfSection
DbgkWerAddSecondaryData
DbgkWerCaptureLiveKernelDump
DbgkpCloseObject
DbgkpConvertKernelToUserStateChange
DbgkpCreateNotificationEvent
DbgkpDeleteErrorPort
DbgkpDeleteObject
DbgkpFreeDebugEvent
DbgkpInitializePhase0
DbgkpInitializePhase1
DbgkpLkmdFireCallbacks
DbgkpLkmdIsMemoryBlockPresentFromCallback
DbgkpLkmdLaunchSnapApc
DbgkpLkmdSnapData
DbgkpLkmdSnapDataEx
DbgkpLkmdSnapGlobals
DbgkpLkmdSnapKernelStack
DbgkpLkmdSnapKernelStackSegmentCallback
DbgkpLkmdSnapObject
DbgkpLkmdSnapPendingIrps
DbgkpLkmdSnapThread
DbgkpLkmdSnapThreadApc
DbgkpLkmdSnapThreadInContext
DbgkpLkmdSqmIncrementDword
DbgkpLkmdSqmIsOptedIn
DbgkpLkmdSqmStatus
DbgkpMarkProcessPeb
DbgkpOpenHandles
DbgkpPostFakeProcessCreateMessages
DbgkpPostFakeThreadMessages
DbgkpPostModuleMessages
DbgkpQueueMessage
DbgkpRemoveErrorPort
DbgkpSectionToFileHandle
DbgkpSendApiMessage
DbgkpSendApiMessageLpc
DbgkpSendErrorMessage
DbgkpSetProcessDebugObject
DbgkpStartSystemErrorHandler
DbgkpSuppressDbgMsg
DbgkpSuspendProcess
DbgkpTriageDumpCheckPresentHashTable
DbgkpTriageDumpFillHeaders
DbgkpTriageDumpInitialize
DbgkpTriageDumpIsMemoryBlockPresent
DbgkpTriageDumpRestoreState
DbgkpTriageDumpSaveState
DbgkpTriageDumpSnapData
DbgkpTriageDumpWrite
DbgkpWakeTarget
DbgkpWerAllocateNonpagedPool
DbgkpWerAllocatePool
DbgkpWerCaptureLiveFullDump
DbgkpWerCaptureLiveTriageDump
DbgkpWerCleanupContext
DbgkpWerDeferredWriteRoutine
DbgkpWerFreePool
DbgkpWerInitializeDeferredLiveDump
DbgkpWerInvokeCallbacks
DbgkpWerProcessPolicyResult
DbgkpWerUpdateTriageDumpHeader
DbgkpWerWriteSecondaryData
DbgkpWerWriteTriageDump
DbgpInsertDebugPrintCallback
DbgpRemoveDebugPrintCallback
DebugPrint
DebugPrompt
DebugService2
DeleteNodeFromTree
DelistKeyBodyFromKCB
DisplayBootBitmap
DisplayFilter
DownLevelGetParentLanguageName
DownLevelLangIDToLanguageName
DownLevelLanguageNameToLangID
DrvDbAcquireDatabaseNodeBaseKey
DrvDbBuildDeviceIdDriverInfMatch
DrvDbCreateDatabaseNode
DrvDbDeleteObjectRegKey
DrvDbDeleteObjectSubKey
DrvDbDestroyDatabaseNode
DrvDbDispatchDeviceId
DrvDbDispatchDriverDatabase
DrvDbDispatchDriverFile
DrvDbDispatchDriverInfFile
DrvDbDispatchDriverPackage
DrvDbFindDatabaseNode
DrvDbGetCompositeMappedPropertyKeys
DrvDbGetDeviceIdDriverInfMatches
DrvDbGetDeviceIdMappedProperty
DrvDbGetDeviceIdMappedPropertyKeys
DrvDbGetDriverDatabaseList
DrvDbGetDriverDatabaseMappedProperty
DrvDbGetDriverDatabaseMappedPropertyKeys
DrvDbGetDriverFileMappedProperty
DrvDbGetDriverFileMappedPropertyKeys
DrvDbGetDriverInfFileMappedProperty
DrvDbGetDriverInfFileMappedPropertyKeys
DrvDbGetDriverPackageMappedProperty
DrvDbGetDriverPackageMappedPropertyKeys
DrvDbGetDriverPackageSignerName
DrvDbGetDriverPackageSignerScore
DrvDbGetObjectDatabaseNode
DrvDbGetObjectList
DrvDbGetObjectSubKeyCallback
DrvDbGetObjectSubKeyList
DrvDbGetRegValueMappedProperty
DrvDbGetRegValueMappedPropertyKeys
DrvDbGetSecurityDescriptor
DrvDbInitializeDatabaseNodeVersion
DrvDbLoadDatabaseNode
DrvDbOpenContext
DrvDbOpenDriverDatabaseRegKey
DrvDbOpenObjectRegKey
DrvDbRegisterObjects
DrvDbReleaseDatabaseNodeBaseKey
DrvDbSelectDatabase
DrvDbSetDeviceIdDriverInfMatches
DrvDbSetDeviceIdMappedProperty
DrvDbSetDriverDatabaseMappedProperty
DrvDbSetDriverFileMappedProperty
DrvDbSetDriverInfFileMappedProperty
DrvDbSetDriverPackageMappedProperty
DrvDbSetRegValueMappedProperty
DrvDbSplitDeviceIdDriverInfMatch
DrvDbUnloadDatabaseNode
DrvDbValidateDeviceIdName
DrvDbValidateDriverFileName
DrvDbValidateDriverInfFileName
DrvDbValidateDriverPackageName
EmClientQueryRuleState
EmClientRuleDeregisterNotification
EmClientRuleEvaluate
EmClientRuleRegisterNotification
EmCpuMatchCallback
EmFalseCallback
EmInitSystem
EmMatchDate
EmPowerPagingEnabled
EmProviderDeregister
EmProviderDeregisterEntry
EmProviderRegister
EmProviderRegisterEntry
EmRemoveBadS3PagesCallback
EmSystemArchitectureCallback
EmTrueCallback
EmpAcquirePagingReference
EmpCacheBiosDate
EmpCheckErrataList
EmpCheckOperator
EmpClientRuleRegisterNotification
EmpEvaluateNodeLink
EmpEvaluateParseNodeMapping
EmpEvaluatePermuteRuleEntries
EmpEvaluateTargetRule
EmpEvaluateUpdateRuleEvalState
EmpInfParseGetGuidFromName
EmpInfParseGetSectionLineCount
EmpInfParseGetStringIndexFromName
EmpInfParseGetValueFromSectionAndKeyName
EmpInfParseSearchDependencyList
EmpMapPhysicalAddress
EmpParseCallbacks
EmpParseEntryTypes
EmpParseInfDatabase
EmpParseRuleExpression
EmpParseRuleTerm
EmpParseRuleTermArgMapping
EmpParseRules
EmpParseStrings
EmpParseTargetRuleStringIndexList
EmpParseTargetRules
EmpProviderDeregisterEntry
EmpProviderRegister
EmpQueueRuleUpdateState
EmpReleasePagingReference
EmpRuleParserStackPop
EmpRuleParserStackPush
EmpRuleUpdateWorkerThread
EmpSearchCallbackDatabase
EmpSearchEntryDatabase
EmpSearchRuleDatabase
EmpSearchTargetRuleList
EmpUpdateRuleState
EnlightenedSwapContext
EnlistKeyBodyWithKCB
EtwActivityIdControl
EtwActivityIdControlKernel
EtwDereferenceSpinLockCounters
EtwEnableTrace
EtwEventEnabled
EtwExitProcess
EtwGetInterruptTimeStamp
EtwGetKernelTraceTimestamp
EtwGetProcessorBuffer
EtwGetProviderIdFromHandle
EtwInitialize
EtwInitializeProcessor
EtwKernelMemoryRundown
EtwLogPfnInfoRundown
EtwProviderEnabled
EtwQueryPerformanceTraceInformation
EtwQueryTraceHandleByLoggerName
EtwReferenceSpinLockCounters
EtwRegister
EtwRegisterClassicProvider
EtwRegisterCounters
EtwSendTraceBuffer
EtwSetPerformanceTraceInformation
EtwShutdown
EtwTraceAntiStarvationBoost
EtwTraceAutoBoostClearFloor
EtwTraceAutoBoostEntryExhaustion
EtwTraceAutoBoostSetFloor
EtwTraceContextSwap
EtwTraceDequeueWork
EtwTraceDpcEnqueueEvent
EtwTraceDuplicateHandle
EtwTraceEnqueueWork
EtwTraceEvent
EtwTraceFreezeThawProcess
EtwTraceInswapProcess
EtwTraceIoTimerEvent
EtwTraceKernelEvent
EtwTraceMemoryAcg
EtwTraceObject
EtwTraceObjectOperation
EtwTracePageFault
EtwTracePool
EtwTracePriority
EtwTraceProcess
EtwTraceProcessTerminate
EtwTraceReadyThread
EtwTraceSystemTimeChange
EtwTraceThread
EtwTraceThreadAffinity
EtwTraceThreadWorkItem
EtwTraceTimedEvent
EtwTraceWakeCounter
EtwTraceWakeEvent
EtwTraceWorkingSetSwap
EtwUnregister
EtwWmitraceWorker
EtwWrite
EtwWriteEndScenario
EtwWriteErrorLogEntry
EtwWriteEx
EtwWriteKMSecurityEvent
EtwWriteStartScenario
EtwWriteString
EtwWriteTransfer
EtwpAccessCheck
EtwpAcquireLoggerContext
EtwpAcquireLoggerContextByLoggerId
EtwpAcquireLoggerContextByLoggerName
EtwpAddBinaryInfoEvents
EtwpAddDataSource
EtwpAddDebugInfoEvents
EtwpAddEventToBuffer
EtwpAddGuidEntry
EtwpAddKmRegEntry
EtwpAddLogHeader
EtwpAddNotificationEvent
EtwpAddProviderToSession
EtwpAddUmRegEntry
EtwpAddWinRtProviderToSession
EtwpAdjustFreeBuffers
EtwpAdjustTraceBuffers
EtwpAllocDataBlock
EtwpAllocGuidEntry
EtwpAllocateFreeBuffers
EtwpAllocatePayloadFilterData
EtwpAllocatePmcData
EtwpAllocateStringFilterData
EtwpAllocateTimeStampIndex
EtwpAllocateTraceBufferPool
EtwpApplyEventIdPayloadFilter
EtwpApplyEventIdPayloadFilterOnUserEvent
EtwpApplyExeFilter
EtwpApplyPackageIdFilter
EtwpApplyPayloadFilterInternal
EtwpApplyScopeFilters
EtwpApplyStackWalkFilter
EtwpApplyStackWalkFilterOnUserEvent
EtwpBufferingModeFlush
EtwpBugCheckMultiPartCallback
EtwpBuildNotificationPacket
EtwpBuildProcessEvent
EtwpCCSwapDeleteProcessor
EtwpCCSwapStart
EtwpCCSwapStop
EtwpCCSwapTrace
EtwpCapturePreviousRegistryData
EtwpCaptureRegistryData
EtwpCaptureString
EtwpCheckForPoolTagFilterExtension
EtwpCheckForStackTracingExtension
EtwpCheckGuidAccess
EtwpCheckGuidAccessAndDoRundown
EtwpCheckLoggerAccessAndDoRundown
EtwpCheckLoggerControlAccess
EtwpCheckPoolTagFilters
EtwpCheckProviderLoggingAccess
EtwpCheckSystemTraceAccess
EtwpClockSourceRunDown
EtwpCloseRealTimeConnectionObject
EtwpCloseRegistrationObject
EtwpCompleteBuffer
EtwpComputeRegEntryEnableInfo
EtwpCopySchematizedFilters
EtwpCreateActivityId
EtwpCreateDirectoryFile
EtwpCreateLogFile
EtwpCreateNtFileName
EtwpCreatePerfectHashFunction
EtwpCreateUmReplyObject
EtwpCrimsonProvEnableCallback
EtwpCrimsonStackWalkApc
EtwpDelayCreate
EtwpDeleteRealTimeConnectionObject
EtwpDeleteRegistrationObject
EtwpDequeueFreeBuffer
EtwpDereferenceLoggerSecurityDescriptor
EtwpDereferenceStackEntry
EtwpDisableKernelTrace
EtwpDisableTraceProviders
EtwpDisassociateConsumer
EtwpDiskProvTraceDisk
EtwpEnableAutoLoggerProviders
EtwpEnableDisableSpecialGuids
EtwpEnableDisableUMGL
EtwpEnableGuid
EtwpEnableKernelTrace
EtwpEnableKeyProviders
EtwpEnableStackCaching
EtwpEnableTrace
EtwpEnqueueFreeBuffer
EtwpEnqueueOverflowBuffer
EtwpEnumerateAddressSpace
EtwpEnumerateTraceGuids
EtwpEnumerateWorkingSet
EtwpEventTracingCounterSetCallback
EtwpEventWriteFull
EtwpEventWriteTemplateAdmin
EtwpEventWriteTemplateBackingFile
EtwpEventWriteTemplateMaxFileSize
EtwpEventWriteTemplateSessAndProv
EtwpEventWriteTemplateSession
EtwpEventWriteTemplateSessionEnd
EtwpExecutiveResourceConfigRunDown
EtwpExpandFileName
EtwpFailLogging
EtwpFileProvTrace
EtwpFillPerfectHashTable
EtwpFinalizeHeader
EtwpFindAndLockBufferForFlushing
EtwpFindDebugId
EtwpFindGuidEntryByGuid
EtwpFindUserBufferSpace
EtwpFlushActiveBuffers
EtwpFlushBuffer
EtwpFlushBufferToLogfile
EtwpFlushBufferToRealtime
EtwpFlushTrace
EtwpFreeGuidEntry
EtwpFreeLoggerContext
EtwpFreeSecurityDescriptor
EtwpFreeStackCache
EtwpFreeSystemLoggerIndex
EtwpFreeTraceBufferPool
EtwpFreeUserBufferSpace
EtwpGenerateFileName
EtwpGetAutoLoggerProviderFilter
EtwpGetCycleCount
EtwpGetFlagExtension
EtwpGetGuidSecurityDescriptor
EtwpGetImageSize
EtwpGetLoggerInfoFromContext
EtwpGetMaxDebugIdBufferSize
EtwpGetMaxNonPagedPoolUsage
EtwpGetNextEventOffsetType
EtwpGetNextGuidEntry
EtwpGetPerfCounter
EtwpGetPsmKeyExtendedHeaderItem
EtwpGetSchematizedFilterSize
EtwpGetScsiPassThroughCdb
EtwpGetSecurityDescriptorByGuid
EtwpGetSidExtendedHeaderItem
EtwpGetStackExtendedHeaderItem
EtwpGetSystemTime
EtwpGetTraceGuidInfo
EtwpGetTraceGuidList
EtwpGetTrackingLockSlotForThread
EtwpInitLoggerContext
EtwpInitialize
EtwpInitializeActivityIdSeed
EtwpInitializeAutoLoggers
EtwpInitializeBufferHeader
EtwpInitializeProviderInfoBuffer
EtwpInitializeRealTimeConnection
EtwpInitializeRegistration
EtwpInitializeSecurity
EtwpInitializeStackTracing
EtwpInitializeTimeStamp
EtwpIsCaptureStateAllowed
EtwpIsStackWalkingEnabled
EtwpIsWow64Logger
EtwpKernelProvEnableCallback
EtwpKernelTraceRundown
EtwpLockUnlockBufferList
EtwpLogAlwaysPresentRundown
EtwpLogGroupMask
EtwpLogKernelEvent
EtwpLogKernelTraceRundown
EtwpLogMemInfo
EtwpLogMemInfoDpc
EtwpLogMemInfoRundown
EtwpLogMemInfoWs
EtwpLogPmcCounterRundown
EtwpLogProcessPerfCtrs
EtwpLogRefSetAutoMark
EtwpLogRegistryEvent
EtwpLogSessionWorkingSetInfo
EtwpLogSystemEventUnsafe
EtwpLogTxREvent
EtwpLogger
EtwpLoggerDpc
EtwpLookupLoggerIdByName
EtwpMapEnableFlags
EtwpNetProvTraceNetwork
EtwpNotifyGuid
EtwpObjectHandleEnumCallback
EtwpObjectHandleRundown
EtwpObjectTypeRundown
EtwpOpenConsumer
EtwpOpenRealTimeConnectionObject
EtwpOpenRegistrationObject
EtwpParsePoolTagFilter
EtwpPerfMemInfoWork
EtwpPerfectHashFunctionSearch
EtwpPmcInterrupt
EtwpPoolRunDown
EtwpPowerStateCallback
EtwpPrepareDirtyBuffer
EtwpPrepareHeader
EtwpPrepareWmitraceLoggerInfo
EtwpProcessEnumCallback
EtwpProcessPerfCtrsRundown
EtwpProcessThreadImageRundown
EtwpProcessorRundown
EtwpProfileInterrupt
EtwpProviderArrivalCallback
EtwpPsProvTraceImage
EtwpPsProvTracePriority
EtwpPsProvTraceProcess
EtwpPsProvTraceThread
EtwpQueryPsmKey
EtwpQueryReferenceTime
EtwpQueryRegistryCallback
EtwpQueryTrace
EtwpQueueNotification
EtwpQueuePerfMemInfoWorkItem
EtwpQueueReply
EtwpQueueStackWalkApc
EtwpQueueStackWalkDpc
EtwpRealtimeConnect
EtwpRealtimeCreateLogfile
EtwpRealtimeDeliverBuffer
EtwpRealtimeDisconnectAllConsumers
EtwpRealtimeDisconnectConsumer
EtwpRealtimeDisconnectConsumerByHandle
EtwpRealtimeFlushSavedBuffers
EtwpRealtimeInjectEtwBuffer
EtwpRealtimeNotifyConsumers
EtwpRealtimeResetReferenceTime
EtwpRealtimeRestoreBuffer
EtwpRealtimeRestoreState
EtwpRealtimeSaveBuffer
EtwpRealtimeSaveState
EtwpRealtimeSendEmptyMarker
EtwpRealtimeUpdateConsumers
EtwpRealtimeUpdateReferenceTime
EtwpRealtimeZeroTruncateLogfile
EtwpReceiveNotification
EtwpReceiveReplyDataBlock
EtwpReferenceGuidEntry
EtwpReferenceLoggerSecurityDescriptor
EtwpRegTraceCallback
EtwpRegTraceEnableCallback
EtwpRegisterProvider
EtwpRegisterUMGuid
EtwpReleaseLoggerContext
EtwpReleaseQueueEntry
EtwpRequestFlushTimer
EtwpReserveTraceBuffer
EtwpReserveWithPebsIndex
EtwpReserveWithPmcCounters
EtwpResetBufferHeader
EtwpRundownNotifications
EtwpSampledProfileRunDown
EtwpSendBufferToDebugger
EtwpSendDataBlock
EtwpSendDbgId
EtwpSendReplyDataBlock
EtwpSendSessionNotification
EtwpSendTraceEvent
EtwpSetMark
EtwpSetPmcProfileSource
EtwpShutdownConsumers
EtwpSpinLockConfigRunDown
EtwpStackRundown
EtwpStackTraceDispatcher
EtwpStackWalkApc
EtwpStackWalkDpc
EtwpStartAutoLogger
EtwpStartLogger
EtwpStartTrace
EtwpStopLoggerInstance
EtwpStopTrace
EtwpSwitchBuffer
EtwpSynchronizationDpc
EtwpSynchronizeWithLogger
EtwpSysModuleRunDown
EtwpSystemImageEnumCallback
EtwpSystemTraceWdf
EtwpThreadEnumCallback
EtwpThreadRundownApc
EtwpTraceALPC
EtwpTraceCachedStack
EtwpTraceDebugPrint
EtwpTraceFileIo
EtwpTraceFileName
EtwpTraceFltIo
EtwpTraceFltTimedIo
EtwpTraceHandle
EtwpTraceImageRundown
EtwpTraceIo
EtwpTraceIoInit
EtwpTraceKernelEventWithFilter
EtwpTraceLostEvent
EtwpTraceMessageVa
EtwpTraceNetwork
EtwpTraceOpticalIo
EtwpTraceOpticalIoInit
EtwpTraceProcessRundown
EtwpTraceRegistry
EtwpTraceRegistryTransaction
EtwpTraceSplitIo
EtwpTraceStackKey
EtwpTraceStackWalk
EtwpTraceSystemInitialization
EtwpTraceSystemShutdown
EtwpTraceThreadRundown
EtwpTraceThreadRundownWithStack
EtwpTraceWdf
EtwpTracingProvEnableCallback
EtwpTrackProviderBinary
EtwpUMGLEnabled
EtwpUnreferenceGuidEntry
EtwpUpdateEnableMask
EtwpUpdateFileHeader
EtwpUpdateFileInfoDriverState
EtwpUpdateFilterData
EtwpUpdateGroupMasks
EtwpUpdateGuidEnableInfo
EtwpUpdateKernelGroupMasks
EtwpUpdateKernelGroupsWork
EtwpUpdateLoggerGroupMasks
EtwpUpdateLoggerSecurityDescriptor
EtwpUpdatePayloadFilterData
EtwpUpdatePerProcessTracing
EtwpUpdatePerfectHashFunction
EtwpUpdatePidFilterData
EtwpUpdatePmcCounters
EtwpUpdatePmcEvents
EtwpUpdateProcessTracingCallback
EtwpUpdateSchematizedFilterData
EtwpUpdateStackTracing
EtwpUpdateStringFilterData
EtwpUpdateTagFilter
EtwpUpdateTrace
EtwpValidateEnableNotification
EtwpValidateFilterDescriptors
EtwpValidateFlagExtension
EtwpValidateLoggerInfo
EtwpValidatePayloadFilter
EtwpWaitForBufferReferenceCount
EtwpWriteUserEvent
ExAcquireCacheAwarePushLockExclusive
ExAcquireCacheAwarePushLockExclusiveEx
ExAcquireCacheAwarePushLockSharedEx
ExAcquireFastMutex
ExAcquireFastMutexUnsafe
ExAcquirePushLockExclusiveEx
ExAcquirePushLockSharedEx
ExAcquireResourceExclusiveLite
ExAcquireResourceSharedLite
ExAcquireRundownProtection
ExAcquireRundownProtectionCacheAware
ExAcquireRundownProtectionCacheAwareEx
ExAcquireRundownProtectionEx
ExAcquireSharedStarveExclusive
ExAcquireSharedWaitForExclusive
ExAcquireSpinLockExclusive
ExAcquireSpinLockExclusiveAtDpcLevel
ExAcquireSpinLockShared
ExAcquireSpinLockSharedAtDpcLevel
ExAcquireTimeRefreshLock
ExAllocateCacheAwarePushLock
ExAllocateCacheAwareRundownProtection
ExAllocateCallBack
ExAllocateFromNPagedLookasideList
ExAllocateFromPagedLookasideList
ExAllocatePool
ExAllocatePoolEx
ExAllocatePoolSanityChecks
ExAllocatePoolWithQuota
ExAllocatePoolWithQuotaTag
ExAllocatePoolWithTag
ExAllocatePoolWithTagPriority
ExAllocateTimer
ExAllocateTimerInternal
ExBlockOnAddressPushLock
ExBlockPushLock
ExBurnMemory
ExCallCallBack
ExCallSessionCallBack
ExCancelTimer
ExCleanTimerResolutionRequest
ExClearPoolFlags
ExCompareExchangeCallBack
ExComputeTickCountMultiplier
ExConvertExclusiveToSharedLite
ExCopyWakeTimerInfo
ExCovAddInfoToLoaderEntry
ExCovReadjustUnloadedModuleEntry
ExCreateCallback
ExCreateHandle
ExCreateHandleEx
ExCreateHandleTable
ExCreatePoolTagTable
ExDeferredFreePool
ExDeleteLookasideListEx
ExDeleteNPagedLookasideList
ExDeletePagedLookasideList
ExDeletePoolTagTable
ExDeleteResourceLite
ExDeleteTimer
ExDeleteWakeTimerInfo
ExDereferenceCallBackBlock
ExDereferenceHandleDebugInfo
ExDestroyHandle
ExDestroyHandleTable
ExDisableAllLookasideLists
ExDisableHandleTracing
ExDisableResourceBoostLite
ExDrainPoolLookasideList
ExDupHandleTable
ExEnableHandleExceptions
ExEnableHandleTracing
ExEnterCriticalRegionAndAcquireFastMutexUnsafe
ExEnterCriticalRegionAndAcquireResourceExclusive
ExEnterCriticalRegionAndAcquireResourceShared
ExEnterCriticalRegionAndAcquireSharedWaitForExclusive
ExEnterPriorityRegionAndAcquireResourceExclusive
ExEnterPriorityRegionAndAcquireResourceShared
ExEnumHandleTable
ExExtendZone
ExFastReplenishHandleTableEntry
ExFlushLookasideListEx
ExFlushTb
ExFreeCacheAwarePushLock
ExFreeCacheAwareRundownProtection
ExFreeCallBack
ExFreeLargePool
ExFreePool
ExFreePoolEx
ExFreePoolSanityChecks
ExFreePoolWithTag
ExFreeSvmAsid
ExFreeToNPagedLookasideList
ExFreeToPagedLookasideList
ExGenRandom
ExGetBigPoolInfo
ExGetCallBackBlockContext
ExGetCallBackBlockRoutine
ExGetCurrentProcessorCounts
ExGetCurrentProcessorCpuUsage
ExGetExclusiveWaiterCount
ExGetExpirationDate
ExGetExtensionTable
ExGetFirmwareEnvironmentVariable
ExGetLicenseTamperState
ExGetNextProcess
ExGetNextWakeTime
ExGetPoolTagInfo
ExGetPreviousMode
ExGetSessionBigPoolInformation
ExGetSessionPoolTagInfo
ExGetSessionPoolTagInformation
ExGetSharedWaiterCount
ExGetWakeTimerList
ExHandleLogBadReference
ExHandleTableQuery
ExInitPoolLookasidePointers
ExInitSystem
ExInitSystemPhase2
ExInitializeCallBack
ExInitializeExternalBootSupport
ExInitializeLookasideListEx
ExInitializeLookasideListExInternal
ExInitializeNPagedLookasideList
ExInitializeNPagedLookasideListInternal
ExInitializeNls
ExInitializePagedLookasideList
ExInitializePagedLookasideListInternal
ExInitializePoolDescriptor
ExInitializeProcessor
ExInitializePushLock
ExInitializeResourceLite
ExInitializeRundownProtection
ExInitializeRundownProtectionCacheAware
ExInitializeSystemLookasideList
ExInitializeTimeRefresh
ExInitializeUtcTimeZoneBias
ExInitializeZone
ExInsertPoolTag
ExInterlockedAddLargeInteger
ExInterlockedAddUlong
ExInterlockedExtendZone
ExInterlockedInsertHeadList
ExInterlockedInsertTailList
ExInterlockedPopEntryList
ExInterlockedPushEntryList
ExInterlockedRemoveHeadList
ExIsProcessorFeaturePresent
ExIsResourceAcquiredExclusiveLite
ExIsResourceAcquiredSharedLite
ExIsRestrictedCaller
ExLocalTimeToSystemTime
ExLockUserBuffer
ExMapHandleToPointer
ExMapHandleToPointerEx
ExNotifyBootDeviceRemoval
ExNotifyCallback
ExNotifyPlatformBinaryExecuted
ExNotifyWithProcessing
ExProcessorCounterSetCallback
ExProtectPool
ExQueryBootEntropyInformation
ExQueryDepthSList
ExQueryHandleExceptionsPermanency
ExQueryPoolBlockSize
ExQueryPoolUsage
ExQueryProcessHandleInformation
ExQuerySystemLockInformation
ExQueryTimerResolution
ExQueryWnfStateData
ExQueueDebuggerWorker
ExQueueSafeForwardProgressWorkItem
ExQueueWorkItem
ExQueueWorkItemEx
ExRaiseAccessViolation
ExRaiseDatatypeMisalignment
ExRaiseHardError
ExReArmFastCache
ExReInitializeRundownProtection
ExReInitializeRundownProtectionCacheAware
ExRealTimeIsUniversal
ExReferenceCallBackBlock
ExReferenceHandleDebugInfo
ExRegisterBootDevice
ExRegisterCallback
ExRegisterExtension
ExRegisterHost
ExReinitializeResourceLite
ExReleaseCacheAwarePushLockExclusive
ExReleaseCacheAwarePushLockExclusiveEx
ExReleaseCacheAwarePushLockSharedEx
ExReleaseExtensionTable
ExReleaseFastMutex
ExReleaseFastMutexUnsafe
ExReleaseFastMutexUnsafeAndLeaveCriticalRegion
ExReleasePushLockEx
ExReleasePushLockExclusiveEx
ExReleasePushLockSharedEx
ExReleaseResourceAndLeaveCriticalRegion
ExReleaseResourceAndLeavePriorityRegion
ExReleaseResourceForThreadLite
ExReleaseResourceLite
ExReleaseRundownProtection
ExReleaseRundownProtectionCacheAware
ExReleaseRundownProtectionCacheAwareEx
ExReleaseRundownProtectionEx
ExReleaseSpinLockExclusive
ExReleaseSpinLockExclusiveFromDpcLevel
ExReleaseSpinLockShared
ExReleaseSpinLockSharedFromDpcLevel
ExReleaseTimeRefreshLock
ExRemoveLowBoxAtomReferences
ExRemoveVirtualizedTimer
ExReturnPoolQuota
ExRundownCompleted
ExRundownCompletedCacheAware
ExSetFirmwareEnvironmentVariable
ExSetLicenseTamperState
ExSetPoolFlags
ExSetResourceOwnerPointer
ExSetResourceOwnerPointerEx
ExSetTimer
ExSetTimerResolution
ExShutdownSystem
ExSizeOfRundownProtectionCacheAware
ExSlowReplenishHandleTableEntry
ExSubscribeWnfStateChange
ExSvmAccessFaultInterrupt
ExSwapinWorkerThreads
ExSweepHandleTable
ExSystemExceptionFilter
ExSystemTimeToLocalTime
ExTimedWaitForUnblockPushLock
ExTimerPause
ExTimerResume
ExTimerRundown
ExTraceTimerResolution
ExTryAcquireCacheAwarePushLockExclusive
ExTryAcquirePushLockExclusiveEx
ExTryAcquirePushLockSharedEx
ExTryAcquireSpinLockExclusiveAtDpcLevel
ExTryConvertPushLockSharedToExclusiveEx
ExTryConvertSharedSpinLockExclusive
ExTryConvertSharedToExclusiveLite
ExTryLockProtoPoolAtDpc
ExTryQueueWorkItem
ExTryToAcquireFastMutex
ExTryToAcquireResourceExclusiveLite
ExUnblockOnAddressPushLockEx
ExUnblockPushLockEx
ExUnlockHandleTableEntry
ExUnlockUserBuffer
ExUnregisterCallback
ExUnregisterExtension
ExUnsubscribeWnfStateChange
ExUpdateLicenseRegistry
ExUpdateSystemTimeFromCmos
ExUuidCreate
ExVerifySuite
ExWaitForCallBacks
ExWaitForRundownProtectionRelease
ExWaitForRundownProtectionReleaseCacheAware
ExWaitForUnblockPushLock
ExWnfExitProcess
ExfAcquirePushLockExclusive
ExfAcquirePushLockExclusiveEx
ExfAcquirePushLockShared
ExfAcquirePushLockSharedEx
ExfAcquireRundownProtection
ExfReleasePushLock
ExfReleasePushLockExclusive
ExfReleasePushLockShared
ExfReleaseRundownProtection
ExfTryAcquirePushLockShared
ExfTryToWakePushLock
ExfUnblockPushLock
ExfWaitForRundownProtectionRelease
ExpAcquireFastMutexContended
ExpAcquireMicrocodeUpdateLock
ExpAcquireSpinLockExclusiveAtDpcLevelInstrumented
ExpAcquireSpinLockSharedAtDpcLevelInstrumented
ExpAllocateBigPool
ExpAllocateHandleTable
ExpAllocateHandleTableEntry
ExpAllocateHandleTableEntrySlow
ExpAllocateLowLevelTable
ExpAllocateMidLevelTable
ExpAllocateSharedWaiterSemaphore
ExpAllocateStringRoutine
ExpAllocateTablePagedPool
ExpAllocateTablePagedPoolNoZero
ExpAllocateUuids
ExpApplyPriorityBoost
ExpBlockOnLockedHandleEntry
ExpBoostIoAfterAcquire
ExpBootFinishedDispatch
ExpCallProcessing
ExpCancelTimer
ExpCaptureWnfStateName
ExpCenturyDpcRoutine
ExpCheckForFreedEnhancedTimer
ExpCheckForLookaside
ExpCheckForLookasideList
ExpCheckForResource
ExpCheckForWorker
ExpCheckFullProcessInformationAccess
ExpCheckIRTimerAccess
ExpCheckThreadHistory
ExpCloseIRTimer
ExpCloseWorkerFactory
ExpCompleteSoftReboot
ExpConvertArcName
ExpConvertSignatureName
ExpCopyProcessInfo
ExpCovCreateUnloadedModuleEntry
ExpCovDeleteUnloadedModuleEntry
ExpCovFreeUnloadedModuleEntry
ExpCovGetSectionInfo
ExpCovIsLoadedModulePresent
ExpCovIsModulePresent
ExpCovIsUnLoadedModulePresent
ExpCovQueryInfoCallBack
ExpCovQueryInformation
ExpCovQueryLoadedModule
ExpCovReadFriendlyName
ExpCovReadRequestBuffer
ExpCovResetInfoCallBack
ExpCovResetInformation
ExpCreateOutputARC
ExpCreateOutputEFI
ExpCreateOutputNT
ExpCreateOutputSIGNATURE
ExpCreateRestrictedFastCacheRegistryKey
ExpCreateSystemThreadForNode
ExpCreateWorkerThread
ExpDebuggerDpcRoutine
ExpDebuggerWorker
ExpDeleteCallback
ExpDeleteMutant
ExpDeleteTimer
ExpDeleteWorkerFactory
ExpDereferenceHost
ExpDereferenceObject
ExpDisableInterrupt
ExpEnableInterrupt
ExpEnumerateCallback
ExpEventInitialization
ExpExpandResourceOwnerTable
ExpExpirationThread
ExpFastCacheDescriptorCompare
ExpFastInstruction
ExpFinalizeTimerDeletion
ExpFindArcName
ExpFindCurrentThread
ExpFindDiskSignature
ExpFindEmptyEntry
ExpFindFastCacheDescriptor
ExpFindHost
ExpFreeAsid
ExpFreeHandleTable
ExpFreeHandleTableEntry
ExpFreeLowLevelTable
ExpFreeTablePagedPool
ExpGetCurrentUserUILanguage
ExpGetDeviceDataInformation
ExpGetDriveGeometry
ExpGetFirmwareEnvironmentVariable
ExpGetGlobalLocaleSection
ExpGetHandleExtraInfo
ExpGetHandleInformation
ExpGetHandleInformationEx
ExpGetLockInformation
ExpGetLookasideInformation
ExpGetMicrocodeImageFileName
ExpGetNextCallback
ExpGetNextHandleTableEntry
ExpGetObjectInformation
ExpGetPartitionTableInfo
ExpGetPoolTagInfoTarget
ExpGetProcessInformation
ExpGetSystemBasicInformation
ExpGetSystemEmulationBasicInformation
ExpGetSystemEmulationProcessorInformation
ExpGetSystemFirmwareTableInformation
ExpGetSystemPlatformBinary
ExpGetSystemProcessorFeaturesInformation
ExpGetSystemProcessorInformation
ExpGetUILanguagePolicy
ExpHotAddProcessorToWorkers
ExpInitBootEntropyInformation
ExpInitSystemPhase0
ExpInitSystemPhase1
ExpInitializeCallbacks
ExpInitializeMicrocodeUpdateLock
ExpInitializeSessionDriver
ExpInitializeThreadHistory
ExpInsertLowLevelTableIntoFreeList
ExpInsertPoolTracker
ExpInsertPoolTrackerExpansion
ExpInterlockedFlushSList
ExpInterlockedPopEntrySList
ExpInterlockedPushEntrySList
ExpIsDevicePathForRemovableMedia
ExpIsPoolTagPrintable
ExpIsValidUILanguage
ExpKeyedEventInitialization
ExpLeaveWorkerFactoryAwayMode
ExpLicenseWatchInitWorker
ExpLoadMicrocodeImage
ExpLockResource
ExpLookupHandleTableEntry
ExpMicrocodeInformationLoad
ExpMicrocodeInformationUnload
ExpMicrocodeInitialization
ExpMicrocodePowerStateCallback
ExpMutantInitialization
ExpNextYearDpcRoutine
ExpOptimizePushLockList
ExpParseArcPathName
ExpParseEfiPath
ExpParseFastCache
ExpParseFastCacheHelper
ExpParseSignatureName
ExpPcwHostCallback
ExpProfileCreate
ExpProfileDelete
ExpProfileInitialization
ExpQueryChannelInformation
ExpQueryElamCertInfo
ExpQueryLegacyDriverInformation
ExpQueryMemoryTopologyInformation
ExpQueryModuleInformation
ExpQueryModuleInformationEx
ExpQueryNumaAvailableMemory
ExpQueryNumaProcessorMap
ExpQueryNumaProximityNode
ExpQueryPortableWorkspaceEfiLauncherInformation
ExpQueryProcessorInformationCounters
ExpQuerySystemInformation
ExpQuerySystemPerformanceInformation
ExpQueueWorkItemNode
ExpRaiseHardError
ExpReadComPlusPackage
ExpRecordShutdownTime
ExpRefreshSystemTime
ExpRefreshTimeZoneInformation
ExpRegisterFirmwareTableInformationHandler
ExpReleaseFastMutexContended
ExpReleaseMicrocodeUpdateLock
ExpReleaseResourceForThreadLite
ExpReleaseSpinLockExclusiveFromDpcLevelInstrumented
ExpReleaseSpinLockSharedFromDpcLevelInstrumented
ExpRemoveCurrentThreadFromThreadHistory
ExpRemoveGeneralLookaside
ExpRemoveHandleTable
ExpRemovePoolTrackerExpansion
ExpResizeBigPageTable
ExpRngInitializeSystem
ExpSafeWcslen
ExpScanGeneralLookasideList
ExpScanSystemLookasideList
ExpSeedHotTags
ExpSemaphoreInitialization
ExpSetBootEntry
ExpSetCurrentUserUILanguage
ExpSetDriverEntry
ExpSetFirmwareEnvironmentVariable
ExpSetHandleExtraInfo
ExpSetProcessorMicrocodeUpdateInformation
ExpSetSwappingKernelApc
ExpSetSystemTime
ExpSetThreadReaperEvents
ExpSetTimeZoneInformation
ExpSetTimer
ExpSetTimer2
ExpSetWorkerFactoryDeferredCreateTimer
ExpShutdownWorkerFactory
ExpSlowInstruction
ExpSnapShotHandleTables
ExpStringCapture
ExpStringFree
ExpSvmDpcRoutine
ExpSvmWorkerThread
ExpSystemErrorHandler
ExpSystemErrorHandler2
ExpTimeRefreshCallback
ExpTimeRefreshDpcRoutine
ExpTimeRefreshWork
ExpTimeZoneDpcRoutine
ExpTimeZoneWork
ExpTimerApcRoutine
ExpTimerDpcRoutine
ExpTimerInitialization
ExpTimerResume
ExpTimerSetParametersAreValid
ExpTranslateArcPath
ExpTranslateBootEntryNameToId
ExpTranslateDriverEntryNameToId
ExpTranslateEfiPath
ExpTranslateHexStringToGUID
ExpTranslateHexStringToULONG
ExpTranslateHexStringToULONGLONG
ExpTranslateNtPath
ExpTranslateSymbolicLink
ExpTriggerFastCacheReeval
ExpTryAcquireSpinLockExclusiveAtDpcLevelInstrumented
ExpTryAcquireSpinLockSharedAtDpcLevelInstrumented
ExpTryConvertSharedSpinLockExclusiveInstrumented
ExpTryEnterWorkerFactoryAwayMode
ExpUnblockPushLock
ExpUnicodeStringToNonpagedWStr
ExpUnloadMicrocodeImage
ExpUnlockResource
ExpUpdateComPlusPackage
ExpUpdateDebugInfo
ExpUpdateProductSuiteType
ExpUpdateProductSuiteTypeInRegistry
ExpUpdateTimerConfiguration
ExpUpdateTimerConfigurationWorker
ExpUpdateTimerResolution
ExpUseSpecialPool
ExpUuidGetValues
ExpUuidLoadSequenceNumber
ExpUuidSaveSequenceNumber
ExpUuidSaveSequenceNumberIf
ExpValidateFastCacheSize
ExpValidateLocale
ExpVerifyFilePath
ExpVerifyWindowsOsOptions
ExpWaitForBootDevices
ExpWaitForResource
ExpWaitForSpinLockExclusiveAndAcquire
ExpWaitForSpinLockSharedAndAcquire
ExpWakePushLock
ExpWin32CloseProcedure
ExpWin32DeleteProcedure
ExpWin32Initialization
ExpWin32OkayToCloseProcedure
ExpWin32OpenProcedure
ExpWin32ParseProcedure
ExpWnfAcquireSubscriptionByName
ExpWnfAcquireSubscriptionNameInstance
ExpWnfAllocateNextPersistentNameSequence
ExpWnfAllocateScopeInstance
ExpWnfAllocateScopeMap
ExpWnfCaptureScopeInstanceId
ExpWnfCheckCallerAccess
ExpWnfCheckCrossScopeAccess
ExpWnfCompleteThreadSubscriptions
ExpWnfComposeValueName
ExpWnfCreateNameInstance
ExpWnfCreateProcessContext
ExpWnfDeleteNameInstance
ExpWnfDeleteNameInstanceCallback
ExpWnfDeletePermanentName
ExpWnfDeletePermanentStateData
ExpWnfDeleteProcessContext
ExpWnfDeleteScopeById
ExpWnfDeleteStateData
ExpWnfDeleteSubscription
ExpWnfDeliverThreadNotifications
ExpWnfDispatchKernelSubscription
ExpWnfEnumeratePermanentDataStores
ExpWnfEnumerateScopeInstances
ExpWnfFindScopeInstance
ExpWnfFindStateName
ExpWnfFreeScopeInstance
ExpWnfGenerateStateName
ExpWnfGetCurrentScopeInstance
ExpWnfGetNameStoreRegistryRoot
ExpWnfGetPermanentDataStoreHandle
ExpWnfGetPermanentDataStoreHandleByScopeId
ExpWnfInsertSubscriptionInPendingQueue
ExpWnfLookupNameInstance
ExpWnfLookupPermanentName
ExpWnfNotifyNameSubscribers
ExpWnfNotifySubscription
ExpWnfPopulateStateData
ExpWnfQueryCurrentUserSID
ExpWnfReadStateData
ExpWnfRegisterPermanentName
ExpWnfReleaseCapturedScopeInstanceId
ExpWnfResolveScopeInstance
ExpWnfSpecializeSecurityDescriptor
ExpWnfStartKernelDispatcher
ExpWnfSubscribeNameInstance
ExpWnfSubscribeWnfStateChange
ExpWnfUpdateSubscription
ExpWnfValidatePubSubPreconditions
ExpWnfWorkItemRoutine
ExpWnfWriteStateData
ExpWorkMicrocode
ExpWorkerFactoryCheckCreate
ExpWorkerFactoryCompletionPacketRoutine
ExpWorkerFactoryCreateThread
ExpWorkerFactoryInitialization
ExpWorkerFactoryManagerThread
ExpWorkerHotAddProcessor
ExpWorkerInitialization
ExpWorkerThread
ExpWorkerThreadBalanceManager
ExpressionConvertToString
FadePalette
FilterConvertToString
FilterEval
FilterEvalImpliedAnd
FilterEvalStrict
FindBitmapResource
FindEmailAt
FindFileInfo
FindFilterOperatorClose
FindLabelEnd
FindNodeOrParent
FioFwReadBytesAtOffset
FioFwReadUlong
FioFwReadUlongAtOffset
FioFwReadUshortAtOffset
FirstEntrySList
FopFreeFontData
FopGetTableOffsetAndSize
FopInitializeFonts
FopReadCmapTable
FopReadMappingTable
FopReadNameRecord
FopReadNamingTable
FopValidateFontNameTable
FsFilterAllocateCompletionStack
FsFilterCtrlFree
FsFilterCtrlInit
FsFilterFreeCompletionStack
FsFilterInit
FsFilterPerformCallbacks
FsFilterPerformCompletionCallbacks
FsRtlAcknowledgeEcp
FsRtlAcquireEofLock
FsRtlAcquireFileExclusive
FsRtlAcquireFileExclusiveCommon
FsRtlAcquireFileForCcFlushEx
FsRtlAcquireFileForModWriteEx
FsRtlAcquireHeaderMutex
FsRtlAcquireToCreateMappedSection
FsRtlAddBaseMcbEntry
FsRtlAddBaseMcbEntryEx
FsRtlAddDiskIOCounterInstance
FsRtlAddEntry
FsRtlAddLargeMcbEntry
FsRtlAddMcbEntry
FsRtlAddToTunnelCache
FsRtlAllocateExtraCreateParameter
FsRtlAllocateExtraCreateParameterFromLookasideList
FsRtlAllocateExtraCreateParameterList
FsRtlAllocateFileLock
FsRtlAllocatePool
FsRtlAllocatePoolWithQuota
FsRtlAllocatePoolWithQuotaTag
FsRtlAllocatePoolWithTag
FsRtlAllocateResource
FsRtlAreThereCurrentOrInProgressFileLocks
FsRtlAreThereWaitingFileLocks
FsRtlAreVolumeStartupApplicationsComplete
FsRtlBalanceReads
FsRtlCancelNotify
FsRtlCancellableWaitForMultipleObjects
FsRtlCancellableWaitForSingleObject
FsRtlChangeBackingFileObject
FsRtlCheckLockForOplockRequest
FsRtlCheckLockForReadAccess
FsRtlCheckLockForWriteAccess
FsRtlCheckNoExclusiveConflict
FsRtlCheckNoSharedConflict
FsRtlCheckNotifyForDelete
FsRtlCheckOplock
FsRtlCheckOplockEx
FsRtlCheckUpperOplock
FsRtlCompareNodeAndKey
FsRtlCompleteLockIrpReal
FsRtlCopyRead
FsRtlCopyWrite
FsRtlCreateSectionForDataScan
FsRtlCurrentBatchOplock
FsRtlCurrentOplock
FsRtlCurrentOplockH
FsRtlDeleteExtraCreateParameterLookasideList
FsRtlDeleteKeyFromTunnelCache
FsRtlDeleteTunnelCache
FsRtlDeregisterUncProvider
FsRtlDiskIOCounterSetCallback
FsRtlDismountComplete
FsRtlDissectDbcs
FsRtlDoesDbcsContainWildCards
FsRtlEmptyFreePoolList
FsRtlFastCheckLockForRead
FsRtlFastCheckLockForWrite
FsRtlFastUnlockAll
FsRtlFastUnlockAllByKey
FsRtlFastUnlockSingle
FsRtlFastUnlockSingleExclusive
FsRtlFastUnlockSingleShared
FsRtlFindExtraCreateParameter
FsRtlFindFirstOverlapInNode
FsRtlFindFirstOverlappingExclusiveNode
FsRtlFindFirstOverlappingSharedNode
FsRtlFindInTunnelCache
FsRtlFindLargeIndex
FsRtlFreeExtraCreateParameter
FsRtlFreeExtraCreateParameterList
FsRtlFreeFileLock
FsRtlFreeTunnelNode
FsRtlGetCompatibilityModeValue
FsRtlGetEcpListFromIrp
FsRtlGetFileNameInformation
FsRtlGetFileSize
FsRtlGetIoAtEof
FsRtlGetNextBaseMcbEntry
FsRtlGetNextExtraCreateParameter
FsRtlGetNextFileLock
FsRtlGetNextLargeMcbEntry
FsRtlGetNextMcbEntry
FsRtlGetSectorSizeInformation
FsRtlGetSupportedFeatures
FsRtlGetTunnelParameterValue
FsRtlGetVirtualDiskNestingLevel
FsRtlHeatInit
FsRtlHeatLogIo
FsRtlHeatLogTierMove
FsRtlHeatUninit
FsRtlIncrementCcFastMdlReadWait
FsRtlIncrementCcFastReadNoWait
FsRtlIncrementCcFastReadNotPossible
FsRtlIncrementCcFastReadResourceMiss
FsRtlIncrementCcFastReadWait
FsRtlInitExtraCreateParameterLookasideList
FsRtlInitSystem
FsRtlInitializeBaseMcb
FsRtlInitializeBaseMcbEx
FsRtlInitializeEofLock
FsRtlInitializeExtraCreateParameter
FsRtlInitializeExtraCreateParameterList
FsRtlInitializeFileLock
FsRtlInitializeFileLocks
FsRtlInitializeLargeMcb
FsRtlInitializeMcb
FsRtlInitializeOplock
FsRtlInitializeSmssEvent
FsRtlInitializeTieringHeat
FsRtlInitializeTunnelCache
FsRtlInitializeTunnels
FsRtlInitializeWorkerThread
FsRtlInsertExtraCreateParameter
FsRtlInsertPerFileContext
FsRtlInsertPerFileContextInternal
FsRtlInsertPerFileObjectContext
FsRtlInsertPerStreamContext
FsRtlInsertReservedPerFileContext
FsRtlInsertReservedPerStreamContext
FsRtlIsDbcsInExpression
FsRtlIsEcpAcknowledged
FsRtlIsEcpFromUserMode
FsRtlIsFatDbcsLegal
FsRtlIsHpfsDbcsLegal
FsRtlIsNotifyOnList
FsRtlIsNtstatusExpected
FsRtlIsPagingFile
FsRtlIsSystemPagingFile
FsRtlIsTotalDeviceFailure
FsRtlIssueDeviceIoControl
FsRtlIssueFileNotificationFsctl
FsRtlKernelFsControlFile
FsRtlLogCcFlushError
FsRtlLookupBaseMcbEntry
FsRtlLookupLargeMcbEntry
FsRtlLookupLastBaseMcbEntry
FsRtlLookupLastBaseMcbEntryAndIndex
FsRtlLookupLastLargeMcbEntry
FsRtlLookupLastLargeMcbEntryAndIndex
FsRtlLookupLastMcbEntry
FsRtlLookupMcbEntry
FsRtlLookupPerFileContext
FsRtlLookupPerFileObjectContext
FsRtlLookupPerStreamContextInternal
FsRtlLookupReservedPerFileContext
FsRtlLookupReservedPerStreamContext
FsRtlMdlRead
FsRtlMdlReadComplete
FsRtlMdlReadCompleteDev
FsRtlMdlReadCompleteDevEx
FsRtlMdlReadDev
FsRtlMdlReadEx
FsRtlMdlWriteComplete
FsRtlMdlWriteCompleteDev
FsRtlMupGetProviderIdFromName
FsRtlMupGetProviderInfoFromFileObject
FsRtlNormalizeNtstatus
FsRtlNotifyChangeDirectory
FsRtlNotifyCleanup
FsRtlNotifyCleanupAll
FsRtlNotifyCleanupOneEntry
FsRtlNotifyCompleteIrp
FsRtlNotifyCompleteIrpList
FsRtlNotifyFilterChangeDirectory
FsRtlNotifyFilterReportChange
FsRtlNotifyFullChangeDirectory
FsRtlNotifyFullReportChange
FsRtlNotifyInitializeSync
FsRtlNotifyReportChange
FsRtlNotifySetCancelRoutine
FsRtlNotifyUninitializeSync
FsRtlNotifyUpdateBuffer
FsRtlNotifyVolumeEvent
FsRtlNotifyVolumeEventEx
FsRtlNumberOfRunsInBaseMcb
FsRtlNumberOfRunsInLargeMcb
FsRtlNumberOfRunsInMcb
FsRtlOplockBreakH
FsRtlOplockBreakToNone
FsRtlOplockBreakToNoneEx
FsRtlOplockFsctrl
FsRtlOplockFsctrlEx
FsRtlOplockIsFastIoPossible
FsRtlOplockIsSharedRequest
FsRtlOplockKeysEqual
FsRtlPTeardownPerFileObjectContexts
FsRtlPostPagingFileStackOverflow
FsRtlPostStackOverflow
FsRtlPrepareMdlWrite
FsRtlPrepareMdlWriteDev
FsRtlPrepareMdlWriteEx
FsRtlPrepareToReuseEcp
FsRtlPrivateCancelFileLockIrp
FsRtlPrivateCheckForExclusiveLockAccess
FsRtlPrivateCheckForSharedLockAccess
FsRtlPrivateCheckWaitingLocks
FsRtlPrivateFastUnlockAll
FsRtlPrivateInitializeFileLock
FsRtlPrivateInsertExclusiveLock
FsRtlPrivateInsertLock
FsRtlPrivateInsertSharedLock
FsRtlPrivateLock
FsRtlPrivateRemoveLock
FsRtlPrivateResetLowestLockOffset
FsRtlProcessFileLock
FsRtlPruneTunnelCache
FsRtlQueryCachedVdl
FsRtlQueryKernelEaFile
FsRtlQueryMaximumVirtualDiskNestingLevel
FsRtlRegisterFileSystemFilterCallbacks
FsRtlRegisterFltMgrCalls
FsRtlRegisterMupCalls
FsRtlRegisterUncProvider
FsRtlRegisterUncProviderEx
FsRtlReleaseEofLock
FsRtlReleaseFile
FsRtlReleaseFileForCcFlush
FsRtlReleaseFileForModWrite
FsRtlReleaseFileNameInformation
FsRtlReleaseHeaderMutex
FsRtlRemoveBaseMcbEntry
FsRtlRemoveDotsFromPath
FsRtlRemoveExtraCreateParameter
FsRtlRemoveLargeEntry
FsRtlRemoveLargeMcbEntry
FsRtlRemoveMcbEntry
FsRtlRemoveNodeFromTunnel
FsRtlRemovePerFileContext
FsRtlRemovePerFileObjectContext
FsRtlRemovePerStreamContext
FsRtlRemoveReservedPerFileContext
FsRtlRemoveReservedPerStreamContext
FsRtlResetBaseMcb
FsRtlResetLargeMcb
FsRtlSendModernAppTermination
FsRtlSetEcpListIntoIrp
FsRtlSetFileSize
FsRtlSetKernelEaFile
FsRtlSplitBaseMcb
FsRtlSplitLargeMcb
FsRtlSplitLocks
FsRtlStackOverflowRead
FsRtlSyncVolumes
FsRtlTeardownPerFileContexts
FsRtlTeardownPerStreamContexts
FsRtlTruncateBaseMcb
FsRtlTruncateLargeMcb
FsRtlTruncateMcb
FsRtlTryToAcquireHeaderMutex
FsRtlUninitializeBaseMcb
FsRtlUninitializeFileLock
FsRtlUninitializeLargeMcb
FsRtlUninitializeMcb
FsRtlUninitializeOplock
FsRtlUninitializeSmallMcb
FsRtlUpdateDiskCounters
FsRtlUpperOplockFsctrl
FsRtlValidateReparsePointBuffer
FsRtlWaitForSmssEvent
FsRtlWorkerThread
FsRtlpAcknowledgeOplockBreak
FsRtlpAcknowledgeOplockBreakByCacheFlags
FsRtlpAllocateOplock
FsRtlpAttachOplockKey
FsRtlpCallerIsAtomicRequestor
FsRtlpCancelExclusiveIrp
FsRtlpCancelOplockRHIrp
FsRtlpCancelReadOnlyOplockIrp
FsRtlpCancelWaitingIrp
FsRtlpCleanupEcps
FsRtlpClearOwnerThread
FsRtlpComputeShareableOplockState
FsRtlpDoBoost
FsRtlpExclusiveIrpCancelRoutine
FsRtlpFreeMdlChain
FsRtlpGenericCompletion
FsRtlpGetMaxVirtualDiskNestingLevel
FsRtlpGrantAnyOplockFromExclusive
FsRtlpHeatRegisterVolume
FsRtlpHeatUnregisterVolume
FsRtlpModifyThreadPriorities
FsRtlpNotifyOplockBreakComplete
FsRtlpOpBatchBreakClosePending
FsRtlpOpenDev
FsRtlpOplockBreakByCacheFlags
FsRtlpOplockBreakNotify
FsRtlpOplockBreakToII
FsRtlpOplockBreakToNone
FsRtlpOplockCleanup
FsRtlpOplockDequeueRH
FsRtlpOplockEnqueueRH
FsRtlpOplockFsctrlInternal
FsRtlpOplockKeysEqual
FsRtlpOplockRHIrpCancelRoutine
FsRtlpOplockStoreKeyForDeleteOperation
FsRtlpOplockUpperLowerCompatible
FsRtlpOplockWaitCompleteRoutine
FsRtlpPostStackOverflow
FsRtlpQueryValueKey
FsRtlpReadOnlyOplockIrpCancelRoutine
FsRtlpRegisterProviderWithMUP
FsRtlpRegisterUncProvider
FsRtlpReleaseIrpsWaitingForRH
FsRtlpRemoveAndBreakRHIrp
FsRtlpRemoveAndCompleteReadOnlyIrp
FsRtlpRemoveAndCompleteWaitingIrp
FsRtlpRequestExclusiveOplock
FsRtlpRequestShareableOplock
FsRtlpRestoreCallerEcpsToCallerList
FsRtlpWaitForIoAtEof
FsRtlpWaitOnIrp
FsRtlpWaitingIrpCancelRoutine
FstubAllocateDiskInformation
FstubConvertExtendedToLayout
FstubCreateDiskEFI
FstubCreateDiskMBR
FstubCreateDiskRaw
FstubDetectPartitionStyle
FstubFreeDiskInformation
FstubGetDiskGeometry
FstubReadHeaderEFI
FstubReadPartitionTableEFI
FstubReadPartitionTableMBR
FstubReadSector
FstubSetPartitionInformationEFI
FstubVerifyPartitionTableEFI
FstubWriteBootSectorEFI
FstubWriteEntryEFI
FstubWriteHeaderEFI
FstubWritePartitionTableEFI
FstubWritePartitionTableMBR
FstubWriteSector
GetBootSystemTime
GetNextWchar
GetPropertyFromPropArray
GetUCBytes
GetUTF32
GxpBitsToBytes
GxpReadFrameBufferPixels
GxpWriteFrameBufferPixels
HalAllocateCrashDumpRegisters
HalExamineMBR
HalPerformEndOfInterrupt
HalpCalculateChsValues
HalpGetFullGeometry
HalpIsValidPartitionEntry
HashFree
HdlspAddLogEntry
HdlspBugCheckProcessing
HdlspDispatch
HdlspEnableTerminal
HdlspGetLine
HdlspKernelAddLogEntry
HdlspProcessDumpCommand
HdlspPutData
HdlspPutMore
HdlspPutString
HdlspPutWideString
HdlspSendBlueScreenInfo
HdlspSendStringAtBaud
HdlspSetBlueScreenInformation
HdlspUTF8Encode
HeadlessDispatch
HeadlessInit
HeadlessKernelAddLogEntry
HeadlessTerminalAddResources
HvAddToLayoutStats
HvAllocateCell
HvApplyLegacyLogFile
HvApplyLogFile
HvBufferCheckSum
HvCheckAndUpdateHiveBackupTimeStamp
HvCheckBin
HvCheckHive
HvDuplicateCell
HvFoldBackDirtyData
HvFreeCell
HvFreeDirtyData
HvFreeHive
HvFreeHivePartial
HvFreeUnreconciledData
HvGetCurrentLogFileSizePointer
HvGetHiveLogFileStatus
HvInitializeHashLibrary
HvInitializeHive
HvIsCellAllocated
HvIsCurrentLogSwappable
HvIsInPlaceBaseBlockValid
HvLoadHive
HvMarkBaseBlockDirty
HvMarkDirty
HvMoveLayoutStats
HvReallocateCell
HvRefreshHive
HvResetDirtyData
HvResetLogFileStatusAll
HvResetUnreconciledData
HvStoreModifiedData
HvSyncHive
HvUpdateUnreconciledVector
HvValidateOrInvalidatePrimaryFileHeader
HvWriteExternal
HvWriteHivePrimaryFile
HvWriteLogFile
HvlAddPagesCallbackRoutine
HvlBugCheckCallbackRoutine
HvlCalculateLivedumpSize
HvlCollectLivedump
HvlConfigureIdleStates
HvlConfigurePcc
HvlConfigurePerfStateCap
HvlConfigurePerfStates
HvlConfigurePowerPolicySetting
HvlConfigureThrottleStates
HvlDebuggerSupportInitialize
HvlDeleteProcessor
HvlDisableEnlightenment
HvlEndSystemInterrupt
HvlEnlightenProcessor
HvlEnterSleepState
HvlFlushAddressSpaceTb
HvlFlushRangeListTb
HvlFlushSingleTb
HvlGetEnlightenmentInfo
HvlGetLogicalProcessorRunTime
HvlGetLpIndexFromApicId
HvlGetReferenceTime
HvlGetSystemPhysicalAddress
HvlInitializeHvCrashdump
HvlInitializeProcessor
HvlInvokeHypervisorDebugger
HvlInvokeWheaErrorNotificationCallback
HvlLogGuestCrashInformation
HvlLpGetMachineCheckContext
HvlLpReadCpuid
HvlLpReadMultipleMsr
HvlLpWriteMultipleMsr
HvlLpWritebackInvalidate
HvlMapDeviceInterrupt
HvlNmiCallbackRoutine
HvlNotifyAcpiReenabled
HvlNotifyDebugDeviceAvailable
HvlNotifyHpetEnabled
HvlNotifyLongSpinWait
HvlNotifyRootCrashdump
HvlParkedVirtualProcessors
HvlPerformEndOfInterrupt
HvlPhase0Initialize
HvlPhase1Initialize
HvlPhase2Initialize
HvlPrepareForHibernate
HvlPrepareLivedumpDescriptor
HvlQueryActiveHypervisorProcessorCount
HvlQueryActiveProcessors
HvlQueryAssociatedProcessors
HvlQueryConnection
HvlQueryEnlightenmentInfo
HvlQueryHypervisorProcessorNodeNumber
HvlQueryHypervisorTscAdjustment
HvlQueryNumaDistance
HvlQueryProcessorTopology
HvlQueryProcessorTopologyCount
HvlQueryProcessorTopologyHighestId
HvlRegisterInterruptCallback
HvlRegisterWheaErrorNotification
HvlRestoreEnlightenment
HvlResumePartition
HvlRouteInterrupt
HvlSetHpetConfig
HvlSetPartitionProperty
HvlSetSystemMachineCheckProperty
HvlSetSystemSleepProperty
HvlStartBootLogicalProcessors
HvlSuspendPartition
HvlSwitchVirtualAddressSpace
HvlUnmapDeviceInterrupt
HvlUnregisterInterruptCallback
HvlUnregisterWheaErrorNotification
HvlWheaInUsePageOfflineNotificationCallback
HvlWriteApicCommandRegister
HvlpAllocateEarlyPages
HvlpAllocateOverlayPages
HvlpComputeLpComparisonMetrics
HvlpCreateRootVirtualProcessor
HvlpDepositPages
HvlpDetermineEnlightenments
HvlpDiscoverTopology
HvlpDiscoverTopologyAmd
HvlpDiscoverTopologyIntel
HvlpEnlightenSwapContext
HvlpEtwRegister
HvlpExtendedFastHypercall
HvlpFastFlushAddressSpaceTb
HvlpFreeOverlayPages
HvlpGetLogicalProcessorProperty
HvlpGetLpcbByApicId
HvlpHvIdentityInfoCallback
HvlpInitializeBootProcessor
HvlpLogHypervisorLaunchError
HvlpLogIommuEvent
HvlpLogIommuInitStatus
HvlpLogProcessorStartupFailure
HvlpLpComparison
HvlpLpCpuid
HvlpMapEarlyPages
HvlpMapStatisticsPage
HvlpPowerPolicySettingCallback
HvlpQueryApicIdAndNumaNode
HvlpSelectLpSet
HvlpSelectVpSet
HvlpSetLogicalProcessorProperty
HvlpSetupBootProcessorEarlyHypercallPages
HvlpSetupBootProcessorHypercallPages
HvlpSlowFlushAddressSpaceTb
HvlpStartLogicalProcessor
HvlpTryConfigureInterface
HvlpWriteEventLog
HvpAddBin
HvpAddDummyBinToHive
HvpAddFreeCellHint
HvpAdjustBitmap
HvpAdjustHiveFreeDisplay
HvpAllocateMap
HvpApplyLogEntry
HvpBuildMap
HvpBuildMapForLoaderHive
HvpCleanMap
HvpCopyModifiedData
HvpCountSetRangesInVector
HvpDelistFreeCell
HvpDetermineLatestLogFile
HvpDoAllocateCell
HvpDropPagedBins
HvpEnlistBinInMap
HvpEnlistFreeCell
HvpEnlistFreeCells
HvpExpandMap
HvpFillFileName
HvpFindFreeCell
HvpFindFreeCellInBin
HvpFindNextDirtyBlock
HvpFinishPrimaryWrite
HvpFreeAllocatedBins
HvpFreeHiveFreeDisplay
HvpFreeMap
HvpGenerateLogEntry
HvpGenerateLogMetadata
HvpGetBinMemAlloc
HvpGetCellFlat
HvpGetCellMap
HvpGetCellPaged
HvpGetHCell
HvpGetHiveHeader
HvpGetLogHeader
HvpHeaderCheckSum
HvpInitMap
HvpIsFreeNeighbor
HvpIsMetadataArrayCoherent
HvpLogEntryCheckHeaderChecksum
HvpLogTypeToLogArrayIndex
HvpMapHiveImage
HvpMapHiveImageFromFile
HvpMarkCellDirty
HvpMarkDirty
HvpPointMapEntriesToBuffer
HvpReadHiveDataFromFile
HvpRecoverData
HvpRecoverDataReadRoutine
HvpRemapAndEnlistHiveBins
HvpRemoveFreeCellHint
HvpResetPageProtection
HvpSetRangeProtection
HvpTruncateBins
HvpUpdateRecoveryVector
HvpValidateLoadedBin
INCREASE_MAPPED_TRANSFER_BYTE_COUNT
INCREMENT_ADAPTER_CHANNELS
InbvAcquireDisplayOwnership
InbvAcquireLock
InbvBitBlt
InbvCheckDisplayOwnership
InbvDetermineFunction
InbvDisplayString
InbvDriverInitialize
InbvEnableBootDriver
InbvEnableDisplayString
InbvGetDisplayState
InbvGetResourceAddress
InbvIndicateProgress
InbvInstallDisplayStringFilter
InbvIsBootDriverInstalled
InbvNotifyDisplayOwnershipChange
InbvNotifyDisplayOwnershipLost
InbvPortEnableFifo
InbvPortGetByte
InbvPortInitialize
InbvPortPollOnly
InbvPortPutByte
InbvPortTerminate
InbvReleaseLock
InbvReleaseResources
InbvResetDisplay
InbvRotateGuiBootDisplay
InbvSetFunction
InbvSetProgressBarSubset
InbvSetScrollRegion
InbvSetTextColor
InbvSolidColorFill
InitBootProcessor
InitSafeBoot
InitializeDynamicPartitioningPolicy
InitializeListHeadPte
InitializePagedPool
InitializePool
InitializeSListHead
InsertChar
InsertTailListPte
InterlockedPushListSList
IoAcquireCancelSpinLock
IoAcquireRemoveLockEx
IoAcquireVpbSpinLock
IoAddTriageDumpDataBlock
IoAdjustStackSizeForRedirection
IoAllocateAdapterChannel
IoAllocateController
IoAllocateDriverObjectExtension
IoAllocateErrorLogEntry
IoAllocateGenericErrorLogEntry
IoAllocateIrp
IoAllocateMdl
IoAllocateMiniCompletionPacket
IoAllocateSfioStreamIdentifier
IoAllocateWorkItem
IoAllowExecution
IoApplyPriorityInfoThread
IoAssignResources
IoAsynchronousPageWrite
IoAttachDevice
IoAttachDeviceByPointer
IoAttachDeviceToDeviceStack
IoAttachDeviceToDeviceStackSafe
IoBoostThreadIo
IoBoostThreadIoPriority
IoBuildAsynchronousFsdRequest
IoBuildDeviceIoControlRequest
IoBuildPartialMdl
IoBuildPoDeviceNotifyList
IoBuildSynchronousFsdRequest
IoCallDriver
IoCancelFileOpen
IoCancelIrp
IoCancelThreadIo
IoCaptureLiveDump
IoChangeFileObjectFilterContext
IoCheckDesiredAccess
IoCheckEaBufferValidity
IoCheckFunctionAccess
IoCheckQuerySetFileInformation
IoCheckQuerySetVolumeInformation
IoCheckQuotaBufferValidity
IoCheckShareAccess
IoCheckShareAccessEx
IoClearActivityIdThread
IoClearDependency
IoClearIrpExtraCreateParameter
IoCompleteRequest
IoConfigureCrashDump
IoConnectInterrupt
IoConnectInterruptEx
IoControlPnpDeviceActionQueue
IoConvertFileHandleToKernelHandle
IoCopyDeviceObjectHint
IoCreateArcName
IoCreateController
IoCreateDevice
IoCreateDisk
IoCreateDriver
IoCreateFile
IoCreateFileEx
IoCreateFileSpecifyDeviceObjectHint
IoCreateNotificationEvent
IoCreateObjectTypes
IoCreateStreamFileObject
IoCreateStreamFileObjectEx
IoCreateStreamFileObjectEx2
IoCreateStreamFileObjectLite
IoCreateSymbolicLink
IoCreateSynchronizationEvent
IoCreateSystemThread
IoCreateUnprotectedSymbolicLink
IoCsqInitialize
IoCsqInitializeEx
IoCsqInsertIrp
IoCsqInsertIrpEx
IoCsqRemoveIrp
IoCsqRemoveNextIrp
IoDecrementKeepAliveCount
IoDeleteAllDependencyRelations
IoDeleteController
IoDeleteDevice
IoDeleteDriver
IoDeleteSymbolicLink
IoDetachDevice
IoDisconnectInterrupt
IoDisconnectInterruptEx
IoDumpStackResumeCapable
IoDuplicateDependency
IoEnqueueIrp
IoEnumerateDeviceObjectList
IoEnumerateEnvironmentVariablesEx
IoEnumerateRegisteredFiltersList
IoFastQueryNetworkAttributes
IoFillDumpHeader
IoFillTriageDumpBuffer
IoFindDeviceThatFailedIrp
IoForwardIrpSynchronously
IoFreeController
IoFreeDumpRange
IoFreeErrorLogEntry
IoFreeIrp
IoFreeMdl
IoFreeMiniCompletionPacket
IoFreePoDeviceNotifyList
IoFreeSfioStreamIdentifier
IoFreeWorkItem
IoGetActivityIdIrp
IoGetActivityIdThread
IoGetAffinityInterrupt
IoGetAttachedDevice
IoGetAttachedDeviceReference
IoGetBaseFileSystemDeviceObject
IoGetBootDiskInformation
IoGetBootDiskInformationLite
IoGetConfigurationInformation
IoGetContainerInformation
IoGetDeviceAttachmentBaseRef
IoGetDeviceInstanceName
IoGetDeviceInterfaceAlias
IoGetDeviceInterfacePropertyData
IoGetDeviceInterfaces
IoGetDeviceNumaNode
IoGetDeviceObjectPointer
IoGetDeviceProperty
IoGetDevicePropertyData
IoGetDeviceToVerify
IoGetDiskDeviceObject
IoGetDmaAdapter
IoGetDriverObjectExtension
IoGetDumpHiberRanges
IoGetEnvironmentVariableEx
IoGetFileObjectFilterContext
IoGetFileObjectGenericMapping
IoGetGenericIrpExtension
IoGetInitialStack
IoGetInitiatorProcess
IoGetIoPriorityHint
IoGetIrpExtraCreateParameter
IoGetLegacyVetoList
IoGetLoadedDriverInfo
IoGetLowerDeviceObject
IoGetOplockFullFoExt
IoGetOplockKeyContext
IoGetOplockKeyContextEx
IoGetPagingIoPriority
IoGetRelatedDeviceObject
IoGetRelatedTargetDevice
IoGetRequestorProcess
IoGetRequestorProcessId
IoGetRequestorSessionId
IoGetSfioStreamIdentifier
IoGetStackLimits
IoGetSymlinkSupportInformation
IoGetTopLevelIrp
IoGetTransactionParameterBlock
IoIncrementKeepAliveCount
IoInitSystem
IoInitializeCrashDump
IoInitializeDumpStack
IoInitializeIrp
IoInitializeMiniCompletionPacket
IoInitializeProcessor
IoInitializeRemoveLockEx
IoInitializeTimer
IoInitializeWorkItem
IoInvalidateDeviceRelations
IoInvalidateDeviceState
IoIs32bitProcess
IoIsActivityTracingEnabled
IoIsDeviceEjectable
IoIsDumpEnabled
IoIsFileObjectIgnoringSharing
IoIsFileOriginRemote
IoIsInitiator32bitProcess
IoIsOperationSynchronous
IoIsSystemThread
IoIsValidIrpStatus
IoIsValidNameGraftingBuffer
IoIsWdmVersionAvailable
IoLoadCrashDumpDriver
IoMakeAssociatedIrp
IoNotifyDump
IoNotifyPowerOperationVetoed
IoOpenDeviceInterfaceRegistryKey
IoOpenDeviceRegistryKey
IoPageRead
IoPerfInit
IoPerfReset
IoProcessPassiveInterrupts
IoPropagateActivityIdToThread
IoPropagateIrpExtension
IoQueryDeviceDescription
IoQueryEnvironmentVariableInfoEx
IoQueryFileDosDeviceName
IoQueryFileInformation
IoQueryFullDriverPath
IoQueryLowPriorityIoInformation
IoQuerySystemDeviceName
IoQueryVhdBootInformation
IoQueryVolumeInformation
IoQueueThreadIrp
IoQueueWorkItem
IoQueueWorkItemEx
IoQueueWorkItemToNode
IoRaiseHardError
IoRaiseInformationalHardError
IoReadDiskSignature
IoReadPartitionTable
IoReadPartitionTableEx
IoRegisterBootDriverCallback
IoRegisterBootDriverReinitialization
IoRegisterContainerNotification
IoRegisterDeviceInterface
IoRegisterDriverReinitialization
IoRegisterFileSystem
IoRegisterFsRegistrationChange
IoRegisterFsRegistrationChangeMountAware
IoRegisterIoTracking
IoRegisterLastChanceShutdownNotification
IoRegisterPlugPlayNotification
IoRegisterPriorityCallback
IoRegisterShutdownNotification
IoReleaseCancelSpinLock
IoReleaseRemoveLockAndWaitEx
IoReleaseRemoveLockEx
IoReleaseVpbSpinLock
IoRemoveIoCompletion
IoRemoveShareAccess
IoReplaceFileObjectName
IoReplacePartitionUnit
IoReportDetectedDevice
IoReportHalResourceUsage
IoReportInterruptActive
IoReportInterruptInactive
IoReportResourceForDetection
IoReportResourceUsage
IoReportResourceUsageInternal
IoReportRootDevice
IoReportTargetDeviceChange
IoReportTargetDeviceChangeAsynchronous
IoRequestDeviceEject
IoRequestDeviceEjectEx
IoReserveDependency
IoResolveDependency
IoRetrievePriorityInfo
IoReuseIrp
IoRevokeHandlesForProcess
IoSetActivityIdIrp
IoSetActivityIdThread
IoSetCompletionRoutineEx
IoSetDependency
IoSetDeviceInterfacePropertyData
IoSetDeviceInterfaceState
IoSetDevicePropertyData
IoSetDeviceToVerify
IoSetDumpRange
IoSetEnvironmentVariableEx
IoSetFileObjectIgnoreSharing
IoSetFileOrigin
IoSetGenericIrpExtension
IoSetHardErrorOrVerifyDevice
IoSetInformation
IoSetIoCompletion
IoSetIoCompletionEx
IoSetIoCompletionEx2
IoSetIoPriorityHint
IoSetIoPriorityHintIntoFileObject
IoSetIoPriorityHintIntoThread
IoSetIrpExtraCreateParameter
IoSetMasterIrpStatus
IoSetOplockKeyContext
IoSetOplockPrivateFoExt
IoSetPartitionInformation
IoSetPartitionInformationEx
IoSetShareAccess
IoSetShareAccessEx
IoSetStartIoAttributes
IoSetSystemPartition
IoSetThreadHardErrorMode
IoSetTopLevelIrp
IoShutdownSystem
IoSizeofGenericIrpExtension
IoSizeofWorkItem
IoStartNextPacket
IoStartNextPacketByKey
IoStartPacket
IoStartTimer
IoStopTimer
IoSynchronousCallDriver
IoSynchronousInvalidateDeviceRelations
IoSynchronousPageWrite
IoTestDependency
IoThreadToProcess
IoTransferActivityId
IoTranslateBusAddress
IoTryQueueWorkItem
IoUninitializeWorkItem
IoUnregisterBootDriverCallback
IoUnregisterContainerNotification
IoUnregisterFileSystem
IoUnregisterFsRegistrationChange
IoUnregisterIoTracking
IoUnregisterPlugPlayNotification
IoUnregisterPlugPlayNotificationEx
IoUnregisterPriorityCallback
IoUnregisterShutdownNotification
IoUpdateDumpPhysicalRanges
IoUpdateShareAccess
IoValidateDeviceIoControlAccess
IoVerifierCheckForSettingsChange
IoVerifierInit
IoVerifyPartitionTable
IoVerifyVolume
IoVolumeDeviceToDosName
IoVolumeDeviceToGuid
IoVolumeDeviceToGuidPath
IoWMIAllocateInstanceIds
IoWMICompleteRequest
IoWMIDeviceObjectToInstanceName
IoWMIDeviceObjectToProviderId
IoWMIExecuteMethod
IoWMIHandleToInstanceName
IoWMIOpenBlock
IoWMIQueryAllData
IoWMIQueryAllDataMultiple
IoWMIQuerySingleInstance
IoWMIQuerySingleInstanceMultiple
IoWMIRegistrationControl
IoWMISetNotificationCallback
IoWMISetSingleInstance
IoWMISetSingleItem
IoWMISuggestInstanceName
IoWMISystemControl
IoWMIWriteEvent
IoWithinStackLimits
IoWriteCrashDump
IoWriteErrorLogEntry
IoWritePartitionTable
IoWritePartitionTableEx
IofCallDriver
IofCallDriverSpecifyReturn
IofCompleteRequest
IopAbortRequest
IopAcquireActiveConnectLock
IopAcquireFileObjectLock
IopAcquireReleaseConnectLockInternal
IopAcquireReleaseDispatcherLock
IopAddBootDiskInformation
IopAddBugcheckPnpTriageData
IopAddBugcheckPowerTriageData
IopAddBugcheckTriageDevice
IopAddBugcheckTriageDeviceNode
IopAddBugcheckTriageIrp
IopAddBugcheckTriageThread
IopAddBugcheckTriageUnicodeString
IopAddBugcheckTriageWorkQueue
IopAddPageDumpRange
IopAddPageToPageMap
IopAddRelationToList
IopAddRemoveReqDescs
IopAddRunTimeTriageDataBlocks
IopAddTriageDumpDataBlock
IopAdjustFileObjectKeepAliveCount
IopAllocRealFileObject
IopAllocateBackpocketIrp
IopAllocateBootResources
IopAllocateBootResourcesInternal
IopAllocateErrorLogEntry
IopAllocateFileObjectExtension
IopAllocateFoExtensionsOnCreate
IopAllocateGenericTableEntry
IopAllocateIrpCleanup
IopAllocateIrpExtension
IopAllocateIrpMustSucceed
IopAllocateIrpPrivate
IopAllocateIrpWithExtension
IopAllocateLegacyBootResources
IopAllocateMiniCompletionPacket
IopAllocatePassiveInterruptBlock
IopAllocateRelationList
IopAllocateReserveIrp
IopAllocateUnicodeString
IopAllowRemoteDASD
IopApcHardError
IopAppendLegacyVeto
IopApplySystemPartitionProt
IopAssignBootDriveLetter
IopAttachDeviceToDeviceStackSafe
IopBoostThreadCallback
IopBootAllocation
IopBootLog
IopBootLogToFile
IopBuildAsynchronousFsdRequest
IopBuildDeviceIoControlRequest
IopBuildFullDriverPath
IopBuildGlobalSymbolicLinkString
IopBuildSynchronousFsdRequest
IopBusNumberInitialize
IopBusNumberPackResource
IopBusNumberScoreRequirement
IopBusNumberUnpackRequirement
IopBusNumberUnpackResource
IopCallArbiter
IopCallBootDriverReinitializationRoutines
IopCallDriverReinitializationRoutines
IopCancelAlertedRequest
IopCancelApcRequired
IopCancelIrpsInCurrentThreadList
IopCancelIrpsInCurrentThreadListApcRoutine
IopCancelIrpsInCurrentThreadListDummyApc
IopCancelIrpsInCurrentThreadListSpecialApc
IopCancelIrpsInFileObjectList
IopCancelIrpsInThreadList
IopCancelIrpsInThreadListForCurrentProcess
IopCancelPendingEject
IopCancelSynchronousIrpsForThread
IopCancelWaitCompletionPacket
IopCaptureObjectName
IopChangeInterfaceType
IopCheckDeviceAndDriver
IopCheckDeviceFlags
IopCheckDiskName
IopCheckGetQuotaBufferValidity
IopCheckHandleForRevocation
IopCheckHardErrorEmpty
IopCheckIfMergeRequired
IopCheckIfNotNativeDriver
IopCheckInitiatorHint
IopCheckListForCancelableIrp
IopCheckSessionDeviceAccess
IopCheckStackForTransactionSupport
IopCheckTopDeviceHint
IopCheckUnloadDriver
IopCheckVpbMounted
IopChildToRootTranslation
IopCleanupExtraCreateParameters
IopCleanupFileObjectIosbRange
IopCleanupNotifications
IopCleanupProcessResources
IopCloseFile
IopCloseIoCompletion
IopCloseWaitCompletionPacket
IopCombineCmResourceList
IopCombineLegacyResources
IopCommitConfiguration
IopCompareIosbRanges
IopCompareReqAlternativePriority
IopCompletePageWrite
IopCompleteRequest
IopCompleteUnloadOrDelete
IopCompressRelationList
IopConnectInterrupt
IopConnectInterruptFullySpecified
IopConnectLineBasedInterrupt
IopConnectLinkTrackingPort
IopConnectMessageBasedInterrupt
IopCopyBootLogRegistryToFile
IopCopyOffloadCapable
IopCopyOverNewPath
IopCreateArcName
IopCreateArcNames
IopCreateArcNamesCd
IopCreateArcNamesDisk
IopCreateCmResourceList
IopCreateDefaultDeviceSecurityDescriptor
IopCreateFile
IopCreatePassiveInterruptRealtimeThreads
IopCreateRegistryKeyEx
IopCreateRootDirectories
IopCreateSecurityDescriptorPerType
IopCreateVpb
IopCsqCancelRoutine
IopDeallocateApc
IopDebugPrint
IopDecDisableableDepends
IopDecrementDeviceObjectHandleCount
IopDecrementDeviceObjectRef
IopDecrementDeviceObjectRefCount
IopDecrementVpbRefCount
IopDeleteDevice
IopDeleteDriver
IopDeleteFile
IopDeleteFileObjectExtension
IopDeleteIoCompletion
IopDeleteIoCompletionInternal
IopDequeueIrpFromFileObject
IopDequeueIrpFromThread
IopDereferencePassiveInterruptBlock
IopDereferenceVpbAndFree
IopDestroyActiveConnectBlock
IopDestroyDeviceNode
IopDestroyPassiveInterruptBlock
IopDeviceEjectComplete
IopDeviceInterfaceFilterCallback
IopDeviceObjectFromSymbolicName
IopDisableCrashDump
IopDisableTimer
IopDisassociateThreadIrp
IopDispatchSessionNotifications
IopDmaInitialize
IopDmaOverrideConflict
IopDmaPackResource
IopDmaScoreRequirement
IopDmaUnpackRequirement
IopDmaUnpackResource
IopDoDeferredSetInterfaceState
IopDropIrp
IopDuplicateDetection
IopEjectDevice
IopEliminateBogusConflict
IopEnableTimer
IopEnumerateRelations
IopErrorLogDpc
IopErrorLogGetEntry
IopErrorLogQueueRequest
IopErrorLogRequeueEntry
IopErrorLogThread
IopEtwEnableCallback
IopExceptionCleanup
IopExceptionFilter
IopExecuteHardwareProfileChange
IopExecuteHwpDefaultSelect
IopFastQueryNetworkAttributes
IopFetchConfigurationInformation
IopFileUtilClearAttributes
IopFileUtilRename
IopFileUtilWalkDirectoryTreeBottomUp
IopFileUtilWalkDirectoryTreeHelper
IopFileUtilWalkDirectoryTreeTopDown
IopFillTriageDumpDataBlocks
IopFilterResourceRequirementsCall
IopFindLegacyBusDeviceNode
IopFindMatchingComponentsLengthR
IopFindPassiveInterruptBlock
IopFindPassiveInterruptBlockLocked
IopFindResourceHandlerInfo
IopFindSystemDevice
IopFreeBackpocketIrp
IopFreeBandwidthContract
IopFreeCompletionListPackets
IopFreeGenericTableEntry
IopFreeIrp
IopFreeIrpExtension
IopFreeMiniCompletionPacket
IopFreePoDeviceNotifyListHead
IopFreeRelationList
IopFreeReqAlternative
IopFreeReqList
IopFreeReserveIrp
IopFreeWaitCompletionPacket
IopGenericPackResource
IopGenericScoreRequirement
IopGenericTranslateOrdering
IopGenericUnpackRequirement
IopGenericUnpackResource
IopGetBasicInformationFile
IopGetBootDiskInformation
IopGetBootDiskInformationLite
IopGetDeviceAttachmentBase
IopGetDeviceInterfaces
IopGetDevicePDO
IopGetDriverNameFromKeyNode
IopGetDriverPathInformation
IopGetFileInformation
IopGetFileObjectExtension
IopGetFileVolumeNameInformation
IopGetFsRegistrationInProgress
IopGetInterruptConnectionData
IopGetLegacyVetoListDeviceNode
IopGetLegacyVetoListDrivers
IopGetMaxValidMemorySize
IopGetModeInformation
IopGetMountFlag
IopGetNetworkOpenInformation
IopGetNumaNodeInformation
IopGetPhysicalMemoryBlock
IopGetRegistryKeyInformation
IopGetRegistryValue
IopGetRegistryValues
IopGetRelatedFileName
IopGetRootDevices
IopGetSessionIdFromPDO
IopGetSessionIdFromSymbolicName
IopGetSetObjectId
IopGetSetSecurityObject
IopGetSetSpecificExtension
IopGetSetStreamIdentifier
IopGetVolumeId
IopGraftName
IopHardErrorThread
IopIncDisableableDepends
IopIncrementDeviceObjectRefCount
IopIncrementVpbRefCount
IopInitActivityIdIrp
IopInitCrashDumpDuringSysInit
IopInitCrashDumpRegCallback
IopInitializeActiveConnectBlock
IopInitializeBootDrivers
IopInitializeBootLogging
IopInitializeBuiltinDriver
IopInitializeCoreDrivers
IopInitializeCrashDump
IopInitializeDeviceInstanceKey
IopInitializeEarlyLaunchDrivers
IopInitializeInMemoryDumpData
IopInitializeIrpStackProfiler
IopInitializePassiveInterruptServices
IopInitializePlugPlayServices
IopInitializeReserveIrps
IopInitializeResourceMap
IopInitializeSessionNotifications
IopInitializeSystemDrivers
IopInsertActiveConnectListLocked
IopInsertLegacyBusDeviceNode
IopInsertPassiveInterruptBlock
IopInsertRemoveDevice
IopInterlockedDecrementUlong
IopInterlockedInsertHeadList
IopInterlockedInsertTailList
IopInterlockedRemoveHeadList
IopInvalidDeviceRequest
IopInvalidateVolumesForDevice
IopIrpExtensionControl
IopIrpStackProfilerTimer
IopIrqInitialize
IopIrqPackResource
IopIrqScoreRequirement
IopIrqUnpackRequirement
IopIrqUnpackResource
IopIsAddressRangeValid
IopIsDescendantNode
IopIsFileOpenOrSection
IopIsNotNativeDriverImage
IopIsPciRootBus
IopIsRelationInList
IopIsReportedAlready
IopIssueSystemEnvironmentCallout
IopIssueSystemEnvironmentRequest
IopKeepAliveWorker
IopLegacyResourceAllocation
IopLiveDumpAllocAndInitResources
IopLiveDumpAllocNonPagedPool
IopLiveDumpAllocateDumpBuffers
IopLiveDumpAllocateMappingResources
IopLiveDumpBufferDumpData
IopLiveDumpCaptureMemoryPages
IopLiveDumpCheckTermination
IopLiveDumpCorralDpc
IopLiveDumpCorralProcessors
IopLiveDumpDiscardVirtualAddressRange
IopLiveDumpEndMirroringCallback
IopLiveDumpEstimateMemoryPages
IopLiveDumpFreeDumpBuffers
IopLiveDumpFreeMappingResources
IopLiveDumpFreePool
IopLiveDumpGetCapturePages
IopLiveDumpGetCapturePagesNoLock
IopLiveDumpGetHvMergePages
IopLiveDumpGetNtMergePages
IopLiveDumpInitiateCorralStateChange
IopLiveDumpIsTracingEnabled
IopLiveDumpLockPages
IopLiveDumpMarkImportantDumpData
IopLiveDumpMarkLoadedModuleList
IopLiveDumpMarkProcessorData
IopLiveDumpMarkRequiredDumpData
IopLiveDumpMirrorPhysicalMemoryCallback
IopLiveDumpPopulateBitmapForDump
IopLiveDumpProcessCorralStateChange
IopLiveDumpReleaseResources
IopLiveDumpResetCorralContext
IopLiveDumpStartDumpDataBuffering
IopLiveDumpStartMirroringCallback
IopLiveDumpTrace
IopLiveDumpTraceBufferAllocation
IopLiveDumpTraceBufferEstimation
IopLiveDumpTraceDumpFileWriteEnd
IopLiveDumpTraceInterfaceEnd
IopLiveDumpTraceInterfaceStart
IopLiveDumpTraceMirroringPhase0End
IopLiveDumpTraceMirroringPhase1End
IopLiveDumpTraceMirroringStart
IopLiveDumpTraceSystemQuiesceEnd
IopLiveDumpTraceSystemQuiesceStart
IopLiveDumpTracingControlCallback
IopLiveDumpUnLockPages
IopLiveDumpUncorralProcessors
IopLiveDumpValidateCancelObject
IopLiveDumpValidateDumpFileHandle
IopLiveDumpValidateParameters
IopLiveDumpWriteBuffer
IopLiveDumpWriteDumpFile
IopLiveDumpWriteDumpFileWithHvPages
IopLiveDumpWriteSecondaryData
IopLoadCrashdumpDriver
IopLoadDriver
IopLoadFileSystemDriver
IopLoadUnloadDriver
IopLogBlockedDriverEvent
IopMarkBootPartition
IopMaskInterrupt
IopMemFindSuitableRange
IopMemInitialize
IopMemQueryConflict
IopMergeRelationLists
IopMountInitializeVpb
IopMountVolume
IopNotifyAlreadyRegisteredFileSystems
IopOpenLinkOrRenameTarget
IopOpenRegistryKey
IopOpenRegistryKeyEx
IopOpenSystemVariableDevice
IopParentToRawTranslation
IopParseDevice
IopParseFile
IopPassiveInterruptDpc
IopPassiveInterruptRealtimeWorker
IopPassiveInterruptWorker
IopPerfCallDriver
IopPerfCompleteRequest
IopPerfCompletionRoutine
IopPerfLogCallEvent
IopPerfLogCallReturnEvent
IopPnPAddDevice
IopPnPCompleteRequest
IopPnPDispatch
IopPoHandleIrp
IopPortAddAllocation
IopPortBacktrackAllocation
IopPortFindSuitableRange
IopPortGetNextAlias
IopPortInitialize
IopPowerDispatch
IopProcessIoTracking
IopProcessIrpStackProfiler
IopProcessSetInterfaceState
IopProcessWorkItem
IopProtectSystemPartition
IopQueryConflictFillConflicts
IopQueryConflictFillString
IopQueryConflictList
IopQueryConflictListInternal
IopQueryDeviceResources
IopQueryDockRemovalInterface
IopQueryLegacyBusInformation
IopQueryName
IopQueryNameInternal
IopQueryPassiveInterruptRegistryOptions
IopQueryProcessIdsUsingFile
IopQueryProcessorInitValues
IopQueryReconfiguration
IopQueryResourceHandlerInterface
IopQueryVpbFlagsSafe
IopQueryXxxInformation
IopQueueIrpToFileObject
IopQueueThreadIrp
IopQueueWorkItemProlog
IopRaiseHardError
IopRaiseInformationalHardError
IopReadDumpRegistry
IopReadyDeviceObjects
IopRearrangeReqList
IopReassignSystemRoot
IopReferenceDriverObjectByName
IopReferenceVerifyVpb
IopRegisterDeviceInterface
IopRegistryCallback
IopRegistryInitializeCallbacks
IopRegistryOpenDeepestPath
IopReleaseActiveConnectLock
IopReleaseDeviceResources
IopReleaseFilteredBootResources
IopReleaseResources
IopRemoveDevice
IopRemoveDeviceRelationsFromList
IopRemoveHardErrorPacket
IopRemoveLegacyDeviceNode
IopRemovePageFromPageMap
IopRemoveRelationFromList
IopRemoveTimerFromTimerList
IopReplaceCompletionPort
IopReplaceSeperatorWithPound
IopReplaceSymlinkPath
IopReportBootResources
IopResourceRequirementsChanged
IopResourceRequirementsListToReqList
IopResurrectDriver
IopRetestConfiguration
IopRetrieveSystemDeviceName
IopRetrieveTransactionParameters
IopRevokeFileObjectForProcess
IopSafebootDriverLoad
IopSaveRestoreConfiguration
IopSelectNextConfiguration
IopSendMessageToTrackService
IopSessionChangeWorker
IopSetDeviceSecurityDescriptor
IopSetDeviceSecurityDescriptors
IopSetEaOrQuotaInformationFile
IopSetFileObjectIosbRange
IopSetFsRegistrationInProgress
IopSetLegacyResourcesFlag
IopSetLockOperationProcess
IopSetRelationsTag
IopSetRemoteLink
IopSetTypeSpecificFoExtension
IopSetupArbiterAndTranslators
IopShutdownBaseFileSystems
IopSizeTriageDumpDataBlocks
IopStartApcHardError
IopStartNextPacket
IopStartNextPacketByKey
IopStartNextPacketByKeyEx
IopStoreArcInformation
IopStoreSystemPartitionInformation
IopSymlinkAllocateAndAddECP
IopSymlinkApplyToOpenedName
IopSymlinkCleanupECP
IopSymlinkCreateECP
IopSymlinkEnforceEnabledTypes
IopSymlinkFreeRelatedMountPointChain
IopSymlinkGetECP
IopSymlinkGetRelatedMountPoint
IopSymlinkInitializeSymlinkInfo
IopSymlinkProcessReparse
IopSymlinkQueryEnabledClasses
IopSymlinkRegistryCallback
IopSymlinkRegistryInitCallback
IopSymlinkRememberJunction
IopSymlinkRemoveECP
IopSymlinkUpdateECP
IopSynchronousApiServiceTail
IopSynchronousCall
IopSynchronousServiceTail
IopSystemControlDispatch
IopTestConfiguration
IopThreadStart
IopTimerDispatch
IopTrackLink
IopTranslateAndAdjustReqDesc
IopTranslateBusAddress
IopTranslatorHandlerCm
IopTranslatorHandlerIo
IopUncacheInterfaceInformation
IopUnloadDriver
IopUnloadEarlyLaunchDrivers
IopUnloadSafeCompletion
IopUnmaskInterrupt
IopUpdateFunctionPointers
IopUpdateMinidumpContext
IopUserCompletion
IopUserRundown
IopVerifyDeviceObjectOnStack
IopVerifyDiskSignature
IopVerifyDriverObjectOnStack
IopWarmEjectDevice
IopWriteAllocatedResourcesToRegistry
IopWriteDriverList
IopWriteResourceList
IopWriteTriageDumpToFirmware
IopXxxControlFile
IopfCompleteRequest
IovAllocateIrp
IovAllocateMdl
IovAllocateWorkItem
IovAttachDeviceToDeviceStack
IovBuildAsynchronousFsdRequest
IovBuildDeviceIoControlRequest
IovBuildSynchronousFsdRequest
IovCallDriver
IovCancelIrp
IovCompleteRequest
IovDeleteDevice
IovDetachDevice
IovFreeIrpPrivate
IovInitializeIrp
IovInitializeTimer
IovUnloadDrivers
IovUtilFlushStackCache
IovUtilGetBottomDeviceObject
IovUtilGetLowerDeviceObject
IovUtilGetUpperDeviceObject
IovUtilIsDeviceObjectMarked
IovUtilIsInFdoStack
IovUtilIsVerifiedDeviceStack
IovUtilIsWdmStack
IovUtilMarkDeviceObject
IovUtilMarkStack
IovUtilMultipleDevicesSameDriver
IovUtilRelateDeviceObjects
IovUtilWatermarkIrp
IovpAdvanceStackDownwards
IovpBuildDriverObjectList
IovpCallDriver1
IovpCallDriver2
IovpCallDriverNoIrpTracking
IovpCallDriverWithStackBuffer
IovpCancelRoutine
IovpCheckIrpForCriticalTracking
IovpCompleteRequest1
IovpCompleteRequest2
IovpCompleteRequest3
IovpCompleteRequest4
IovpExamineDevObjForwarding
IovpExamineIrpStackForwarding
IovpInternalCompletionTrap
IovpLocalCompletionRoutine
IovpLogStackCallout
IovpLogStackTrace
IovpSessionDataCreate
IovpSessionDataDereference
IovpSessionDataReference
IovpUnloadDriver
IovpUtilMarkDeviceObject
IovpValidateDeviceObject
IsHangulLV
IsRegistryKeyLocked
KdAcquireDebuggerLock
KdCallPowerHandlers
KdChangeOption
KdCheckForDebugBreak
KdCopyDataBlock
KdDeregisterPowerHandler
KdDisableDebugger
KdDisableDebuggerWithLock
KdEnableDebugger
KdEnableDebuggerWithLock
KdEnterDebugger
KdExitDebugger
KdInitSystem
KdIsThisAKdTrap
KdLogDbgPrint
KdPollBreakIn
KdPowerTransition
KdPullRemoteFile
KdRefreshDebuggerNotPresent
KdRegisterDebuggerDataBlock
KdRegisterPowerHandler
KdReleaseDebuggerLock
KdSendTraceData
KdSetDbgPrintBufferSize
KdSetOwedBreakpoints
KdSystemDebugControl
KdUpdateTimeSlipEvent
KdpAddBreakpoint
KdpAllowDisable
KdpCloseRemoteFile
KdpCommandString
KdpCopyCodeStream
KdpCopyContext
KdpCopyMemoryChunks
KdpCreateRemoteFile
KdpDeleteBreakpoint
KdpDeleteBreakpointRange
KdpFillMemory
KdpGetBusData
KdpGetContext
KdpGetContextEx
KdpGetStateChange
KdpInitializeExtendedContext
KdpInsertBreakpoint
KdpIsBreakpoint
KdpLowRestoreBreakpoint
KdpLowWriteContent
KdpPollBreakInWithPortLock
KdpPrint
KdpPrintString
KdpPrompt
KdpPromptString
KdpQuickMoveMemory
KdpReadControlSpace
KdpReadPhysicalMemory
KdpReadRemoteFile
KdpReadVirtualMemory
KdpRemoveBreakpoint
KdpReport
KdpReportCommandStringStateChange
KdpReportExceptionStateChange
KdpReportLoadSymbolsStateChange
KdpRestoreAllBreakpoints
KdpRestoreBreakPointEx
KdpSanitizeContextFlags
KdpSearchMemory
KdpSearchPhysicalPage
KdpSearchPhysicalPageRange
KdpSendWaitContinue
KdpSetCommonState
KdpSetContext
KdpSetContextEx
KdpSetContextState
KdpSetOwedBreakpoints
KdpStub
KdpSuspendAllBreakpoints
KdpSwitchProcessor
KdpSymbol
KdpSysCheckLowMemory
KdpSysGetVersion
KdpSysReadBusData
KdpSysReadControlSpace
KdpSysReadIoSpace
KdpSysReadMsr
KdpSysWriteBusData
KdpSysWriteControlSpace
KdpSysWriteIoSpace
KdpSysWriteMsr
KdpTimeSlipDpcRoutine
KdpTimeSlipWork
KdpTrap
KdpWriteBreakPointEx
KdpWritePhysicalMemory
KeAbCleanupThreadState
KeAbEntryFree
KeAbInitialize
KeAbInitializeThreadState
KeAbPostRelease
KeAbPostReleaseEx
KeAbPreAcquire
KeAbPreWait
KeAbPreWakeup
KeAbProcessBaseIoPriorityChange
KeAccumulateTicks
KeAcquireGuardedMutex
KeAcquireGuardedMutexUnsafe
KeAcquireInStackQueuedSpinLock
KeAcquireInStackQueuedSpinLockAtDpcLevel
KeAcquireInStackQueuedSpinLockForDpc
KeAcquireInStackQueuedSpinLockRaiseToSynch
KeAcquireInterruptSpinLock
KeAcquireQueuedSpinLock
KeAcquireQueuedSpinLockRaiseToSynch
KeAcquireSpinLockAtDpcLevel
KeAcquireSpinLockForDpc
KeAcquireSpinLockRaiseToDpc
KeAcquireSpinLockRaiseToSynch
KeAddGroupAffinityEx
KeAddProcessorAffinityEx
KeAddProcessorGroupAffinity
KeAddSystemServiceTable
KeAdjustInterruptTime
KeAlertResumeThread
KeAlertThread
KeAlertThreadByThreadId
KeAllocateCalloutStack
KeAllocateCalloutStackEx
KeAllocateInterrupt
KeAllocateTebSelector
KeAllocateXStateContext
KeAndAffinityEx
KeAndGroupAffinityEx
KeAreAllApcsDisabled
KeAreApcsDisabled
KeAreInterruptsEnabled
KeAttachProcess
KeBalanceSetManager
KeBoostPriorityThread
KeBugCheck
KeBugCheck2
KeBugCheckEx
KeBugCheckUnicodeToAnsi
KeBuildLogicalProcessorSystemInformation
KeBuildPrimaryThreadContext
KeCancelTimer
KeCancelTimer2
KeCancelTimerInternal
KeCapturePersistentThreadState
KeCheckForTimer
KeCheckForZeroPage
KeCheckProcessorAffinityEx
KeCheckProcessorGroupAffinity
KeClearEvent
KeClearUmsThreadKernelLock
KeClockInterruptNotify
KeClockTimerPowerChange
KeCompactServiceTable
KeComplementAffinityEx
KeConnectInterrupt
KeContextFromKframes
KeContextToKframes
KeCopyAffinityEx
KeCopyContextFromUch
KeCopyContextFromUmsContext
KeCopyContextToUch
KeCopyContextToUmsContext
KeCopyPage
KeCountSetBitsAffinityEx
KeCountSetBitsGroupAffinity
KeDelayExecutionThread
KeDeregisterBugCheckCallback
KeDeregisterBugCheckReasonCallback
KeDeregisterNmiCallback
KeDeregisterObjectNotification
KeDeregisterProcessorChangeCallback
KeDetachProcess
KeDisableProfiling
KeDisableQueueingPriorityIncrement
KeDisableTimer2
KeDisconnectInterrupt
KeDispatchSecondaryInterrupt
KeDoesTebMatchThread
KeEnableProfiling
KeEnterCriticalRegion
KeEnterCriticalRegionThread
KeEnterGuardedRegion
KeEnterKernelDebugger
KeEnumerateKernelStackSegments
KeEnumerateNextProcessor
KeEnumerateProcessorDpcs
KeEnumerateQueueApc
KeEstimateClockTickDuration
KeExpandKernelStackAndCallout
KeExpandKernelStackAndCalloutEx
KeExpandKernelStackAndCalloutInternal
KeFindConfigurationEntry
KeFindConfigurationNextEntry
KeFindFirstSetLeftAffinityEx
KeFindFirstSetLeftGroupAffinity
KeFindFirstSetRightAffinityEx
KeFindFirstSetRightGroupAffinity
KeFirstGroupAffinityEx
KeFixUserSwitchContext
KeFlushEntireTb
KeFlushMultipleRangeCurrentTb
KeFlushMultipleRangeTb
KeFlushProcessTb
KeFlushProcessWriteBuffers
KeFlushQueuedDpcs
KeFlushQueuedDpcsEx
KeFlushSingleCurrentTb
KeFlushSingleTb
KeFlushTb
KeFoldProcessStatisticsThread
KeForceAttachProcess
KeForceEnableNx
KeForceResumeProcess
KeForceResumeThread
KeFreeCalloutStack
KeFreeInterrupt
KeFreeTebSelector
KeFreeXStateContext
KeFreezeExecution
KeFreezeProcess
KeGenericCallDpc
KeGenericProcessorCallback
KeGetBugMessageResourceEntry
KeGetBugMessageText
KeGetClockOwner
KeGetClockTimerResolution
KeGetCurrentIrql
KeGetCurrentNodeNumber
KeGetCurrentProcessorNumberEx
KeGetCurrentStackPointer
KeGetCurrentThread
KeGetCurrentUmsTeb
KeGetDynamicTickDisableReason
KeGetExecuteOptions
KeGetNextClockTickDuration
KeGetNextKernelStackSegment
KeGetPrcb
KeGetProcessorIndexFromNumber
KeGetProcessorNumberFromIndex
KeGetRecommendedSharedDataAlignment
KeGetSchedulingGroupSize
KeGetXSaveFeatureFlags
KeHwPolicyLocateResource
KeInitAmd64SpecificState
KeInitThread
KeInitializeAffinityEx
KeInitializeApc
KeInitializeClock
KeInitializeCrashDumpHeader
KeInitializeDeviceQueue
KeInitializeDpc
KeInitializeEntropySystem
KeInitializeEnumerationContext
KeInitializeEnumerationContextFromGroup
KeInitializeEvent
KeInitializeGate
KeInitializeGuardedMutex
KeInitializeInterrupt
KeInitializeInterruptEx
KeInitializeMutant
KeInitializeMutex
KeInitializeProcess
KeInitializeProcessLdt
KeInitializeProfile
KeInitializeProfileCallback
KeInitializeQueue
KeInitializeSecondaryInterruptServices
KeInitializeSemaphore
KeInitializeThreadedDpc
KeInitializeTimer
KeInitializeTimer2
KeInitializeTimerEx
KeInitializeTimerTable
KeInitializeUmsThread
KeInsertByKeyDeviceQueue
KeInsertDeviceQueue
KeInsertHeadQueue
KeInsertPriQueue
KeInsertQueue
KeInsertQueueApc
KeInsertQueueDpc
KeInsertSchedulingGroup
KeIntSteerLogStatus
KeInterlockedClearProcessorAffinityEx
KeInterlockedSetProcessorAffinityEx
KeIntersectFeaturesWithRegistry
KeInvalidAccessAllowed
KeInvalidateAllCaches
KeInvalidateRangeAllCaches
KeIpiGenericCall
KeIsApcRunningThread
KeIsAttachedProcess
KeIsEmptyAffinityEx
KeIsEqualAffinityEx
KeIsExecutingDpc
KeIsSingleGroupAffinityEx
KeIsSubsetAffinityEx
KeIsWaitListEmpty
KeLeaveCriticalRegion
KeLeaveGuardedRegion
KeLoadMTRR
KeMarkHiberPhase
KeMaskInterrupt
KeNumaInitialize
KeOrAffinityEx
KePrepareClockTimerForIdle
KeProcessorGroupAffinity
KeProcessorProfileControlArea
KeProfileInterruptWithSource
KePulseEvent
KeQueryActiveGroupCount
KeQueryActiveProcessorAffinity
KeQueryActiveProcessorCount
KeQueryActiveProcessorCountEx
KeQueryActiveProcessors
KeQueryAffinityProcess
KeQueryAffinityThread
KeQueryBasePriorityThread
KeQueryBootTimeValues
KeQueryCurrentStackInformation
KeQueryDpcWatchdogInformation
KeQueryEffectivePriorityThread
KeQueryGroupAffinity
KeQueryGroupAffinityEx
KeQueryGroupMaskProcess
KeQueryHardwareCounterConfiguration
KeQueryHighestNodeNumber
KeQueryInterruptTimePrecise
KeQueryIntervalProfile
KeQueryLogicalProcessorRelationship
KeQueryMaximumGroupCount
KeQueryMaximumProcessorCount
KeQueryMaximumProcessorCountEx
KeQueryNodeActiveAffinity
KeQueryNodeMaximumProcessorCount
KeQueryNumaGraph
KeQueryOwnerMutant
KeQueryPrcbAddress
KeQueryPriorityThread
KeQueryRuntimeThread
KeQuerySchedulingGroupHistory
KeQuerySchedulingGroupReadyTime
KeQuerySystemTimePrecise
KeQueryTimeIncrement
KeQueryTimerDueTime
KeQueryTotalCycleTimeThread
KeQueryUnbiasedInterruptTime
KeQueryValuesThread
KeRaiseIrqlToDpcLevel
KeRaiseUserException
KeReadStateEvent
KeReadStateMutant
KeReadStateQueue
KeReadStateSemaphore
KeReadStateTimer
KeReadyThread
KeRebaselineInterruptTime
KeRebaselineSystemTime
KeRegisterBugCheckCallback
KeRegisterBugCheckReasonCallback
KeRegisterNmiCallback
KeRegisterObjectNotification
KeRegisterProcessorChangeCallback
KeReleaseGuardedMutex
KeReleaseGuardedMutexUnsafe
KeReleaseInStackQueuedSpinLock
KeReleaseInStackQueuedSpinLockForDpc
KeReleaseInStackQueuedSpinLockFromDpcLevel
KeReleaseInterruptSpinLock
KeReleaseMutant
KeReleaseMutex
KeReleaseQueuedSpinLock
KeReleaseSemaphore
KeReleaseSemaphoreEx
KeReleaseSpinLock
KeReleaseSpinLockForDpc
KeReleaseSpinLockFromDpcLevel
KeRemoveByKeyDeviceQueue
KeRemoveByKeyDeviceQueueIfBusy
KeRemoveDeviceQueue
KeRemoveEntryDeviceQueue
KeRemoveGroupAffinityEx
KeRemovePriorityBoost
KeRemoveProcessorAffinityEx
KeRemoveProcessorGroupAffinity
KeRemoveQueue
KeRemoveQueueApc
KeRemoveQueueDpc
KeRemoveQueueDpcEx
KeRemoveQueueEntry
KeRemoveQueueEx
KeRemoveSchedulingGroup
KeRemoveSystemServiceTable
KeRemoveUmsThreadCidOwnership
KeRequestTerminationThread
KeResetEvent
KeResetLegacyFloatingPointState
KeRestoreExtendedProcessorState
KeRestoreFloatingPointState
KeRestoreLegacyFloatingPointControlWord
KeRestoreMtrrBroadcast
KeRestoreProcessorSpecificFeatures
KeResumeClockTimer
KeResumeClockTimerFromIdle
KeResumeClockTimerSafe
KeResumeThread
KeRevertToUserAffinityThread
KeRevertToUserAffinityThreadEx
KeRevertToUserGroupAffinityThread
KeRundownApcQueues
KeRundownQueue
KeRundownQueueEx
KeSaveExtendedProcessorState
KeSaveFloatingPointState
KeSaveLegacyFloatingPointControlWord
KeSaveStateForHibernate
KeSelectIdealProcessor
KeSelectNodeForAffinity
KeSetActualBasePriorityThread
KeSetAffinityProcess
KeSetAffinityThread
KeSetAutoAlignmentProcess
KeSetBasePriorityThread
KeSetCheckStackExtentsProcess
KeSetCoalescableTimer
KeSetCurrentUmsTeb
KeSetDisableBoostThread
KeSetDisableQuantumProcess
KeSetDmaIoCoherency
KeSetEvent
KeSetEventBoostPriority
KeSetEventBoostPriorityEx
KeSetExecuteOptions
KeSetHardwareCounterConfiguration
KeSetIdealProcessorThread
KeSetIdealProcessorThreadByNumber
KeSetIdealProcessorThreadEx
KeSetImportanceDpc
KeSetIntervalProfile
KeSetKernelStackSwapEnable
KeSetLegacyAffinityThread
KeSetMaximumCountPriQueue
KeSetPriorityAndQuantumProcess
KeSetPriorityBoost
KeSetPriorityThread
KeSetProcess
KeSetProcessSchedulingGroup
KeSetProfileIrql
KeSetQuantumProcess
KeSetSchedulingGroupCpuRates
KeSetSchedulingGroupCycleNotification
KeSetSchedulingGroupRankBias
KeSetSchedulingGroupWeights
KeSetSystemAffinityThread
KeSetSystemAffinityThreadEx
KeSetSystemGroupAffinityThread
KeSetSystemTime
KeSetTargetProcessorDpc
KeSetTargetProcessorDpcEx
KeSetThreadChargeOnlySchedulingGroup
KeSetTimeAdjustment
KeSetTimer
KeSetTimer2
KeSetTimerEx
KeSetUmsThreadKernelLock
KeSignalCallDpcDone
KeSignalCallDpcSynchronize
KeSignalGate
KeStackAttachProcess
KeStallWhileFrozen
KeStartAllProcessors
KeStartDynamicProcessor
KeStartProfile
KeStartThread
KeStopProfile
KeSubtractAffinityEx
KeSuspendClockTimer
KeSuspendClockTimerSafe
KeSuspendThread
KeSwapDirectoryTableBase
KeSwapProcessOrStack
KeSweepLocalCaches
KeSwitchFrozenProcessor
KeSynchronizeExecution
KeSynchronizeUmsThread
KeSynchronizeWithDynamicProcessors
KeTerminateThread
KeTestAlertThread
KeTestSpinLock
KeThawExecution
KeThawProcess
KeTimeOutQueueWaiters
KeTransitionProcessorParkState
KeTryToAcquireGuardedMutex
KeTryToAcquireInStackQueuedSpinLockAtDpcLevel
KeTryToAcquireQueuedSpinLock
KeTryToAcquireQueuedSpinLockRaiseToSynch
KeTryToAcquireSpinLockAtDpcLevel
KeTryToFreezeThreadStack
KeTryToInsertQueueApc
KeUnInitializeUmsThread
KeUnmaskInterrupt
KeUnstackDetachProcess
KeUpdateGroupSchedulingConstants
KeUpdatePrimaryThreadContext
KeUpdateTotalCyclesCurrentThread
KeUpdateUmsThreadState
KeUserModeCallback
KeValidateBugCheckCallbackRecord
KeVerifyContextRecord
KeWaitForAlertByThreadId
KeWaitForGate
KeWaitForMultipleObjects
KeWaitForSingleObject
KeWakeProcessor
KeWriteProtectPAT
KeZeroPages
KeZeroSinglePage
KevSkipVerification
KiAbApplyWakeupBoost
KiAbCompareSnappedEntryState
KiAbCpuBoostOwners
KiAbDeferredProcessingWorker
KiAbDetermineMaxWaiterPriority
KiAbEntryGetCpuPriorityKey
KiAbEntryGetLockedHeadEntry
KiAbEntryRemoveFromTree
KiAbEntryUpdateOwnerTreePosition
KiAbEntryUpdateWaiterTreePosition
KiAbFindWakeupLockEntry
KiAbIoBoostOwners
KiAbOwnerComputeCpuPriorityKey
KiAbProcessContextSwitch
KiAbProcessLocksWorker
KiAbProcessThreadLocks
KiAbProcessThreadPriorityModification
KiAbQueueAutoBoostDpc
KiAbReleaseTree
KiAbSetMinimumThreadPriority
KiAbThreadBoostIoPriority
KiAbThreadInsertList
KiAbThreadUnboostCpuPriority
KiAbTryDecrementIoWaiterCount
KiAbTryIncrementIoWaiterCount
KiAcquireInterruptConnectLock
KiAcquireProcessLockExclusive
KiAcquireQueuedSpinLockInstrumented
KiAcquireReleaseThreadLock
KiAcquireSpinLockCheckForFreeze
KiAcquireSpinLockInstrumented
KiAcquireThreadStateLock
KiAcquireTimer2CollectionLockIfInserted
KiAcquireTimer2LockUnlessDisabled
KiActivateWaiterKQueue
KiActivateWaiterPriQueue
KiActivateWaiterQueueWithNoLocks
KiAddProcessorToGroupDatabase
KiAddProcessorToGroupSchedulingDatabase
KiAddThreadToScbQueue
KiAdjustGroupConfiguration
KiAdjustTimer2DueTimes
KiAdjustTimerDueTimes
KiAlignmentFault
KiApcInterrupt
KiAssignAdjustableNodes
KiAssignAllNodesToGroup0
KiAssignFixedNodes
KiAssignSchedulingGroupWeights
KiAttachProcess
KiAttemptFastRemovePriQueue
KiAttemptFastRemoveQueue
KiBalanceSetManagerDeferredRoutine
KiBeginCounterAccumulation
KiBeginThreadAccountingPeriod
KiBlockAndActivateUmsThread
KiBoundFault
KiBreakpointTrap
KiBugCheck3
KiBugCheckDebugBreak
KiBugCheckDispatch
KiBugCheckProgress
KiCalibrateTimeAdjustment
KiCallInterruptServiceRoutine
KiCallUserMode
KiCancelTimer
KiCaptureUmsThreadContext
KiChainedDispatch
KiChargeSchedulingGroupCycleTime
KiCheckForDuplicateBugCheckCallback
KiCheckForEffectivePriorityChange
KiCheckForKernelApcDelivery
KiCheckForSListAddress
KiCheckForThreadDispatch
KiCheckStall
KiChooseLowestRankedThread
KiClearPriorityFloor
KiCommitNodeAssignment
KiCommitThreadWait
KiCompareVarMtrr
KiCompleteKernelInit
KiComputeDueTime
KiComputeGroupSchedulingRank
KiComputeNumaCosts
KiComputeProcessorDataSize
KiConfigureDynamicProcessor
KiConfigureProcessorBlock
KiConfigureSchedulingInformation
KiConnectInterrupt
KiConnectSecondaryInterrupt
KiContinueEx
KiContinuePreviousModeUser
KiConvertToGuiThread
KiCopyCounters
KiCopyCountersWorker
KiCopyUchToStagingArea
KiCopyXStateArea
KiCustomAccessHandler0
KiCustomAccessHandler1
KiCustomAccessHandler2
KiCustomAccessHandler3
KiCustomAccessHandler4
KiCustomAccessHandler5
KiCustomAccessHandler6
KiCustomAccessHandler7
KiCustomAccessHandler8
KiCustomAccessHandler9
KiCustomAccessRoutine0
KiCustomAccessRoutine1
KiCustomAccessRoutine2
KiCustomAccessRoutine3
KiCustomAccessRoutine4
KiCustomAccessRoutine5
KiCustomAccessRoutine6
KiCustomAccessRoutine7
KiCustomAccessRoutine8
KiCustomAccessRoutine9
KiCustomRecurseRoutine0
KiCustomRecurseRoutine1
KiCustomRecurseRoutine2
KiCustomRecurseRoutine3
KiCustomRecurseRoutine4
KiCustomRecurseRoutine5
KiCustomRecurseRoutine6
KiCustomRecurseRoutine7
KiCustomRecurseRoutine8
KiCustomRecurseRoutine9
KiDebugServiceTrap
KiDebugTrapOrFault
KiDecrementProcessStackCount
KiDeferGroupSchedulingPreemption
KiDeferredReadyThread
KiDeliverApc
KiDetectAccessBitErrata
KiDirectSwitchThread
KiDisableCacheErrataSource
KiDisconnectInterruptCommon
KiDisconnectInterruptInternal
KiDisconnectSecondaryInterrupt
KiDisconnectSecondaryInterruptInternal
KiDispatchCallout
KiDispatchException
KiDispatchInterrupt
KiDispatchPassiveInterrupts
KiDisplayBlueScreen
KiDivideErrorFault
KiDoubleFaultAbort
KiDpcDispatch
KiDpcInterrupt
KiDpcInterruptBypass
KiDpcWatchdog
KiDumpParameterImages
KiDynamicProcessorAddNotification
KiEmulateAtlThunk
KiEnableGroupScheduling
KiEnableNpxStateSwitching
KiEnableXSave
KiEndCounterAccumulation
KiEndThreadAccountingPeriod
KiEntropyDpcRoutine
KiEntropyQueueDpc
KiEvaluateGroupSchedulingPreemption
KiEventClockStateChange
KiExceptionDispatch
KiExecuteAllDpcs
KiExecuteDpc
KiExitDispatcher
KiExitThreadWait
KiExpireTimer2
KiExpireTimerTable
KiExtendProcessAffinity
KiFastAcquireQueuedSpinLockInstrumented
KiFastFailDispatch
KiFastGetCallersAddress
KiFastReadyThread
KiFatalExceptionFilter
KiFatalExceptionHandler
KiFatalFilter
KiFilterFiberContext
KiFinalizeTimer2Disablement
KiFindFirstAvailableNode
KiFindNextTimerDueTime
KiFindReadyThread
KiFloatingErrorFault
KiFlushCurrentTbWorker
KiFlushProcessTbWorker
KiFlushProcessWriteBuffersTarget
KiFlushQueueApc
KiFlushQueuedDpcsWorker
KiFlushRangeWorker
KiFlushReadyLists
KiFlushSingleTbWorker
KiForceSymbolReferences
KiForegroundTimerCallback
KiFreezeSingleThread
KiFreezeTargetExecution
KiGeneralProtectionFault
KiGenericCallDpcWorker
KiGetCpuVendor
KiGetCurrentGroupCount
KiGetDeepIdleProcessors
KiGetGdtIdt
KiGetHalExtensionList
KiGetHalExtensionModuleFromLinks
KiGetInterruptObjectFromVector
KiGetL2L3AssociativityAmd
KiGetLoadOptions
KiGetNextTimer2ExpirationDueTime
KiGetNextTimerExpirationDueTime
KiGetPendingTick
KiGetProcessorInformation
KiGetXSaveSupportedFeatures
KiGroupSchedulingGenerationEnd
KiGroupSchedulingMoveThread
KiGroupSchedulingQuantumEnd
KiHeadlessDisplayString
KiHvInterrupt
KiHwPolicyFindDriverImage
KiIdleLoop
KiIdleSchedule
KiInSwapProcesses
KiInSwapSingleProcess
KiInitDynamicProcessorIpi
KiInitSpinLocks
KiInitSystem
KiInitializeBootStructures
KiInitializeCacheErrataSupport
KiInitializeContextThread
KiInitializeDpcList
KiInitializeDynamicProcessor
KiInitializeDynamicProcessorDpc
KiInitializeIdleThread
KiInitializeKernel
KiInitializeMTRR
KiInitializeMutant
KiInitializeNxSupportDiscard
KiInitializePrcbContext
KiInitializeProcessor
KiInitializeProcessorGroupSchedulingData
KiInitializeTimer2Data
KiInitializeUserApc
KiInitializeXSave
KiInitiateUserApc
KiInsertDeferredPreemptionApc
KiInsertInterruptObjectOrdered
KiInsertQueue
KiInsertQueueApc
KiInsertQueueInternal
KiInsertSchedulingGroupQueue
KiInsertSecondarySignalList
KiInsertTimer2WithCollectionLockHeld
KiInsertTimerTable
KiIntSteerConnect
KiIntSteerDisconnect
KiIntSteerEventTraceControlCallback
KiIntSteerInit
KiIntSteerInitPrcb
KiIntSteerLogMask
KiIntSteerLogProc
KiIntSteerLogState
KiInterruptDispatch
KiInterruptDispatchCommon
KiInterruptDispatchLBControl
KiInterruptDispatchNoEOI
KiInterruptDispatchNoLock
KiInterruptDispatchNoLockNoEtw
KiInterruptHandler
KiInterruptMessageDispatch
KiInterruptSubDispatch
KiInterruptSubDispatchNoLock
KiInterruptSubDispatchNoLockNoEtw
KiInterruptTemplate
KiIntersectFeaturesWithAvailableStack
KiIntersectFeaturesWithPolicy
KiInvalidOpcodeFault
KiInvalidTssFault
KiInvokeBugCheckEntryCallbacks
KiInvokeInterruptServiceRoutine
KiIpiGenericCallTarget
KiIpiInterrupt
KiIpiInterruptSubDispatch
KiIpiProcessRequests
KiIpiSendPacket
KiIpiSendRequest
KiIpiSendRequestEx
KiIsInterruptTypeSecondary
KiIsNXSupported
KiIsNodeFull
KiIsPrimaryPresent
KiIsXSaveFeatureAllowed
KiLoadLdtr
KiLoadMTRRTarget
KiLoadPolicyFromImage
KiLoadProcessLdt
KiLockExtendedServiceTable
KiLockKobjectArray
KiLockServiceTable
KiLockStepExecution
KiMarkBugCheckRegions
KiMaskInterruptDpc
KiMaskInterruptInternal
KiMaskSecondaryInterruptInternal
KiMaskToLength
KiMatchLoadOption
KiMcaDeferredRecoveryService
KiMcheckAbort
KiMcheckAlternateReturn
KiMergeXSaveFeatures
KiMonitorCacheErrata
KiMoveApcState
KiMoveThreadsToDeferredReadyList
KiNmiInterrupt
KiNmiInterruptStart
KiNodeCostSort
KiNonNumaQueryNodeCapacity
KiNonNumaQueryNodeDistance
KiNpxNotAvailableFault
KiNpxSegmentOverrunAbort
KiOpComputeLinearAddress
KiOpDecode
KiOpDecodeModRM
KiOpFetchBytes
KiOpIsPrefix
KiOpLocateDecodeEntry
KiOpPatchCode
KiOpPreprocessAccessViolation
KiOpRetrieveRegMemAddress
KiOp_Div
KiOp_Illegal
KiOp_MOVAPS
KiOp_MOVDQA
KiOp_PREFETCH3
KiOp_Priv
KiOp_SGDTSIDT
KiOp_SLDTSTR
KiOutSwapKernelStacks
KiOutSwapProcesses
KiOverflowTrap
KiPageFault
KiParkUmsThread
KiParseLoadOptions
KiPassiveIsrWatchdog
KiPatchModRMReg
KiPcToFileHeader
KiPerformGroupConfiguration
KiPollFreezeExecution
KiPreprocessFault
KiPriQueueThreadPriorityChanged
KiProcessDeferredReadyList
KiProcessDisconnectList
KiProcessExpiredTimerList
KiProcessNMI
KiProcessPendingDisconnect
KiProcessPendingForegroundBoosts
KiProcessSecondarySignalList
KiProcessThreadWaitList
KiProcessorCallbackNop
KiQuantumEnd
KiQueryProcessorNode
KiQueueReadyThread
KiRaiseAssertion
KiRaiseException
KiRaiseSecurityCheckFailure
KiReadFixedMtrr
KiReadyOutSwappedThreads
KiReadyThread
KiRecomputeGroupSchedulingRank
KiReduceByEffectiveIdleSmtSet
KiReleaseInterruptConnectLock
KiReleaseQueuedSpinLockInstrumented
KiReleaseSpinLockInstrumented
KiReloadApcPendingState
KiRemoveBoostThread
KiRemoveProcessorFromGroupDatabase
KiRemoveQueueApc
KiRemoveThreadFromScbQueue
KiRemoveThreadFromSchedulingGroup
KiRemoveTimer2
KiRequestProcessInSwap
KiRequestTimer2Expiration
KiResetBootProcessorApicMask
KiRestoreDebugRegisterState
KiRestoreProcessorControlState
KiRestoreProcessorState
KiRestoreUchFromUmsContext
KiRestoreXSaveSupport
KiResumeClockTimer
KiResumeUmsThread
KiRetireDpcList
KiRundownMutants
KiSanitizeProfileInterval
KiSaveCurrentEtwTraceBuffer
KiSaveDebugRegisterState
KiSaveInitialProcessorControlState
KiSaveNpxState
KiSaveProcessorControlState
KiSaveProcessorState
KiScanBugCheckCallbackList
KiScanInterruptObjectList
KiScbQueueScanWorker
KiScheduleNextForegroundBoost
KiSchedulerApc
KiSchedulerApcNop
KiSchedulerApcRundown
KiSchedulerApcTerminate
KiSearchForNewThread
KiSegmentNotPresentFault
KiSelectCandidateProcessor
KiSelectIdealProcessor
KiSelectNextThread
KiSelectReadyThread
KiSelectReadyThreadEx
KiSelectThreadFromSchedulingGroup
KiSendClockInterruptToClockOwner
KiSendFreeze
KiSendThawExecution
KiServiceInternal
KiServiceLinkage
KiServiceTablesLocked
KiSetAffinityThread
KiSetCacheInformation
KiSetCacheInformationAmd
KiSetCacheInformationIntel
KiSetClockInterval
KiSetClockIntervalForHighResolutionTimers
KiSetClockIntervalToMinimumRequested
KiSetClockTickRate
KiSetDebuggerOwner
KiSetFeatureBits
KiSetIdealNodeProcessByGroup
KiSetIntervalWorker
KiSetPageAttributesTable
KiSetPendingTick
KiSetPriorityFloor
KiSetPriorityThread
KiSetStandardizedCacheInformation
KiSetSwitchingNpxState
KiSetSystemAffinityThread
KiSetSystemAffinityThreadToProcessor
KiSetSystemTimeDpc
KiSetThreadSchedulingGroup
KiSetTimerEx
KiSetupTimeIncrement
KiShouldSetClockIntervalForHighResolutionTimers
KiShuffleAssignedNodes
KiSignalThread
KiSignalWaitDisconnectLock
KiSpuriousInterruptTemplate
KiStackFault
KiStartDpcThread
KiStartDynamicProcessor
KiStartProfileTarget
KiStartSystemThread
KiStopProfileTarget
KiSuspendUmsThread
KiSwapContext
KiSwapDirectoryTableBaseTarget
KiSwapThread
KiSwapToUmsThread
KiSwapToUmsThreadContinue
KiSwitchKernelStackAndCallout
KiSwitchPriQueue
KiSwitchQueue
KiSynchCounterSetCallback
KiSynchNumaCounterSetCallback
KiSynchronizePassiveInterruptExecution
KiSystemCall32
KiSystemCall64
KiSystemServiceHandler
KiSystemStartup
KiTestNodeAffinity
KiThawSingleThread
KiTimer2Expiration
KiTimerDispatch
KiTimerExpiration
KiTimerExpirationDpc
KiTimerWaitTest
KiTraceCancelTimer2
KiTraceSetTimer
KiTraceSetTimer2
KiTransitionSchedulingGroupGeneration
KiTriggerForegroundBoostDpc
KiTryToAcquireQueuedSpinLockInstrumented
KiTryToAcquireSpinLockInstrumented
KiTryUnwaitThread
KiTryUnwaitThreadWithPriority
KiUmsCallEntry
KiUmsCallEntryContinue
KiUmsExceptionEntry
KiUmsExceptionFilter
KiUmsExit
KiUmsFastReturnToUser
KiUmsRestoreUch
KiUmsTrapEntry
KiUmsTrapEntryContinue
KiUncommitNodeAssignment
KiUnexpectedInterrupt
KiUnlinkWaitBlocks
KiUnlockKobjectArray
KiUnmaskSecondaryInterruptInternal
KiUpdateCpuTargetByRate
KiUpdateMinimumWeight
KiUpdateNumberProcessors
KiUpdateNumberProcessorsIpi
KiUpdateProcessorCount
KiUpdateRunTime
KiUpdateSharedReadyQueueAffinityThread
KiUpdateSystemTime
KiUpdateThreadSchedulingProperties
KiUpdateTime
KiUpdateTimeAssist
KiUpdateTimer2Flags
KiUpdateXSaveSize
KiVerifyPdata
KiVerifyScopesExecute
KiVerifyXcpt0
KiVerifyXcpt1
KiVerifyXcpt10
KiVerifyXcpt11
KiVerifyXcpt12
KiVerifyXcpt13
KiVerifyXcpt14
KiVerifyXcpt15
KiVerifyXcpt2
KiVerifyXcpt3
KiVerifyXcpt4
KiVerifyXcpt5
KiVerifyXcpt6
KiVerifyXcpt7
KiVerifyXcpt8
KiVerifyXcpt9
KiVerifyXcptFilter
KiVmbusInterrupt0
KiVmbusInterrupt1
KiVmbusInterrupt2
KiVmbusInterrupt3
KiWaitForAllObjects
KiWaitForContextSwap
KiWaitForReboot
KiWakePriQueueWaiter
KiWakeQueueWaiter
KiWriteFixedMtrr
KiXmmException
KitLogFeatureUsage
KitpInitAitSampleRate
KitpOpenRegKey
KitpReadUlongFromKey
KseAddHardwareId
KseDriverLoadImage
KseDriverScopeInitialize
KseDriverUnloadImage
KseDsCallbackHookAddDevice
KseDsCallbackHookDriverStartIo
KseDsCallbackHookDriverUnload
KseDsCallbackHookIrpDeviceControlFunction
KseDsCallbackHookIrpFunction
KseDsCallbackHookIrpInternalDeviceControlFunction
KseDsCallbackHookIrpPnpFunction
KseDsCallbackHookIrpPowerFunction
KseDsCompletionHookForPowerDevice
KseDsCompletionHookForStartDevice
KseDsCompletionHookForStopDevice
KseDsHookDriverTargeted
KseDsHookDriverUntargeted
KseDsHookExAllocatePool
KseDsHookExAllocatePoolWithTag
KseDsHookExFreePool
KseDsHookExFreePoolWithTag
KseDsHookIoCreateDevice
KseDsHookPoRequestPowerIrp
KseGetIoCallbacks
KseInitialize
KseLookupHardwareId
KseQueryDeviceData
KseQueryDeviceDataList
KseQueryDeviceFlags
KseRegisterShim
KseRegisterShimEx
KseResetDeviceCache
KseSetCompletionHook
KseSetDeviceFlags
KseShimDatabaseBootInitialize
KseShimDatabaseBootRelease
KseShimDatabaseClose
KseShimDatabaseOpen
KseShimDriverIoCallbacks
KseUnregisterShim
KseVersionLieInitialize
KsepApplyShimsToDriver
KsepCacheDeviceEqual
KsepCacheDeviceFree
KsepCacheDeviceHash
KsepCacheDeviceInsertData
KsepCacheDeviceQueryData
KsepCacheHwIdEqual
KsepCacheHwIdFree
KsepCacheHwIdHash
KsepCacheInitialize
KsepCacheInsert
KsepCacheLock
KsepCacheLookup
KsepCacheReset
KsepCacheUninitialize
KsepCompletionSafeWrapper
KsepDbCacheInsertDevice
KsepDbCacheQueryDevice
KsepDbCacheQueryDeviceData
KsepDbCacheQueryDeviceDataList
KsepDbCacheReadDevice
KsepDbGetDriverShims
KsepDbGetSdbString
KsepDbGetShimInfo
KsepDbQueryRegistryDeviceData
KsepDbQueryRegistryDeviceDataList
KsepDbReadKData
KsepDbReadKFlag
KsepDebugPrint
KsepDriverPathTail
KsepDsEventAddDevice
KsepDsEventDataIrp
KsepDsEventDevicePowerCompleted
KsepDsEventDevicePowerIrp
KsepDsEventDriverLoad
KsepDsEventDriverStartIo
KsepDsEventDriverUnload
KsepDsEventIoCreateDevice
KsepDsEventPnpIrp
KsepDsEventPnpStartDevice
KsepDsEventPnpStopDevice
KsepDsEventPoolAllocate
KsepDsEventPoolFree
KsepDsEventRequestPowerIrp
KsepDsEventSystemPowerIrp
KsepEngineGetShimsFromRegistry
KsepEngineInitialize
KsepEngineReadFlags
KsepEngineUninitialize
KsepEvntLogFlagsApplied
KsepEvntLogShimsApplied
KsepFindExportedFunctionByName
KsepGetLoadedModulesList
KsepGetModuleInfoByAddress
KsepGetModuleInfoByName
KsepGetShimCallbacksForDriver
KsepGetShimsForDriver
KsepIsModuleShimmed
KsepIsShimRegistered
KsepLoadShimProvider
KsepLogError
KsepLogEtwMessage
KsepLogInfo
KsepMatchInitAcpiOemInfo
KsepMatchInitBiosInfo
KsepMatchInitCpuInfo
KsepMatchInitMachineInfo
KsepPatchDriverImportsTable
KsepPatchImportTableEntry
KsepPoolAllocateNonPaged
KsepPoolAllocatePaged
KsepPoolFreeNonPaged
KsepPoolFreePaged
KsepRegistryCloseKey
KsepRegistryCreateKey
KsepRegistryEnumValue
KsepRegistryOpenKey
KsepRegistryQueryDWORD
KsepRegistryQueryDriverShims
KsepRegistryQueryKeyInformation
KsepRegistryQueryMULTISZ
KsepRegistryQuerySZ
KsepRegistryQueryValue
KsepResolveApplicableShimsForDriver
KsepResolveShimHooks
KsepShimDbChanged
KsepShimDbMapToMemory
KsepShimDbUnmapFromMemory
KsepStringAnsiToUnicode
KsepStringConcatenate
KsepStringDuplicate
KsepStringDuplicateUnicode
KsepStringFree
KsepStringSplitMultiString
KsepStringTransform
KsepValidateShimProviderAndData
KxContextToKframes
KxDispatchInterrupt
KxFlushEntireTb
KxInitializeProcessorState
KxMcheckAbort
KxMcheckAlternateReturn
KxNmiInterrupt
KxRetireDpcList
KxStartSystemThread
KxStartUserThread
KxSwitchKernelStackCallout
KxWaitForLockChainValid
KxWaitForLockOwnerShip
KxWaitForLockOwnerShipWithIrql
KxWaitForSpinLockAndAcquire
KyRetireDpcList
KyStartUserThread
KySwitchKernelStackCallout
KzInitializeSpinLock
KzLowerIrql
KzRaiseIrql
LOCK_ADDRESS_SPACE
LOCK_ADDRESS_SPACE_SHARED
LOCK_HIVE_LOAD
LOCK_PAGED_POOL_WS
LOCK_PAGED_POOL_WS_SHARED
LOCK_PAGE_TABLE_COMMITMENT
LOCK_SYSTEM_CACHE_WS
LOCK_SYSTEM_CACHE_WS_SHARED
LOCK_SYSTEM_PTES_WS
LOCK_SYSTEM_PTES_WS_SHARED
LOCK_WORKING_SET
LOCK_WORKING_SET_SHARED
LOCK_WS
LZNT1CompressChunk
LZNT1DecompressChunk
LZNT1FindMatchMaximum
LZNT1FindMatchStandard
LdrAccessResource
LdrEnumResources
LdrFindResourceDirectory_U
LdrFindResourceEx_U
LdrFindResource_U
LdrInitSecurityCookie
LdrIsResItemExist
LdrLoadAlternateResourceModuleEx
LdrProcessRelocationBlockLongLong
LdrRelocateImage
LdrResFallbackLangList
LdrResFindResource
LdrResFindResourceDirectory
LdrResGetRCConfig
LdrResSearchResource
LdrRscIsTypeExist
LdrUnloadAlternateResourceModule
LdrUnloadAlternateResourceModuleEx
LdrVerifyMappedImageMatchesChecksum
LdrpAccessResourceData
LdrpAccessResourceDataNoMultipleLanguage
LdrpArmProcessRelocation
LdrpCompareResourceNames_U
LdrpFetchAddressOfSecurityCookie
LdrpFindMessageInAlternateModule
LdrpGenericProcessRelocation
LdrpGetAlternateResourceModuleHandleEx
LdrpGetFromMUIMemCache
LdrpGetImageSize
LdrpGetMappingFromCacheEntry
LdrpGetParentLangId
LdrpGetRcConfig
LdrpGetResourceFileName
LdrpInitMuiCrits
LdrpKrnGetDataTableEntry
LdrpLoadResourceFromAlternativeModule
LdrpMapResourceFile
LdrpOpenKey
LdrpQueryValueKey
LdrpResCompareResourceNames
LdrpResGetMappingSize
LdrpResGetResourceDirectory
LdrpResSearchResourceInsideDirectory
LdrpResSearchResourceMappedFile
LdrpSearchResourceSection_U
LdrpSectionTableFromVirtualAddress
LdrpSetAlternateResourceModuleHandle
LdrpThumbProcessRelocation
LdrpVerifyAlternateResourceModule
LockRMLog
LockShutdownExclusive
LockShutdownShared
LogFwReport
LogFwStat
LogFwpRegisterWorker
LookupEntryPoint
LpcExitProcess
LpcReplyWaitReplyPort
LpcRequestPort
LpcRequestWaitReplyPort
LpcRequestWaitReplyPortEx
LpcSendWaitReceivePort
LpcpReplyWaitReplyPort
LpcpRequestWaitReplyPort
LsaCallAuthenticationPackage
LsaDeregisterLogonProcess
LsaFreeReturnBuffer
LsaLogonUser
LsaLookupAuthenticationPackage
LsaRegisterLogonProcess
MIDL_user_allocate
MIDL_user_free
MI_CHECK_KERNEL_NOEXECUTE_FAULT
MI_DECREMENT_USED_PTES_BY_HANDLE
MI_DECREMENT_USED_PTES_BY_HANDLE_CLUSTER
MI_DEREFERENCE_CONTROL_AREA_FILE
MI_FLUSH_CACHE_DUE_TO_ATTRIBUTE_CHANGE
MI_FREE_PAGED_SESSION_POOL_PAGES_LEFT
MI_INCREMENT_USED_PTES_BY_HANDLE
MI_INCREMENT_USED_PTES_BY_HANDLE_CLUSTER
MI_INITIALIZE_COLOR_BASE
MI_IS_DECAY_PFN
MI_IS_PFN
MI_LOCK_COMBINE_FREELIST
MI_LOCK_COMBINE_HASH
MI_LOCK_RELOCATIONS_EXCLUSIVE
MI_PAGEFILE_WRITE
MI_REFERENCE_CONTROL_AREA_FILE
MI_SET_PAGING_FILE_INFO
MI_SHOULD_PTE_BE_GLOBAL
MI_UNLOCK_COMBINE_FREELIST
MI_UNLOCK_COMBINE_HASH
MI_UNLOCK_RELOCATIONS_EXCLUSIVE
MI_UNUSED_SUBSECTIONS_COUNT_REMOVE
MI_VA_IN_SESSION_SPECIAL_POOL
MI_WRITE_VALID_PTE_VOLATILE
MI_WSLE_HASH_VA
MUIBugCheck
MUIInitializeResourceLock
MUIRegistrySystemRoutine
MY_READ_PORT_UCHAR
MY_READ_REGISTER_UCHAR
MY_WRITE_PORT_UCHAR
MY_WRITE_REGISTER_UCHAR
MatchAll
McGenControlCallbackV2
McGenEventRegister
MdlInvariantPostDriverCompletion
MdlInvariantPostProcessing1
MdlInvariantPreProcessing1
MiAbortCombineScan
MiAcquireNonPagedResources
MiAcquireProperVm
MiActOnPte
MiActivePageClaimCandidate
MiActivePageWorthTrying
MiAddBackingForNewPoolVa
MiAddExpansionNonPagedPool
MiAddHalIoMappings
MiAddLockedPageCharge
MiAddLockedPageChargeForModifiedPage
MiAddLockedPageChargeForProbe
MiAddLockedPageChargeForTransitionPage
MiAddMappedPtes
MiAddMdlTracker
MiAddRangeToCrashDump
MiAddSecureEntry
MiAddToReservationCluster
MiAddTriageDumpPtes
MiAddViewsForSection
MiAddViewsForSectionWithPfn
MiAddWorkingSetPage
MiAdjustCachedStacks
MiAdjustModifiedPageLoad
MiAdjustPteBins
MiAdvancePrefetch
MiAdvanceVadHint
MiAgeWorkingSet
MiAllocateAccessLog
MiAllocateAweInfo
MiAllocateCombineProto
MiAllocateContiguousMemory
MiAllocateCrcList
MiAllocateDriverPage
MiAllocateDummyPage
MiAllocateFixupVad
MiAllocateImportList
MiAllocateInPageSupport
MiAllocateKernelStackPages
MiAllocateLargeZeroPages
MiAllocateMdlPagesByLists
MiAllocateMemoryListLocks
MiAllocateMostlyContiguous
MiAllocatePagedPoolPages
MiAllocatePagesForMdl
MiAllocatePfnRepurposeLogDispatch
MiAllocatePoolPages
MiAllocateVad
MiAllocateWorkingSetSwapSupport
MiAllocateWsle
MiAllowGuardFault
MiAllowProtectionChange
MiAllowWorkingSetExpansion
MiAnyAddressLocked
MiAppendSubsectionChain
MiApplyBytestreamFixup
MiApplyCompressedFixups
MiApplyRawFixups
MiApplyStraddleFixups
MiArbitraryCodeBlocked
MiAssignInitialPageAttribute
MiAssignNonPagedPoolPtes
MiAttachAndLockWorkingSet
MiAttachSession
MiAttachToOwningSession
MiAttemptCoalesce
MiAttemptPageFileExtension
MiAttemptPageFileReduction
MiAttemptPageFileReductionApc
MiAttemptSectionDelete
MiAweViewInserter
MiAweViewRemover
MiBadMemoryLogger
MiBadRefCount
MiBadShareCount
MiBeginProcessClean
MiBuildForkPageTable
MiBuildForkPte
MiBuildForkVad
MiBuildImageControlArea
MiBuildImportsForBootDrivers
MiBuildMappedCluster
MiBuildPageTable
MiBuildPagedPool
MiBuildReservationCluster
MiBuildWakeList
MiCacheImageSymbols
MiCallDllUnloadAndUnloadDll
MiCanFileBeTruncatedInternal
MiCanGrantExecute
MiCanPageMove
MiCancelPhase0Locking
MiCaptureAllWorkingSetAccessBits
MiCaptureAndResetWorkingSetAccessBits
MiCaptureDeleteHierarchy
MiCaptureDirtyBitToPfn
MiCaptureImageExceptionValues
MiCapturePageFileInfo
MiCaptureProtectionFromLockedProto
MiCaptureProtectionFromProto
MiCaptureUlongPtrArray
MiCaptureWriteWatchDirtyBit
MiCauseOverCommitPopup
MiCfgEliminateZeroPages
MiChangePageAttribute
MiChangePageAttributeBatch
MiChargeCommitment
MiChargeCommitmentCantExpand
MiChargeCommitmentPageLockHeld
MiChargeFullProcessCommitment
MiChargeGlobalResidentAvailable
MiChargeProcessCommitment
MiChargeProcessPhysicalPages
MiChargeResidentAvailable
MiChargeSegmentCommit
MiChargeTemporaryCommitmentForReduction
MiChargeWsles
MiCheckAndUpdatePagingFileMinimum
MiCheckControlArea
MiCheckDosCalls
MiCheckForConflictingVad
MiCheckForConflictingVadExistence
MiCheckForControlAreaDeletion
MiCheckForUserStackOverflow
MiCheckLargePageOk
MiCheckNodeChannelStandbyCount
MiCheckPageFileMapping
MiCheckPhysicalAddressRange
MiCheckProtoPtePageState
MiCheckPteRelease
MiCheckPteReserve
MiCheckPurgeAndUpMapCount
MiCheckReservePageFileSpace
MiCheckSecuredImageVad
MiCheckSecuredVad
MiCheckSessionPoolAllocations
MiCheckSpecialPoolSlop
MiCheckSystemTrimEndCriteria
MiCheckUserVirtualAddress
MiCheckVirtualAddress
MiCheckWsLimits
MiClaimPhysicalRun
MiCleanCfg
MiCleanPhysicalProcessPages
MiCleanSection
MiCleanWorkingSet
MiClearContainingMapping
MiClearFilePointer
MiClearNonPagedPtes
MiClearPageFileHash
MiClearPfnImageVerified
MiClearPteAccessed
MiClearStackOwners
MiClearVadBits
MiCloneCompare
MiCloneNoChange
MiCloneProcessAddressSpace
MiCloneReserveVadCommit
MiCloneVads
MiCollapseRunTopDown
MiCombineCandidate
MiCombineCompare
MiCombinePageSort
MiCombiningInProgress
MiCommitExistingVad
MiCommitPageTablesForVad
MiCommitPagefileBackedSection
MiCommitVadCfgBits
MiCommitmentAvailable
MiComparePageHash
MiComparePages
MiCompleteProtoPteFault
MiCompressImportList
MiCompressRelocations
MiCompressRvaList
MiCompressedRvaListFirst
MiCompressedRvaListNext
MiComputeAgeDistribution
MiComputeAgingPercent
MiComputeCommitThresholds
MiComputeDataFlushRange
MiComputeDriverProtection
MiComputeFaultNode
MiComputeFlushRange
MiComputeHash64
MiComputeImagePteIndex
MiComputeNodeMemory
MiComputeNumaCosts
MiComputeOptimalZeroPath
MiComputePageCommitment
MiComputePageHash
MiComputePrefetchCluster
MiComputeProcessSharedCommit
MiComputeProcessUserVa
MiComputeStartingOffset
MiComputeSystemTrimCriteria
MiComputeTotalPrefetchPages
MiComputeTrimAmount
MiComputeUserWorkingSetSpan
MiComputeWslePagesNeeded
MiComputeZeroClusterMaximum
MiConfigureMemoryInsertion
MiConfigureMemoryRemoval
MiConfirmPageIsZero
MiConstructLoaderEntry
MiContractPagingFiles
MiContractWsSwapPageFile
MiContractWsSwapPageFileWorker
MiConvertAndFlushWsleVas
MiConvertContiguousPages
MiConvertInitialMemoryBlock
MiConvertPrivateToProto
MiConvertSessionImagePages
MiConvertSessionImageToPagefileBacking
MiConvertStandbyToProto
MiConvertStaticSubsections
MiConvertTebToShared
MiConvertToLinkedWsles
MiConvertWsleHash
MiCopyDataPageToImagePage
MiCopyFromUntrustedMemory
MiCopyHeaderIfResident
MiCopyKstack
MiCopyLargeVad
MiCopyOnWrite
MiCopyPage
MiCopyPfnEntry
MiCopySinglePage
MiCopySystemImage
MiCopyToCfgBitMap
MiCopyToUntrustedMemory
MiCopyToUserVa
MiCopyTopLevelMappings
MiCountExistingPageTables
MiCountSharedPages
MiCrcInCombineHash
MiCreateDataFileMap
MiCreateDecayPfn
MiCreateFixupRecord
MiCreateForkWsles
MiCreateFreePfns
MiCreateImageFileMap
MiCreateLargePageVad
MiCreateMemoryEvent
MiCreateNewSection
MiCreateNodeLists
MiCreatePageFileSpaceBitmaps
MiCreatePageTablesForPhysicalRange
MiCreatePagingFileMap
MiCreatePebOrTeb
MiCreatePerSessionProtos
MiCreatePfnDatabase
MiCreatePteCopyList
MiCreateRotateView
MiCreateSection
MiCreateSectionForDriver
MiCreateSparsePfnDatabase
MiCreateVadEventBitmap
MiCreateWriteWatchView
MiCreateZeroContext
MiCreateZeroThreadContext
MiCurrentPrefetchPageIndex
MiDbgMarkPfnModified
MiDbgReleaseAddress
MiDbgTranslatePhysicalAddress
MiDbgUnTranslatePhysicalAddress
MiDbgWriteCheck
MiDecayPfnFullyInitialized
MiDecommitPages
MiDecreaseAvailablePages
MiDecrementAndInsertStandbyPages
MiDecrementCloneBlockReference
MiDecrementCombinedPte
MiDecrementModifiedWriteCount
MiDecrementSubsections
MiDecrementTebProtos
MiDeleteAddressesInWorkingSet
MiDeleteBatch
MiDeleteBootRange
MiDeleteCachedSegment
MiDeleteCachedSubsection
MiDeleteControlArea
MiDeleteControlAreaList
MiDeleteEmptySubsections
MiDeleteExcessWorkingSetPages
MiDeleteFinalPageTables
MiDeleteKernelStack
MiDeleteKernelStackPages
MiDeleteLockedTransitionPte
MiDeleteMergedPte
MiDeleteNoBlockStacks
MiDeletePagablePteRange
MiDeletePageTableHierarchy
MiDeletePageTablesForPhysicalRange
MiDeleteParentDecayNode
MiDeletePerSessionProtos
MiDeletePfnList
MiDeletePhysicalProcessPages
MiDeletePhysmemVad
MiDeletePteList
MiDeletePteRange
MiDeletePteRun
MiDeleteRotateAndStopFaults
MiDeleteSegmentPages
MiDeleteSessionAddressSpace
MiDeleteSystemPagableVm
MiDeleteSystemPte
MiDeleteTransitionPte
MiDeleteVad
MiDeleteVadBitmap
MiDeleteValidSystemPte
MiDeleteVirtualAddresses
MiDeleteZeroThreadContext
MiDemoteCombinedPte
MiDemoteLargeFreePage
MiDemotePool
MiDepleteInitialPool
MiDeprioritizeVARange
MiDeprioritizeVad
MiDerefPageFileSpaceBitmaps
MiDereferenceControlArea
MiDereferenceControlAreaBySection
MiDereferenceControlAreaPfn
MiDereferenceControlAreaProbe
MiDereferenceExtendInfo
MiDereferenceImports
MiDereferenceIoSpace
MiDereferencePageRuns
MiDereferencePerSessionProtos
MiDereferenceSegmentThread
MiDereferenceSession
MiDereferenceSessionFinal
MiDereferenceTebVad
MiDereferenceVad
MiDereferenceVadUnsafe
MiDescribePageRun
MiDestroySection
MiDetachFromOwningSession
MiDiscardTransitionPte
MiDispatchFault
MiDoReplacement
MiDoSingleFixup
MiDoStackCopy
MiDoneWithThisPageGetAnother
MiDrainControlAreaWrites
MiDrainSystemAccessLog
MiDrainZeroLookasides
MiDriverLoadSucceeded
MiDummyApcRoutine
MiDuplicateCloneLeaf
MiEliminatePageTablesOfOnes
MiEmptyAccessLogs
MiEmptyDecayClusterTimers
MiEmptyKernelStackCache
MiEmptyPageAccessLog
MiEmptyPteBins
MiEmptyWorkingSet
MiEmptyWorkingSetHelper
MiEmptyWorkingSetPrivatePagesByVa
MiEmptyWsPrivatePagesCallback
MiEnableNewPfns
MiEnablePagingOfDriver
MiEnablePagingTheExecutive
MiEncodeProtoFill
MiEndingOffset
MiEndingOffsetWithLock
MiEnumKernelLeafPtes
MiEnumLeafPtes
MiExamineHalVa
MiExceptionForMappedVa
MiExchangeWsle
MiExpandFlushMdl
MiExpandNonPagedPool
MiExpandPagedPool
MiExpandPtes
MiExpandSpecialPool
MiExpandSystemCache
MiExpandVadBitMap
MiExpandVadBitMapDown
MiExtendPagingFileMaximum
MiExtendPagingFiles
MiExtendSection
MiFaultPteIntact
MiFillCombinePage
MiFillGapAddresses
MiFillGapPtes
MiFillMapFileInfo
MiFillNoReservationCluster
MiFillPageExtraInfo
MiFillPagedPoolLockedDown
MiFillPfnGaps
MiFillSessionWorkingSetEntry
MiFinalizePageAttribute
MiFindActualFaultingPte
MiFindContiguousMemoryInPool
MiFindContiguousMemoryInPoolBitmap
MiFindContiguousPages
MiFindDriverNonPagedSections
MiFindEmptyAddressRange
MiFindEmptyAddressRangeDown
MiFindEmptyAddressRangeDownTree
MiFindEmptyAddressRangeInTree
MiFindExportedRoutineByName
MiFindFreePageFileSpace
MiFindInitialNonPagedPool
MiFindLargeNodePages
MiFindLargePageMemory
MiFindLargestLoaderDescriptor
MiFindLastSubsection
MiFindLoaderGap
MiFindNonPagedPoolPages
MiFindNonPagedPoolVa
MiFindPageFileWriteCluster
MiFindRebuildCandidate
MiFindSharedCommitVads
MiFinishHardFault
MiFinishLastForkPageTable
MiFinishPageFileExtension
MiFinishResume
MiFinishVadDeletion
MiFlushAcquire
MiFlushComplete
MiFlushControlArea
MiFlushDataSection
MiFlushDirtyBitsToPfn
MiFlushPfnList
MiFlushRelease
MiFlushSectionInternal
MiFlushTbAsNeeded
MiFlushTbForNonPagedPool
MiFlushTbList
MiForcedTrim
MiFormFullImageName
MiFreeAweInfo
MiFreeBootDriverInitializationCode
MiFreeBootPageTable
MiFreeClonePool
MiFreeCombineBlock
MiFreeCombinePool
MiFreeContiguousPages
MiFreeDriverInitialization
MiFreeEmptyBootPageTable
MiFreeExcessSegments
MiFreeForkMaps
MiFreeInPageSupportBlock
MiFreeInitializationCode
MiFreeLargePageMemory
MiFreeLargePageView
MiFreeLargePages
MiFreeMdlTracker
MiFreeModifiedReservations
MiFreeOverlappedFlushEntry
MiFreePageFileHashPfn
MiFreePageFileHashPfns
MiFreePageFileSpaceBitmaps
MiFreePagedPoolPages
MiFreePhysicalView
MiFreePoolPages
MiFreePoolPagesLeft
MiFreeReadListPages
MiFreeRelocations
MiFreeRemainingReservations
MiFreeResidentHeaderVa
MiFreeRotateView
MiFreeSessionSpaceMap
MiFreeSmallPageFromMdl
MiFreeUnmappedPageTables
MiFreeVadEvents
MiFreeWsleList
MiGatherHiberRange
MiGatherMappedPages
MiGatherPagefilePages
MiGetAvailablePagesForTrimPass
MiGetCcAccessLog
MiGetControlAreaCfg
MiGetControlAreaPtes
MiGetEffectivePagePriorityThread
MiGetFileHashPage
MiGetFreeOrZeroPage
MiGetHighestPteConsumer
MiGetImageProtection
MiGetInPageSupportBlock
MiGetInstructionPointer
MiGetLargePageToZero
MiGetNextPageTable
MiGetNextSession
MiGetNodeChannelPageCounts
MiGetPage
MiGetPageFileSectionForReservation
MiGetPageForHeader
MiGetPageForWriteCluster
MiGetPageProtection
MiGetPfnProtection
MiGetPhysicalAddress
MiGetPrivatePageCount
MiGetProtoPteAddress
MiGetProtoPteAddressExtended
MiGetPteFromCopyList
MiGetPteMappingPair
MiGetReadyInPageBlock
MiGetSharedProtos
MiGetSystemPage
MiGetTopLevelPfn
MiGetTopPteAddress
MiGetVadWakeList
MiGetWorkingSetInfo
MiGetWorkingSetInfoEx
MiGetWorkingSetInfoList
MiGetWsAndInsertVad
MiGetWsAndMakePageTablesNx
MiGetZeroedPages
MiGetZeroingVa
MiHandleCallback
MiHandleForkTransitionPte
MiHandleInPageError
MiHandleSynchronousFlushError
MiIdentifyPfn
MiIdentifyPfnWrapper
MiImageCantMove
MiImagePagable
MiImagePageOk
MiImageUnused
MiInPageSingleKernelStack
MiIncreaseAvailablePages
MiIncreaseCommitLimits
MiIncreaseNonPagedPoolUsage
MiInitMachineDependent
MiInitPerfMemoryFlags
MiInitSystem
MiInitializeApiSets
MiInitializeBlankPfns
MiInitializeBootDefaults
MiInitializeBootLoadedDriverPfns
MiInitializeBootProcess
MiInitializeCacheFlushing
MiInitializeChannelRanges
MiInitializeColorBase
MiInitializeColorBaseSession
MiInitializeColors
MiInitializeCombining
MiInitializeCommitment
MiInitializeDecayPfns
MiInitializeDriverImages
MiInitializeDynamicBitmap
MiInitializeDynamicPfns
MiInitializeDynamicRegion
MiInitializeForkMaps
MiInitializeGapFrames
MiInitializeInPageSupport
MiInitializeKernelStacks
MiInitializeLoadedModuleList
MiInitializeLockedPagesTracking
MiInitializeMemoryEvents
MiInitializeMirroring
MiInitializeModifiedPageWriter
MiInitializeNonPagedPool
MiInitializeNuma
MiInitializeNumaRanges
MiInitializePageAccessLogging
MiInitializePageForHeader
MiInitializePfn
MiInitializePfnForOtherProcess
MiInitializePfnListHeads
MiInitializePfnsForValidMappings
MiInitializePoolEvents
MiInitializeProbePacketVm
MiInitializeProcessBottomUpEntropy
MiInitializeProcessTopDownEntropy
MiInitializePrototypePtes
MiInitializePteInfo
MiInitializeReadInProgressPfn
MiInitializeRelocations
MiInitializeScrubPacket
MiInitializeSections
MiInitializeSessionIds
MiInitializeSessionPool
MiInitializeSlowPte
MiInitializeSpecialPool
MiInitializeStoreSupport
MiInitializeSystemCache
MiInitializeSystemImagePage
MiInitializeSystemPageTable
MiInitializeSystemPtes
MiInitializeSystemSpaceMap
MiInitializeSystemWorkingSetList
MiInitializeTbFlushList
MiInitializeTransitionPfn
MiInitializeUnusablePfn
MiInitializeUserNoAccess
MiInitializeVadBitMap
MiInitializeWorkingSetList
MiInitializeWorkingSetManagerParameters
MiInitializeWowPeb
MiInitializeZeroPagePtes
MiInsertAndUnlockStandbyPages
MiInsertAweInfo
MiInsertBasedSection
MiInsertCachedPte
MiInsertClone
MiInsertControlAreaView
MiInsertDecayClusterTimer
MiInsertInSystemSpace
MiInsertIoSpaceMap
MiInsertLargePageInFreeOrZeroList
MiInsertLargePageInNodeList
MiInsertNewCombineBlocks
MiInsertNewProcess
MiInsertNonPagedPoolOnSlist
MiInsertNumaStandbyPage
MiInsertPageFileInList
MiInsertPageInFreeOrZeroedList
MiInsertPageInList
MiInsertPrivateVad
MiInsertProcessVads
MiInsertProtectedStandbyPage
MiInsertPteTracker
MiInsertSubsectionNode
MiInsertTbFlushEntry
MiInsertUnusedSegment
MiInsertUnusedSubsection
MiInsertVad
MiInsertVadCharges
MiInsertVadEvent
MiInsertVadList
MiInsertViewOfPhysicalSection
MiInsertWsle
MiInvalidateCollidedIos
MiInvalidateCollidedPfns
MiInvalidateHiberPhasePages
MiIrpCompletionApcRoutine
MiIsAddressValid
MiIsCfgBitMapPageShared
MiIsFaultPteIntact
MiIsLowestPageTablePage
MiIsPoolHeader
MiIsProbeActive
MiIsProcessCfgEnabled
MiIsPteDecommittedPage
MiIsRangeFullyCommitted
MiIsRegularMemory
MiIsSubsectionClean
MiIsVaRangeAvailable
MiIssueAsynchronousFlush
MiIssueHardFault
MiIssueHardFaultIO
MiIssueNoPtesBugcheck
MiIssuePageExtendRequest
MiIssuePageExtendRequestNoWait
MiIssueSynchronousFlush
MiJoinSession
MiJumpStack
MiJumpStackTarget
MiLargePageFault
MiLdwPopupWorker
MiLeapPrefetch
MiLoadImageSection
MiLoadImportDll
MiLoadUserSymbols
MiLocateAddress
MiLocateCloneAddress
MiLocateCombineBlock
MiLocateExclusiveSecure
MiLocateKernelSections
MiLocatePagefileSubsection
MiLocatePhysicalViewInTree
MiLocateSessionProtosInSubsection
MiLocateSubsection
MiLocateSubsectionNode
MiLocateVadEvent
MiLocateWsle
MiLockAddressSpaceToo
MiLockAllMemoryLists
MiLockAndDecrementReferenceCount
MiLockAndDecrementShareCount
MiLockAndInsertPageInFreeList
MiLockAndSelectSessionAttachProcess
MiLockCode
MiLockControlAreaFileObjectExclusive
MiLockDriverMappings
MiLockDynamicMemoryExclusive
MiLockImageSection
MiLockLeafPageWorker
MiLockNestedVad
MiLockNonPagedPoolPte
MiLockPagableImageSection
MiLockPagableSections
MiLockPage
MiLockPageAndSetDirty
MiLockPageAtDpc
MiLockPageTablePage
MiLockPagedAddress
MiLockProtoPage
MiLockProtoPoolPage
MiLockSectionControlArea
MiLockSetPfnPriority
MiLockTrackerCompare
MiLockTransitionLeafPageUnsafe
MiLockUnlockCommon
MiLockVad
MiLockVadRange
MiLockVadUnsafe
MiLockWorkingSet
MiLockWsSwapExclusive
MiLogAllocateWsleEvent
MiLogCombinedPteDelete
MiLogFailedDriverLoad
MiLogKernelStackEvent
MiLogMapFileEvent
MiLogMdlRangeEvent
MiLogMemResetInfo
MiLogNonPagedPoolReleaseEvent
MiLogPageAccess
MiLogPerfMemoryEvent
MiLogPerfMemoryRangeEvent
MiLogRelocationFaults
MiLogRelocationRva
MiLogRemoveWsleEvent
MiLogSectionCreate
MiLogVirtualRotateEvent
MiLookupDataTableEntry
MiMakeHyperRangeAccessible
MiMakeImageReadOnly
MiMakeOutswappedPageResident
MiMakePageBad
MiMakeProtectionMask
MiMakeProtectionPfnCompatible
MiMakeProtoAddressValid
MiMakeProtoLeafValid
MiMakeProtoTransition
MiMakeSpecialPoolPaged
MiMakeSystemAddressValid
MiMakeSystemAddressValidSystemWs
MiMakeSystemCacheRangeValid
MiMakeZeroedPageTableRange
MiMakeZeroedPageTables
MiMapArbitraryPage
MiMapCacheExceptionFilter
MiMapCfgBitMapSection
MiMapImageInSystemProcess
MiMapImageInSystemSpace
MiMapInitialNonPagedPool
MiMapIoSpace
MiMapLockedPagesInUserSpace
MiMapLockedPagesInUserSpaceHelper
MiMapMdlCommon
MiMapNewPfns
MiMapNewSession
MiMapNewWorkingSetPage
MiMapPageFileHash
MiMapPageInHyperSpaceWorker
MiMapProcessExecutable
MiMapProcessMetaPage
MiMapSessionImage
MiMapSinglePage
MiMapUserLargePages
MiMapViewInSystemSpace
MiMapViewOfDataSection
MiMapViewOfImageSection
MiMapViewOfPhysicalSection
MiMapViewOfSection
MiMapWithLargePages
MiMapWsleHash
MiMappedPageWriter
MiMarkBootGuardPage
MiMarkBootKernelStack
MiMarkHiberNotCachedPages
MiMarkKernelPageTablePages
MiMarkKernelPageTablesHelper
MiMarkKernelStack
MiMarkLargePageRange
MiMarkMdlComplete
MiMarkNonPagedHiberPhasePages
MiMarkPageActive
MiMarkPfnVerified
MiMarkPrivateImageCfgBits
MiMarkPrivateOpenCfgBits
MiMarkPteDirty
MiMarkSessionMasterProcess
MiMarkSharedImageCfgBits
MiMaximumCommitmentAvailable
MiMergeTbFlushEntryBackwards
MiMigratePfn
MiMirrorNodeLargePages
MiModifiedPageWriter
MiModifiedWriterNoReservationSort
MiMoveEccPagesToFreeList
MiNoFaultFound
MiNoPagesLastChance
MiNodeCostSort
MiNodeFreeZeroPages
MiNonPagedPoolNumaNode
MiNumberWsSwapPagefiles
MiObtainFreePages
MiObtainInitialPoolChunk
MiObtainNonPagedPoolNumaVa
MiObtainPagefileHashes
MiObtainReferencedSecureVad
MiObtainReferencedVad
MiObtainReferencedVadEx
MiObtainRelocationBits
MiObtainSectionForDriver
MiObtainSessionVa
MiObtainSystemCacheView
MiObtainSystemVa
MiObtainTransitionPage
MiOffsetToProtos
MiOkToShrinkPageFiles
MiOrderTrimList
MiOutPageSingleKernelStack
MiOutSwapWorkingSetCallback
MiPageAttributeBatchChangeNeeded
MiPageFileNoFreeSpace
MiPageInRange
MiPageMightBeZero
MiPageNotZero
MiPageTablesNeeded
MiPageToChannel
MiPageToNode
MiPagefileSectionCompare
MiParseComImage
MiParseImageCfgBits
MiParseImageSectionHeaders
MiPerSessionProtosCompare
MiPerformCombineScan
MiPerformFixups
MiPerformMemoryChange
MiPfAllocateMdls
MiPfCoalesceAndIssueIOs
MiPfCompletePrefetchIos
MiPfExecuteReadList
MiPfIssueCoalesceCandidates
MiPfIssueCoalescedSupport
MiPfPrepareReadList
MiPfPrepareSequentialReadList
MiPfPutPagesInTransition
MiPfnReferenceCountIsZero
MiPfnShareCountIsZero
MiPfnsWorthTrying
MiPhysicalPoolCheck
MiPhysicalViewCompareVpn
MiPopFreeWsle
MiPopulateCfgBitMap
MiPopulateWorkingSetFreeList
MiPreInitializeSystemImagePage
MiPrefetchControlArea
MiPrefetchJumpVad
MiPrefetchRestOfCluster
MiPrefetchVirtualMemory
MiPrepareSegmentForDeletion
MiPrivateFixup
MiPrivateFixupNeeded
MiProbeLeafFrame
MiProbeLockFrame
MiProcessCrcList
MiProcessDeleteOnClose
MiProcessDereferenceList
MiProcessLoadConfigForDriver
MiProcessLoaderEntry
MiProcessWorkingSets
MiProcessWsInSwapFault
MiProcessWsInSwapRanges
MiProtectAweRegion
MiProtectKernelRegions
MiProtectPool
MiProtectPrivateMemory
MiProtectSystemImage
MiProtectVirtualMemory
MiProtoFault
MiPteBinsNeedTrimming
MiPteNeedsCommitCharge
MiPulseCommitSignal
MiPulseLowAvailableEvent
MiPurgeImageSection
MiPurgeLargeZeroNodePages
MiPurgeSpecialPoolPaged
MiPurgeSubsection
MiPurgeTransitionList
MiPurgeZeroList
MiPushBadPool
MiQueryAddressSpan
MiQueryAddressState
MiQueryPfnUnsafe
MiQueueControlAreaDelete
MiQueuePageAccessLog
MiQueuePageFileExtension
MiQueueSyncModifiedWriterApc
MiQueueWorkingSetRequest
MiRaisedIrqlFault
MiReadWriteVirtualMemory
MiReadyFlushMdlToWrite
MiReadyStandbyPageForActive
MiRebuildLargePage
MiRebuildLargePages
MiRecheckCombineVm
MiReclaimSystemVa
MiReduceCommitLimits
MiReduceWs
MiRefPageFileSpaceBitmaps
MiReferenceCfgVad
MiReferenceControlArea
MiReferenceControlAreaForCacheManager
MiReferenceControlAreaPfn
MiReferenceInPageFile
MiReferenceIoSpace
MiReferencePageForCluster
MiReferencePageRuns
MiReferencePagefileSection
MiReferencePfBackedSection
MiReferenceSubsection
MiReferenceVad
MiRegistryVaSort
MiReleaseArbitraryPage
MiReleaseConfirmedPageFileInfo
MiReleaseControlAreaWaiters
MiReleaseDriverPtes
MiReleaseFlushInProgress
MiReleaseFreshPage
MiReleaseImageSection
MiReleaseInPageRefs
MiReleaseNonPagedResources
MiReleaseOutSwapReservations
MiReleasePageFileSectionInfo
MiReleasePageFileSpace
MiReleasePageHash
MiReleaseProcessReferenceToSessionDataPage
MiReleasePteCopyList
MiReleasePtes
MiReleaseReadListResources
MiReleaseScrubPacket
MiReleaseSessionVa
MiReleaseSystemCacheView
MiReleaseWorkingSetForDebugger
MiReleaseWsle
MiRelinkStandbyPage
MiReloadBootLoadedDrivers
MiRelocateImage
MiRelocateImageAgain
MiRelocateImagePfn
MiRelockProtoPoolPage
MiRememberUnloadedDriver
MiRemoveAnyPage
MiRemoveControlAreaView
MiRemoveDecayClusterTimer
MiRemoveEntryWsle
MiRemoveFreePoolMemoryFromDump
MiRemoveFromSystemSpace
MiRemoveImageSessionWide
MiRemoveIoSpaceMap
MiRemoveLockedPageCharge
MiRemoveLockedPageChargeAndDecRef
MiRemoveLockedPageFromWorkingSet
MiRemoveLowestPriorityStandbyPage
MiRemoveMappedPtes
MiRemovePageFromWorkingSet
MiRemovePhysicalMemory
MiRemovePoolPages
MiRemovePoolRegion
MiRemovePteTracker
MiRemoveSecureEntry
MiRemoveSingleWsle
MiRemoveSpecialPoolRange
MiRemoveUnusedSegment
MiRemoveUnusedSegments
MiRemoveUnusedSubsection
MiRemoveUserPhysicalPagesVad
MiRemoveVadCharges
MiRemoveViewsFromSection
MiRemoveViewsFromSectionWithPfn
MiRemoveWakeListEntry
MiRemoveWorkingSetPages
MiRemoveWsle
MiRemoveWsleFromFreeList
MiReplaceLockedPage
MiReplaceNumaStandbyPage
MiReplacePageOfProtoPool
MiReplacePageTablePage
MiReplaceRotateWithDemandZero
MiReplaceTransitionPage
MiReplaceUltraBit
MiReplaceWorkingSetEntryLarge
MiReplaceWorkingSetEntrySmall
MiReplaceWsleHash
MiReplenishBitMap
MiReplenishFromNodeLargePages
MiReplenishLocalCommit
MiReplenishPageSlist
MiReplenishProcessorResidentAvailable
MiReplicatePteChange
MiReportPageHashError
MiReserveDriverPtes
MiReservePageFileSpace
MiReservePageFileSpaceForPage
MiReservePageHash
MiReservePtes
MiResetVirtualMemory
MiResidentPagesForSpan
MiResolveDemandZeroFault
MiResolveImageReferences
MiResolveMappedFileFault
MiResolvePageFileFault
MiResolvePageTablePage
MiResolveProtoPteFault
MiResolveTransitionFault
MiRestoreTransitionPte
MiRestrictRangeToNode
MiResumeFromHibernate
MiRetardMdl
MiReturnCcAccessLog
MiReturnCommitment
MiReturnDriverLoadPages
MiReturnFullProcessCommitment
MiReturnImageBase
MiReturnLargePages
MiReturnNonPagedPoolVa
MiReturnPageTablePageCommitment
MiReturnPhysicalPoolPages
MiReturnProcessVads
MiReturnPteMappingPair
MiReturnSystemPtes
MiReturnSystemVa
MiReturnWsToExpansionList
MiReuseStandbyPage
MiRevertHiberPhasePages
MiRevertRelocatedImagePfn
MiRevertValidPte
MiRotateComplete
MiRotateHeadWsle
MiRotatedToFrameBuffer
MiSanitizePfnProtection
MiScanPagefileSpace
MiScanRelocationPage
MiScrubAweMappedPage
MiScrubLargeMappedPage
MiScrubMemoryWorker
MiScrubNode
MiScrubNodeLargePageList
MiScrubNodeLargePages
MiScrubNonPagedPool
MiScrubPage
MiScrubProcesses
MiSectionCompare
MiSectionCreated
MiSectionDelete
MiSectionInitialization
MiSecureVad
MiSegmentDelete
MiSelectBitMapForImage
MiSelectCfgBitMap
MiSelectImageBase
MiSelectSessionAttachProcess
MiSelectUserAddress
MiSessionAddProcess
MiSessionCreate
MiSessionCreateInternal
MiSessionInitializeWorkingSetList
MiSessionInsertImage
MiSessionLookupImage
MiSessionObjectCreate
MiSessionObjectDelete
MiSessionPoolVector
MiSessionProcessGlobalSubsections
MiSessionRemoveImage
MiSessionUnlinkProcess
MiSessionWideReserveImageAddress
MiSessionWsMetaPage
MiSetContiguousPoolNoSteal
MiSetDeleteOnClose
MiSetInPagePrefetchPriority
MiSetInPagePriority
MiSetMemoryPriorityProcess
MiSetNonPagedPoolNoSteal
MiSetPagesModified
MiSetPagingOfDriver
MiSetPermissionsOnInitialPool
MiSetPfnOwnedAndActive
MiSetPriorityVaRanges
MiSetProtectionOnSection
MiSetProtectionOnTransitionPte
MiSetReadOnlyOnSectionView
MiSetSystemCodeProtection
MiSetVadBits
MiSetWsleAge
MiSharePage
MiShutdownSystem
MiSignalLargePageRebuild
MiSimpleAging
MiSlowRotateCopy
MiSmallVaStillMapsFrame
MiSnapDriverRange
MiSnapThunk
MiSnapUnresolvedImport
MiSplitBitmapPages
MiSplitPrivatePage
MiStartZeroPageWorkers
MiStealPage
MiStoreEvictPageFile
MiStoreEvictThread
MiStoreFaultComplete
MiStoreFreeWriteSupport
MiStoreGetWriteSupport
MiStoreInPageComplete
MiStoreInsertEvictMap
MiStoreSetPageFileRunEvicted
MiStoreUpToBeEvictedCount
MiStoreUpdateBit
MiStoreWaitForWriteComplete
MiStoreWritePfn
MiSubsectionCompare
MiSwapHardFaultPage
MiSwapNumaStandbyPage
MiSwapStackPage
MiSwapStackPageNoDpc
MiSwapWslEntries
MiSwitchBaseAddress
MiSwitchKstackPages
MiSwitchToPfns
MiSwitchToTransition
MiSyncCommitSignals
MiSyncSystemPdes
MiSynchronizePageFree
MiSystemFault
MiSystemWsMetaPage
MiTerminateWsle
MiTrackerRequiresCacheFlush
MiTranslatePageForCopy
MiTrimAllSystemPagableMemory
MiTrimOrAgeWorkingSet
MiTrimSection
MiTrimSegmentCache
MiTrimSharedPage
MiTrimSharedPageFromViews
MiTrimUnusedPageFileRegionsApc
MiTrimUnusedPageFileRegionsWorker
MiTrimWorkingSet
MiTruncateLoaderBlock
MiTryLocateWsle
MiTryLockLeafAndContainingPagesAtDpc
MiTryLockLeafPage
MiTryLockProtoPoolPageAtDpc
MiTryLockVad
MiTryUnlinkNodeLargePage
MiUnlinkFreeOrZeroedPage
MiUnlinkNodeLargePage
MiUnlinkNodeLargePageHelper
MiUnlinkNumaStandbyPage
MiUnlinkPageFromBadList
MiUnlinkPageFromLockedList
MiUnlinkProcessFromSession
MiUnlinkSessionList
MiUnlinkSessionWorkingSet
MiUnlinkStandbyBatch
MiUnlinkWorkingSet
MiUnloadSystemImage
MiUnloadSystemImagePartial
MiUnlockAllMemoryLists
MiUnlockAndDereferenceVad
MiUnlockAndDereferenceVadEx
MiUnlockBootPageSections
MiUnlockCodePage
MiUnlockControlAreaFileObjectExclusive
MiUnlockControlAreaFileObjectShared
MiUnlockDriverCode
MiUnlockDriverMappings
MiUnlockDynamicMemoryExclusive
MiUnlockImageSection
MiUnlockMdlWritePages
MiUnlockNestedProtoPoolPage
MiUnlockNestedVad
MiUnlockPage
MiUnlockPageTableCharges
MiUnlockPagedAddress
MiUnlockProtoPoolPage
MiUnlockVa
MiUnlockVad
MiUnlockVadEx
MiUnlockVadRange
MiUnlockVadUnsafe
MiUnlockWsSwapExclusive
MiUnmapImageInSystemSpace
MiUnmapLargeDriver
MiUnmapLargePages
MiUnmapLargeUserPages
MiUnmapLockedPagesInUserSpace
MiUnmapPageInHyperSpaceWorker
MiUnmapSinglePage
MiUnmapVad
MiUnmapViewOfSection
MiUnsecureVirtualMemoryAgainstWrites
MiUpControlAreaRefs
MiUpdateAvailableEvents
MiUpdateCfgSystemWideBitmap
MiUpdateClaimDistribution
MiUpdateForkMaps
MiUpdateInitialPoolHighBit
MiUpdateLargePagePfns
MiUpdateLargePageSectionPfn
MiUpdateLastSubsectionSize
MiUpdatePageAttributeStamp
MiUpdatePageFileSectionList
MiUpdatePageTableUseCount
MiUpdatePagingFileMinimum
MiUpdatePerSessionProto
MiUpdatePfnBackingStore
MiUpdatePfnPriority
MiUpdatePfnPriorityByPte
MiUpdatePfnProtection
MiUpdatePrefetchPriority
MiUpdateReserveClusterInfo
MiUpdateSystemPdes
MiUpdateThunks
MiUpdateUserMappings
MiUpdateVadBits
MiUpdateVadHint
MiUpdateWorkingSetAgeDistribution
MiUpdateWsle
MiUpdateWsleHash
MiUseLargeDriverPage
MiUseLowIoPriorityForModifiedPages
MiVaIsPageFileHash
MiVaRegionSessionSpecialPool
MiVadCompareVpn
MiVadCompareVpnRange
MiVadDeleted
MiVadIsCfgBitmap
MiVadMapsLargeImage
MiVadPureReserve
MiValidFault
MiValidateImagePages
MiValidateImagePfn
MiValidateInPage
MiValidatePagefilePageHash
MiValidateReservedMapping
MiValidateSectionCreate
MiValidateSinglePageHash
MiValidateUserCallTarget
MiVerifyImageHeader
MiViewMayContainPage
MiVolunteerForTrimFirst
MiWaitForAsynchronousFlushes
MiWaitForCollidedFaultComplete
MiWaitForFlushInProgress
MiWaitForForkToComplete
MiWaitForFreePage
MiWaitForFreePageEx
MiWaitForInPageComplete
MiWaitForPageWriteCompletion
MiWaitForRotateToComplete
MiWaitForSystemCacheViewFlush
MiWaitForVadDeletion
MiWakeModifiedPageWriter
MiWalkVaRange
MiWorkingSetInfoCheckPageTable
MiWorkingSetVeryLarge
MiWriteComplete
MiWriteCompletePfn
MiWriteDecayPfnTimerLink
MiWriteDemandZeroPte
MiWriteLargePde
MiWritePageFileHash
MiWriteProtectSystemImages
MiWsSwapPageFileNumber
MiZeroAllPageFiles
MiZeroCfgSystemWideBitmap
MiZeroFault
MiZeroInParallel
MiZeroInParallelWorker
MiZeroLargePage
MiZeroPageFile
MiZeroPageFileFirstPage
MiZeroPageWrite
MiZeroPfn
MiZeroPhysicalPage
MiZeroSectionObjectPointer
MigrateOOBELanguageToInstallationLanguage
MmAccessFault
MmAcquireLoadLock
MmAddPhysicalMemory
MmAddPrivateDataToCrashDump
MmAddRangeToCrashDump
MmAddVerifierThunks
MmAdjustWorkingSetSize
MmAdjustWorkingSetSizeEx
MmAdvanceMdl
MmAllocateContiguousMemory
MmAllocateContiguousMemorySpecifyCache
MmAllocateContiguousMemorySpecifyCacheNode
MmAllocateContiguousNodeMemory
MmAllocateDumpHibernateResources
MmAllocateIndependentPages
MmAllocateIsrStack
MmAllocateMappingAddress
MmAllocateMdlForIoSpace
MmAllocateNodePagesForMdlEx
MmAllocateNonCachedMemory
MmAllocatePagesForMdl
MmAllocatePagesForMdlEx
MmAllocateSpecialPool
MmAreMdlPagesCached
MmAreMdlPagesLocked
MmAssignProcessToJob
MmAttachSession
MmBuildMdlForNonPagedPool
MmCallDllInitialize
MmCanFileBeTruncated
MmCanThreadFault
MmChangeSectionBackingFile
MmChannelPowerRequest
MmCheckCachedPageStates
MmCheckForSafeExecution
MmCheckImageMapping
MmCheckMapIoSpace
MmCheckMdlPages
MmCheckSystemImage
MmCleanProcessAddressSpace
MmCombineIdenticalPages
MmCommitSessionMappedView
MmCopyMemory
MmCopyToCachedPage
MmCopyVirtualMemory
MmCreateInitialImageSection
MmCreateKernelStack
MmCreateMdl
MmCreateMirror
MmCreatePeb
MmCreateProcessAddressSpace
MmCreateSection
MmCreateTeb
MmDbgCopyMemory
MmDbgMarkPfnModifiedWorker
MmDeleteKernelStack
MmDeleteProcessAddressSpace
MmDeleteProcessor
MmDeleteTeb
MmDetachSession
MmDeterminePoolType
MmDisableModifiedWriteOfSection
MmDoesFileHaveUserWritableReferences
MmDuplicateMemory
MmEmptyAllWorkingSets
MmEnableModifiedWriteOfSection
MmEnablePAT
MmEnableVerifierForDriver
MmEnforceWorkingSetLimit
MmEnumerateAddressSpaceAndReferenceImages
MmEnumerateBadPages
MmEnumerateSystemImages
MmExtendSection
MmFlushAllFilesystemPages
MmFlushAllPages
MmFlushImageSection
MmFlushSection
MmFlushVirtualMemory
MmForceSectionClosed
MmFreeAccessPfnBuffer
MmFreeBootRegistry
MmFreeContiguousMemory
MmFreeContiguousMemorySpecifyCache
MmFreeIndependentPages
MmFreeIsrStack
MmFreeLoaderBlock
MmFreeMappingAddress
MmFreeNonCachedMemory
MmFreePagesFromMdl
MmFreeSpecialPool
MmGetAvailablePagesBelowPriority
MmGetCacheAttribute
MmGetCfgBitMapInformation
MmGetChannelInformation
MmGetDefaultPagePriority
MmGetDirectoryFrameFromProcess
MmGetDumpRange
MmGetFileNameForAddress
MmGetFileNameForSection
MmGetFileObjectForSection
MmGetImageBase
MmGetIoSessionState
MmGetMaximumFileSectionSize
MmGetMinWsPagePriority
MmGetNextNode
MmGetNextSession
MmGetNodeChannelRanges
MmGetNumberOfFreeSystemPtes
MmGetPageBadStatus
MmGetPageFileInformation
MmGetPagedPoolCommitPointer
MmGetPhysicalAddress
MmGetPhysicalMemoryRanges
MmGetSectionInformation
MmGetSectionRange
MmGetSessionById
MmGetSessionGlobalVA
MmGetSessionId
MmGetSessionIdEx
MmGetSessionLocaleId
MmGetSessionMappedViewInformation
MmGetSessionObjectById
MmGetSessionSchedulingGroup
MmGetSessionSchedulingGroupByProcess
MmGetStandbyRepurposed
MmGetSystemPageFile
MmGetSystemRoutineAddress
MmGetVirtualForPhysical
MmGrowKernelStack
MmGrowKernelStackEx
MmHardFaultBytesRequired
MmIdentifyPhysicalMemory
MmImageSectionPagable
MmInSwapProcess
MmInSwapWorkingSet
MmInitNucleus
MmInitSystem
MmInitSystemDll
MmInitializeHandBuiltProcess
MmInitializeHandBuiltProcess2
MmInitializeMemoryLimits
MmInitializeProcessAddressSpace
MmInitializeProcessor
MmInvalidateDumpAddresses
MmIsAddressValid
MmIsDriverLoadedCurrentSession
MmIsDriverSuspectForVerifier
MmIsDriverVerifying
MmIsDriverVerifyingByAddress
MmIsFileMapped
MmIsFileObjectAPagingFile
MmIsIoSpaceActive
MmIsMemoryAvailable
MmIsNonPagedPoolNx
MmIsNonPagedSystemAddressValid
MmIsRecursiveIoFault
MmIsSessionAddress
MmIsSessionSpaceInvalid
MmIsSpecialPoolAddress
MmIsThisAnNtAsSystem
MmIsVerifierEnabled
MmIsWriteErrorFatal
MmIssueMemoryListCommand
MmLoadSystemImage
MmLocateUnloadedDriver
MmLockLoadedModuleListShared
MmLockPagableDataSection
MmLockPagableSectionByHandle
MmLockPreChargedPagedPool
MmLogQueryCombineStats
MmLogSystemShareablePfnInfo
MmLowPowerEpochCallback
MmMapApiSetView
MmMapIoSpace
MmMapLockedPages
MmMapLockedPagesSpecifyCache
MmMapLockedPagesWithReservedMapping
MmMapLockedRestartPages
MmMapMemoryDumpMdl
MmMapMemoryDumpMdlEx
MmMapTeb
MmMapUserAddressesToPage
MmMapViewInSessionSpace
MmMapViewInSessionSpaceEx
MmMapViewInSystemCache
MmMapViewInSystemSpace
MmMapViewInSystemSpaceEx
MmMapViewOfSection
MmMarkHiberPhase
MmMarkHiberRange
MmMarkImageForHiberPhase
MmMarkPhysicalMemoryAsBad
MmMarkPhysicalMemoryAsGood
MmMdlPageContentsState
MmMdlPagesAreZero
MmOutSwapWorkingSet
MmPageEntireDriver
MmPerfLogSessionRundown
MmPerformMemoryListCommand
MmPrefetchForCacheManager
MmPrefetchPages
MmPrefetchVirtualAddresses
MmPrefetchVirtualMemory
MmProbeAndLockPages
MmProbeAndLockProcessPages
MmProbeAndLockSelectedPages
MmProcessWorkingSetControl
MmPropagateDirtyBitsToPfn
MmProtectMdlSystemAddress
MmPurgeSection
MmQueryMemoryListInformation
MmQueryProcessWorkingSetSwapPages
MmQuerySessionWorkingSetInformation
MmQuerySpecialPoolBlockSize
MmQuerySpecialPoolBlockType
MmQuerySystemMemoryInformation
MmQuerySystemSize
MmQuerySystemWorkingSetInformation
MmQueryVirtualMemory
MmQueryWorkingSetInformation
MmQuitNextSession
MmRaisePoolQuota
MmReadProcessPageTables
MmReleaseDumpHibernateResources
MmReleaseLoadLock
MmRelocatePfnList
MmRemoveExecuteGrants
MmRemovePhysicalMemory
MmRemoveSystemCacheFromDump
MmReserveViewInSystemCache
MmResetDriverPaging
MmResetVirtualMemory
MmResourcesAvailable
MmReturnPoolQuota
MmRotatePhysicalView
MmScrubMemory
MmSectionToSectionObjectPointers
MmSecureVirtualMemory
MmSecureVirtualMemoryAgainstWrites
MmSessionSetUnloadAddress
MmSetAccessLogging
MmSetAddressRangeModified
MmSetBankedSection
MmSetChannelHeatOrder
MmSetMemoryPriorityProcess
MmSetMinimumAgeRate
MmSetPageProtection
MmSetPfnListPriorities
MmSetSessionLocaleId
MmSetSessionObjectIoEvent
MmSetTrimWhileAgingState
MmShrinkInitialPool
MmShutdownSystem
MmSizeOfMdl
MmSnapTriageDumpInformation
MmStoreAsyncWriteComplete
MmStoreRegister
MmTriageActiveInLastCrash
MmTrimAllSystemPagableMemory
MmTrimFilePagesFromWorkingSets
MmTrimSection
MmTryIdentifyPage
MmUnloadSystemImage
MmUnlockLoadedModuleListShared
MmUnlockPagableImageSection
MmUnlockPages
MmUnlockPreChargedPagedPool
MmUnmapIoSpace
MmUnmapLockedPages
MmUnmapLockedRestartPages
MmUnmapReservedMapping
MmUnmapViewInSessionSpace
MmUnmapViewInSystemCache
MmUnmapViewInSystemSpace
MmUnmapViewOfSection
MmUnsecureVirtualMemory
MmUpdateHiberMappings
MmUpdateImports
MmUpdateImportsFinished
MmUpdateMdlTracker
MmUpdateOldWorkingSetPages
MmValidateUserCallTarget
MmVerifierTrimMemory
MmVerifyCallbackFunction
MmWaitForCacheManagerPrefetch
MmWaitForSessionObjectIoEvent
MmWorkingSetManager
MmWriteTriageInformation
MmWriteUnloadedDriverInformation
MmZeroPageFileAtShutdown
MmZeroPageThread
MmZeroPageWrite
MxComputeFreeNodeDescriptorRequirements
MxComputePfnPagesNeeded
MxConvertKernelHal
MxCopyPage
MxCreateFreePfns
MxCreatePfn
MxCreatePfns
MxDescriptorSort
MxFillPhysicalPage
MxGetNextLargePage
MxGetPhase0Mapping
MxInitializeFreeNodeDescriptors
MxMapPfnRange
MxMapVa
MxMarkActiveDriverBits
MxMovePageTables
MxPageAlwaysHot
MxReleaseFreeDescriptor
MxRelocatePageTables
MxSwapPages
MxZeroBootMappings
MxZeroPageTablePfns
NormBuffer__Append
NormBuffer__AppendAndSortDecomposed
NormBuffer__AppendEx
NormBuffer__GetCurrentOutputChar
NormBuffer__GetLastChar
NormBuffer__Insert
NormBuffer__InsertAtBlockedLocation
NormBuffer__IsBlocked
NormBuffer__LastStartBase
NormBuffer__LastStartBasePair
NormBuffer__RecheckStartCombinations
NormBuffer__ReplaceLastStartBase
NormBuffer__ReplaceLastStartBasePair
NormBuffer__RewindOutputCharacter
NormBuffer__SortBeforeSameClass
NormalizationList__Lookup
Normalization__AppendDecomposedChar
Normalization__CanCombinableCharactersCombine
Normalization__CanCombineWithStartBase
Normalization__CanCombineWithStartFirstPair
Normalization__GetCharacterInfo
Normalization__GetFirstDecomposedCharPlane0
Normalization__GetLastChar
Normalization__GetSecondAndThirdDecomposedCharPlane0
Normalization__GetSecondDecomposedCharPlane0
Normalization__GetThirdAndLastDecomposedCharPlane0
Normalization__GuessCharCountBySize
Normalization__IsNormalized
Normalization__LoadClassMapExceptions
Normalization__LoadTables
Normalization__Normalize
Normalization__NormalizeCharacter
Normalization__PageLookup
Normalization__TableLookup
NtAcceptConnectPort
NtAccessCheck
NtAccessCheckAndAuditAlarm
NtAccessCheckByType
NtAccessCheckByTypeAndAuditAlarm
NtAccessCheckByTypeResultList
NtAccessCheckByTypeResultListAndAuditAlarm
NtAccessCheckByTypeResultListAndAuditAlarmByHandle
NtAddAtom
NtAddAtomEx
NtAddBootEntry
NtAddDriverEntry
NtAdjustGroupsToken
NtAdjustPrivilegesToken
NtAdjustTokenClaimsAndDeviceGroups
NtAlertResumeThread
NtAlertThread
NtAlertThreadByThreadId
NtAllocateLocallyUniqueId
NtAllocateReserveObject
NtAllocateUserPhysicalPages
NtAllocateUuids
NtAllocateVirtualMemory
NtAlpcAcceptConnectPort
NtAlpcCancelMessage
NtAlpcConnectPort
NtAlpcConnectPortEx
NtAlpcCreatePort
NtAlpcCreatePortSection
NtAlpcCreateResourceReserve
NtAlpcCreateSectionView
NtAlpcCreateSecurityContext
NtAlpcDeletePortSection
NtAlpcDeleteResourceReserve
NtAlpcDeleteSectionView
NtAlpcDeleteSecurityContext
NtAlpcDisconnectPort
NtAlpcImpersonateClientOfPort
NtAlpcOpenSenderProcess
NtAlpcOpenSenderThread
NtAlpcQueryInformation
NtAlpcQueryInformationMessage
NtAlpcRevokeSecurityContext
NtAlpcSendWaitReceivePort
NtAlpcSetInformation
NtApphelpCacheControl
NtAreMappedFilesTheSame
NtAssignProcessToJobObject
NtAssociateWaitCompletionPacket
NtCallbackReturn
NtCancelIoFile
NtCancelIoFileEx
NtCancelSynchronousIoFile
NtCancelTimer
NtCancelTimer2
NtCancelWaitCompletionPacket
NtClearEvent
NtClose
NtCloseObjectAuditAlarm
NtCompactKeys
NtCompareTokens
NtCompleteConnectPort
NtCompressKey
NtConnectPort
NtContinue
NtCreateDebugObject
NtCreateDirectoryObject
NtCreateDirectoryObjectEx
NtCreateEvent
NtCreateEventPair
NtCreateFile
NtCreateIRTimer
NtCreateIoCompletion
NtCreateJobObject
NtCreateJobSet
NtCreateKey
NtCreateKeyTransacted
NtCreateKeyTransacted_Stub
NtCreateKeyedEvent
NtCreateLowBoxToken
NtCreateMailslotFile
NtCreateMutant
NtCreateNamedPipeFile
NtCreatePagingFile
NtCreatePort
NtCreatePrivateNamespace
NtCreateProcess
NtCreateProcessEx
NtCreateProfile
NtCreateProfileEx
NtCreateSection
NtCreateSemaphore
NtCreateSymbolicLinkObject
NtCreateThread
NtCreateThreadEx
NtCreateTimer
NtCreateTimer2
NtCreateToken
NtCreateTokenEx
NtCreateUserProcess
NtCreateWaitCompletionPacket
NtCreateWaitablePort
NtCreateWnfStateName
NtCreateWorkerFactory
NtDebugActiveProcess
NtDebugContinue
NtDelayExecution
NtDeleteAtom
NtDeleteBootEntry
NtDeleteDriverEntry
NtDeleteFile
NtDeleteKey
NtDeleteObjectAuditAlarm
NtDeletePrivateNamespace
NtDeleteValueKey
NtDeleteWnfStateData
NtDeleteWnfStateName
NtDeviceIoControlFile
NtDisableLastKnownGood
NtDisplayString
NtDrawText
NtDuplicateObject
NtDuplicateToken
NtEnableLastKnownGood
NtEnumerateBootEntries
NtEnumerateDriverEntries
NtEnumerateKey
NtEnumerateSystemEnvironmentValuesEx
NtEnumerateValueKey
NtExtendSection
NtFilterBootOption
NtFilterToken
NtFilterTokenEx
NtFindAtom
NtFlushBuffersFile
NtFlushBuffersFileEx
NtFlushInstallUILanguage
NtFlushInstructionCache
NtFlushKey
NtFlushProcessWriteBuffers
NtFlushVirtualMemory
NtFlushWriteBuffer
NtFreeUserPhysicalPages
NtFreeVirtualMemory
NtFreezeRegistry
NtFsControlFile
NtGetCachedSigningLevel
NtGetCompleteWnfStateSubscription
NtGetContextThread
NtGetCurrentProcessorNumber
NtGetDevicePowerState
NtGetEnvironmentVariableEx
NtGetMUIRegistryInfo
NtGetNextProcess
NtGetNextThread
NtGetNlsSectionPtr
NtGetWriteWatch
NtImpersonateAnonymousToken
NtImpersonateClientOfPort
NtImpersonateThread
NtInitializeNlsFiles
NtInitializeRegistry
NtInitiatePowerAction
NtIsProcessInJob
NtIsSystemResumeAutomatic
NtIsUILanguageComitted
NtListenPort
NtLoadDriver
NtLoadKey
NtLoadKey2
NtLoadKeyEx
NtLockFile
NtLockProductActivationKeys
NtLockRegistryKey
NtLockVirtualMemory
NtMakePermanentObject
NtMakeTemporaryObject
NtMapCMFModule
NtMapUserPhysicalPages
NtMapUserPhysicalPagesScatter
NtMapViewOfSection
NtModifyBootEntry
NtModifyDriverEntry
NtNotifyChangeDirectoryFile
NtNotifyChangeKey
NtNotifyChangeMultipleKeys
NtNotifyChangeSession
NtOpenDirectoryObject
NtOpenEvent
NtOpenEventPair
NtOpenFile
NtOpenIoCompletion
NtOpenJobObject
NtOpenKey
NtOpenKeyEx
NtOpenKeyTransacted
NtOpenKeyTransactedEx
NtOpenKeyedEvent
NtOpenMutant
NtOpenObjectAuditAlarm
NtOpenPrivateNamespace
NtOpenProcess
NtOpenProcessToken
NtOpenProcessTokenEx
NtOpenSection
NtOpenSemaphore
NtOpenSession
NtOpenSymbolicLinkObject
NtOpenThread
NtOpenThreadToken
NtOpenThreadTokenEx
NtOpenTimer
NtPlugPlayControl
NtPowerInformation
NtPrivilegeCheck
NtPrivilegeObjectAuditAlarm
NtPrivilegedServiceAuditAlarm
NtProtectVirtualMemory
NtPulseEvent
NtQueryAttributesFile
NtQueryBootEntryOrder
NtQueryBootOptions
NtQueryDebugFilterState
NtQueryDefaultLocale
NtQueryDefaultUILanguage
NtQueryDirectoryFile
NtQueryDirectoryObject
NtQueryDriverEntryOrder
NtQueryEaFile
NtQueryEnvironmentVariableInfoEx
NtQueryEvent
NtQueryFullAttributesFile
NtQueryInformationAtom
NtQueryInformationFile
NtQueryInformationJobObject
NtQueryInformationPort
NtQueryInformationProcess
NtQueryInformationThread
NtQueryInformationToken
NtQueryInformationWorkerFactory
NtQueryInstallUILanguage
NtQueryIntervalProfile
NtQueryIoCompletion
NtQueryKey
NtQueryLicenseValue
NtQueryMultipleValueKey
NtQueryMutant
NtQueryObject
NtQueryOpenSubKeys
NtQueryOpenSubKeysEx
NtQueryPerformanceCounter
NtQueryPortInformationProcess
NtQueryQuotaInformationFile
NtQuerySection
NtQuerySecurityAttributesToken
NtQuerySecurityObject
NtQuerySemaphore
NtQuerySymbolicLinkObject
NtQuerySystemEnvironmentValue
NtQuerySystemEnvironmentValueEx
NtQuerySystemInformation
NtQuerySystemInformationEx
NtQuerySystemTime
NtQueryTimer
NtQueryTimerResolution
NtQueryValueKey
NtQueryVirtualMemory
NtQueryVolumeInformationFile
NtQueryWnfStateData
NtQueryWnfStateNameInformation
NtQueueApcThread
NtQueueApcThreadEx
NtRaiseException
NtRaiseHardError
NtReadFile
NtReadFileScatter
NtReadRequestData
NtReadVirtualMemory
NtRegisterThreadTerminatePort
NtReleaseKeyedEvent
NtReleaseMutant
NtReleaseSemaphore
NtReleaseWorkerFactoryWorker
NtRemoveIoCompletion
NtRemoveIoCompletionEx
NtRemoveProcessDebug
NtRenameKey
NtReplaceKey
NtReplacePartitionUnit
NtReplyPort
NtReplyWaitReceivePort
NtReplyWaitReceivePortEx
NtReplyWaitReplyPort
NtRequestPort
NtRequestWaitReplyPort
NtResetEvent
NtResetWriteWatch
NtRestoreKey
NtResumeProcess
NtResumeThread
NtSaveKey
NtSaveKeyEx
NtSaveMergedKeys
NtSecureConnectPort
NtSerializeBoot
NtSetBootEntryOrder
NtSetBootOptions
NtSetCachedSigningLevel
NtSetContextThread
NtSetDebugFilterState
NtSetDefaultHardErrorPort
NtSetDefaultLocale
NtSetDefaultUILanguage
NtSetDriverEntryOrder
NtSetEaFile
NtSetEvent
NtSetEventBoostPriority
NtSetHighEventPair
NtSetHighWaitLowEventPair
NtSetIRTimer
NtSetInformationDebugObject
NtSetInformationFile
NtSetInformationJobObject
NtSetInformationKey
NtSetInformationObject
NtSetInformationProcess
NtSetInformationThread
NtSetInformationToken
NtSetInformationVirtualMemory
NtSetInformationWorkerFactory
NtSetIntervalProfile
NtSetIoCompletion
NtSetIoCompletionEx
NtSetLdtEntries
NtSetLowEventPair
NtSetLowWaitHighEventPair
NtSetQuotaInformationFile
NtSetSecurityObject
NtSetSystemEnvironmentValue
NtSetSystemEnvironmentValueEx
NtSetSystemInformation
NtSetSystemPowerState
NtSetSystemTime
NtSetThreadExecutionState
NtSetTimer
NtSetTimer2
NtSetTimerEx
NtSetTimerResolution
NtSetUuidSeed
NtSetValueKey
NtSetVolumeInformationFile
NtSetWnfProcessNotificationEvent
NtShutdownSystem
NtShutdownWorkerFactory
NtSignalAndWaitForSingleObject
NtStartProfile
NtStopProfile
NtSubscribeWnfStateChange
NtSuspendProcess
NtSuspendThread
NtSystemDebugControl
NtTerminateJobObject
NtTerminateProcess
NtTerminateThread
NtTestAlert
NtThawRegistry
NtTraceControl
NtTraceEvent
NtTranslateFilePath
NtUmsThreadYield
NtUnloadDriver
NtUnloadKey
NtUnloadKey2
NtUnloadKeyEx
NtUnlockFile
NtUnlockVirtualMemory
NtUnmapViewOfSection
NtUnmapViewOfSectionEx
NtUnsubscribeWnfStateChange
NtUpdateWnfStateData
NtVdmControl
NtWaitForAlertByThreadId
NtWaitForDebugEvent
NtWaitForKeyedEvent
NtWaitForMultipleObjects
NtWaitForMultipleObjects32
NtWaitForSingleObject
NtWaitForWorkViaWorkerFactory
NtWaitHighEventPair
NtWaitLowEventPair
NtWorkerFactoryWorkerReady
NtWriteFile
NtWriteFileGather
NtWriteRequestData
NtWriteVirtualMemory
NtYieldExecution
ObAdjustSecurityQuota
ObAssignObjectSecurityDescriptor
ObAssignSecurity
ObAuditInheritedHandleProcedure
ObCaptureObjectStateForDuplication
ObCheckActiveHandles
ObCheckCreateObjectAccess
ObCheckObjectAccess
ObCheckRefTraceProcess
ObClearProcessHandleTable
ObCloseHandle
ObCloseHandleTableEntry
ObCompleteObjectDuplication
ObCreateObject
ObCreateObjectType
ObCreateObjectTypeEx
ObDeassignSecurity
ObDeleteCapturedInsertInfo
ObDereferenceDeviceMap
ObDereferenceObject
ObDereferenceObjectDeferDelete
ObDereferenceObjectDeferDeleteWithTag
ObDereferenceObjectEx
ObDereferenceProcessHandleTable
ObDereferenceSecurityDescriptor
ObDisableEtwReferenceTrace
ObDrainDeferredObjectDeletion
ObDuplicateObject
ObEnableEtwReferenceTrace
ObEnumerateObjectsByType
ObFastDereferenceObject
ObFastReferenceObject
ObFastReferenceObjectLocked
ObFastReplaceObject
ObFindHandleForObject
ObFreeObjectCreateInfoBuffer
ObGetAssociatedWaitObject
ObGetFilterVersion
ObGetHandleInformation
ObGetHandleInformationEx
ObGetObjectInformation
ObGetObjectSecurity
ObGetObjectType
ObGetProcessHandleCount
ObInheritObjectHandle
ObInitProcess
ObInitSystem
ObInitializeFastReference
ObInitializeProcessor
ObInsertObject
ObInsertObjectEx
ObIsDosDeviceLocallyMapped
ObIsKernelHandle
ObKillProcess
ObLogSecurityDescriptor
ObMakeTemporaryObject
ObNormalizeHandleValue
ObOpenObjectByName
ObOpenObjectByPointer
ObOpenObjectByPointerWithTag
ObQueryDeviceMapInformation
ObQueryNameInfo
ObQueryNameString
ObQueryNameStringMode
ObQueryObjectAuditingByHandle
ObQueryRefTraceInformation
ObQuerySecurityDescriptorInfo
ObQuerySecurityObject
ObQueryTypeInfo
ObQueryTypeName
ObReferenceObjectByHandle
ObReferenceObjectByHandleWithTag
ObReferenceObjectByName
ObReferenceObjectByNameEx
ObReferenceObjectByPointer
ObReferenceObjectByPointerWithTag
ObReferenceObjectExWithTag
ObReferenceObjectSafe
ObReferenceObjectSafeWithTag
ObReferenceProcessHandleTable
ObReferenceSecurityDescriptor
ObRegisterCallbacks
ObReleaseObjectSecurity
ObSetDeviceMap
ObSetDirectoryDeviceMap
ObSetHandleAttributes
ObSetRefTraceInformation
ObSetSecurityDescriptorInfo
ObSetSecurityObjectByPointer
ObShutdownSystem
ObUnRegisterCallbacks
ObWaitForMultipleObjects
ObWaitForSingleObject
ObfDereferenceDeviceMap
ObfDereferenceObject
ObfDereferenceObjectWithTag
ObfReferenceObject
ObfReferenceObjectWithTag
ObpAdjustAccessMask
ObpAdjustCreatorAccessState
ObpAllocateAndQuerySecurityDescriptorInfo
ObpAllocateObject
ObpAssignSecurity
ObpAuditObjectAccess
ObpCallPostOperationCallbacks
ObpCallPreOperationCallbacks
ObpCaptureBoundaryDescriptor
ObpCaptureHandleInformation
ObpCaptureHandleInformationEx
ObpCaptureObjectCreateInformation
ObpCaptureObjectName
ObpChargeQuotaForObject
ObpCheckDuplicateEntries
ObpCheckObjectReference
ObpCheckTraverseAccess
ObpCloseDirectoryObject
ObpCloseHandle
ObpCompareEntryLevel1
ObpCompareEntryLevel2
ObpCreateDirectoryObject
ObpCreateDosDevicesDirectory
ObpCreateHandle
ObpCreateSymbolicLinkName
ObpCreateTypeArray
ObpDecrementHandleCount
ObpDeferObjectDeletion
ObpDeferPushRefDerefInfo
ObpDeleteDirectoryEntry
ObpDeleteDirectoryObject
ObpDeleteNameCheck
ObpDeleteSymbolicLink
ObpDeleteSymbolicLinkName
ObpDeregisterObject
ObpDestroyStackAndObjectTables
ObpDestroyTypeArray
ObpEnumFindHandleProcedure
ObpFreeObject
ObpFreeObjectNameBuffer
ObpFreeWorkItemBlock
ObpGetDosDevicesProtection
ObpGetObjectRefInfo
ObpGetObjectSecurity
ObpGetShadowDirectory
ObpGetTraceIndex
ObpGrantAccess
ObpHashBoundaryFunction
ObpIncrementHandleCount
ObpIncrementHandleCountEx
ObpInitInfoBlockOffsets
ObpInitStackAndObjectTables
ObpInitStackTrace
ObpInitializeNamespaceTable
ObpInsertCallbackByAltitude
ObpInsertDirectoryEntry
ObpInsertHandleCount
ObpInsertOrLocateNamedObject
ObpIsObjectPoolTagTraced
ObpIsUnsecureName
ObpLockHandleDataBaseEntry
ObpLookupDirectoryEntry
ObpLookupDirectoryUsingHash
ObpLookupNamespaceEntry
ObpLookupObjectName
ObpParseSymbolicLink
ObpPostInterceptHandleCreate
ObpPostInterceptHandleDuplicate
ObpPreInterceptHandleDuplicate
ObpProcessRemoveObjectDpcWorker
ObpProcessRemoveObjectQueue
ObpPushRefDerefInfo
ObpPushStackInfo
ObpPushStackInfoQueue
ObpReferenceDeviceMap
ObpReferenceProcessObjectByHandle
ObpReferenceSecurityDescriptor
ObpRegisterObject
ObpRegisterPrivateNamespace
ObpReleaseHandleInfo
ObpRemoveNamespaceFromTable
ObpRemoveObjectRoutine
ObpSetCurrentProcessDeviceMap
ObpSetObjectAuditInfo
ObpShutdownCloseHandleProcedure
ObpStartRuntimeStackTrace
ObpStopRuntimeStackTrace
ObpUnlockHandleDatabaseEntry
ObpVerifyAccessToBoundaryEntry
ObpVerifyCreatorAccessCheck
PcwAddInstance
PcwCloseInstance
PcwCreateInstance
PcwRegister
PcwUnregister
PcwpAddFileSystemDiskIOCounterSet
PcwpAddProcessorCounterSet
PcwpAddSynchCounterSet
PdcPoBlockSessionSwitch
PdcPoControlInput
PdcPoControlMonitor
PdcPoCsEnterExitReason
PdcPoCurrentPdcPhase
PdcPoLowPower
PdcPoPerfOverride
PdcPoPpmClearOverride
PdcPoRecordButton
PdcPoReportButton
PdcPoReportLidState
PdcPoResiliencyClient
PdcPoScreenOffEnabled
PdcPoSetPowerAction
PdcPoSetPowerSettingValue
PdcPoSpmChangePowerSettings
PdcPoSpmRegisterScenarios
PdcPoVerifyActionPolicy
PdcPoVerifyPowerState
PdcPoVerifyProcessIntegrity
PerfDiagInitialize
PerfDiagpBootSystemProxyCallback
PerfDiagpBootUserProxyCallback
PerfDiagpInitializeLoggerInfo
PerfDiagpIsTracingAllowed
PerfDiagpProxyWorker
PerfDiagpRequestState
PerfDiagpRestartCKCL
PerfDiagpSaveActiveDCLLogFileName
PerfDiagpSecondaryLogonProxyCallback
PerfDiagpShutdownProxyCallback
PerfDiagpUpdateCKCLEnableFlags
PerfInfoLogInterrupt
PerfInfoLogIpi
PerfInfoLogSysCallEntry
PerfInfoLogSysCallExit
PerfInfoLogUnexpectedInterrupt
PerfInfoLogVirtualAlloc
PerfInfoLogVirtualFree
PerfLogExecutiveResourceAcquire
PerfLogExecutiveResourceInitialize
PerfLogExecutiveResourceRelease
PerfLogExecutiveResourceSetOwnerPointer
PerfLogExecutiveResourceWait
PerfLogImageLoad
PerfLogImageUnload
PerfLogSpinLockAcquire
PerfLogSpinLockRelease
PfBlInitialize
PfCalculateProcessHash
PfCheckDeprioritizeFile
PfCheckDeprioritizeImage
PfFbBufferListAllocate
PfFbBufferListAllocateTemporary
PfFbBufferListCleanup
PfFbBufferListFlushStandby
PfFbBufferListInitialize
PfFbBufferListInsertInFree
PfFbBufferListShutdown
PfFbBufferListUpdateMax
PfFbLogEntryComplete
PfFbLogEntryReserve
PfFileInfoNotify
PfGenerateTrace
PfGetCompletedTrace
PfHardFaultLog
PfHardFaultRecord
PfInitializeSuperfetch
PfIoPowerEventNotify
PfLogDeleteHelper
PfLogEvent
PfLogFileDataAccess
PfLogForegroundProcess
PfPowerActionNotify
PfPrefetchRequestPrepareForVerify
PfPrefetchRequestVerify
PfPrefetchRequestVerifyPath
PfPrefetchRequestVerifyRanges
PfProcessCreateNotification
PfQuerySuperfetchInformation
PfRequestRangeCheck
PfSetSuperfetchInformation
PfSnActivateTrace
PfSnAllocateEnablePrefetcherTimer
PfSnAppLaunchScenarioControl
PfSnBeginAppLaunch
PfSnBeginBootPhase
PfSnBeginScenario
PfSnBeginTrace
PfSnBuildDumpFromTrace
PfSnCancelTraceTimer
PfSnCaptureParamBlockString
PfSnCheckActionsNeeded
PfSnCheckLoggingForThread
PfSnCheckModernApp
PfSnCheckScenario
PfSnCleanupPrefetchHeader
PfSnCleanupPrefetchSectionInfo
PfSnCleanupTrace
PfSnDeactivateTrace
PfSnDetermineEnablePrefetcher
PfSnEnablePrefetcherTimerRoutine
PfSnEndProcessTrace
PfSnEndTrace
PfSnEndTraceWorkerThreadRoutine
PfSnFindImageFileName
PfSnFindPrefetchVolumeInfoInList
PfSnFindString
PfSnGetCompletedTrace
PfSnGetPrefetchInstructions
PfSnGetSectionObject
PfSnGetUnsafeProcessParameters
PfSnHashUnsafeUnicodeString
PfSnInitializePrefetcher
PfSnIsHostingApplication
PfSnIsSectionPrefetchedAfterPhase
PfSnIsVolumeMounted
PfSnLogEndTrace
PfSnLogOpenVolumesForPrefetch
PfSnLogPageFault
PfSnLogPageFaultCommon
PfSnLogPrefetchMetadata
PfSnLogPrefetchSectionsStop
PfSnLogScenarioDecision
PfSnOpenVolumesForPrefetch
PfSnOperationProcess
PfSnParametersRead
PfSnParametersSetDefaults
PfSnParametersVerify
PfSnParsePrefetchParam
PfSnPreallocatePrefetchHeader
PfSnPrefetchCacheCtxInitialize
PfSnPrefetchCacheCtxStart
PfSnPrefetchCacheEntryGet
PfSnPrefetchCacheEntryUpdate
PfSnPrefetchFileMetadata
PfSnPrefetchMetadata
PfSnPrefetchScenario
PfSnPrefetchSections
PfSnQueryPrefetcherInformation
PfSnQueryVolumeInfo
PfSnQueueEnablePrefetcherTimer
PfSnReferenceProcessTrace
PfSnRemoveProcessTrace
PfSnScanCommandLine
PfSnSetPrefetcherInformation
PfSnStartTraceTimer
PfSnTraceBufferAllocate
PfSnTraceGetLogEntry
PfSnTraceTimerRoutine
PfSnTracingStateDpcRoutine
PfSnTracingStateExWorkerRoutine
PfSnUpdatePrefetcherFlags
PfTAccessTracingCleanup
PfTAccessTracingInitialize
PfTAccessTracingStart
PfTAcquireLogEntry
PfTAllocateBuffers
PfTCleanup
PfTCleanupBuffers
PfTCreateTraceDump
PfTFreeBufferList
PfTFreeTraceDump
PfTFullEventListAdd
PfTGenerateTrace
PfTGetFreeBuffer
PfTInitialize
PfTLbInitialize
PfTLoggingWorker
PfTReplaceCurrentBuffer
PfTSectInfoDisableDpc
PfTSectInfoDisableSchedule
PfTSectInfoDisableWorkItem
PfTSetTraceWorkerPriority
PfTSetTracingPriority
PfTStart
PfTTraceListAdd
PfTTraceListFree
PfTTraceListTrim
PfVerifyScenarioBuffer
PfVerifyScenarioId
PfVerifyTraceBuffer
PfVolumeSupportedForPrefetch
PfpChannelPowerInfo
PfpChannelPowerRequest
PfpCopyEvent
PfpCopyUserPfnPrioRequest
PfpCreateEvent
PfpDeprioritizeOldPagesInWs
PfpEventHandleFullBuffer
PfpEventHandleOutOfBuffers
PfpFileBuildReadList
PfpFileBuildReadSupport
PfpFileCheckAttributesForPrefetch
PfpFileSetupObjectAttributes
PfpFlushBuffers
PfpFlushEventBuffers
PfpGetPageListCount
PfpGetParameter
PfpLogApplicationEvent
PfpLogEventRequest
PfpLogPageAccess
PfpLogScenarioEvent
PfpMemoryListQuery
PfpMemoryRangesQuery
PfpOpenHandleClose
PfpOpenHandleCreate
PfpOpenHandleInitialize
PfpParametersInitialize
PfpParametersPropagate
PfpParametersRead
PfpParametersWatcher
PfpPfnPrioRequest
PfpPowerActionDpcRoutine
PfpPowerActionStartScenarioTracing
PfpPrefetchDirectoryStream
PfpPrefetchEntireDirectory
PfpPrefetchFiles
PfpPrefetchFilesTrickle
PfpPrefetchPrivatePages
PfpPrefetchRequest
PfpPrefetchRequestPatchOffsets
PfpPrefetchRequestPerform
PfpPrefetchSharedCleanup
PfpPrefetchSharedConflictNotify
PfpPrefetchSharedInitialize
PfpPrefetchSharedStart
PfpPrefetchVolumesCleanup
PfpPrivSourceAdd
PfpPrivSourceEnum
PfpProcessScenarioPhase
PfpQueryFileExtentsRequest
PfpQueryGpuUtilization
PfpQueryScenarioInformation
PfpReadSupportCleanup
PfpReadSupportInitialize
PfpRepurposeNameLoggingTrace
PfpReturnAccessBuffer
PfpRpCHashAddEntries
PfpRpCHashDeleteEntries
PfpRpCHashEmpty
PfpRpCHashGrow
PfpRpControlRequest
PfpRpControlRequestCopy
PfpRpControlRequestPerform
PfpRpControlRequestReset
PfpRpControlRequestUpdate
PfpRpControlRequestVerify
PfpRpFileKeyUpdate
PfpRpInitialize
PfpRpRehashIfNeeded
PfpRpShutdown
PfpRpStart
PfpScenCtxInitialize
PfpScenCtxPrefetchAbortSet
PfpScenCtxPrefetchStateSet
PfpScenCtxPrefetchWait
PfpScenCtxQueryScenarioInformation
PfpScenCtxScenarioSet
PfpScenCtxServiceThreadSet
PfpScenCtxStart
PfpSectInfoHandleFullBuffer
PfpSectInfoHandleOutOfBuffers
PfpServiceMainThreadBoost
PfpServiceMainThreadBoostPrep
PfpServiceMainThreadUnboost
PfpSetBaseTime
PfpSetChannelOrdering
PfpSetParameter
PfpSourceBuildVaArray
PfpSourceGetPrefetchSupport
PfpStartLoggingHardFaultEvents
PfpUpdateRepurposedByPrefetch
PfpVirtualQuery
PfpVolumeOpenAndVerify
PfpVolumePrefetchMetadata
PfxFindPrefix
PfxInitialize
PfxInsertPrefix
PfxRemovePrefix
Phase1Initialization
Phase1InitializationDiscard
PiAllocateDeviceObjectList
PiAuAllocateAndInitializeSid
PiAuCheckClientInteractive
PiAuCheckTokenMembership
PiAuCreateLocalSystemSecurityObject
PiAuCreateSecurityObjects
PiAuCreateStandardSecurityObject
PiAuCreateUserSids
PiAuDoesClientHaveAccess
PiAuDoesClientHavePrivilege
PiAuFreeUserSids
PiAuVerifyAccessToObject
PiBuildDeviceNodeInstancePath
PiCMCaptureCreateDeviceInputData
PiCMCaptureDeviceListInputData
PiCMCaptureEnumerateInputData
PiCMCaptureInterfaceAliasInputData
PiCMCaptureInterfaceListInputData
PiCMCaptureObjectInputData
PiCMCaptureProblemInputData
PiCMCapturePropertyInputData
PiCMCaptureRegisterInterfaceInputData
PiCMCaptureRegistryInputData
PiCMCaptureRegistryPropertyInputData
PiCMConvertDeviceKeyType
PiCMConvertDeviceListFilters
PiCMConvertRegistryProperty
PiCMCreateDevice
PiCMCreateObject
PiCMDeleteClassKey
PiCMDeleteDevice
PiCMDeleteDeviceInterfaceKey
PiCMDeleteDeviceKey
PiCMDeleteObject
PiCMDeviceAction
PiCMDispatch
PiCMDuplicateRegistryHandle
PiCMEnumerateSubKeys
PiCMFastIoDeviceDispatch
PiCMGenerateDeviceInstance
PiCMGetDeviceDepth
PiCMGetDeviceIdList
PiCMGetDeviceInterfaceAlias
PiCMGetDeviceInterfaceList
PiCMGetDeviceStatus
PiCMGetObjectList
PiCMGetObjectProperty
PiCMGetObjectPropertyKeys
PiCMGetRegistryProperty
PiCMGetRelatedDeviceInstance
PiCMHandleIoctl
PiCMMandatoryFilterCallback
PiCMOpenClassKey
PiCMOpenDeviceInterfaceKey
PiCMOpenDeviceKey
PiCMOpenObjectKey
PiCMQueryRemove
PiCMRegisterDeviceInterface
PiCMReleaseObjectInputData
PiCMReleasePropertyInputData
PiCMReleaseRegistryInputData
PiCMReleaseRegistryPropertyInputData
PiCMReturnBasicResultData
PiCMReturnBufferResultData
PiCMReturnDepthResultData
PiCMReturnHandleResultData
PiCMReturnStatusResultData
PiCMSetDeviceProblem
PiCMSetObjectProperty
PiCMSetProblem
PiCMSetRegistryProperty
PiCMUnregisterDeviceInterface
PiCMValidateDeviceInstance
PiClearDeviceObjectList
PiCollapseEnumRequests
PiCollapseRebalanceRequests
PiCompareDDBCacheEntries
PiConfigureDevice
PiControlCopyUserModeCallersBuffer
PiControlGetDeviceDepth
PiControlGetDeviceInterfaceEnabled
PiControlGetDevicePowerData
PiControlGetDeviceStack
PiControlGetPropertyData
PiControlGetRelatedDevice
PiControlGetSetDeviceStatus
PiControlGetUserFlagsFromDeviceNode
PiControlMakeUserModeCallersCopy
PiControlQueryAndRemoveDevice
PiControlQueryConflictList
PiControlQueryDeviceRelations
PiControlStartDevice
PiCreateDeviceInstanceKey
PiCreateDriverSwDeviceCallback
PiCreateDriverSwDevices
PiDaDispatch
PiDaDriverEntry
PiDaFastIoDispatch
PiDcAllocateGenericTableEntry
PiDcCompareDevPropKeys
PiDcContainerRequiresConfiguration
PiDcFreeGenericTableEntry
PiDcHandleContainerPropertyChange
PiDcHandleCustomDeviceEvent
PiDcHandleDevicePropertyChange
PiDcHandleObjectEvent
PiDcHandleSystemFirmwareUpdate
PiDcInit
PiDcInitUpdateProperties
PiDcResetChildDeviceContainerCallback
PiDcResetChildDeviceContainers
PiDcUpdateDeviceContainerMembership
PiDcWriteConfigEventIfContainerRequiresConfiguration
PiDcWriteContainerConfigRequiredEvent
PiDeferSetInterfaceState
PiDevCfgAppendMultiSz
PiDevCfgBuildDriverConfigurationId
PiDevCfgBuildDriverNodeStrongName
PiDevCfgBuildIndirectString
PiDevCfgCheckDeviceNeedsUpdate
PiDevCfgClearDeviceDriverSettings
PiDevCfgConfigureDevice
PiDevCfgConfigureDeviceInterfaces
PiDevCfgConfigureDeviceKeys
PiDevCfgConfigureDeviceLocation
PiDevCfgConfigureSoftwareDevices
PiDevCfgCopyDeviceKeys
PiDevCfgCopyObjectProperties
PiDevCfgCopyVariableData
PiDevCfgEnforceDevicePolicy
PiDevCfgFindDeviceDriver
PiDevCfgFreeDriverNode
PiDevCfgFreeResolveContext
PiDevCfgGetKeySecurityDescriptor
PiDevCfgInitDeviceCallback
PiDevCfgInitResolveContext
PiDevCfgLogDeviceConfigured
PiDevCfgLogDeviceStarted
PiDevCfgMakeServiceBootStart
PiDevCfgOpenDeviceMigrationKey
PiDevCfgProcessDeviceCallback
PiDevCfgQueryDriverConfiguration
PiDevCfgQueryDriverNode
PiDevCfgQueryDriverVersionValueCallback
PiDevCfgQueryObjectProperties
PiDevCfgQueryPolicyEnabled
PiDevCfgQueryPolicyStringList
PiDevCfgRequestDriverConfigurations
PiDevCfgResolveDeviceDependencies
PiDevCfgResolveDriverDependencies
PiDevCfgResolveMultiSzValue
PiDevCfgResolveVariable
PiDevCfgResolveVariableConstant
PiDevCfgResolveVariableDeviceProperty
PiDevCfgResolveVariableExpression
PiDevCfgResolveVariableFormatString
PiDevCfgResolveVariableGenerateGuid
PiDevCfgResolveVariableKeyCopy
PiDevCfgResolveVariableKeyHandle
PiDevCfgResolveVariableKeyValue
PiDevCfgResolveVariableSwitchCase
PiDevCfgVerifyDeviceAllowed
PiDevCfgVerifyService
PiDeviceDependencyInit
PiDeviceRegistration
PiDmAddCacheReferenceForObject
PiDmAllocMem
PiDmAllocateGenericTableEntry
PiDmCacheDataDecode
PiDmCacheDataEncode
PiDmCacheDataFree
PiDmCmObjectMatchCallback
PiDmCompareObjects
PiDmEnumObjectsWithCallback
PiDmFreeGenericTableEntry
PiDmGetCacheKeys
PiDmGetCachedKeyIndex
PiDmGetCmObjectConstraintListFromCache
PiDmGetCmObjectListFromCache
PiDmGetObject
PiDmGetObjectConstraintList
PiDmGetObjectCount
PiDmGetObjectList
PiDmGetObjectListCallback
PiDmGetObjectManagerForObjectType
PiDmGetReferencedObjectFromProperty
PiDmInit
PiDmInitializeComparisonObject
PiDmListAddList
PiDmListAddObject
PiDmListAddObjectWorker
PiDmListEnumObjectsWithCallback
PiDmListInit
PiDmListInitEnumCallback
PiDmListRemoveList
PiDmListRemoveObject
PiDmListRemoveObjectWorker
PiDmListUpdateAggregationCountWorker
PiDmLookupObject
PiDmObjectAcquireExclusiveLock
PiDmObjectAcquireSharedLock
PiDmObjectCreate
PiDmObjectGetAggregatedBooleanPropertyData
PiDmObjectGetCachedCmProperty
PiDmObjectGetCachedObjectProperty
PiDmObjectGetCachedObjectPropertyData
PiDmObjectGetCachedObjectReference
PiDmObjectIsEnumerable
PiDmObjectManagerAcquireExclusiveLock
PiDmObjectManagerAcquireSharedLock
PiDmObjectManagerInit
PiDmObjectManagerPopulate
PiDmObjectProcessPropertyChange
PiDmObjectRelease
PiDmObjectUpdateCachedCmProperty
PiDmObjectUpdateCachedObjectProperty
PiDmPnpObjectMatchCallback
PiDmRemoveCacheReferenceForObject
PiDqActionDataCreate
PiDqActionDataFree
PiDqActionDataGetAllPropertiesInAllLanguages
PiDqActionDataGetAllPropertiesInBestLanguage
PiDqActionDataGetChangedProperties
PiDqActionDataGetRequestedProperties
PiDqAllocMem
PiDqAllocateGenericTableEntry
PiDqCompareAddresses
PiDqConvertObjectTypeToString
PiDqConvertQueryFlagsToString
PiDqDeleteUserObject
PiDqDeleteUserObjectFromLoadedHives
PiDqDispatch
PiDqEnumQueryObjectsCallback
PiDqFreeGenericTableEntry
PiDqGetObjectManagerForPnpObjectType
PiDqGetPnpObjectType
PiDqGetRelativeObjectRegPath
PiDqGrowPropertyArray
PiDqInit
PiDqIrpCancel
PiDqIrpComplete
PiDqIrpPropertySet
PiDqIrpQueryCreate
PiDqIrpQueryGetResult
PiDqObjectActionQueueEntryCreate
PiDqObjectManagerEnumerateAndRegisterQuery
PiDqObjectManagerHandleObjectEvent
PiDqObjectManagerInit
PiDqObjectManagerMakeInconsistent
PiDqObjectManagerServiceActionQueue
PiDqObjectManagerUnregisterQuery
PiDqOpenObjectRegKey
PiDqOpenUserObjectRegKey
PiDqPnPGetObjectProperty
PiDqPnPGetObjectPropertyInBestLocale
PiDqPnPGetObjectPropertyKeys
PiDqPnPGetObjectPropertyLocales
PiDqPropertyCallback
PiDqQueryActionQueueEntryCreate
PiDqQueryActionQueueEntryFree
PiDqQueryAddObjectToResultSet
PiDqQueryAppendActionEntry
PiDqQueryApplyObjectEvent
PiDqQueryCompletePendedIrp
PiDqQueryCreate
PiDqQueryDeleteObjectFromResultSet
PiDqQueryEnumObject
PiDqQueryEvaluateFilter
PiDqQueryFreeActiveData
PiDqQueryGetNextIoctlInfo
PiDqQueryGetObjectManager
PiDqQueryLock
PiDqQueryRelease
PiDqQuerySerializeActionQueue
PiDqQueryUnlock
PiDqQueryValidateQueryData
PiDqSameUserHive
PiDqSerializationAlloc
PiDqSerializationWrite
PiDqTraceQueryCreate
PiDrvDbCreateNode
PiDrvDbDestroyNode
PiDrvDbInit
PiDrvDbLoadHive
PiDrvDbLoadNode
PiDrvDbLoadNodeWorkerCallback
PiDrvDbNodeActionCallback
PiDrvDbUnloadNode
PiDrvDbUnloadNodeDpcRoutine
PiDrvDbUnloadNodeReset
PiDrvDbUnloadNodeWaitWorkerCallback
PiDrvDbUnloadNodeWorkerCallback
PiEnumerateDependentListEntry
PiEnumerateDeviceObjectList
PiEnumerateProviderListEntry
PiFindDevInstMatch
PiForEachDriverQueryRoutine
PiFreeDeviceObjectList
PiGetDefaultMessageString
PiGetDependentList
PiGetDeviceDepth
PiGetDeviceRegProperty
PiGetDeviceRegistryProperty
PiGetProviderList
PiGetRelatedDevice
PiHotSwapGetDefaultBusRemovalPolicy
PiHotSwapGetDetachableNode
PiIndexDeviceObjectList
PiInitCacheGroupInformation
PiInitFirmwareResources
PiInitReleaseCachedGroupInformation
PiInitializeDDBCache
PiInitializeDevice
PiIrpQueryRemoveDevice
PiIsDriverBlocked
PiLastGoodCopyKeyContents
PiLastGoodRevertCopyCallback
PiLastGoodRevertLastKnownDirectory
PiListEntryToDependencyEdge
PiLookupInDDB
PiLookupInDDBCache
PiMarkDeviceTreeForReenumeration
PiMarkDeviceTreeForReenumerationWorker
PiNormalizeDeviceText
PiPagePathSetState
PiPnpAddDeviceToPdoDeviceListEnumContext
PiPnpFreePdoDeviceList
PiPnpPdoDeviceListEnumCallback
PiPnpRtlApplyMandatoryDeviceContainerFilters
PiPnpRtlApplyMandatoryDeviceContainerFiltersCallback
PiPnpRtlApplyMandatoryDeviceFilters
PiPnpRtlApplyMandatoryDeviceInterfaceFilters
PiPnpRtlApplyMandatoryFilters
PiPnpRtlBeginOperation
PiPnpRtlCacheObjectBaseKey
PiPnpRtlCmActionCallback
PiPnpRtlDisableRemoveOperationDispatch
PiPnpRtlEndOperation
PiPnpRtlEnumDevicesInContainerCallback
PiPnpRtlEnumeratorFilterCallback
PiPnpRtlFreeContainerRemoveInfo
PiPnpRtlFreeDeviceDeleteInfo
PiPnpRtlFreeInstallerClassChangeInfo
PiPnpRtlFreeInterfaceDeleteInfo
PiPnpRtlGatherContainerRemoveInfo
PiPnpRtlGatherDeviceDeleteInfo
PiPnpRtlGatherInstallerClassChangeInfo
PiPnpRtlGatherInterfaceDeleteInfo
PiPnpRtlGetCurrentOperation
PiPnpRtlGetDeviceInterfaceEnabled
PiPnpRtlGetDeviceNtPropertyRoutine
PiPnpRtlGetDeviceRelatedDeviceRoutine
PiPnpRtlGetDeviceRelationsList
PiPnpRtlGetDeviceStatus
PiPnpRtlGetFilteredDeviceInterfaceList
PiPnpRtlGetFilteredDeviceList
PiPnpRtlInit
PiPnpRtlInterfaceFilterCallback
PiPnpRtlIsDeviceEnumerableForUser
PiPnpRtlIsDeviceValidForSession
PiPnpRtlObjectActionCallback
PiPnpRtlObjectEventCallback
PiPnpRtlObjectEventCompareObjects
PiPnpRtlObjectEventCreate
PiPnpRtlObjectEventDispatch
PiPnpRtlObjectEventRelease
PiPnpRtlObjectEventWorker
PiPnpRtlOperationAllocMem
PiPnpRtlOperationAllocateGenericTableEntry
PiPnpRtlOperationFreeGenericTableEntry
PiPnpRtlOperationListAcquireExclusiveLock
PiPnpRtlOperationListAcquireSharedLock
PiPnpRtlPdoRaiseNtPlugPlayPropertyChangeEvent
PiPnpRtlServiceFilterCallback
PiPnpRtlSetDeviceRegProperty
PiPnpRtlSetObjectProperty
PiProcessAddBootDevices
PiProcessClearDeviceProblem
PiProcessDriverInstance
PiProcessHaltDevice
PiProcessNewDeviceNode
PiProcessQueryDeviceState
PiProcessReenumeration
PiProcessRequeryDeviceState
PiProcessResourceRequirementsChanged
PiProcessSetDeviceProblem
PiProcessStartSystemDevices
PiProfileSendHardwareProfileCancel
PiProfileSendHardwareProfileCommit
PiProfileUpdateDeviceTree
PiProfileUpdateDeviceTreeCallback
PiProfileUpdateDeviceTreeWorker
PiQueryAndAllocateBootResources
PiQueryDeviceRelations
PiQueryPowerDependencyRelations
PiQueryPowerRelations
PiQueryRemovableDeviceOverride
PiQueryResourceRequirements
PiQueueDeviceRequest
PiRearrangeDeviceInstances
PiRebalanceOptOut
PiResetProblemDevicesWorker
PiRestartDevice
PiSortDeviceObjectListForRemove
PiSwAllocateGenericTableEntry
PiSwBusRelationAdd
PiSwBusRelationRemove
PiSwBusRelationsCompareInstancePath
PiSwCloseDecendents
PiSwCloseDevice
PiSwCompleteCreate
PiSwDeviceCompareObjects
PiSwDeviceCreate
PiSwDeviceDereference
PiSwDeviceFindInterfaceEntry
PiSwDeviceFree
PiSwDeviceInterfaceSetState
PiSwDeviceInterfacesUpdateState
PiSwDeviceMakeCompatibleIds
PiSwDispatch
PiSwDoesCreateChangesRequireReEnum
PiSwFinalizeRemove
PiSwFindBusRelations
PiSwFindChildren
PiSwFindSwDevice
PiSwFreeGenericTableEntry
PiSwFreeInterfaceList
PiSwGetChildPdo
PiSwInit
PiSwInstanceInfoFree
PiSwInstanceInfoInit
PiSwInterfaceCreate
PiSwInterfaceFree
PiSwIrpCancelStartCreate
PiSwIrpCleanup
PiSwIrpGetLifetime
PiSwIrpInterfacePropertySet
PiSwIrpInterfaceRegister
PiSwIrpInterfaceSetState
PiSwIrpPropertySet
PiSwIrpSetLifetime
PiSwIrpStartCreate
PiSwIrpStartCreateWorker
PiSwIsValidPnpId
PiSwPdoDriverEntry
PiSwPdoPnPDispatch
PiSwPnPInfoFree
PiSwPnPInfoInit
PiSwProcessParentRemoveIrp
PiSwProcessParentStartIrp
PiSwPropertySet
PiSwQueuedCreateInfoCreate
PiSwQueuedCreateInfoFree
PiSwStartCreate
PiSwStopDestroy
PiSwUpdateArrayProperties
PiSwValidateCreateData
PiSwValidatePropertyArray
PiUEventApplyAdditionalFilters
PiUEventBroadcastAwaitingResponseEvent
PiUEventBroadcastEventWorker
PiUEventBroadcastHardwareProfilesChangedEvent
PiUEventBroadcastPortsChangedEvent
PiUEventCacheObjectProperties
PiUEventCopyEventData
PiUEventDequeuePendingEventWorker
PiUEventDereferenceEventEntry
PiUEventDeviceNeedsInstall
PiUEventDispatch
PiUEventEstimateRequiredClientBufferSize
PiUEventFreeClientRegistrationContext
PiUEventFreeEventEntry
PiUEventGetDeviceInstanceIdFromUserHandle
PiUEventHandleGetEvent
PiUEventHandleIoctl
PiUEventHandleRegistration
PiUEventHandleUnregisterClient
PiUEventHandleVetoEvent
PiUEventHashGuidIntoBucket
PiUEventHashStringIntoBucket
PiUEventInit
PiUEventInitClientRegistrationContext
PiUEventIsClientStuck
PiUEventMetaNotificationCallback
PiUEventMovePendingEventToSynchronousQueue
PiUEventNotifyClient
PiUEventNotifyClientPendingEvent
PiUEventNotifyDeviceInstanceChange
PiUEventNotifyDeviceInstancePropertyChange
PiUEventNotifyDeviceInterfaceChange
PiUEventNotifyTargetDeviceChange
PiUEventNotifyUserMode
PiUEventProcessBroadcastNotifications
PiUEventProcessEventWorker
PiUEventQueueBroadcastEventEntry
PiUEventQueuePendingEvent
PiUEventReferenceEventEntry
PiUEventSendDeviceInterfaceArrivalETWEvent
PiUpdateDriverDBCache
PiValidatePowerRelations
PipAddBindingId
PipAddDependencyEdgeBetweenNodes
PipAddDependentsToRebuildPowerRelationsQueue
PipAddDevicesToBootDriver
PipAddDevicesToBootDriverWorker
PipAddtoRebuildPowerRelationsQueue
PipAllocateDeviceNode
PipApplyFunctionToServiceInstances
PipAreDriversLoaded
PipAreDriversLoadedWorker
PipCallDriverAddDevice
PipCallDriverAddDeviceQueryRoutine
PipCallbackHasDeviceOverrides
PipChangeDeviceObjectFromRegistryProperties
PipCheckComputerSupported
PipCheckDependencies
PipCheckForDenyExecute
PipCheckForUnsatisfiedDependencies
PipCheckSystemFirmwareUpdated
PipCheckValidNewDependencyEdge
PipClearDevNodeFlags
PipClearDevNodeProblem
PipClearDevNodeUserFlags
PipCommitPendingOsExtensionResource
PipCommitPendingService
PipConvertResolutionsToReservations
PipCreateComputerId
PipCreateDependencyNode
PipCreateEntry
PipCreateNewDependencyEdge
PipDeleteAllDependencyRelations
PipDeleteBindingIds
PipDeleteDependencyEdge
PipDeleteDependencyNode
PipDependencyGraphDepthFirstSearch
PipDereferenceDependencyNode
PipDeviceNodeListInsert
PipEnumerateCompleted
PipEnumerateDevice
PipFindDependencyNodePath
PipFindDeviceOverrideEntry
PipForAllChildDeviceNodes
PipForAllDeviceNodes
PipForAllDeviceNodesCallback
PipForDeviceNodeSubtree
PipFreeGroupTree
PipGenerateContainerID
PipGetDriverTagPriority
PipGetRegistryDwordWithFallback
PipGetRegistrySecurityWithFallback
PipHardwareConfigActivateService
PipHardwareConfigClearStartOverrideCallback
PipHardwareConfigClearStartOverrides
PipHardwareConfigExists
PipHardwareConfigGetIndex
PipHardwareConfigGetLastUseTime
PipHardwareConfigInit
PipHardwareConfigTriggerRespecialize
PipInitComputerIds
PipInitDeviceOverrideCache
PipIrpCheckDeletedChildren
PipIs32bitKey
PipIsDevNodeDNStarted
PipIsDeviceReadyForPowerRelations
PipIsProblemReadonly
PipLinkDeviceObjectAndDependencyNode
PipLookupGroupName
PipMakeGloballyUniqueId
PipMergeDependencyEdgeList
PipMergeDependencyEdges
PipMergeDependencyNodes
PipMoveListEntries
PipOpenServiceEnumKeys
PipPendingServicesFilter
PipPnPDriverEntry
PipProcessDevNodeTree
PipProcessEnumeratedChildDevice
PipProcessPendingObjects
PipProcessPendingOsExtensionResources
PipProcessPendingServices
PipProcessRebuildPowerRelationsQueue
PipProcessRestartPhase1
PipProcessRestartPhase2
PipProcessStartPhase1
PipProcessStartPhase2
PipProcessStartPhase3
PipQueryBindingResolution
PipReferenceDependencyNode
PipRestoreDevNodeState
PipSearchDeviceObjectList
PipServiceInstanceToDeviceInstance
PipSetDependency
PipSetDevNodeFlags
PipSetDevNodeProblem
PipSetDevNodeState
PipSetDevNodeUserFlags
PipSmBiosFindStruct
PipSmBiosGetString
PipSortDeviceObjectList
PipUnlinkDeviceObjectAndDependencyNode
PipVisitDeviceObjectListEntry
PlugPlayGetDeviceProperty
PlugPlayGetDeviceRelations
PlugPlayGetDeviceStatus
PlugPlayGetRelatedDevice
PnpAcquireDependencyRelationsLock
PnpAddVetoInformation
PnpAllocateCriticalMemory
PnpAllocateDeviceInstancePath
PnpAllocateGenericTableEntry
PnpAllocateMultiSZ
PnpAllocatePWSTR
PnpAllocateResources
PnpAllocateUpcaseUnicodeString
PnpAssignResourcesToDevices
PnpAsynchronousCall
PnpBootDeviceWait
PnpBootPhaseComplete
PnpBugcheckPowerTimeout
PnpBuildCmResourceList
PnpBuildCmResourceLists
PnpBuildRemovalRelationList
PnpBuildUnsafeRemovalDeviceList
PnpBusTypeGuidGet
PnpBusTypeGuidGetIndex
PnpBusTypeGuidInitialize
PnpCallAddDevice
PnpCallDriverQueryServiceHelper
PnpCancelStopDeviceNode
PnpCancelStopDeviceSubtree
PnpChainDereferenceComplete
PnpCheckDeviceIdsChanged
PnpCheckDriverDependencies
PnpCheckForActiveDependencies
PnpCleanupDeviceRegistryValues
PnpCmResourcesToIoResources
PnpCollectOpenHandles
PnpCollectOpenHandlesCallBack
PnpCompareGuid
PnpCompareInstancePath
PnpCompareMultiSz
PnpCompareResourceRequestPriority
PnpCompleteDeviceEvent
PnpCompleteSystemStartProcess
PnpCompletionRoutine
PnpConcatPWSTR
PnpConcatenateUnicodeStrings
PnpConvertDevpropcompkeyArrayToString
PnpCopyDevProperty
PnpCopyDevPropertyArray
PnpCopyDeviceInstancePath
PnpCreateDeviceEventEntry
PnpDeferNotification
PnpDelayedRemoveWorker
PnpDeleteDeviceInterfaces
PnpDeleteLockedDeviceNode
PnpDeleteLockedDeviceNodes
PnpDequeuePendingSurpriseRemoval
PnpDereferenceNotify
PnpDetermineResourceListSize
PnpDeviceActionWorker
PnpDeviceCompletionProcessCompletedRequest
PnpDeviceCompletionProcessCompletedRequests
PnpDeviceCompletionQueueAddDispatchedRequest
PnpDeviceCompletionQueueDispatchedEntryCompleted
PnpDeviceCompletionQueueGetCompletedRequest
PnpDeviceCompletionQueueIsEmpty
PnpDeviceCompletionQueueRemoveCompletedRequest
PnpDeviceCompletionRequestCreate
PnpDeviceCompletionRequestDestroy
PnpDeviceCompletionRoutine
PnpDeviceEventWorker
PnpDeviceObjectFromDeviceInstance
PnpDeviceObjectToDeviceInstance
PnpDiagnosticCompletionRoutine
PnpDisableDevice
PnpDisableDeviceInterfaces
PnpDisableUserModeNotifications
PnpDoPolicyCheck
PnpDriverLoadingFailed
PnpDriverStarted
PnpEarlyLaunchImageNotificationPostProcess
PnpEarlyLaunchImageNotificationPreProcess
PnpEarlyLaunchStatusNotificationPreProcess
PnpFilterResourceRequirementsList
PnpFinalizeVetoedRemove
PnpFindAlternateStringData
PnpFindBestConfiguration
PnpFindBestConfigurationWorker
PnpFindMountableDevice
PnpFindRebalanceCandidates
PnpFixupID
PnpFreeDevProperty
PnpFreeDevPropertyArray
PnpFreeDeviceInstancePath
PnpFreeGenericTableEntry
PnpFreeResourceRequirementsForAssignTable
PnpFreeUnicodeStringList
PnpFreeVetoInformation
PnpGenerateDeviceIdsHash
PnpGetCallerSessionId
PnpGetDeviceInstanceCsConfigFlags
PnpGetDeviceInstancePropertyData
PnpGetDeviceInstanceRegistryValue
PnpGetDeviceInterfacePropertyData
PnpGetDeviceLocationStrings
PnpGetDevicePropertyData
PnpGetDeviceResourcesFromRegistry
PnpGetMultiSzLength
PnpGetObjectProperty
PnpGetRelatedTargetDevice
PnpGetResourceRequirementsForAssignTable
PnpGetStableSystemBootTime
PnpGetSystemPdoList
PnpHandleEnumerateHandlesAgainstDeviceObject
PnpHandleEnumerateHandlesAgainstPdoStack
PnpHandleProcessWalkWorker
PnpInitPhase0
PnpInitializeBootStartDriver
PnpInitializeDeviceEvents
PnpInitializeNotification
PnpInitializeNotifyEntry
PnpInitializeProcessor
PnpInitializeSessionId
PnpInitializeTargetDeviceRemoveEvent
PnpInsertEventInQueue
PnpInvalidateRelationsInList
PnpIrpDeviceEnumerated
PnpIrpQueryID
PnpIsAnyDeviceInUse
PnpIsAnyDeviceInstanceEnabled
PnpIsBeingRemovedSafely
PnpIsChainDereferenced
PnpIsDeviceInstanceEnabled
PnpIsDuplicateDevice
PnpIsLegacyDriver
PnpIsNullGuid
PnpIsRangeWithin
PnpIsValidGuidString
PnpLoadBootFilterDriver
PnpLockDeviceActionQueue
PnpLockMountableDevice
PnpLogDuplicateDevice
PnpLogEvent
PnpLogVetoInformation
PnpLookupArbitersNewResources
PnpMapDeviceObjectToDeviceInstance
PnpMarkDeviceForRemove
PnpMarkHalDeviceNode
PnpMergeFilteredResourceRequirementsList
PnpNeedToReleaseBootResources
PnpNotifyDeviceClassChange
PnpNotifyDriverCallback
PnpNotifyEarlyLaunchImageLoad
PnpNotifyEarlyLaunchStatusUpdate
PnpNotifyHwProfileChange
PnpNotifyTargetDeviceChange
PnpNotifyUserModeDeviceRemoval
PnpOpenFirstMatchingSubKey
PnpOrphanNotification
PnpPrepareDriverLoading
PnpProcessAssignResources
PnpProcessAssignResourcesWorker
PnpProcessBusRelations
PnpProcessCompletedEject
PnpProcessCustomDeviceEvent
PnpProcessDeferredRegistrations
PnpProcessDependencyRelations
PnpProcessQueryRemoveAndEject
PnpProcessRebalance
PnpProcessRelation
PnpProcessTargetDeviceEvent
PnpProfileUpdateHardwareProfile
PnpQueryAndSaveDeviceNodeCapabilities
PnpQueryBusInformation
PnpQueryDeviceRelations
PnpQueryDeviceText
PnpQueryID
PnpQueryInterface
PnpQueryRebalance
PnpQueryRebalanceWorker
PnpQueryRemoveLockedDeviceNode
PnpQueryStopDeviceNode
PnpQueuePendingEject
PnpQueuePendingSurpriseRemoval
PnpQueueQueryAndRemoveEvent
PnpReadDeviceConfiguration
PnpReallocateResources
PnpRebalance
PnpRegMultiSzToUnicodeStrings
PnpRegSzToString
PnpReleaseBootResourcesForFilteredRequirements
PnpReleaseDependencyRelationsLock
PnpReleaseResourcesInternal
PnpRemoveDeviceActionRequests
PnpRemoveEventFromQueue
PnpRemoveLockedDeviceNode
PnpRemovedDeviceNodeDependencyCheck
PnpReplacePartitionUnit
PnpReportTargetDeviceChangeAsyncWorker
PnpRequestDeviceAction
PnpRequestDeviceEjectExWorker
PnpRequestDeviceRemoval
PnpRequestDeviceRemovalWorker
PnpRequestHwProfileChangeNotification
PnpResizeTargetDeviceBlock
PnpRestartDeviceNode
PnpRestoreResourcesInternal
PnpSaveDeviceCapabilities
PnpSelectFirstConfiguration
PnpSerializeBoot
PnpSetBlockedDriverEvent
PnpSetCustomTargetEvent
PnpSetDeviceClassChange
PnpSetDeviceInstancePropertyChangeEvent
PnpSetDeviceInstancePropertyChangeEventFromDeviceInstance
PnpSetDeviceInstanceRemovalEvent
PnpSetDeviceInstanceStartedEvent
PnpSetDeviceInstanceStartedEventFromDeviceInstance
PnpSetDeviceInterfacePropertyData
PnpSetDevicePropertyData
PnpSetDeviceRemovalSafe
PnpSetHwProfileChangeEvent
PnpSetInvalidIDEvent
PnpSetPlugPlayEvent
PnpSetPowerVetoEvent
PnpSetRegistryDword
PnpSetRegistryRequirementsList
PnpSetRegistryResourceList
PnpSetTargetDeviceRemove
PnpShutdownDevices
PnpSqmAddToStream
PnpSqmAppVeto
PnpSqmCreateStringStreamEntry
PnpSqmDeviceConfig
PnpSqmEndSession
PnpSqmInitialize
PnpSqmSetDword
PnpSqmSetString
PnpSqmStartSession
PnpStartDevice
PnpStartDeviceNode
PnpStartedDeviceNodeDependencyCheck
PnpStopDeviceSubtree
PnpStringFromGuid
PnpSurpriseRemoveLockedDeviceNode
PnpSynchronizeDeviceEventQueue
PnpTraceStartDevice
PnpUnicodeStringToWstr
PnpUnicodeStringToWstrFree
PnpUnlinkDeviceRemovalRelations
PnpUnloadAttachedDriver
PnpUnlockDeviceActionQueue
PnpUnlockMountableDevice
PnpUnregisterPlugPlayNotification
PnpUpdateExtensionFlags
PnpValidateMultiSz
PnpWaitForDevicesToStart
PnpWaitForEmptyDeviceActionQueue
PnpWaitForEmptyDeviceEventQueue
PnprAddDeviceResources
PnprAddMemoryResources
PnprAddProcessorResources
PnprAllocateMappingReserves
PnprCollectResources
PnprCompleteWake
PnprCopyReservedMapping
PnprEndMirroring
PnprFreeMappingReserve
PnprGetMillisecondCounter
PnprGetPageDestination
PnprGetPluginDriverImagePath
PnprGetStackLimits
PnprIdentifyUnits
PnprInitializeMappingReserve
PnprInitiateReplaceOperation
PnprIsMemoryDevice
PnprIsProcessorDevice
PnprLegacyDeviceDriversPresent
PnprLoadPluginDriver
PnprLockPagesForReplace
PnprLogFailureEvent
PnprLogStartEvent
PnprLogSuccessEvent
PnprMapPhysicalPages
PnprMapTargetSparePhysicalPages
PnprMarkOrMirrorPages
PnprMirrorMarkedPages
PnprMirrorPhysicalMemory
PnprMmAddRange
PnprMmConstruct
PnprMmFree
PnprQueryReplaceFeatures
PnprQuiesce
PnprQuiesceDevices
PnprQuiesceProcessorDpc
PnprQuiesceProcessors
PnprQuiesceWorker
PnprRecopyAddress
PnprRecopyMappingReserve
PnprRecopyMirrorPages
PnprReplaceStart
PnprStartMirroring
PnprSwap
PnprSwapFinalize
PnprUnlockPagesForReplace
PnprWakeDevices
PnprWakeProcessors
PoAllProcessorsDeepIdle
PoBlockConsoleSwitch
PoBroadcastSystemState
PoBugcheckEarlyCallback
PoCallDriver
PoCancelDeviceNotify
PoCaptureReasonContext
PoClearBroadcast
PoClearPowerRequest
PoClearPowerRequestInternal
PoClearTransitionMarker
PoCreatePowerRequest
PoDeletePowerRequest
PoDestroyReasonContext
PoDeviceAcquireIrp
PoDeviceReleaseIrp
PoDiagCaptureUsermodeStack
PoDiagTraceDeviceRundown
PoDisableSleepStates
PoEndDeviceBusy
PoEndPartitionReplace
PoEndPowerStateTasks
PoExecutePerfCheck
PoFxAbandonDevice
PoFxActivateComponent
PoFxActivateDevice
PoFxActivateDeviceForSystemTransition
PoFxCompleteDevicePowerNotRequired
PoFxCompleteIdleCondition
PoFxCompleteIdleState
PoFxIdleComponent
PoFxIdleDevice
PoFxInitPowerManagement
PoFxNotifySurprisePowerOn
PoFxPowerControl
PoFxPowerOnCrashdumpDevice
PoFxPrepareDevice
PoFxProcessorNotification
PoFxRegisterCoreDevice
PoFxRegisterCrashdumpDevice
PoFxRegisterDebugger
PoFxRegisterDevice
PoFxRegisterPlugin
PoFxRegisterPluginEx
PoFxRegisterPrimaryDevice
PoFxReportDevicePoweredOn
PoFxSendSystemLatencyUpdate
PoFxSetComponentLatency
PoFxSetComponentResidency
PoFxSetComponentWake
PoFxSetDeviceIdleTimeout
PoFxStartDevicePowerManagement
PoFxSystemLatencyNotify
PoFxUnregisterDevice
PoGetIdleTimes
PoGetLightestSystemStateForEject
PoGetPerfStateAndParkingInfo
PoGetProcessorIdleAccounting
PoGetRequester
PoGetSystemWake
PoHandleIrp
PoIdle
PoInitDriverServices
PoInitHiberServices
PoInitSystem
PoInitializeBroadcast
PoInitializePdc
PoInitializePrcb
PoInitiateProcessorWake
PoIssueCoalescingNotification
PoLatencySensitivityHint
PoNotifySystemTimeSet
PoNotifyVSyncChange
PoPowerOffMonitor
PoQueryWatchdogTime
PoQueueShutdownWorkItem
PoReenableSleepStates
PoRegisterCoalescingCallback
PoRegisterDeviceForIdleDetection
PoRegisterDeviceNotify
PoRegisterPowerSettingCallback
PoRegisterSystemState
PoRequestPowerIrp
PoRequestShutdownEvent
PoRundownSystemTimer
PoSetDeviceBusyEx
PoSetFixedWakeSource
PoSetHiberRange
PoSetPowerRequest
PoSetPowerRequestInternal
PoSetPowerState
PoSetSystemState
PoSetSystemWake
PoSetUserPresent
PoShutdownBugCheck
PoStartDeviceBusy
PoStartNextPowerIrp
PoStartPartitionReplace
PoStartPowerStateTasks
PoStoreDiagnosticContext
PoStoreRequester
PoThermalCounterSetCallback
PoTraceDynamicTickDisabled
PoTraceSystemTimerResolution
PoTraceSystemTimerResolutionKernel
PoTraceSystemTimerResolutionUpdate
PoUnblockConsoleSwitch
PoUnregisterCoalescingCallback
PoUnregisterPowerSettingCallback
PoUnregisterSystemState
PoUserShutdownCancelled
PoUserShutdownInitiated
PoVolumeDevice
PopAcDcPowerSettingCallback
PopAccumulateNonActivatedCpuTime
PopAcquireAdaptiveLock
PopAcquireAwaymodeLock
PopAcquireDripsWatchdogLock
PopAcquirePolicyLock
PopAcquirePowerRequestPushLock
PopAcquireTransitionLock
PopAcquireUmpoPushLock
PopAcquireWakeSourceSpinLock
PopActionRetrieveInitialState
PopAdaptivePowerSettingCallback
PopAddPagesToCompressedPageSet
PopAdvanceSystemPowerState
PopAllocateHiberContext
PopAllocateIrp
PopAllocatePages
PopAllowAwayModeSettingCallback
PopAoacExecutionRequiredPowerRequest
PopApplyAdminPolicy
PopApplyLegacyPowerRequestFlags
PopApplyPolicy
PopArePowerSettingsEqual
PopAwayModePowerRequest
PopAwayModeUserPresenceDpc
PopBatteryAdd
PopBatteryAlarmPowerSettingCallback
PopBatteryApplyCompositeState
PopBatteryCapacityToRate
PopBatteryCheckTrigger
PopBatteryEtwCallback
PopBatteryInit
PopBatteryInitialize
PopBatteryIrpComplete
PopBatteryQueryEstimatedTime
PopBatteryQueryStatus
PopBatteryQueueWork
PopBatteryReadTag
PopBatteryRefreshStatus
PopBatteryRemove
PopBatteryTracePercentageRemaining
PopBatteryTraceSystemBatteryStatus
PopBatteryUpdateAlarms
PopBatteryUpdateCompositeInformation
PopBatteryUpdateCurrentState
PopBatteryWaitTag
PopBatteryWakeDpc
PopBatteryWorker
PopBcdClearPendingResume
PopBcdEstablishResumeObject
PopBcdReadElement
PopBcdRegenerateResumeObject
PopBcdSetDefaultResumeObjectElements
PopBcdSetPendingResume
PopBcdSetupResumeObject
PopBootLoaderTraceEtwEvents
PopBootLoaderTraceProcess
PopBroadcastSessionInfo
PopBuildDeviceNotifyList
PopBuildDeviceNotifyListWatchdog
PopBuildMemoryImageHeader
PopCalculateCsSummary
PopCalculateIdleInformation
PopCallPowerSettingCallback
PopCancelDripsWatchdog
PopCaptureReasonContext
PopCaptureTimeOnProcZero
PopChangeCapability
PopCheckConsoleTimeouts
PopCheckDisabledReason
PopCheckDisabledState
PopCheckExecutionRequiredPowerRequests
PopCheckForIdleness
PopCheckForUpgradeInProgress
PopCheckForWork
PopCheckResiliencyScenarios
PopCheckShutdownMarker
PopCheckSkipTick
PopCheckThermalPolicy
PopClearHiberFileSignature
PopClearSleepMarker
PopClearSpecialRequest
PopClearSpmPowerSettingOverride
PopCloneRange
PopClosePowerRequestObject
PopCoalescingActivate
PopCoalescingCallback
PopCoalescingCheck
PopCoalescingEnforce
PopCoalescingInitialize
PopCoalescingNotify
PopCoalescingPowerSettingCallback
PopCoalescingSetTimer
PopCoalesingTimerCallback
PopCollectProcessorInformation
PopCompareActions
PopCompleteAction
PopCompressCallback
PopCompressHiberBlocks
PopComputeDerivedHiberStats
PopComputeWatchdogTimeout
PopConnectToPolicyDevice
PopConnectedStandbySettingCallback
PopConsoleLockPowerSettingCallback
PopConsoleSessionActiveInput
PopConsoleSessionPassiveInput
PopControlIdleResiliency
PopCountDataAsProduced
PopCreateDumpMdl
PopCreateDynamicIrpWorker
PopCreateHiberFile
PopCreateHiberFileSecurityDescriptor
PopCreateKernelPowerRequest
PopCreateNotificationName
PopCreatePowerRequestObject
PopCreatePowerThread
PopCreateUserPowerRequest
PopCriticalShutdown
PopCsAudioAccountingCallback
PopCsStateChanged
PopCurrentPowerState
PopDecompressCallback
PopDecompressHiberBlocks
PopDefaultPolicy
PopDeleteHiberFile
PopDeletePowerRequestObject
PopDequeueQuerySetIrp
PopDereferenceWakeInfos
PopDeviceIdleCompletion
PopDeviceIdlePolicySettingCallback
PopDiagDeviceRundownWorker
PopDiagGetDriverName
PopDiagInitialize
PopDiagNextSleepStudySession
PopDiagTraceAbnormalReset
PopDiagTraceAcDcStateChange
PopDiagTraceActiveCooling
PopDiagTraceAppPowerMessage
PopDiagTraceAppPowerMessageEnd
PopDiagTraceConsoleDisplayState
PopDiagTraceControlCallback
PopDiagTraceCsConsumption
PopDiagTraceCsDripsWatchdogPerfTrack
PopDiagTraceCsEnterReason
PopDiagTraceCsExitReason
PopDiagTraceCsFanPerfTrack
PopDiagTraceDeviceAcquireIrp
PopDiagTraceDeviceIdleCheck
PopDiagTraceDeviceReleaseIrp
PopDiagTraceDeviceVerboseRundown
PopDiagTraceDevicesLevel
PopDiagTraceDevicesSuspend
PopDiagTraceDevicesWakeEnd
PopDiagTraceDirtyTransition
PopDiagTraceDiskIdleCheck
PopDiagTraceDisplayTimeout
PopDiagTraceDriverVeto
PopDiagTraceDynamicTickStatusRundown
PopDiagTraceEventNoPayload
PopDiagTraceFirmwareS3Stats
PopDiagTraceFxComponentAccounting
PopDiagTraceFxComponentIdleConstraints
PopDiagTraceFxComponentIdleState
PopDiagTraceFxComponentLogicalCondition
PopDiagTraceFxComponentRegistration
PopDiagTraceFxComponentWake
PopDiagTraceFxDeviceAccounting
PopDiagTraceFxDeviceIdleConstraints
PopDiagTraceFxDevicePowerRequirement
PopDiagTraceFxDevicePowerState
PopDiagTraceFxDevicePowered
PopDiagTraceFxDevicePreparation
PopDiagTraceFxDeviceRegistration
PopDiagTraceFxDeviceStartPowerManagement
PopDiagTraceFxDeviceUnregistration
PopDiagTraceFxPluginRegistration
PopDiagTraceFxRundown
PopDiagTraceHiberStats
PopDiagTraceHibernateErrorStatus
PopDiagTraceIdleCheck
PopDiagTraceIdleResiliencyEnd
PopDiagTraceIdleResiliencyStart
PopDiagTraceIllegalProcessorThrottle
PopDiagTraceInputTimeout
PopDiagTraceIoCoalescingDiskIdle
PopDiagTraceIoCoalescingOn
PopDiagTraceIrpFinish
PopDiagTraceIrpStart
PopDiagTraceKernelQueriesAllowed
PopDiagTraceMtrrError
PopDiagTracePassiveCooling
PopDiagTracePerfTrackData
PopDiagTracePlatformRoleRundown
PopDiagTracePolicyChange
PopDiagTracePostSleepNotification
PopDiagTracePowerRequestChange
PopDiagTracePowerRequestClose
PopDiagTracePowerRequestCreate
PopDiagTracePowerSetting
PopDiagTracePowerTransitionEnd
PopDiagTracePowerTransitionStart
PopDiagTracePowerTransitionTime
PopDiagTracePreSleepCallbacks
PopDiagTracePreSleepNotification
PopDiagTraceProcessorThrottleDurationPerfTrack
PopDiagTraceProcessorThrottlePerfTrack
PopDiagTraceRegisterSystemState
PopDiagTraceServiceNotification
PopDiagTraceSessionState
PopDiagTraceSessionStates
PopDiagTraceSetSystemState
PopDiagTraceSetThreadExecutionState
PopDiagTraceShutdownAction
PopDiagTraceSkipTick
PopDiagTraceSleepStudyStart
PopDiagTraceSleepStudyStop
PopDiagTraceSpmPolicyAliasRundown
PopDiagTraceSpmScenarioPoliciesRundown
PopDiagTraceSpmStatus
PopDiagTraceSuperfetchNotification
PopDiagTraceSystemLatencyUpdate
PopDiagTraceThermalCoolingMode
PopDiagTraceThermalZoneEnumeration
PopDiagTraceThermalZoneRundown
PopDiagTraceThermalZoneThrottleDurationPerfTrack
PopDiagTraceThermalZoneThrottlePerfTrack
PopDiagTraceTripPointExceeded
PopDiagTraceUsermodeThermalEvent
PopDiagTraceUsermodeTripPointExceeded
PopDiagTraceZeroHiberFile
PopDiagTraceZeroHiberFileEnd
PopDiagTraceZoneCriticalTripPointExceeded
PopDiagTraceZoneS4TripPointExceeded
PopDisablePowerExecutionRequest
PopDiscardRange
PopDisksRegisteredForIdle
PopDispatchAcDcCallback
PopDispatchCallback
PopDispatchCallout
PopDispatchFullWake
PopDispatchNotifications
PopDispatchNotificationsToList
PopDispatchPowerSettingCallbacks
PopDispatchQuerySetIrp
PopDispatchShutdownEvent
PopDispatchStateCallout
PopDripsWatchdogTakeAction
PopDripsWatchdogTimerDpcRoutine
PopDripsWatchdogWorkerRoutine
PopEnableExecutionRequiredPowerRequests
PopEnableHiberFile
PopEnableIrpWatchdog
PopEnablePowerExecutionRequest
PopEndMirroring
PopEnforceIdleResiliency
PopEnforceResiliencyScenarios
PopEvaluateGlobalUserStatus
PopEventCalloutDispatch
PopExecuteOnTargetProcessors
PopExecuteProcessorCallback
PopExecutionRequiredPowerRequest
PopExecutionRequiredSettingCallback
PopExecutionRequiredTimeoutCallback
PopExtendConnectionState
PopFanAdd
PopFanCheckSystemStatus
PopFanEndCsFanPeriod
PopFanIrpComplete
PopFanRemove
PopFanUpdateCsState
PopFanWorker
PopFastS4Check
PopFilterCapabilities
PopFinalizeWakeInfo
PopFindNextSystemPowerState
PopFindPowerSettingConfiguration
PopFireThermalWmiEvent
PopFlushAndHold
PopFlushVolumeWorker
PopFlushVolumes
PopFreeHiberContext
PopFreeIrp
PopFreeRegistration
PopFreeSessionState
PopFreeWakeInfo
PopFreeWakeSource
PopFxActivateComponent
PopFxActivateComponentWorker
PopFxActivateDevice
PopFxActivateDevicesForSx
PopFxAddRefDevice
PopFxAllocatePowerIrp
PopFxAllocateUniqueId
PopFxArmResidentTimer
PopFxAssignDeviceToDevNode
PopFxBugCheck
PopFxCaptureDeviceAccounting
PopFxCompleteComponentActivation
PopFxCompleteDevicePowerRequired
PopFxComponentWork
PopFxConvertV1Components
PopFxCreateEmergencyWorkerThread
PopFxDebuggerPowerCriticalTransitionCallback
PopFxDeliverDevicePowerRequired
PopFxDeviceWork
PopFxEmergencyWorker
PopFxEnablePlatformStates
PopFxFreeUniqueId
PopFxIdleComponent
PopFxIdleDevicesFromSx
PopFxIdleTimeoutDpcRoutine
PopFxIdleWorker
PopFxIdleWorkerTail
PopFxIncrementDeviceSleepCount
PopFxInsertDevice
PopFxLockDevice
PopFxLowPowerEpochCallback
PopFxNotifyMiniPepIdleState
PopFxPauseDeviceAccounting
PopFxPlatformIdleVeto
PopFxPluginWork
PopFxPrepareDevicesForShutdown
PopFxProcessWork
PopFxProcessorIdleVeto
PopFxQueueWorkOrder
PopFxRegisterDevice
PopFxRegisterDeviceWithPep
PopFxRegisterDeviceWorker
PopFxRegisterPluginEx
PopFxReleaseDevice
PopFxReleasePowerIrp
PopFxRemoveDevice
PopFxRequestMiniDeviceIdleConstraints
PopFxRequestWorker
PopFxResidentTimeoutDpcRoutine
PopFxResidentTimeoutRoutine
PopFxResumeDeviceAccounting
PopFxScheduleDeviceIdleTimer
PopFxSetDeviceAccountingCsPlatformState
PopFxStartDeviceAccounting
PopFxStopDeviceAccounting
PopFxTraceDeviceRegistration
PopFxTransitionCriticalResource
PopFxUnregisterDevice
PopFxUnregisterDeviceOrWait
PopFxUpdateComponentAccountingEnhanced
PopFxUpdateDeviceAccountingEnhanced
PopFxUpdateDeviceIdleTimer
PopFxUpdatePlatformIdleState
PopFxUpdateProcessorIdleState
PopFxVerifyDependencies
PopFxWorkOrderWatchdog
PopGenerateMdl
PopGenerateScratchMdl
PopGenerateUnHibernatedMdl
PopGetBitlockerKeyLocation
PopGetCurrentWakeInfos
PopGetDisplayTimeout
PopGetDope
PopGetHwConfigurationSignature
PopGetIdleResiliencyDuration
PopGetIdleTimesCallback
PopGetIoLocation
PopGetLegacyPowerRequestFlags
PopGetListHead
PopGetLockConsoleTimeout
PopGetNextTable
PopGetPolicyDeviceObject
PopGetPolicyWorker
PopGetPowerRequestListInfo
PopGetPowerSettingValue
PopGetRangeCount
PopGetReasonListByReasonCode
PopGetRemainingHibernateRangeDataSize
PopGetSettingNotificationName
PopGetSettingValue
PopGetWakeSource
PopGracefulShutdown
PopHaltDeviceIdle
PopHandleNextState
PopHandleWakeSources
PopHardDiskPowerSettingCallback
PopHiberCheckForDebugBreak
PopHiberCheckResume
PopHiberInitializeResources
PopHiberPeekRangeTable
PopIdleResiliencyPowerSettingCallback
PopIgnoreBatteryStatusChange
PopInitPlatformSettings
PopInitSIdle
PopInitShutdownList
PopInitSpm
PopInitSystemSleeperThread
PopInitializeAdpm
PopInitializeIrpWorkers
PopInitializePowerPolicySimulate
PopInitializePowerSettingCallbacks
PopInitializePowerSettings
PopInitializeTimer
PopInitilizeAcDcSettings
PopInputDisabled
PopInsertPowerRequestObject
PopIntSteerSetMode
PopIntSteerSetPerProcTrigger
PopIntSteerSetTimeUnparkTrigger
PopInternalAddToDumpFile
PopInternalSaveStackToDumpFile
PopInterruptSteeringEnabled
PopInvokeStateHandlerTargetProcessor
PopInvokeSystemStateHandler
PopIrpWatchdog
PopIrpWatchdogBugcheck
PopIrpWorker
PopIrpWorkerControl
PopIsAddressRangeValid
PopIssueActionRequest
PopIssueCoalescingNotification
PopIssueNextState
PopLazySensorActiveInput
PopLoadResumeContext
PopLockGetDoDevicePowerState
PopLogDisabledSleepReason
PopLogNotifyDevice
PopLogSleepDisabled
PopLoggingInformation
PopMapInternalActionToIrpAction
PopMarkHiberPhase
PopMarshalSettingValues
PopMirrorPhysicalMemory
PopMonitorAlpcCallback
PopMonitorProcessLoop
PopMoveList
PopNewProcessorCallback
PopNewWakeInfo
PopNewWakeSource
PopNotifyBrightnessChangesWorker
PopNotifyCallbacksPreSleep
PopNotifyConsoleUserPresent
PopNotifyDevice
PopNotifyPolicyDevice
PopNotifySessionDisplayRequired
PopNotifyShutdownListener
PopOpenKey
PopOpenPowerKey
PopPdcCallback
PopPdcCsCheckSystemVolumeDevice
PopPdcCsDeviceNotification
PopPdcInvocation
PopPdcIsBootOptionPresent
PopPdcLogConnectedStandbyComplianceChecks
PopPdcRegister
PopPdcSpmScenarioRegisterationComplete
PopPdcUpdateDeviceCompliance
PopPepAbandonDevice
PopPepAcceptDeviceNotification
PopPepArmIdleTimer
PopPepAttemptAcitivityPromotion
PopPepCancelActivityRange
PopPepCompleteActivity
PopPepCompleteComponentActiveActivity
PopPepCompleteComponentIdleState
PopPepCompleteComponentIdleStateChangeActivity
PopPepCompleteDevicePowerOnActivity
PopPepCompleteVoidActivity
PopPepComponentGetLatencyIdleState
PopPepComponentGetResidencyIdleState
PopPepComponentGetWork
PopPepComponentSetLatency
PopPepComponentSetResidency
PopPepComponentSetWakeHint
PopPepCountReadyActivities
PopPepDeviceDState
PopPepDevicePoweredOn
PopPepDeviceStarted
PopPepDispatchAbandonDevice
PopPepDispatchCompleteComponentIdleState
PopPepDispatchComponentActivated
PopPepDispatchComponentActive
PopPepDispatchComponentIdleState
PopPepDispatchComponentSetLatency
PopPepDispatchComponentSetResidency
PopPepDispatchComponentSetWakeHint
PopPepDispatchDeviceDState
PopPepDispatchDevicePower
PopPepDispatchDevicePoweredOn
PopPepDispatchDeviceStarted
PopPepDispatchDeviceSurprisePowerOn
PopPepDispatchDeviceWaitWake
PopPepDispatchLowPowerEpoch
PopPepDispatchPowerControl
PopPepDispatchPowerControlComplete
PopPepDispatchPrepareDevice
PopPepDispatchRegisterDevice
PopPepDispatchUnregisterDevice
PopPepDispatchWork
PopPepEntry
PopPepGetComponentVetoMasks
PopPepGetDevicePlatformStateDependents
PopPepGetDeviceVetoMasks
PopPepGetMinimumComponentIdleState
PopPepGetMinimumDevicePowerState
PopPepGetReadyActivityType
PopPepIdleTimeoutDpcRoutine
PopPepIdleTimeoutRoutine
PopPepInitializeVetoMasks
PopPepInsertDevice
PopPepLockActivityLink
PopPepPlatformStateRegistered
PopPepPrepareDevice
PopPepProcessEvent
PopPepPromoteActivities
PopPepRegisterDevice
PopPepReleaseActivityLink
PopPepRemoveDevice
PopPepRequestWork
PopPepResetDeviceAccountingLevel
PopPepShouldActivityWait
PopPepStartActivity
PopPepStartComponentActivatingActivity
PopPepStartComponentIdleStateChangeActivity
PopPepStartDevicePowerOffActivity
PopPepStartDevicePowerOnActivity
PopPepStartDeviceUnregisterActivity
PopPepStartVoidActivity
PopPepTriggerActivity
PopPepTriggerComponentActivatingActivity
PopPepTriggerComponentActiveActivity
PopPepTriggerComponentIdleStateChangeActivity
PopPepTriggerVoidActivity
PopPepTryPowerDownComponent
PopPepTryPowerDownDevice
PopPepTryPowerUpComponent
PopPepUnregisterDevice
PopPepUpdateConstraints
PopPepUpdateIdleState
PopPepUpdateIdleStateRefCount
PopPepWaitForDeviceRelease
PopPepWork
PopPerfBoostPowerRequest
PopPluginAbandonDevice
PopPluginComponentActive
PopPluginComponentIdleState
PopPluginDeviceDState
PopPluginDevicePower
PopPluginGetComponentVetoMasks
PopPluginGetDevicePlatformStateDependents
PopPluginGetDeviceVetoMasks
PopPluginPowerControlComplete
PopPluginRegisterCrashdumpDevice
PopPluginRegisterDevice
PopPluginRequestPowerControl
PopPluginUnregisterDevice
PopPoCoalescinCallback
PopPolicyDeviceRemove
PopPolicyDeviceTargetChange
PopPolicySystemIdle
PopPolicyTimeChange
PopPolicyWorkerAction
PopPolicyWorkerActionPromote
PopPolicyWorkerMain
PopPolicyWorkerNotify
PopPolicyWorkerThread
PopPowerActionString
PopPowerButtonSettingCallback
PopPowerRequestActionInfo
PopPowerRequestAllocate
PopPowerRequestCallbackWorker
PopPowerRequestCleanUp
PopPowerRequestCompare
PopPowerRequestCreateInfo
PopPowerRequestDeleteEntryById
PopPowerRequestDeleteEntryNoLock
PopPowerRequestExecuteCallbacks
PopPowerRequestFindEntryById
PopPowerRequestFree
PopPowerRequestInit
PopPowerRequestInsertElementNoLock
PopPowerRequestOverrideInitialize
PopPreCriticalBatteryNotify
PopPreallocateHibernateMemory
PopPrepChildWake
PopPrepareIoctl
PopPrintEx
PopPrintUserActivityPresence
PopProcessPowerRequestOverrideQueryResponse
PopProcessWakeSourceWork
PopProcessorInformation
PopPromoteActionFlag
PopQpcTimeInMs
PopQueueBatteryStatusTimeout
PopQueuePowerRequestCallback
PopQueuePowerRequestCallbacks
PopQueueQuerySetIrp
PopQueueTargetDpc
PopReadHiberbootGroupPolicy
PopReadHiberbootPolicy
PopReadProducerConsumerBuffer
PopReadShutdownPolicy
PopReadSystemAwayModePolicy
PopReadyChildWake
PopReadyParentSleep
PopRecalculateCBTriggerLevels
PopRegisterForDeviceNotification
PopReleaseAdaptiveLock
PopReleaseAwaymodeLock
PopReleasePolicyLock
PopReleasePowerRequestPushLock
PopReleaseTransitionLock
PopReleaseUmpoPushLock
PopReleaseWakeSourceSpinLock
PopRemoteSessionActiveInput
PopRemoveReasonRecordByReasonCode
PopRequestCompletion
PopRequestPowerIrp
PopRequestRead
PopRequestShutdownWait
PopRequestWrite
PopResetActionDefaults
PopResetCBTriggers
PopResetCurrentPolicies
PopResetRangeEnum
PopRestoreHiberContext
PopResumeApps
PopResumeDeviceIdle
PopResumeServices
PopRunMaximumIrpWorkers
PopRunNormalIrpWorkers
PopRundownPowerSettings
PopSafeCopyUnicodeString
PopSaveHiberContext
PopSaveHiberContextWrapper
PopSaveHibernateEnabled
PopScanIdleList
PopScreenOffIdleResiliencyEngaged
PopSendSessionInfo
PopSessionConnected
PopSessionConnectionChange
PopSessionDisconnected
PopSessionInputChange
PopSessionWinlogonNotification
PopSetAwayModeStatus
PopSetBootPhaseRange
PopSetDevicesSystemState
PopSetDisplayStatus
PopSetDripsWatchdog
PopSetHiberFileSize
PopSetNewPolicyValue
PopSetNotificationWork
PopSetPowerAction
PopSetPowerSettingValue
PopSetPowerSettingValueAcDc
PopSetRange
PopSetSessionDisplayStatus
PopSetSessionUserStatus
PopSetShutdownMarker
PopSetSleepMarker
PopSetSpecialRequest
PopSetSpmPowerSettingOverride
PopSetSystemAwayMode
PopSetSystemState
PopSetWin32kDisplayTimeout
PopSetWin32kInputTimeout
PopSetupSleepNotifies
PopShutdownHandler
PopShutdownSystem
PopSleepDeviceList
PopSleepPowerSettingCallback
PopSleepStudyPreCriticalBatteryNotify
PopSpmAllocateQueryTable
PopSpmChangePowerSettings
PopSpmDisableUnusedScenarios
PopSpmGetScenario
PopSpmGetScenarioPolicySetting
PopSpmInheritPowerSettings
PopSpmOpenRegistryKey
PopSpmReadPolicyListFromRegistry
PopSpmReadScenarioSettingsFromRegistry
PopSpmRegister
PopSpmRegisterPowerSettings
PopSpmSetScenarioPolicySetting
PopSpmSetupIrForCs
PopSpmUpdatePowerSettings
PopSpmUpdateScenarioCommonAccounting
PopSqmAddToStream
PopSqmBatteryUpdate
PopSqmCreateDwordStreamEntry
PopSqmCreateStringStreamEntry
PopSqmFanEnumeration
PopSqmIllegalProcessorThrottleEvent
PopSqmThermalCriticalEvent
PopSqmThermalUsermodeEvent
PopSqmThermalZoneEnumeration
PopSqmThermalZoneMetrics
PopSqmUpdateDword
PopStartMirroring
PopStateIsSessionSpecific
PopSuspendResumePdc
PopSwitchForcedShutdownSettingCallback
PopSystemIrpCompletion
PopSystemRequiredCallback
PopSystemRequiredSet
PopSystemStateString
PopThermalIrpComplete
PopThermalLogMetricsInformation
PopThermalPowerSettingCallback
PopThermalProcessUsermodeEvent
PopThermalReadCounters
PopThermalTraceRundownEvents
PopThermalWorker
PopThermalZoneAdd
PopThermalZoneDpc
PopThermalZoneRemove
PopThermalZoneUpdateCoolingPolicy
PopTimeoutWakeTracking
PopTimestampTargetProcessor
PopTracePowerSettingChange
PopTransitionToSleep
PopTriggerDiagTraceAoAcCapability
PopUmpoInitializeChannel
PopUmpoInitializeMonitorChannel
PopUmpoMessageCallback
PopUmpoProcessMessage
PopUmpoProcessMessages
PopUmpoProcessPowerMessage
PopUmpoSendLegacyEvent
PopUmpoSendPowerMessage
PopUmpoSendPowerRequestOverrideCleanup
PopUmpoSendPowerRequestOverrideQuery
PopUnlinkWakeSources
PopUnlockAfterSleepWorker
PopUnreferencePowerSetting
PopUnregisterPowerSettingCallback
PopUpdateConsoleDisplayState
PopUpdateDiskIdleTimeoutSetting
PopUpdateTimeouts
PopUpdateWakeSource
PopUpdateWakeSourceWorker
PopUserIsAdmin
PopUserPresentOverride
PopUserPresentSet
PopUserPresentSetWorker
PopValidateContextMembership
PopValidateExistingHiberFile
PopValidatePowerSettingData
PopValidateRTCWake
PopVerifyPowerActionPolicy
PopVerifySystemPowerPolicy
PopVerifySystemPowerState
PopVideoBrightnessCapableSettingCallback
PopVideoPowerSettingCallback
PopWakeDeviceList
PopWakeInfoDereference
PopWakeInfoReference
PopWakeSourceGetDeviceProperty
PopWakeSourceInit
PopWakeSourceIsParent
PopWakeSourceSize
PopWakeSourceTimeoutDpc
PopWakeSourceTimeoutWorker
PopWdiTimerCallback
PopWdiTimerWorkerThread
PopWriteHeaderPages
PopWriteHiberImage
PopWriteHiberPages
PopWriteImageHeader
PopZeroHiberFile
PpCheckInDriverDatabase
PpCreateLegacyDeviceIds
PpDevCfgInit
PpDevCfgProcessDevice
PpDevCfgProcessDeviceClass
PpDevCfgProcessDeviceExtensions
PpDevNodeInsertIntoTree
PpDevNodeLockTree
PpDevNodeRemoveFromTree
PpDevNodeUnlockTree
PpDeviceRegistration
PpForEachDeviceInstanceDriver
PpHotSwapGetDevnodeRemovalPolicy
PpHotSwapInitRemovalPolicy
PpHotSwapUpdateRemovalPolicy
PpInitGetGroupOrderIndex
PpInitSystem
PpInitializeBootDDB
PpIrpQueryCapabilities
PpIrpQueryResourceRequirements
PpLastGoodDeleteFilesCallback
PpLastGoodDoBootProcessing
PpMarkDeviceStackExtensionFlag
PpPagePathAssign
PpProcessClearProblem
PpProfileBeginHardwareProfileTransition
PpProfileCancelHardwareProfileTransition
PpProfileCancelTransitioningDock
PpProfileCommitTransitioningDock
PpProfileIncludeInHardwareProfileTransition
PpProfileInit
PpProfileMarkAllTransitioningDocksEjected
PpProfileQueryHardwareProfileChange
PpReleaseBootDDB
PpResetProblemDevices
PpSystemHiveLimitCallback
PpmAcquireLock
PpmAllocWmiEvent
PpmApplyIdlePolicy
PpmApplyIdlePolicyChanges
PpmCancelExitLatencyTrace
PpmCapturePerformanceDistribution
PpmCapturePerformanceDistributionCallback
PpmCheckAdvancePhase
PpmCheckApplyLatencySensitivityHint
PpmCheckApplyParkConstraints
PpmCheckApplyPerfConstraints
PpmCheckApplyProcessorPerformance
PpmCheckCustomRun
PpmCheckEnd
PpmCheckInitProcessors
PpmCheckMakeupSkippedChecks
PpmCheckNoOp
PpmCheckPeriodicStart
PpmCheckReInit
PpmCheckRecordAllUtility
PpmCheckReset
PpmCheckRun
PpmCheckSnapAllUtility
PpmCheckStart
PpmClearExitLatencySamplingPercentage
PpmClearSimulatedIdle
PpmClearSimulatedLoad
PpmContinueActiveTimeAccumulation
PpmContinueTimeAccumulation
PpmConvertTime
PpmConvertTimeTo
PpmDeepestHardwareIdleState
PpmDripsStateUpdateCallback
PpmEnableWmiInterface
PpmEnterPlatformIdle
PpmEventBiosCapChange
PpmEventCoreParkingStateChange
PpmEventDomainPerfStateChange
PpmEventIdleStateChange
PpmEventLPICoreParking
PpmEventParkNodeCapChange
PpmEventParkNodePreference
PpmEventPerfState
PpmEventPlatformVetoRequest
PpmEventPlatformVetoRundown
PpmEventProcessorPerfStateChange
PpmEventProcessorPerfStateChangeInitiated
PpmEventProcessorVetoRequest
PpmEventProcessorVetoRundown
PpmEventThermalCapChange
PpmEventTraceAccountingBucketIntervalsRundown
PpmEventTraceControlCallback
PpmEventTraceDripsAccountingSnapshot
PpmEventTraceExpectedUtility
PpmEventTraceFailedPerfCheckStart
PpmEventTraceLPIState
PpmEventTraceLatencySensitivityHint
PpmEventTraceMakeupPerfCheck
PpmEventTracePlatformIdleAccounting
PpmEventTraceProcessorIdle
PpmEventTraceProcessorIdleAccounting
PpmEventTraceProcessorState
PpmExecutePolicySettingsChange
PpmFireWmiEvent
PpmGetExitSamplingCountdown
PpmGetHypervisorState
PpmGetPlatformIdleDurationHint
PpmGetPlatformSelectionVetoCounts
PpmGetThroughputInfoCallback
PpmIdleCompleteExitLatencyTrace
PpmIdleDefaultCancel
PpmIdleDefaultComplete
PpmIdleDefaultExecute
PpmIdleDefaultInitiateWake
PpmIdleDefaultIsHalted
PpmIdleDefaultPrepare
PpmIdleEvaluateConstraints
PpmIdleExecuteTransition
PpmIdleGuestExecute
PpmIdleGuestPrepare
PpmIdleInitializeConcurrency
PpmIdleInstallConcurrency
PpmIdleInstallDefaultStates
PpmIdlePolicySettingCallback
PpmIdlePrepare
PpmIdleRegisterDefaultStates
PpmIdleRemoveConcurrency
PpmIdleSelectStates
PpmIdleSnapConcurrency
PpmIdleSnapConcurrencyIdleTime
PpmIdleUpdateConcurrency
PpmIdleUpdateHvStates
PpmInitIdlePolicy
PpmInitIllegalThrottleLogging
PpmInstallFeedbackCounters
PpmInstallNewIdleDomains
PpmInstallNewIdleStates
PpmInstallPlatformIdleStates
PpmParkApplyForcedMask
PpmParkApplyPolicy
PpmParkCalculateCoreParkingMask
PpmParkCalculateUnparkCount
PpmParkChooseCoresToUnpark
PpmParkClearForcedMask
PpmParkComputeDiff
PpmParkDistributeUtility
PpmParkMaximumCoresParked
PpmParkParkingAvailable
PpmParkRecordNodeStatistics
PpmParkRegisterParking
PpmParkReportParkedCore
PpmParkReportParkedCores
PpmParkReportUnparkedCore
PpmParkReportUnparkedCores
PpmParkSetLpiCap
PpmParkSteerInterrupts
PpmParkUpdateConcurrencyTracking
PpmPerfAction
PpmPerfAllocateHistory
PpmPerfApplyDomainState
PpmPerfApplyDomainStates
PpmPerfApplyLatencyHints
PpmPerfApplyProcessorState
PpmPerfApplyProcessorStates
PpmPerfCalculateMinMaxStates
PpmPerfCheckForIllegalProcessorThrottle
PpmPerfClearMaximumOverride
PpmPerfCommitPerformance
PpmPerfComputePerfReductionTolerance
PpmPerfControlActionCallback
PpmPerfControlExecuteAction
PpmPerfDisableBootOverride
PpmPerfDisableBootOverrideWorker
PpmPerfFeedbackCounterRead
PpmPerfForceDomainStates
PpmPerfGetCurrentState
PpmPerfLatencySensitivityHintWorker
PpmPerfMinimumPerfReached
PpmPerfPolicySettingCallback
PpmPerfQueueAction
PpmPerfReApplyStates
PpmPerfReadFeedback
PpmPerfRegisterHvCap
PpmPerfRegisterHvStates
PpmPerfRemoveMaximumOverride
PpmPerfSelectDomainState
PpmPerfSelectDomainStates
PpmPerfSelectProcessorState
PpmPerfSelectProcessorStates
PpmPerfSetMaximumOverride
PpmPerfSnapUtility
PpmPerfUpdateDomains
PpmQueryPlatformStateResidency
PpmQueryTime
PpmRegisterPerfCap
PpmRegisterPerfStates
PpmReleaseLock
PpmRemoveIdleStates
PpmResetDripsAccountingSnapshot
PpmResetIdlePolicy
PpmResetPerfTimes
PpmResetPlatformIdleAccounting
PpmResetProcessorIdleAccounting
PpmScaleIdleStateValues
PpmSetExitLatencySamplingPercentage
PpmSetSimulatedIdle
PpmSetSimulatedLoad
PpmSnapDripsAccountingSnapshot
PpmSnapPerformanceAccumulation
PpmStartIllegalProcessorThrottleLogging
PpmStopIllegalProcessorThrottleLogging
PpmTestAndLockProcessors
PpmTraceExitLatency
PpmTracePerfIdleRundown
PpmTranslateIdleAccounting
PpmTranslatePlatformIdleAccounting
PpmTryAcquireLock
PpmUnlockProcessors
PpmUpdateIdleDomains
PpmUpdateIdleStates
PpmUpdateIdleStatesInplace
PpmUpdateIdleVeto
PpmUpdatePerfBoostPolicy
PpmUpdatePerfBoostPolicyCallback
PpmUpdatePerformanceFeedback
PpmUpdatePlatformIdleAccounting
PpmUpdatePlatformIdleVeto
PpmUpdateProcessorIdleVeto
PpmUpdateTimeAccumulation
PpmWmiDispatch
PpmWmiFireIdleAccountingEvent
PpmWmiGetAllData
PpmWmiIdleAccountingProcedure
PpmWmiIdleAccountingWork
PpmWmiRegisterInfo
PpvUtilCallAddDevice
PpvUtilFailDriver
PpvUtilIsHardwareBeingVerified
PpvUtilIsPdo
PpvUtilTestStartedPdoStack
ProbeForRead
ProbeForWrite
ProducerConsumerBufferComplete
ProducerConsumerCopyFromContextBuffer
ProducerConsumerCopyToContextBuffer
ProducerGetBuffer
PromoteNode
PropertyEval
PsAcquireProcessExitSynchronization
PsAssignImpersonationToken
PsBoostThreadIo
PsBoostThreadIoEx
PsBootPhaseComplete
PsCallImageNotifyRoutines
PsCaptureExceptionPort
PsCaptureUserProcessParameters
PsChangeQuantumTable
PsChargePoolQuota
PsChargeProcessNonPagedPoolQuota
PsChargeProcessPagedPoolQuota
PsChargeProcessPoolQuota
PsChargeProcessQuota
PsChargeProcessWakeCounter
PsChargeSharedPoolQuota
PsConvertToGuiThread
PsCreateSystemThread
PsCreateSystemThreadEx
PsDereferenceImpersonationToken
PsDereferenceKernelStack
PsDereferencePrimaryToken
PsDisableImpersonation
PsEnterPriorityRegion
PsEnumProcessThreads
PsEnumProcesses
PsEstablishWin32Callouts
PsFreezeProcess
PsGetAllocatedFullProcessImageName
PsGetContextThread
PsGetCurrentProcess
PsGetCurrentProcessId
PsGetCurrentProcessSessionId
PsGetCurrentProcessWin32Process
PsGetCurrentProcessWow64Process
PsGetCurrentThread
PsGetCurrentThreadId
PsGetCurrentThreadPreviousMode
PsGetCurrentThreadProcess
PsGetCurrentThreadProcessId
PsGetCurrentThreadStackBase
PsGetCurrentThreadStackLimit
PsGetCurrentThreadTeb
PsGetCurrentThreadWin32Thread
PsGetCurrentThreadWin32ThreadAndEnterCriticalRegion
PsGetDefaultWsMaximum
PsGetJobLock
PsGetJobSessionId
PsGetJobUIRestrictionsClass
PsGetNextProcess
PsGetNextProcessThread
PsGetProcessCommonJob
PsGetProcessCreateTimeQuadPart
PsGetProcessDebugPort
PsGetProcessExitProcessCalled
PsGetProcessExitStatus
PsGetProcessExitTime
PsGetProcessId
PsGetProcessImageFileName
PsGetProcessInheritedFromUniqueProcessId
PsGetProcessJob
PsGetProcessPeb
PsGetProcessPriorityClass
PsGetProcessProtection
PsGetProcessSectionBaseAddress
PsGetProcessSecurityPort
PsGetProcessSessionId
PsGetProcessSessionIdEx
PsGetProcessSignatureLevel
PsGetProcessWin32Process
PsGetProcessWin32WindowStation
PsGetProcessWow64Process
PsGetThreadExitStatus
PsGetThreadFreezeCount
PsGetThreadHardErrorsAreDisabled
PsGetThreadId
PsGetThreadProcess
PsGetThreadProcessId
PsGetThreadSessionId
PsGetThreadTeb
PsGetThreadWin32Thread
PsGetVersion
PsImpersonateClient
PsInitSystem
PsInitializeFullProcessImageName
PsInitializeQuotaSystem
PsInsertVirtualizedTimer
PsInvokeWin32Callout
PsIsCurrentThreadPrefetching
PsIsDiskCountersEnabled
PsIsProcessBeingDebugged
PsIsProtectedProcess
PsIsProtectedProcessLight
PsIsSystemProcess
PsIsSystemThread
PsIsSystemWideMitigationOptionSet
PsIsThreadImpersonating
PsIsThreadTerminating
PsLeavePriorityRegion
PsLocateSystemDlls
PsLookupProcessByProcessId
PsLookupProcessThreadByCid
PsLookupThreadByThreadId
PsMapSystemDlls
PsOpenProcess
PsOpenThread
PsQueryCpuQuotaInformation
PsQueryFullProcessImageName
PsQueryProcessAttributesByToken
PsQueryProcessCommandLine
PsQueryProcessExceptionFlags
PsQueryRuntimeProcess
PsQuerySectionSignatureInformation
PsQueryStatisticsProcess
PsQuerySystemDllInfo
PsQueryThreadStartAddress
PsQueryThreadTerminationPort
PsQueryTotalCycleTimeProcess
PsQuitNextProcess
PsReferenceEffectiveToken
PsReferenceImpersonationToken
PsReferenceImpersonationTokenEx
PsReferenceKernelStack
PsReferencePrimaryToken
PsReferenceProcessFilePointer
PsReleaseProcessExitSynchronization
PsReleaseProcessWakeCounter
PsRemoveCreateThreadNotifyRoutine
PsRemoveLoadImageNotifyRoutine
PsRemoveVirtualizedTimer
PsReportProcessMemoryLimitViolation
PsRestoreImpersonation
PsResumeProcess
PsResumeThread
PsReturnPoolQuota
PsReturnProcessNonPagedPoolQuota
PsReturnProcessPageFileQuota
PsReturnProcessPagedPoolQuota
PsReturnProcessQuota
PsReturnSharedPoolQuota
PsRevertThreadToSelf
PsRevertToSelf
PsRevertToUserPagePriorityThread
PsSetContextThread
PsSetCpuQuotaInformation
PsSetCreateProcessNotifyRoutine
PsSetCreateProcessNotifyRoutineEx
PsSetCreateThreadNotifyRoutine
PsSetCurrentThreadPrefetching
PsSetLegoNotifyRoutine
PsSetLoadImageNotifyRoutine
PsSetProcessHandleTracingInformation
PsSetProcessPriorityByClass
PsSetProcessPriorityClass
PsSetProcessSecurityPort
PsSetProcessWin32Process
PsSetProcessWindowStation
PsSetSystemPagePriorityThread
PsSetThreadHardErrorsAreDisabled
PsSetThreadWin32Thread
PsShutdownSystem
PsSuspendProcess
PsSuspendThread
PsSwapImpersonationToken
PsSwapProcessWorkingSet
PsSynchronizeWithThreadInsertion
PsTerminateProcess
PsTerminateSystemThread
PsThawProcess
PsTransferProcessQuotaToSharedQuota
PsUpdateActiveProcessAffinity
PsUpdateDiskCounters
PsWaitForAllProcesses
PsWatchWorkingSet
PsWrapApcWow64Thread
PspAddProcessToJobChain
PspAddProcessToWorkingSetChangeList
PspAdjustKeepAliveCountProcess
PspAllocateAndQueryNotificationChannel
PspAllocateCpuRateControl
PspAllocateProcess
PspAllocateThread
PspApplyIFEOPerfOptions
PspApplyJobLimitsToProcess
PspApplyMitigationOptions
PspApplyWorkingSetLimits
PspApplyWorkingSetLimitsToProcess
PspAssignPrimaryToken
PspAssignProcessQuotaBlock
PspAssignProcessToJob
PspAssociateCompletionPortCallback
PspAttachSession
PspAttachThreadToUmsCompletionList
PspBindProcessSessionToJob
PspBoostJobIoPriorityCallback
PspBuildCreateProcessContext
PspCallJobHierarchyCallbacks
PspCaptureAndValidateUnicodeString
PspCaptureCreateInfo
PspCaptureProcessParameters
PspCaptureUserProcessParameters
PspCatchCriticalBreak
PspChangeJobMemoryUsageByProcess
PspChangeProcessExecutionState
PspChargeJobWakeCounter
PspChargeQuota
PspCheckConditionalWakeCharge
PspCheckForInvalidAccessByProtection
PspCheckJobAccessState
PspClearProcessThreadCidRefs
PspComputeQuantum
PspComputeQuantumAndPriority
PspComputeReportWakeFilter
PspCopyAndFixupParameters
PspCopyUnicodeString
PspCreateObjectHandle
PspCreatePicoProcess
PspCreatePicoThread
PspCreateProcess
PspCreateThread
PspDeleteCreateProcessContext
PspDeleteKernelStack
PspDeleteLdt
PspDeleteThreadSecurity
PspDereferenceQuotaBlock
PspDetachSession
PspDetachThreadFromUmsCompletionList
PspDetectComplusILImage
PspDfssConfigurationChangeHandler
PspDisassociateUmsThreadFromPrimary
PspEnableProcessTimerVirtualization
PspEnableProcessWakeCounters
PspEnableTimerVirtualization
PspEnableWakeCounters
PspEnforceLimits
PspEnforceLimitsJobPostCallback
PspEnforceLimitsJobPreCallback
PspEnforceLimitsProcessCallback
PspEnumJobsAndProcessesInJobHierarchy
PspEnumProcessesInJobHierarchy
PspEnumerateCallback
PspEstablishJobHierarchy
PspEvaluateAndNotifyEmptyJob
PspExecuteJobFreezeThawCallback
PspExitProcess
PspExitThread
PspExpandLimit
PspExpandQuota
PspFindThreadForTeb
PspFoldProcessAccountingIntoJob
PspFreeCpuRateControl
PspFreezeJobTree
PspFreezeProcessWorker
PspGetContext
PspGetContextThreadInternal
PspGetEffectiveNoWakeCharge
PspGetJobAssignmentDisposition
PspGetJobLockHierarchyForDeletion
PspGetNextChildJob
PspGetNextJob
PspGetNextJobProcess
PspGetPicoProcessContext
PspGetPicoThreadContext
PspGetPreviousProcessThread
PspGetProcessInJobHierarchyCallback
PspGetSetContextInternal
PspGetSetContextSpecialApc
PspGetStandardHandleList
PspHandleTableWalker
PspHardenMitigationOptions
PspHashKeyValue
PspImplicitAssignProcessToJob
PspInheritMitigationOptions
PspInheritQuota
PspInitPhase0
PspInitPhase1
PspInitializeJobStructures
PspInitializeProcessSecurity
PspInitializeProtectedProcessParameters
PspInitializeQuotaBlock
PspInitializeQuotaExpansionDescriptor
PspInitializeSystemDlls
PspInitializeThunkContext
PspInsertExpansionEntry
PspInsertProcess
PspInsertThread
PspIoMiniPacketCallbackRoutine
PspIsDfssEnabled
PspIsProcessInJob
PspJobClose
PspJobCycleTimeNotificationDpcRoutine
PspJobDelete
PspJobNotificationWorker
PspJobTimeLimitsWork
PspLocateInPEManifest
PspLocateSystemDll
PspLockJobChain
PspLockJobsAndProcessExclusive
PspLockQuotaExpansion
PspLookupProcessQuotaBlock
PspMapSystemDll
PspNotificationPacketCallback
PspNotifyEmptyJobsInJobChain
PspPrepareSystemDllInitBlock
PspProcessClose
PspProcessDelete
PspProcessOpen
PspProcessRundownWorker
PspProcessRundownWorkerSingle
PspQueryCpuRateHistory
PspQueryDescriptorThread
PspQueryJobHierarchyAccountingInformation
PspQueryJobHierarchyInterferenceCount
PspQueryJobHierarchyProcessIdList
PspQueryLastCallThread
PspQueryLdtInformation
PspQueryPooledQuotaLimits
PspQueryProcessAccountingInformationCallback
PspQueryProcessIdListCallback
PspQueryProcessInterferenceCountCallback
PspQueryQuotaLimits
PspQueryWorkingSetWatch
PspQueueApcSpecialApc
PspReadDfssConfigurationValues
PspReadIFEOMitigationOptions
PspReadIFEONodeOptions
PspReadIFEOPerfOptions
PspReadUserQuotaLimits
PspReaper
PspReferenceCidTableEntry
PspReferenceTokenForNewProcess
PspReleaseReturnedQuota
PspRelinquishUmsThreadSpecialApc
PspRemoveCpuRateControl
PspRemoveProcessFromJobChain
PspRemoveQuotaBlock
PspRequestDeferredJobNotification
PspReturnQuota
PspReturnResourceQuota
PspRundownProcess
PspRundownSingleProcess
PspRundownUmsThreadForApcDelivery
PspSafeReferenceQuotaBlock
PspSanitizeResourceLimits
PspScheduleEnforcementWorker
PspSelectNodeForProcess
PspSendJobNotification
PspSendNoWakeChargeLimitNotification
PspSendProcessNotificationToJobChain
PspSendReliableJobNotification
PspSendWakeNotification
PspSetAffinityLimitCallback
PspSetBackgroundJobTree
PspSetContext
PspSetContextThreadInternal
PspSetCpuRateControlJobPostCallback
PspSetCpuRateControlJobPreCallback
PspSetCreateProcessNotifyRoutine
PspSetEffectiveJobLimits
PspSetEffectiveLimit
PspSetJobBackgroundCountCallback
PspSetJobFreezeCountCallback
PspSetJobLimitsJobPostCallback
PspSetJobLimitsJobPreCallback
PspSetJobLimitsProcessCallback
PspSetJobNotificationCountCallback
PspSetJobTimeLimitCallback
PspSetLdtInformation
PspSetLdtSize
PspSetProcessAffinitySafe
PspSetProcessAffinityUpdateMode
PspSetProcessBackgroundCountCallback
PspSetProcessFreezeStateCallback
PspSetProcessIoHandlers
PspSetProcessPriorityClass
PspSetProcessSchedulingGroup
PspSetQuotaLimits
PspSetUmsThreadContext
PspSetupUserProcessAddressSpace
PspSinglePrivCheck
PspSortHandleList
PspSubtractAccountingValues
PspSwapSystemDll
PspSystemThreadStartup
PspTerminateAllProcessesInJobHierarchy
PspTerminateAllThreads
PspTerminateProcess
PspTerminateProcessesJobCallback
PspTerminateThreadByPointer
PspThreadDelete
PspThreadOpen
PspUmsInitThread
PspUmsInitializeContext
PspUmsUnInitThread
PspUnlinkJobProcess
PspUnlockJobChain
PspUnlockJobsAndProcessExclusive
PspUnlockQuotaExpansion
PspUpdateCreateInfo
PspUpdateSingleProcessAffinity
PspUserApcReserveKernelRoutine
PspUserApcReserveRundownRoutine
PspUserThreadStartup
PspValidateEnvironmentBlock
PspValidateJobAffinityState
PspValidateJobLimitsDuringAssignment
PspValidateMitigationOptions
PspWow64CopyUnicodeString
PspWow64CurrentPeb
PspWow64GetContextThreadOnAmd64
PspWow64InitThread
PspWow64ReadOrWriteThreadCpuArea
PspWow64SetContextThreadOnAmd64
PspWow64SetupUserProcessAddressSpace
PspWow64ThunkProcessParameters
PspWritePebAffinityInfo
PspWriteTebIdealProcessor
PspWriteTebImpersonationInfo
RamdiskStart
RaspAddCacheEntry
RaspAllocateMemory
RaspAntiAlias
RaspClearCache
RaspConvertDeltas
RaspCreatePointList
RaspCreateSegmentList
RaspDestroyCachedBitmap
RaspDestroySegmentList
RaspFreeMemory
RaspGetCacheEntry
RaspGetCompositeGlyphList
RaspGetUnscaledGlyphData
RaspGetXExtent
RaspInitializeCompositeGlyphData
RaspInitializeGlyphData
RaspInterpolatePoint
RaspLoadBearings
RaspLoadCompositeGlyphData
RaspLoadEmptyGlyph
RaspLoadGlyphData
RaspMapGlyphIndexToLocation
RaspRasterize
RaspRectangleCreate
RaspRectangleDestroy
RaspScaleCoordinates
RaspScanConvert
RaspTestIntersection
RawCheckForDeleteVolume
RawCleanup
RawCleanupVcb
RawClose
RawCompletionRoutine
RawComputeFileSystemInformationChecksum
RawCreate
RawDeleteVcb
RawDispatch
RawFileSystemControl
RawInitialize
RawInitializeVcb
RawInitiateDeleteVolume
RawMountVolume
RawPerformDevIoCtrl
RawQueryFileSystemInformation
RawQueryFsDeviceInfo
RawQueryFsSizeInfo
RawQueryFsVolumeInfo
RawQueryInformation
RawQueryVolumeInformation
RawReadWriteDeviceControl
RawScanDeletedList
RawSetInformation
RawShutdown
RawUnload
RawUserFsCtrl
RawVerifyVolume
RcConsolidateFrames
RcFrameConsolidation
ReadAMDMsr
RealPredecessor
RealSuccessor
RebalanceNode
ReferenceVacbLevel
RemoveListEntryPte
RemoveListHeadPte
ResFwBackgroundTransition
ResFwConfigureDisplayStringResources
ResFwFindMessage
ResFwFreeContext
ResFwGetContext
ResFwpPageInBackground
ResFwpPageOutBackground
RotBarInit
RotBarUpdate
RtlAbsoluteToSelfRelativeSD
RtlAcquirePrivilege
RtlAddAccessAllowedAce
RtlAddAccessAllowedAceEx
RtlAddAccessDeniedAceEx
RtlAddAce
RtlAddAtomToAtomTable
RtlAddAtomToAtomTableEx
RtlAddAuditAccessAce
RtlAddMandatoryAce
RtlAddProcessTrustLabelAce
RtlAddRange
RtlAddResourceAttributeAce
RtlAddressInSectionTable
RtlAllocateAndInitializeSid
RtlAllocateHeap
RtlAnsiCharToUnicodeChar
RtlAnsiStringToUnicodeString
RtlAppendAsciizToString
RtlAppendStringToString
RtlAppendUnicodeStringToString
RtlAppendUnicodeToString
RtlAreAllAccessesGranted
RtlAreAnyAccessesGranted
RtlAreBitsClear
RtlAreBitsClearEx
RtlAreBitsSet
RtlAreBitsSetEx
RtlAreNamesEqual
RtlAssert
RtlAvlInsertNodeEx
RtlAvlRemoveNode
RtlBackoff
RtlCaptureContext
RtlCaptureImageExceptionValues
RtlCaptureStackBackTrace
RtlCharToInteger
RtlCheckPortableOperatingSystem
RtlCheckRegistryKey
RtlCheckTokenCapability
RtlCheckTokenMembership
RtlCheckTokenMembershipEx
RtlClearAllBits
RtlClearAllBitsEx
RtlClearBit
RtlClearBits
RtlClearBitsEx
RtlCmDecodeMemIoResource
RtlCmEncodeMemIoResource
RtlCompareAltitudes
RtlCompareMemory
RtlCompareMemoryUlong
RtlCompareString
RtlCompareUnicodeString
RtlCompareUnicodeStrings
RtlCompressBuffer
RtlCompressBufferLZNT1
RtlCompressBufferProgress
RtlCompressBufferXpressHuff
RtlCompressBufferXpressHuffMax
RtlCompressBufferXpressHuffStandard
RtlCompressBufferXpressLz
RtlCompressBufferXpressLzMax
RtlCompressBufferXpressLzStandard
RtlCompressChunks
RtlCompressWorkSpaceSizeLZNT1
RtlCompressWorkSpaceSizeXpressHuff
RtlCompressWorkSpaceSizeXpressLz
RtlComputeCrc32
RtlComputeLfnChecksum
RtlComputeReciprocal
RtlContractHashTable
RtlConvertSidToUnicodeString
RtlCopyBitMap
RtlCopyLuid
RtlCopyLuidAndAttributesArray
RtlCopyMemoryNonTemporal
RtlCopyRangeList
RtlCopySid
RtlCopySidAndAttributesArray
RtlCopyString
RtlCopyUnicodeString
RtlCrc32
RtlCrc64
RtlCreateAcl
RtlCreateAtomTable
RtlCreateAtomTableEx
RtlCreateHashTable
RtlCreateHashTableEx
RtlCreateHeap
RtlCreateInvertedFunctionTableCacheEntry
RtlCreateRegistryKey
RtlCreateSecurityDescriptor
RtlCreateSystemVolumeInformationFolder
RtlCreateUnicodeString
RtlCreateUnicodeStringFromAsciiz
RtlCreateUserProcess
RtlCreateUserStack
RtlCreateUserThread
RtlCultureNameToLCID
RtlCustomCPToUnicodeN
RtlCutoverTimeToSystemTime
RtlDecompressBuffer
RtlDecompressBufferEx
RtlDecompressBufferLZNT1
RtlDecompressBufferProgress
RtlDecompressBufferXpressHuff
RtlDecompressBufferXpressHuffProgress
RtlDecompressBufferXpressLz
RtlDecompressBufferXpressLzProgress
RtlDecompressChunks
RtlDecompressFragment
RtlDecompressFragmentLZNT1
RtlDecompressFragmentNS
RtlDelete
RtlDeleteAce
RtlDeleteAtomFromAtomTable
RtlDeleteElementGenericTable
RtlDeleteElementGenericTableAvl
RtlDeleteElementGenericTableAvlEx
RtlDeleteHashTable
RtlDeleteNoSplay
RtlDeleteOwnersRanges
RtlDeleteRange
RtlDeleteRegistryValue
RtlDereferenceAtomTable
RtlDescribeChunk
RtlDescribeChunkLZNT1
RtlDescribeChunkNS
RtlDestroyAtomTable
RtlDestroyHeap
RtlDestroyLowBoxAtoms
RtlDispatchException
RtlDissectName
RtlDoesNameContainWildCards
RtlDowncaseUnicodeChar
RtlDowncaseUnicodeString
RtlDuplicateUnicodeString
RtlEmptyAtomTable
RtlEndEnumerationHashTable
RtlEndWeakEnumerationHashTable
RtlEnlargedUnsignedDivide
RtlEnoughStackSpaceForStackCapture
RtlEnumerateBoundaryDescriptorEntries
RtlEnumerateEntryHashTable
RtlEnumerateGenericTable
RtlEnumerateGenericTableAvl
RtlEnumerateGenericTableLikeADirectory
RtlEnumerateGenericTableWithoutSplaying
RtlEnumerateGenericTableWithoutSplayingAvl
RtlEqualLuid
RtlEqualPrefixSid
RtlEqualSid
RtlEqualString
RtlEqualUnicodeString
RtlEqualWnfChangeStamps
RtlEthernetAddressToStringA
RtlEthernetAddressToStringW
RtlEthernetStringToAddressA
RtlEthernetStringToAddressW
RtlExpandHashTable
RtlExtendedMagicDivide
RtlExtractBitMap
RtlFillMemory
RtlFindAceBySid
RtlFindAceByType
RtlFindClearBits
RtlFindClearBitsAndSet
RtlFindClearBitsAndSetEx
RtlFindClearRuns
RtlFindClearRunsEx
RtlFindClosestEncodableLength
RtlFindFirstRunClear
RtlFindLastBackwardRunClear
RtlFindLeastSignificantBit
RtlFindLongestRunClear
RtlFindLongestRunClearCapped
RtlFindLongestRunClearEx
RtlFindMessage
RtlFindMessageInTable
RtlFindMostSignificantBit
RtlFindNextAlignedForwardRunClear
RtlFindNextAlignedForwardRunClearEx
RtlFindNextForwardRunClear
RtlFindNextForwardRunClearCapped
RtlFindNextForwardRunClearCappedEx
RtlFindNextForwardRunClearEx
RtlFindRange
RtlFindSetBits
RtlFindSetBitsAndClear
RtlFindSetBitsAndClearEx
RtlFindSetBitsEx
RtlFindUnicodePrefix
RtlFirstFreeAce
RtlFnToFxFrame
RtlFormatCurrentUserKeyPath
RtlFormatMessage
RtlFormatMessageEx
RtlFreeAnsiString
RtlFreeHeap
RtlFreeOemString
RtlFreeRangeList
RtlFreeUnicodeString
RtlFreeUserStack
RtlFxToFnFrame
RtlGUIDFromString
RtlGenerate8dot3Name
RtlGenerateClass5Guid
RtlGetAce
RtlGetAppContainerNamedObjectPath
RtlGetAppContainerParent
RtlGetAppContainerSidType
RtlGetCallersAddress
RtlGetCompressionWorkSpaceSize
RtlGetControlSecurityDescriptor
RtlGetDaclSecurityDescriptor
RtlGetDefaultCodePage
RtlGetElementGenericTable
RtlGetElementGenericTableAvl
RtlGetEnabledExtendedFeatures
RtlGetExtendedContextLength
RtlGetFirstRange
RtlGetGroupSecurityDescriptor
RtlGetIntegerAtom
RtlGetInterruptTimePrecise
RtlGetLastRange
RtlGetNextEntryHashTable
RtlGetNextRange
RtlGetNtGlobalFlags
RtlGetNtProductType
RtlGetOwnerSecurityDescriptor
RtlGetProductInfo
RtlGetSaclSecurityDescriptor
RtlGetSetBootStatusData
RtlGetSystemTimePrecise
RtlGetThreadLangIdByIndex
RtlGetUmsContextExtendedSize
RtlGetVersion
RtlGuardIsValidStackPointer
RtlGuardIsValidWow64StackPointer
RtlHashUnicodeString
RtlIdentifierAuthoritySid
RtlIdnToAscii
RtlIdnToNameprepUnicode
RtlIdnToUnicode
RtlImageDirectoryEntryToData
RtlImageNtHeader
RtlImageNtHeaderEx
RtlImpersonateSelfEx
RtlInitAnsiString
RtlInitAnsiStringEx
RtlInitCodePageTable
RtlInitEnumerationHashTable
RtlInitNlsTables
RtlInitString
RtlInitTickLock
RtlInitUnicodeString
RtlInitUnicodeStringEx
RtlInitWeakEnumerationHashTable
RtlInitializeBitMap
RtlInitializeExceptionLog
RtlInitializeExtendedContext
RtlInitializeGenericTable
RtlInitializeGenericTableAvl
RtlInitializeHistoryTable
RtlInitializeRangeList
RtlInitializeSid
RtlInitializeUnicodePrefix
RtlInsertDynamicFunctionTable
RtlInsertElementGenericTable
RtlInsertElementGenericTableAvl
RtlInsertElementGenericTableFull
RtlInsertElementGenericTableFullAvl
RtlInsertEntryHashTable
RtlInsertInvertedFunctionTable
RtlInsertUnicodePrefix
RtlInt64ToUnicodeString
RtlIntegerToChar
RtlIntegerToUnicode
RtlIntegerToUnicodeString
RtlInterlockedClearBitRun
RtlInterlockedClearBitRunEx
RtlInterlockedPopEntrySList
RtlInterlockedSetBitRun
RtlInterlockedSetBitRunEx
RtlInterlockedSetClearBits
RtlInterlockedSetClearRun
RtlInterlockedSetClearRunEx
RtlInvertRangeList
RtlInvertRangeListEx
RtlIoDecodeMemIoResource
RtlIoEncodeMemIoResource
RtlIpv4AddressToStringA
RtlIpv4AddressToStringExA
RtlIpv4AddressToStringExW
RtlIpv4AddressToStringW
RtlIpv4StringToAddressA
RtlIpv4StringToAddressExA
RtlIpv4StringToAddressExW
RtlIpv4StringToAddressW
RtlIpv6AddressToStringA
RtlIpv6AddressToStringExA
RtlIpv6AddressToStringExW
RtlIpv6AddressToStringW
RtlIpv6StringToAddressA
RtlIpv6StringToAddressExA
RtlIpv6StringToAddressExW
RtlIpv6StringToAddressW
RtlIsCapabilitySid
RtlIsGenericTableEmpty
RtlIsGenericTableEmptyAvl
RtlIsNameInExpression
RtlIsNameLegalDOS8Dot3
RtlIsNormalizedString
RtlIsNtDdiVersionAvailable
RtlIsPackageSid
RtlIsParentOfChildAppContainer
RtlIsRangeAvailable
RtlIsServicePackVersionInstalled
RtlIsUntrustedObject
RtlIsValidOemCharacter
RtlIsValidProcessTrustLabelSid
RtlLCIDToCultureName
RtlLargeIntegerToChar
RtlLargeIntegerToUnicode
RtlLengthRequiredSid
RtlLengthSecurityDescriptor
RtlLengthSid
RtlLengthSidAsUnicodeString
RtlLoadString
RtlLocalTimeToSystemTime
RtlLockBootStatusData
RtlLookupAtomInAtomTable
RtlLookupElementGenericTable
RtlLookupElementGenericTableAvl
RtlLookupElementGenericTableFull
RtlLookupElementGenericTableFullAvl
RtlLookupEntryHashTable
RtlLookupExceptionHandler
RtlLookupFirstMatchingElementGenericTableAvl
RtlLookupFunctionEntry
RtlLookupFunctionEntryEx
RtlLookupFunctionTable
RtlMakeSelfRelativeSD
RtlMapGenericMask
RtlMapSecurityErrorToNtStatus
RtlMarkExceptionHandlingPages
RtlMarkHiberPhase
RtlMergeBitMaps
RtlMergeBitMapsEx
RtlMergeRangeLists
RtlMultiByteToUnicodeN
RtlMultiByteToUnicodeSize
RtlNextUnicodePrefix
RtlNormalizeString
RtlNtStatusToDosError
RtlNtStatusToDosErrorNoTeb
RtlNumberGenericTableElements
RtlNumberGenericTableElementsAvl
RtlNumberOfClearBits
RtlNumberOfClearBitsInRange
RtlNumberOfSetBits
RtlNumberOfSetBitsEx
RtlNumberOfSetBitsInRange
RtlNumberOfSetBitsUlongPtr
RtlOemStringToCountedUnicodeString
RtlOemStringToUnicodeString
RtlOemToUnicodeN
RtlOpenCurrentUser
RtlOwnerAcesPresent
RtlPcToFileHeader
RtlPcToFileName
RtlPcToFilePath
RtlPinAtomInAtomTable
RtlPrefetchMemoryNonTemporal
RtlPrefixString
RtlPrefixUnicodeString
RtlQueryAtomInAtomTable
RtlQueryAtomsInAtomTable
RtlQueryDynamicTimeZoneInformation
RtlQueryElevationFlags
RtlQueryImageFileKeyOption
RtlQueryInformationAcl
RtlQueryModuleInformation
RtlQueryPackageIdentity
RtlQueryPackageIdentityEx
RtlQueryRegistryValues
RtlQueryRegistryValuesEx
RtlQueryTimeZoneInformation
RtlQueryValidationRunlevel
RtlRaiseException
RtlRaiseStatus
RtlRandom
RtlRandomEx
RtlRbInsertNodeEx
RtlRbRemoveNode
RtlRbReplaceNode
RtlReadAcquireTickLock
RtlRealPredecessor
RtlRealSuccessor
RtlReleasePrivilege
RtlRemoveDynamicFunctionTable
RtlRemoveEntryHashTable
RtlRemoveInvertedFunctionTable
RtlRemoveUnicodePrefix
RtlReplaceSidInSd
RtlReserveChunk
RtlReserveChunkLZNT1
RtlReserveChunkNS
RtlResetRtlTranslations
RtlRestoreContext
RtlRunOnceBeginInitialize
RtlRunOnceComplete
RtlRunOnceExecuteOnce
RtlRunOnceInitialize
RtlScrubMemory
RtlSecondsSince1970ToTime
RtlSecondsSince1980ToTime
RtlSectionTableFromVirtualAddress
RtlSelfRelativeToAbsoluteSD
RtlSelfRelativeToAbsoluteSD2
RtlSetActiveTimeBias
RtlSetAllBits
RtlSetAllBitsEx
RtlSetBit
RtlSetBits
RtlSetBitsEx
RtlSetControlSecurityDescriptor
RtlSetDaclSecurityDescriptor
RtlSetDynamicTimeZoneInformation
RtlSetGroupSecurityDescriptor
RtlSetOwnerSecurityDescriptor
RtlSetPortableOperatingSystem
RtlSetSaclSecurityDescriptor
RtlSetTimeZoneInformation
RtlSidDominates
RtlSidDominatesForTrust
RtlSidHashInitialize
RtlSidHashLookup
RtlSizeHeap
RtlSparseBitmapCtxAllocateRange
RtlSparseBitmapCtxFindNextBitInternal
RtlSparseBitmapCtxInitializeRange
RtlSparseBitmapCtxStart
RtlSparseBitmapCtxUpdateBitRanges
RtlSplay
RtlStackTraceHashFunction
RtlStdInitializeStackDatabase
RtlStdLogStackTrace
RtlStdReleaseStackTrace
RtlStringCbCatExA
RtlStringCbCatW
RtlStringCbCopyA
RtlStringCbCopyExA
RtlStringCbCopyExW
RtlStringCbCopyNExW
RtlStringCbCopyNW
RtlStringCbCopyUnicodeString
RtlStringCbCopyW
RtlStringCbLengthW
RtlStringCbPrintfA
RtlStringCbPrintfExA
RtlStringCbPrintfExW
RtlStringCbPrintfW
RtlStringCbVPrintfA
RtlStringCchCatExW
RtlStringCchCatNW
RtlStringCchCatW
RtlStringCchCopyExW
RtlStringCchCopyNExW
RtlStringCchCopyNW
RtlStringCchCopyW
RtlStringCchLengthW
RtlStringCchPrintfA
RtlStringCchPrintfExW
RtlStringCchPrintfW
RtlStringFromGUID
RtlStringFromGUIDEx
RtlSubAuthorityCountSid
RtlSubAuthoritySid
RtlSubtreePredecessor
RtlSubtreeSuccessor
RtlSystemTimeToLocalTime
RtlTestBit
RtlTimeFieldsToTime
RtlTimeToElapsedTimeFields
RtlTimeToSecondsSince1970
RtlTimeToSecondsSince1980
RtlTimeToTimeFields
RtlTraceDatabaseAdd
RtlTraceDatabaseCreate
RtlTraceDatabaseDestroy
RtlTraceDatabaseEnumerate
RtlTraceDatabaseFind
RtlTraceDatabaseLock
RtlTraceDatabaseUnlock
RtlTraceDatabaseValidate
RtlUIntAdd
RtlULongAdd
RtlULongLongAdd
RtlULongLongMult
RtlULongLongSub
RtlULongMult
RtlUTF8ToUnicodeN
RtlUnalignedStringCbLengthW
RtlUnalignedStringCchLengthW
RtlUnicodeStringCopy
RtlUnicodeStringCopyStringEx
RtlUnicodeStringInit
RtlUnicodeStringPrintf
RtlUnicodeStringPrintfEx
RtlUnicodeStringToAnsiString
RtlUnicodeStringToCountedOemString
RtlUnicodeStringToInteger
RtlUnicodeStringToOemString
RtlUnicodeToCustomCPN
RtlUnicodeToMultiByteN
RtlUnicodeToMultiByteSize
RtlUnicodeToOemN
RtlUnicodeToUTF8N
RtlUnlockBootStatusData
RtlUnwind
RtlUnwindEx
RtlUpcaseUnicodeChar
RtlUpcaseUnicodeString
RtlUpcaseUnicodeStringToAnsiString
RtlUpcaseUnicodeStringToCountedOemString
RtlUpcaseUnicodeStringToOemString
RtlUpcaseUnicodeToCustomCPN
RtlUpcaseUnicodeToMultiByteN
RtlUpcaseUnicodeToOemN
RtlUpperChar
RtlUpperString
RtlValidAcl
RtlValidRelativeSecurityDescriptor
RtlValidSecurityDescriptor
RtlValidSid
RtlValidateUnicodeString
RtlVerifyVersionInfo
RtlVirtualUnwind
RtlWalkFrameChain
RtlWeaklyEnumerateEntryHashTable
RtlWriteAcquireTickLock
RtlWriteRegistryValue
RtlWriteReleaseTickLock
RtlWriteTryAcquireTickLock
RtlXRestore
RtlXSave
RtlZeroHeap
RtlZeroMemory
RtlpAddIntersectingRanges
RtlpAddKnownAce
RtlpAddRange
RtlpAddToMergedRange
RtlpAllocDeallocQueryBuffer
RtlpAllocateAtom
RtlpAllocateAtomTableEntry
RtlpAllocateHeap
RtlpAllocateSecondLevelDir
RtlpAllocateSecondLevelDirUsingFreeList
RtlpAllowsLowBoxAccess
RtlpAnalyzeHeapFailure
RtlpApplyAclToObject
RtlpAtomMapAtomToHandleEntry
RtlpBreakWithStatusInstruction
RtlpCallQueryRegistryRoutine
RtlpCaptureContext
RtlpCheckDynamicTimeZoneInformation
RtlpCoalesceFreeBlocks
RtlpCombineAcls
RtlpCompareKnownAces
RtlpCompareKnownObjectAces
RtlpComputeCrcInternal
RtlpComputeMergedAcl
RtlpComputeMergedAcl2
RtlpConvertAbsoluteToRelativeSecurityAttribute
RtlpConvertFunctionEntry
RtlpCopyAces
RtlpCopyBitMapTailToHead
RtlpCopyContext
RtlpCopyEffectiveAce
RtlpCopyExtendedContext
RtlpCopyLegacyContext
RtlpCopyLegacyContextAmd64
RtlpCopyLegacyContextArm
RtlpCopyLegacyContextX86
RtlpCopyRangeListEntry
RtlpCopyXStateChunk
RtlpCreateHashTable
RtlpCreateHeapEncoding
RtlpCreateRangeListEntry
RtlpCreateServerAcl
RtlpCreateSplitBlock
RtlpCreateUCREntry
RtlpCreateUserProcess
RtlpCreateUserThreadEx
RtlpDeCommitFreeBlock
RtlpDeleteFromMergedRange
RtlpDeleteRangeListEntry
RtlpDereferenceAtom
RtlpDidUnicodeToOemWork
RtlpExceptionHandler
RtlpExecuteHandlerForException
RtlpExecuteHandlerForUnwind
RtlpExtendHeap
RtlpFillMemoryRandomUp
RtlpFillMemoryWithInverseStride
RtlpFilterSacl
RtlpFindAndCommitPages
RtlpFindEntry
RtlpFindRegTziForCurrentYear
RtlpFindUCREntry
RtlpFreeAllAtom
RtlpFreeAtom
RtlpFreeHandleForAtom
RtlpFreeHeap
RtlpFreeRangeListEntry
RtlpFunctionAddressTableEntry
RtlpGenerateInheritedAce
RtlpGenericInverseCouplingWorker
RtlpGenericMATSPlusWorker
RtlpGenericRandomPatternWorker
RtlpGenericStrideWorker
RtlpGetChainHead
RtlpGetDynamicTimeZoneInfoHandle
RtlpGetNameFromLangInfoNode
RtlpGetNormalization
RtlpGetRegistryHandle
RtlpGetStackLimits
RtlpGetTimeZoneInfoHandle
RtlpGetWindowsPolicy
RtlpHashStringToAtom
RtlpHeapAddListEntry
RtlpHeapExceptionFilter
RtlpHeapFindListLookupEntry
RtlpHeapGenerateRandomValue32
RtlpHeapGenerateRandomValue64
RtlpHeapHandleError
RtlpHeapListCompare
RtlpHeapLogRangeCreate
RtlpHeapLogRangeDestroy
RtlpHeapLogRangeRelease
RtlpHeapLogRangeReserve
RtlpHeapRemoveListEntry
RtlpImageDirectoryEntryToData32
RtlpImageDirectoryEntryToData64
RtlpImageDirectoryEntryToDataEx
RtlpInheritAcl2
RtlpInitNlsFileName
RtlpInitNlsSectionName
RtlpInitializeHandleTableForAtomTable
RtlpInitializeHeapSegment
RtlpInitializeLockAtomTable
RtlpInitializeStackTraceDatabase
RtlpInsertFreeBlock
RtlpInsertStringAtom
RtlpInsertUCRBlock
RtlpInterlockedFlushSList
RtlpInterlockedPopEntrySList
RtlpInterlockedPushEntrySList
RtlpIsALicensedLIPLanguage
RtlpIsALicensedRegularLanguage
RtlpIsDuplicateAce
RtlpIsFrameInBounds
RtlpIsFrameInBoundsEx
RtlpIsNameInExpressionPrivate
RtlpIsRangeAvailable
RtlpLangNameInMultiSzString
RtlpLoadInstallLanguageFallback
RtlpLoadLanguageConfigList
RtlpLoadPolicyLanguageSpec
RtlpLocateRelatedBlocks
RtlpLockAtomTable
RtlpLogExceptionDispatch
RtlpLogExceptionHandler
RtlpLogHeapAllocateEvent
RtlpLogHeapCommit
RtlpLogHeapContractEvent
RtlpLogHeapCreateEvent
RtlpLogHeapDecommit
RtlpLogHeapDestroyEvent
RtlpLogHeapExtendEvent
RtlpLogHeapFailure
RtlpLogHeapFreeEvent
RtlpLookupFunctionEntryForStackWalks
RtlpLookupLowBox
RtlpLookupOrCreateLowBox
RtlpLookupPrimaryFunctionEntry
RtlpLookupUserFunctionTable
RtlpLookupUserFunctionTableInverted
RtlpMakeXpressCallback
RtlpMuiRegAddAlternateCodePage
RtlpMuiRegAddLanguageByName
RtlpMuiRegConfigListAddLanguage
RtlpMuiRegConfigMatchesInstalled
RtlpMuiRegConfigNodePopulate
RtlpMuiRegCreateKernelRegistryInfo
RtlpMuiRegCreateLanguageConfigList
RtlpMuiRegCreateLanguages
RtlpMuiRegCreateRegistryInfo
RtlpMuiRegCreateStringPool
RtlpMuiRegFreeRegistryInfo
RtlpMuiRegGetInstalledLangInfoIndex
RtlpMuiRegGetInstalledLanguageIndex
RtlpMuiRegGetInstalledLanguageIndexByLangId
RtlpMuiRegGetInstalledLanguageIndexByName
RtlpMuiRegGetLangInfoIndex
RtlpMuiRegGetLanguageSpec
RtlpMuiRegGetOrAddLangInfo
RtlpMuiRegGetOrAddString
RtlpMuiRegGetOrAddStringToPool
RtlpMuiRegGetStringIndexInPool
RtlpMuiRegGrowStringPool
RtlpMuiRegLangInfoMatchesSpec
RtlpMuiRegLoadLicInformation
RtlpMuiRegLoadRegistryInfo
RtlpMuiRegResizeLanguageConfigList
RtlpMuiRegResizeLanguages
RtlpMuiRegResizeStringPool
RtlpMuiRegValidateConfigNode
RtlpNameprepAsciiWorker
RtlpNewSecurityObject
RtlpNormalizeStringWorker
RtlpOpenBaseImageFileOptionsKey
RtlpOpenImageFileOptionsKey
RtlpOpenThreadToken
RtlpOwnerAcesPresent
RtlpPopulateContext
RtlpPopulateLanguageConfigList
RtlpPopulateListIndex
RtlpProbeUserBufferSafe
RtlpProcessIFEOKeyFilter
RtlpQueryLowBoxId
RtlpQueryPackageIdentityAttributes
RtlpQueryRegistryDirect
RtlpQueryRegistryValues
RtlpQuerySecurityDescriptor
RtlpQueryTimeZoneInformationWorker
RtlpQueryTimeZoneKeyNameRoutine
RtlpReadExtendedContext
RtlpReadExtendedContextLayout
RtlpReferenceAtom
RtlpRegTziFormatToTzi
RtlpRemoveUCRBlock
RtlpRunOnceWaitForInit
RtlpSameFunction
RtlpSanitizeContextFlags
RtlpSearchFunctionTable
RtlpSecondLevelDirFreeUsingFreeList
RtlpSeedGlfsr
RtlpSetSecurityObject
RtlpSetTimeZoneInformationWorker
RtlpSetupExtendedBlock
RtlpSparseBitmapCtxCheckRangeArray
RtlpSparseBitmapCtxLockExclusive
RtlpSparseBitmapCtxLockShared
RtlpSparseBitmapCtxPrepareRanges
RtlpSparseBitmapCtxUnlockExclusive
RtlpSparseBitmapCtxUnlockShared
RtlpStackTracePrefix
RtlpStdExtendLowerWatermark
RtlpStdExtendUpperWatermark
RtlpStdGetRecordedStackTraceIndex
RtlpStdGetSpaceForTrace
RtlpStdLogCapturedStackTrace
RtlpSysVolAllocate
RtlpSysVolCheckOwnerAndSecurity
RtlpSysVolCreateSecurityDescriptor
RtlpSysVolTakeOwnership
RtlpTerminateCurrentProcess
RtlpTestAndFillMemoryUp
RtlpTestMemory
RtlpTestMemoryRandomUp
RtlpTraceDatabaseAcquireLock
RtlpTraceDatabaseAllocate
RtlpTraceDatabaseInternalAdd
RtlpTraceDatabaseInternalFind
RtlpTraceDatabaseReleaseLock
RtlpTreeDoubleRotateNodes
RtlpTrivialFunction
RtlpUnlockAtomTable
RtlpUnwindEpilogue
RtlpUnwindHandler
RtlpUnwindOpSlots
RtlpUpcaseUnicodeStringPrivate
RtlpUpdateDynamicTimeZones
RtlpUpdateHeapRates
RtlpValidAttribute
RtlpValidAttributeAce
RtlpValidAttributeInfo
RtlpValidCompoundAce
RtlpValidObjectAce
RtlpValidRelativeAttribute
RtlpValidTrustSubjectContext
RtlpValidateAsciiStd3AndLength
RtlpValidateContextFlags
RtlpValidateKeyTrust
RtlpValidateSDOffsetAndSize
RtlpValidateSidBuffer
RtlpVerCompare
RtlpVerGetConditionMask
RtlpVirtualUnwind
RtlpWalkFrameChain
RtlpWalkWowStack
RtlpWow64CreateUserStack
RtlpWow64CtxFromAmd64
RtlpWow64CtxToAmd64
RtlpWow64GetContextOnAmd64
RtlpWow64SanitizeContextFlags
RtlpWow64SetContextOnAmd64
RtlpWriteExtendedContext
RtlpxLookupFunctionTable
RtlxAnsiStringToUnicodeSize
RtlxOemStringToUnicodeSize
RtlxUnicodeStringToAnsiSize
RtlxUnicodeStringToOemSize
SUBTRACT_MAP_REGISTERS
SdbAlloc
SdbCloseDatabaseRead
SdbExpandEnvironmentStrings
SdbFindFirstNamedTag
SdbFindFirstStringIndexedTag
SdbFindFirstTag
SdbFindNextStringIndexedTag
SdbFindNextTag
SdbFree
SdbFreeFileInfo
SdbGetDatabaseID
SdbGetDatabaseMatch
SdbGetDatabaseMatchEx
SdbGetEntryFlags
SdbGetFileInfo
SdbGetFirstChild
SdbGetIndex
SdbGetNextChild
SdbGetStringTagPtr
SdbGetTagDataSize
SdbGetTagFromTagID
SdbInitDatabaseInMemory
SdbMakeIndexKeyFromStringEx
SdbQueryData
SdbQueryDataExTagID
SdbReadBinaryTag
SdbReadDWORDTag
SdbReadEntryInformation
SdbReadGUIDTag
SdbReadQWORDTag
SdbReadWORDTag
SdbReleaseDatabase
SdbTagRefToTagID
SdbpBinarySearchFirst
SdbpBinarySearchUnique
SdbpCheckAllAttributes
SdbpCheckAttribute
SdbpCheckDll
SdbpCheckExe
SdbpCheckForMatch
SdbpCheckKObject
SdbpCheckMatchingDevice
SdbpCheckMatchingFiles
SdbpCheckMatchingRegistry
SdbpCheckMatchingRegistryEntry
SdbpCheckMatchingText
SdbpCheckMatchingTextEntry
SdbpComputeCrc32
SdbpCreateSearchDBContext
SdbpCreateSearchPathPartsFromPath
SdbpDoesFileExists_U
SdbpFindFirstIndexedWildCardTag
SdbpFindMatchingName
SdbpFindNextIndexedWildCardTag
SdbpFindNextNamedTag
SdbpFormatMatchMode
SdbpGUIDToUnicodeString
SdbpGetAttribute
SdbpGetChecksum
SdbpGetCrcChecksum
SdbpGetDeviceDWORD
SdbpGetExeEntryFlags
SdbpGetFileChecksum
SdbpGetFileDirectoryAttributesNT
SdbpGetFileVersionInformation
SdbpGetFirstIndexedRecord
SdbpGetHeaderAttributes
SdbpGetImageNTHeader
SdbpGetIndex
SdbpGetMappedStringFromTable
SdbpGetMappedTagData
SdbpGetMatchingTextAttributes
SdbpGetModuleImageSize
SdbpGetModulePECheckSum
SdbpGetModuleType
SdbpGetNextIndexedRecord
SdbpGetNextTagId
SdbpGetRegistryMatchingAttributes
SdbpGetTagHeadSize
SdbpGetVersionAttributesNT
SdbpInitializeSearchDBContext
SdbpKeyToAnsiString
SdbpMatchAcpi
SdbpMatchBios
SdbpMatchCpu
SdbpMatchDeviceDWORD
SdbpMatchDeviceString
SdbpMatchOem
SdbpOpenAndMapFile
SdbpOpenDatabaseInMemory
SdbpPatternMatch
SdbpPatternMatchAnsi
SdbpQueryAppCompatFlagsByExeID
SdbpQueryBinVersionInformation
SdbpQueryStringVersionInformation
SdbpQueryVersionString
SdbpReadMappedData
SdbpReadStringRef
SdbpReadTagData
SdbpReleaseSearchDBContext
SdbpResolveAndSplitPath
SdbpResolveInternalEnvironmentVariables
SdbpResolveMatchingFile
SdbpScanIndexes
SdbpSearchDB
SdbpSearchForTextA
SdbpSearchForTextW
SdbpSetAttribute
SdbpUnmapAndCloseFile
SdbpUpcaseUnicodeStringToMultiByteN
SdbpVerQueryValue
SeAccessCheck
SeAccessCheckByType
SeAccessCheckEx
SeAccessCheckFromState
SeAccessCheckFromStateEx
SeAccessCheckWithHint
SeAdjustAccessStateForTrustLabel
SeAdjustObjectAppContainerSecurity
SeAdtRegistryValueChangedAuditAlarm
SeAppendPrivileges
SeAssignPrimaryToken
SeAssignSecurity
SeAssignSecurityEx
SeAssignSecurityEx2
SeAssignWorldSecurityDescriptor
SeAuditHandleCreation
SeAuditHandleDuplication
SeAuditHardLinkCreation
SeAuditHardLinkCreationWithTransaction
SeAuditHeaderRequired
SeAuditProcessCreation
SeAuditProcessExit
SeAuditSystemTimeChange
SeAuditTransactionStateChange
SeAuditingAnyFileEventsWithContext
SeAuditingAnyFileEventsWithContextEx
SeAuditingFileEvents
SeAuditingFileEventsWithContext
SeAuditingFileEventsWithContextEx
SeAuditingFileOrGlobalEvents
SeAuditingHardLinkEvents
SeAuditingHardLinkEventsWithContext
SeAuditingWithTokenForSubcategory
SeCaptureAcl
SeCaptureAtomTableCallout
SeCaptureLuidAndAttributesArray
SeCaptureObjectTypeList
SeCaptureSecurityDescriptor
SeCaptureSecurityQos
SeCaptureSid
SeCaptureSidAndAttributesArray
SeCaptureSubjectContext
SeCaptureSubjectContextEx
SeCaptureUnicodeStringStructures
SeCheckAuditPrivilege
SeCheckPrivilegedObject
SeClearLearningModeObjectInformation
SeCloseObjectAuditAlarm
SeCloseObjectAuditAlarmForNonObObject
SeCodeIntegrityInitializePolicy
SeCompareSigningLevels
SeCompareSigningLevelsForAuditableProcess
SeComputeAutoInheritByObjectType
SeComputeAutoInheritByObjectTypeEx
SeComputeCreatorDeniedRights
SeComputeQuotaInformationSize
SeCopyClientToken
SeCreateAccessState
SeCreateAccessStateEx
SeCreateClientSecurity
SeCreateClientSecurityEx
SeCreateClientSecurityFromSubjectContext
SeCreateClientSecurityFromSubjectContextEx
SeDeassignPrimaryToken
SeDeassignSecurity
SeDefaultObjectMethod
SeDeleteAccessState
SeDeleteObjectAuditAlarm
SeDeleteObjectAuditAlarmWithTransaction
SeEtwEnableCallback
SeExamineGlobalSacl
SeExamineSacl
SeExchangePrimaryToken
SeFastTraverseCheck
SeFilterToken
SeFreeCapturedObjectTypeList
SeFreePrivileges
SeGetCachedSigningLevel
SeGetImageRequiredSigningLevel
SeGetLinkedToken
SeGetLogonSessionToken
SeGetTokenControlInformation
SeGetTokenDeviceMap
SeImpersonateClient
SeImpersonateClientEx
SeInitSystem
SeIsAppContainerOrIdentifyLevelContext
SeIsParentOfChildAppContainer
SeIsSystemContext
SeIsTokenAssignableToProcess
SeLocateProcessImageName
SeLockSubjectContext
SeLogAccessFailure
SeMakeAnonymousLogonToken
SeMakeAnonymousLogonTokenNoEveryone
SeMakeSystemToken
SeMarkLogonSessionForTerminationNotification
SeMaximumAuditMask
SeMaximumAuditMaskFromGlobalSacl
SeObjectCreateSaclAccessBits
SeObjectReferenceAuditAlarm
SeOpenObjectAuditAlarm
SeOpenObjectAuditAlarmForNonObObject
SeOpenObjectAuditAlarmWithTransaction
SeOpenObjectForDeleteAuditAlarm
SeOpenObjectForDeleteAuditAlarmWithTransaction
SeOperationAuditAlarm
SePrivilegeCheck
SePrivilegeObjectAuditAlarm
SePrivilegePolicyCheck
SePrivilegedServiceAuditAlarm
SeQueryAuthenticationIdToken
SeQueryInformationToken
SeQueryMandatoryPolicyToken
SeQuerySecureBootPolicyValue
SeQuerySecurityAccessMask
SeQuerySecurityAttributesToken
SeQuerySecurityDescriptorInfo
SeQuerySessionIdToken
SeQuerySigningPolicy
SeQuerySigningPolicyWorker
SeQueryTokenTrustLink
SeQueryTokenTrustSid
SeQueryUserSidToken
SeRegisterElamCertResources
SeRegisterImageVerificationCallback
SeRegisterLogonSessionTerminatedRoutine
SeRegisterObjectTypeMandatoryPolicy
SeReleaseAcl
SeReleaseLuidAndAttributesArray
SeReleaseSecurityDescriptor
SeReleaseSid
SeReleaseSidAndAttributesArray
SeReleaseSubjectContext
SeReleaseUnicodeStringStructures
SeReportSecurityEvent
SeReportSecurityEventWithSubCategory
SeRmInitPhase1
SeSecureBootQueryInformation
SeSecureBootRegisterPolicy
SeSecurityAttributePresent
SeSecurityDescriptorChangedAuditAlarm
SeSetAccessStateGenericMapping
SeSetAuditParameter
SeSetLearningModeObjectInformation
SeSetMandatoryPolicyToken
SeSetSecurityAccessMask
SeSetSecurityAttributesToken
SeSetSecurityDescriptorInfo
SeSetSecurityDescriptorInfoEx
SeSetSessionIdToken
SeSetTokenTrustLink
SeSetVirtualizationToken
SeShouldCheckForAccessRightsFromParent
SeSinglePrivilegeCheck
SeSrpAccessCheck
SeSubProcessToken
SeTokenDefaultDaclChangedAuditAlarm
SeTokenFromAccessInformation
SeTokenImpersonationLevel
SeTokenIsAdmin
SeTokenIsRestricted
SeTokenIsWriteRestricted
SeTokenType
SeUnlockSubjectContext
SeUnregisterImageVerificationCallback
SeUnregisterLogonSessionTerminatedRoutine
SeValidSecurityDescriptor
SeValidateFileAsImageType
SeValidateImageData
SeValidateImageHeader
SeValidateSecurityQos
SepAccessCheck
SepAccessCheckAndAuditAlarm
SepAccessCheckEx
SepAdjustGroups
SepAdjustPrivileges
SepAdtAuditObjectAccessWithContext
SepAdtAuditPrivilegeUseWithContext
SepAdtAuditThisEventByCategoryWithContext
SepAdtAuditThisEventWithContext
SepAdtCheckPrivilegeForSensitivity
SepAdtClassifyObjectIntoSubCategory
SepAdtCloseObjectAuditAlarm
SepAdtCopyToLsaSharedMemory
SepAdtDeleteObjectAuditAlarm
SepAdtDetermineInsertQueue
SepAdtGenerateDiscardAudit
SepAdtIncorporatePerUserPolicy
SepAdtInitLsaDeadEventForNonPagedList
SepAdtInitializeBounds
SepAdtInitializeCrashOnFail
SepAdtInitializePrivilegeAuditing
SepAdtLogAuditFailureEvent
SepAdtLogAuditRecord
SepAdtMarshallAuditRecord
SepAdtObjectReferenceAuditAlarm
SepAdtOpenObjectAuditAlarm
SepAdtOpenObjectForDeleteAuditAlarm
SepAdtOpenRegAndSetupNotification
SepAdtPrivilegeObjectAuditAlarm
SepAdtPrivilegedServiceAuditAlarm
SepAdtRegNotificationCallback
SepAdtSecurityDescriptorChangedAuditAlarm
SepAdtStagingEvent
SepAppContainerAceProtectionApplies
SepAppendAceToTokenDefaultDacl
SepAppendAceToTokenObjectAcl
SepAppendAdminAceToTokenAcl
SepAppendDefaultDacl
SepAppendPrimaryGroup
SepAssemblePrivileges
SepAuditAssignPrimaryToken
SepAuditFailed
SepAuditFailedRaisedIrql
SepAuditTypeList
SepAuditingEnabledForSubcategory
SepAuditingForSubCategory
SepBuildCapPolicyTable
SepBuildCapeSecurityDescriptor
SepBuildDaclWithAllApplicationPackageSid
SepBuildDefaultCap
SepBuildDefaultCape
SepBuildObjectSecurityDescriptor
SepCaptureAuditPolicy
SepCaptureFqbnArray
SepCaptureHandles
SepCaptureInt64Array
SepCaptureOctetStringArray
SepCapturePackageMoniker
SepCaptureTokenSecurityAttributesAndOperationsInformation
SepCaptureTokenSecurityAttributesInformation
SepCaptureTokenSecurityOperations
SepCaptureUnicodeStringArray
SepCheckAcl
SepCheckAndCopySelfRelativeSD
SepCheckCapabilities
SepCheckCreateLowBox
SepCheckForAllAppPackagesAceRemoval
SepCleanupLUIDDeviceMapDirectory
SepCommonAccessCheckEx
SepCompareSidAndAttributeArrays
SepComputeSidSignature
SepConcatenatePrivileges
SepConstrainByMandatory
SepConstrainByTrust
SepConvertTokenPrivileges
SepConvertTokenPrivilegesToLuidAndAttributes
SepCopyObjectTypeList
SepCopyTokenAccessInformation
SepCopyTokenIntegrity
SepCreateAccessStateFromSubjectContext
SepCreateClientSecurity
SepCreateClientSecurityEx
SepCreateImpersonationTokenDacl
SepCreateLogonSessionTrack
SepCreateToken
SepCreateTokenEx
SepDeReferenceLogonSession
SepDeleteAccessState
SepDeleteLogonSessionTrack
SepDeleteSessionLowboxEntries
SepDereferenceLowBoxHandlesEntry
SepDereferenceLowBoxNumberEntry
SepDereferenceLowBoxObjects
SepDeviceSidInToken
SepDuplicateToken
SepDuplicateTokenClaims
SepExamineGlobalSaclEx
SepExamineSaclEx
SepExpandDynamic
SepFilterPrivilegeAudits
SepFilterToken
SepFindMatchingLowBoxHandlesEntry
SepFindMatchingLowBoxNumberEntries
SepFindMatchingLowBoxNumberEntry
SepFlattenAcl
SepFreeCapturedTokenSecurityAttributesInformation
SepFreeDefaultDacl
SepFreePrimaryGroup
SepFreeResourceInfo
SepGetAnonymousToken
SepGetCurrentLogLevel
SepGetDefaultsSubjectContext
SepGetLearningModeObjectInformation
SepGetLogonSessionAccountInfo
SepGetLowBoxHandlesEntry
SepGetLowBoxNumberEntry
SepGetProcessTrustLabelAce
SepGetScopedPolicySid
SepGetTokenAccessInformationBufferSize
SepGetTokenSessionMapEntry
SepHasAllAppPackagesPresent
SepIdAssignableAsGroup
SepIdAssignableAsOwner
SepImageVerificationCallbackPreProcess
SepImageVerificationCallbackWorker
SepInformFileSystemsOfDeletedLogon
SepInformLsaOfDeletedLogon
SepInitProcessAuditSd
SepInitQuerySigningPolicyExt
SepInitSystemDacls
SepInitializationPhase0
SepInitializationPhase1
SepInitializeAuthorizationCallbacks
SepInitializeCodeIntegrity
SepInitializeLowBoxNumberTable
SepInitializeWorkList
SepIsAclEqual
SepIsChildTokenByPointer
SepIsImageInMinTcbList
SepIsLockedDown
SepIsMinTCB
SepIsNgenImage
SepIsOptionPresent
SepIsRemovableStorageDevice
SepIsSiblingTokenByPointer
SepIsSidEqual
SepIsUmciDisabled
SepLengthSidAndAttributesArray
SepLinkLogonSessions
SepLoadNgenLocations
SepLocateTokenIntegrity
SepLocateTokenTrustLevel
SepMakeTokenEffectiveOnly
SepMandatoryIntegrityCheck
SepMandatorySubProcessToken
SepMandatoryToDiscretionary
SepMaximumAccessCheck
SepMaximumAccessCheckEx
SepMergeObjectTypeListAccesses
SepModifyTokenPolicyCounter
SepNormalAccessCheck
SepNormalAccessCheckEx
SepNotifyFileSystems
SepParseElamCertResources
SepPrivilegeCheck
SepProbeAndCaptureString_U
SepQueryNameString
SepQueryTypeString
SepQueueWorkItem
SepReadAndInsertCaps
SepReadAndPopulateCapes
SepReadSingleCap
SepReconcileTrustSidWithProcessProtection
SepReferenceLogonSession
SepReferenceLowBoxObjects
SepRegOpenKey
SepRegQueryDwordValue
SepRegQueryValue
SepReleaseAuditPolicy
SepRemoveAceFromTokenDefaultDacl
SepRemoveDisabledGroupsAndPrivileges
SepRmAcquireGlobalSaclReadLock
SepRmAddLogonSessionInfoWrkr
SepRmCallLsa
SepRmCapPoolExpand
SepRmCapUpdateWrkr
SepRmCommandServerThread
SepRmCommandServerThreadInit
SepRmCreateLogonSessionWrkr
SepRmDbInitialization
SepRmDeleteLogonSessionWrkr
SepRmDereferenceCap
SepRmDereferenceCapTable
SepRmDestroyCapTable
SepRmDispatchDataToLsa
SepRmFetchGlobalSacl
SepRmGlobalSaclFind
SepRmGlobalSaclSetWrkr
SepRmProcessCreationCommandLineAuditSettingsWrkr
SepRmReferenceCapTable
SepRmReferenceFindCap
SepRmSetAuditEventWrkr
SepRmVerifyLsaProtectionLevel
SepSDContainsAttributeACE
SepScheduleImageVerificationCallbacks
SepSecureBootBuildRules
SepSecureBootCheckForUpdates
SepSecureBootCorrectBcd
SepSecureBootFindMatchingRegistryRule
SepSecureBootGetPolicyDefaultValue
SepSecureBootGetPolicyValueByRef
SepSecureBootGetQWordPolicyValue
SepSecureBootHasPermission
SepSecureBootSetRegistryKey
SepSecureBootUpdateBcdDataForRule
SepSecureBootValidateBcdDataAgainstBcdRule
SepSecurityDescriptorStrictLength
SepSetAuditInfoForObjectType
SepSetClaimsInToken
SepSetLogonSessionToken
SepSetSqmObjectName
SepSetSystemPaths
SepSetTokenCapabilities
SepSetTokenLowboxHandles
SepSetTokenLowboxNumber
SepSetTokenPackage
SepSetTokenTrust
SepSetTrustLevelForProcessToken
SepSidFromProcessProtection
SepSidInSidAndAttributes
SepSidInToken
SepSidInTokenSidHash
SepSinglePrivilegeCheck
SepSqmInformation
SepTokenDeleteMethod
SepTokenFromAccessInformation
SepTokenInitialization
SepTokenIsOwner
SepTrustLevelCheck
SepTrustToDiscretionary
SepUpdateLogonSessionTrack
SepValidLabelSubjectContext
SepValidOwnerSubjectContext
SepVariableInitialization
SepZwLockRegistryKey
SetFailureLocation
SetVacb
SiDisambiguateSystemDevice
SiGetBiosSystemDisk
SiGetBiosSystemPartition
SiGetDeviceNumberInformation
SiGetDiskPartitionInformation
SiGetDriveLayoutInformation
SiGetEfiSystemDevice
SiGetEspFromFirmware
SiGetFirmwareBootDeviceName
SiGetFirmwareBootDeviceNameFromRegistry
SiGetRegistryValue
SiGetSystemDeviceName
SiGetSystemDisk
SiGetSystemPartition
SiIsWinPEBoot
SiIsWinPeHardDiskZeroUfdBoot
SiIssueSynchronousIoctl
SiOpenArcNameObject
SiOpenRegistryKey
SiQuerySystemPartitionInformation
SiTranslateSymbolicLink
SiValidateSystemPartition
SimplifyFilter
SmAlloc
SmArrayGrow
SmCalcIoWorkItemSize
SmCrEncCleanup
SmCrEncInitialize
SmCrEncStart
SmCrGenRandom
SmCreateEvent
SmEtwEnableCallback
SmEtwLogRegionOp
SmEtwLogStoreCorruption
SmEtwLogStoreOp
SmEtwLogStoreStateChange
SmFpAllocate
SmFpCleanup
SmFpFree
SmFpPreAllocate
SmFree
SmGetRegistrationInfo
SmGlobalsInitialize
SmInitSystem
SmIoRequestComplete
SmIssueIo
SmKmEtwAppendObjectName
SmKmEtwAppendProductName
SmKmEtwLogGlobalStats
SmKmEtwLogStoreChange
SmKmEtwLogStoreRundown
SmKmEtwLogStoreStats
SmKmFileInfoCleanup
SmKmFileInfoDuplicate
SmKmFileInfoGetPath
SmKmFileInfoInit
SmKmGenericCompletion
SmKmGetCacheStatsBucketIndex
SmKmInitialize
SmKmIsVolumeIoPossible
SmKmIssueIo
SmKmIssueVolumeIo
SmKmKeyGenGenerate
SmKmKeyGenKeyDelete
SmKmKeyGenKeyFind
SmKmKeyGenLoadKey
SmKmKeyGenNewKey
SmKmKeyGenStart
SmKmRegParamsLoad
SmKmSendDeviceControl
SmKmSendUsageNotification
SmKmSqmAddToStream
SmKmStoreAdd
SmKmStoreCreatePrepare
SmKmStoreDelete
SmKmStoreFileCreate
SmKmStoreFileCreateForIoType
SmKmStoreFileDelete
SmKmStoreFileGetExtents
SmKmStoreFileMakeSecurityDescriptor
SmKmStoreFileOpenVolume
SmKmStoreFileWriteHeader
SmKmStoreHelperCleanup
SmKmStoreHelperCommandProcess
SmKmStoreHelperSendCommand
SmKmStoreHelperStart
SmKmStoreHelperWaitForCommand
SmKmStoreHelperWorker
SmKmStoreTerminateWorker
SmKmStoresDereference
SmKmStoresReferenceEx
SmKmUnlockAndFreeMdl
SmKmVolumeQueryUniqueId
SmLogAllocate
SmLogBufferFull
SmLogFree
SmLogIo
SmLogRetrieve
SmLogShutdown
SmLogStart
SmMapPage
SmPageEvict
SmPageRead
SmPageWrite
SmProcessCreateRequest
SmProcessDeleteRequest
SmProcessEmptyRequest
SmProcessGlobalCacheStatsRequest
SmProcessListRequest
SmProcessListRequestExtended
SmProcessLogRequest
SmProcessRegistrationRequest
SmProcessResizeRequest
SmProcessStatsRequest
SmQueryStoreInformation
SmRegistrationCtxInitialize
SmRegistrationCtxStart
SmRegistrationInfoFill
SmResetVirtualMemory
SmSanitizeString
SmSetStoreInformation
SmSetThreadPagePriority
SmSetThreadSystemPagePriority
SmStoreCreate
SmStoreDelete
SmStorePhysicalRequestIssue
SmStoreResize
SmStoresUnpersist
SmUniqueIdParseProductName
SmWaitForSyncIo
SmWatchDogDeviceIoComplete
SmWatchDogRegister
SmWdDPC
SmWdInitialize
SmWdProcessStore
SmWdStartMonitoring
SmWdStopMonitoring
SmWdWorkItemRegister
SmWdWorkItemUpdate
SmWdWritesApcRoutine
SmWdWritesApcRundown
SmWorkItemFree
SmcCacheAdd
SmcCacheCleanup
SmcCacheCreatePrepare
SmcCacheDelete
SmcCacheDereference
SmcCacheInitialize
SmcCacheManagerInitialize
SmcCacheManagerStart
SmcCacheReference
SmcCacheRemove
SmcCacheStart
SmcGetCacheStats
SmcProcessCreateRequest
SmcProcessDeleteRequest
SmcProcessListRequest
SmcProcessResizeRequest
SmcProcessStatsRequest
SmcProcessStoreCreateRequest
SmcProcessStoreDeleteRequest
SmcStoreCreate
SmcStoreDelete
SmcStoreEntryFind
SmcStorePlacementGet
SmcStoreResize
SmcStoreSlotAbort
SmcStoreSlotCommit
SmcStoreSlotReserve
SmcVolumePnpNotification
SmpCacheStatsCopy
SmpFpAllocateResource
SmpFpReleaseResource
SmpFpWaitForResource
SmpPageWrite
SmpUpdateCacheStatsBucketIndex
SmpUtilsGetControlDevice
StEtaCheckForRefresh
StEtaCleanup
StEtaInitialize
StEtaIoComplete
StEtaIoStart
StEtaIoTimeout
StEtaStart
StIoCountsMovePeriod
StLcBucketsCombine
StLcBucketsCopy
StLcInitialize
StRtlIoStorInfoSetNvCachePriority
StartFirstUserProcess
StringCbCatW
StringCbCopyNW
StringCbLengthW
StringCchCatW
StringCchCopyA
StringCchCopyNW
StringCchCopyW
StringCchPrintfA
StringCchPrintfW
StringListContains
StringListElementSubstringMatch
SubstringMatch
SwapContext
SwapSplayLinks
SymCryptDetectCpuFeaturesByCpuid
SymCryptEnvWindowsKernelModeFatal
SymCryptEnvWindowsKernelModeInit
SymCryptInit_ApplicationRequested_Non_SaveXmmLibrary
SymCryptMarvin32
SymCryptMarvin32ExpandSeed
SyspartDirectGetSystemDisk
SyspartDirectGetSystemPartition
SyspartGetSystemPartition
TagToIndex
Template_j
Template_jj
Template_jjzjq
Template_jq
Template_jz
Template_jzj
Template_jzt
Template_p
Template_pqzzzzzzz
Template_pz
Template_q
Template_qz
Template_qzq
Template_xxxqq
Template_xxxqqqq
Template_z
Template_zjqq
Template_zzjzzzqq
Template_zzjzzztzqzztq
Template_zzt
TriageGetBugcheckData
TriageGetDriverCount
TriageGetLoaderEntry
TriagepGetPageSize
TriagepVerifyDump
TryLockShutdownShared
TxtpAddCacheEntry
TxtpDestroyCacheEntry
TxtpGetCacheEntry
TxtpJustifyRectangle
UNLOCK_ADDRESS_SPACE
UNLOCK_ADDRESS_SPACE_SHARED
UNLOCK_ADDRESS_SPACE_SHARED_UNORDERED
UNLOCK_ADDRESS_SPACE_SHARED_UNSAFE
UNLOCK_ADDRESS_SPACE_UNORDERED
UNLOCK_HIVE_LOAD
UNLOCK_PAGED_POOL_WS
UNLOCK_PAGED_POOL_WS_SHARED
UNLOCK_PAGE_TABLE_COMMITMENT
UNLOCK_SYSTEM_CACHE_WS
UNLOCK_SYSTEM_CACHE_WS_SHARED
UNLOCK_SYSTEM_PTES_WS
UNLOCK_SYSTEM_PTES_WS_SHARED
UNLOCK_WORKING_SET
UNLOCK_WORKING_SET_SHARED
UNLOCK_WS
UnlockShutdown
VERIFY_BUFFER_LOCKED
VF_ASSERT_IRQL
VF_ASSERT_MAX_IRQL
VF_FIND_BUFFER
VF_FIND_DEVICE_INFORMATION_AND_REMOVE
VF_FIND_INACTIVE_ADAPTER_AND_REMOVE
VF_MARK_FOR_DEFERRED_REMOVE
VF_MARK_SCATTER_GATHER_LIST
VF_UNMARK_SCATTER_GATHER_LIST
ValidFilter
ValidateRegistrLangType
ValidateStd3Range
VeAllocatePoolWithTagPriority
VerSetConditionMask
VerifierBugCheckIfAppropriate
VerifierCcWaitForCurrentLazyWriterActivity
VerifierCmRegisterCallback
VerifierCmRegisterCallbackEx
VerifierCmUnRegisterCallback
VerifierDbgBreakPointWithStatus
VerifierEtwRegister
VerifierEtwRegisterClassicProvider
VerifierEtwUnregister
VerifierExAcquireFastMutex
VerifierExAcquireFastMutexNoReboot
VerifierExAcquireFastMutexUnsafe
VerifierExAcquireFastMutexUnsafeNoReboot
VerifierExAcquireResourceExclusiveLite
VerifierExAcquireResourceExclusiveLiteNoReboot
VerifierExAcquireResourceSharedLite
VerifierExAcquireResourceSharedLiteNoReboot
VerifierExAcquireRundownProtection
VerifierExAcquireRundownProtectionCacheAware
VerifierExAcquireRundownProtectionCacheAwareEx
VerifierExAcquireRundownProtectionEx
VerifierExAcquireSharedStarveExclusive
VerifierExAcquireSharedStarveExclusiveNoReboot
VerifierExAcquireSharedWaitForExclusive
VerifierExAcquireSharedWaitForExclusiveNoReboot
VerifierExAllocatePool
VerifierExAllocatePoolEx
VerifierExAllocatePoolWithQuota
VerifierExAllocatePoolWithQuotaTag
VerifierExAllocatePoolWithTag
VerifierExAllocatePoolWithTagPriority
VerifierExConvertExclusiveToSharedLite
VerifierExCreateCallback
VerifierExDeleteLookasideListEx
VerifierExDeleteNPagedLookasideList
VerifierExDeletePagedLookasideList
VerifierExDeleteResourceLite
VerifierExEnterCriticalRegionAndAcquireResourceExclusive
VerifierExEnterCriticalRegionAndAcquireResourceExclusiveNoReboot
VerifierExEnterCriticalRegionAndAcquireResourceShared
VerifierExEnterCriticalRegionAndAcquireResourceSharedNoReboot
VerifierExEnterCriticalRegionAndAcquireSharedWaitForExclusive
VerifierExEnterPriorityRegionAndAcquireResourceExclusive
VerifierExEnterPriorityRegionAndAcquireResourceExclusiveNoReboot
VerifierExEnterPriorityRegionAndAcquireResourceShared
VerifierExEnterPriorityRegionAndAcquireResourceSharedNoReboot
VerifierExFreePool
VerifierExFreePoolEx
VerifierExFreePoolWithTag
VerifierExGetExclusiveWaiterCount
VerifierExGetSharedWaiterCount
VerifierExInitializeLookasideListEx
VerifierExInitializeNPagedLookasideList
VerifierExInitializePagedLookasideList
VerifierExInitializeResourceLite
VerifierExInterlockedAddLargeInteger
VerifierExInterlockedInsertHeadList
VerifierExInterlockedInsertTailList
VerifierExInterlockedPopEntryList
VerifierExInterlockedPushEntryList
VerifierExInterlockedRemoveHeadList
VerifierExIsProcessorFeaturePresent
VerifierExIsResourceAcquiredExclusiveLite
VerifierExIsResourceAcquiredSharedLite
VerifierExRaiseAccessViolation
VerifierExRaiseDatatypeMisalignment
VerifierExRaiseStatus
VerifierExRegisterCallback
VerifierExReinitializeResourceLite
VerifierExReleaseFastMutex
VerifierExReleaseFastMutexNoReboot
VerifierExReleaseFastMutexUnsafe
VerifierExReleaseFastMutexUnsafeNoReboot
VerifierExReleaseResourceAndLeaveCriticalRegion
VerifierExReleaseResourceAndLeaveCriticalRegionNoReboot
VerifierExReleaseResourceAndLeavePriorityRegion
VerifierExReleaseResourceAndLeavePriorityRegionNoReboot
VerifierExReleaseResourceForThreadLite
VerifierExReleaseResourceForThreadLiteNoReboot
VerifierExReleaseResourceLite
VerifierExReleaseResourceLiteNoReboot
VerifierExReleaseRundownProtection
VerifierExReleaseRundownProtectionCacheAware
VerifierExReleaseRundownProtectionEx
VerifierExSetResourceOwnerPointer
VerifierExSetResourceOwnerPointerEx
VerifierExSetTimerResolution
VerifierExTryToAcquireFastMutex
VerifierExTryToAcquireFastMutexNoReboot
VerifierExUnregisterCallback
VerifierExUuidCreate
VerifierExWaitForRundownProtectionRelease
VerifierExWaitForRundownProtectionReleaseCacheAware
VerifierExfAcquirePushLockExclusive
VerifierExfAcquirePushLockShared
VerifierExfReleasePushLock
VerifierExfReleasePushLockShared
VerifierExfTryAcquirePushLockShared
VerifierExfTryToWakePushLock
VerifierExpInterlockedFlushSList
VerifierExpInterlockedPopEntrySList
VerifierExpInterlockedPushEntrySList
VerifierFreeTrackedPool
VerifierFsRtlAllocateFileLock
VerifierFsRtlAreNamesEqual
VerifierFsRtlBalanceReads
VerifierFsRtlCancellableWaitForMultipleObjects
VerifierFsRtlCancellableWaitForSingleObject
VerifierFsRtlCheckLockForReadAccess
VerifierFsRtlCheckLockForWriteAccess
VerifierFsRtlCopyWrite
VerifierFsRtlDeregisterUncProvider
VerifierFsRtlDissectName
VerifierFsRtlDoesNameContainWildCards
VerifierFsRtlFastCheckLockForRead
VerifierFsRtlFastCheckLockForWrite
VerifierFsRtlFastUnlockAll
VerifierFsRtlFastUnlockAllByKey
VerifierFsRtlFastUnlockSingle
VerifierFsRtlFreeFileLock
VerifierFsRtlGetFileSize
VerifierFsRtlGetNextFileLock
VerifierFsRtlIncrementCcFastReadNoWait
VerifierFsRtlIncrementCcFastReadWait
VerifierFsRtlInitializeFileLock
VerifierFsRtlIsNameInExpression
VerifierFsRtlMdlReadCompleteDev
VerifierFsRtlMdlWriteCompleteDev
VerifierFsRtlNotifyFilterChangeDirectory
VerifierFsRtlNotifyFilterReportChange
VerifierFsRtlNotifyFullChangeDirectory
VerifierFsRtlNotifyFullReportChange
VerifierFsRtlPrivateLock
VerifierFsRtlProcessFileLock
VerifierFsRtlRegisterUncProvider
VerifierFsRtlRegisterUncProviderEx
VerifierFsRtlRemoveDotsFromPath
VerifierFsRtlUninitializeFileLock
VerifierFsRtlValidateReparsePointBuffer
VerifierHalExamineMBR
VerifierInitSystem
VerifierIoAcquireCancelSpinLock
VerifierIoAcquireRemoveLockEx
VerifierIoAcquireVpbSpinLock
VerifierIoAllocateController
VerifierIoAllocateErrorLogEntry
VerifierIoAllocateIrp
VerifierIoAllocateMdl
VerifierIoAllocateWorkItem
VerifierIoAttachDevice
VerifierIoAttachDeviceToDeviceStack
VerifierIoAttachDeviceToDeviceStackSafe
VerifierIoCancelIrp
VerifierIoCheckShareAccess
VerifierIoConnectInterrupt
VerifierIoConnectInterruptEx
VerifierIoCreateController
VerifierIoCreateDevice
VerifierIoCreateFile
VerifierIoCreateNotificationEvent
VerifierIoCreateSymbolicLink
VerifierIoCreateSynchronizationEvent
VerifierIoCreateUnprotectedSymbolicLink
VerifierIoDeleteController
VerifierIoDeleteDevice
VerifierIoDeleteSymbolicLink
VerifierIoDetachDevice
VerifierIoDisconnectInterrupt
VerifierIoDisconnectInterruptEx
VerifierIoFreeController
VerifierIoFreeIrp
VerifierIoFreeMdl
VerifierIoGetAttachedDeviceReference
VerifierIoGetConfigurationInformation
VerifierIoGetDeviceInterfaceAlias
VerifierIoGetDeviceInterfaces
VerifierIoGetDeviceNumaNode
VerifierIoGetDeviceObjectPointer
VerifierIoGetDeviceProperty
VerifierIoGetDevicePropertyData
VerifierIoGetDeviceToVerify
VerifierIoGetFileObjectGenericMapping
VerifierIoGetInitialStack
VerifierIoInitializeIrp
VerifierIoInitializeRemoveLockEx
VerifierIoInitializeWorkItem
VerifierIoInvalidateDeviceRelations
VerifierIoIsWdmVersionAvailable
VerifierIoOpenDeviceInterfaceRegistryKey
VerifierIoOpenDeviceRegistryKey
VerifierIoRaiseHardError
VerifierIoRaiseInformationalHardError
VerifierIoReadPartitionTable
VerifierIoReadPartitionTableEx
VerifierIoRegisterBootDriverReinitialization
VerifierIoRegisterDeviceInterface
VerifierIoRegisterDriverReinitialization
VerifierIoRegisterLastChanceShutdownNotification
VerifierIoRegisterPlugPlayNotification
VerifierIoRegisterShutdownNotification
VerifierIoReleaseCancelSpinLock
VerifierIoReleaseRemoveLockAndWaitEx
VerifierIoReleaseRemoveLockEx
VerifierIoReleaseVpbSpinLock
VerifierIoRemoveShareAccess
VerifierIoReplacePartitionUnit
VerifierIoReportDetectedDevice
VerifierIoReportTargetDeviceChange
VerifierIoReportTargetDeviceChangeAsynchronous
VerifierIoReuseIrp
VerifierIoSetCompletionRoutineEx
VerifierIoSetDeviceInterfaceState
VerifierIoSetDevicePropertyData
VerifierIoSetDeviceToVerify
VerifierIoSetPartitionInformation
VerifierIoSetPartitionInformationEx
VerifierIoSetShareAccess
VerifierIoSetStartIoAttributes
VerifierIoStartNextPacket
VerifierIoUnregisterPlugPlayNotification
VerifierIoUnregisterPlugPlayNotificationEx
VerifierIoUnregisterShutdownNotification
VerifierIoUpdateShareAccess
VerifierIoVolumeDeviceToDosName
VerifierIoWMIAllocateInstanceIds
VerifierIoWMIRegistrationControl
VerifierIoWMIWriteEvent
VerifierIoWritePartitionTable
VerifierIoWritePartitionTableEx
VerifierIofCallDriver
VerifierIofCompleteRequest
VerifierKeAcquireGuardedMutex
VerifierKeAcquireGuardedMutexUnsafe
VerifierKeAcquireInStackQueuedSpinLock
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevel
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevelNoReboot
VerifierKeAcquireInStackQueuedSpinLockForDpc
VerifierKeAcquireInStackQueuedSpinLockForDpcNoReboot
VerifierKeAcquireInStackQueuedSpinLockNoReboot
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynch
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynchNoReboot
VerifierKeAcquireInterruptSpinLock
VerifierKeAcquireQueuedSpinLock
VerifierKeAcquireQueuedSpinLockRaiseToSynch
VerifierKeAcquireSpinLockAtDpcLevel
VerifierKeAcquireSpinLockAtDpcLevelNoReboot
VerifierKeAcquireSpinLockForDpc
VerifierKeAcquireSpinLockRaiseToDpc
VerifierKeAcquireSpinLockRaiseToDpcNoReboot
VerifierKeAreAllApcsDisabled
VerifierKeAreApcsDisabled
VerifierKeCancelTimer
VerifierKeClearEvent
VerifierKeDelayExecutionThread
VerifierKeDeregisterNmiCallback
VerifierKeEnterCriticalRegion
VerifierKeEnterGuardedRegion
VerifierKeFlushQueuedDpcs
VerifierKeInitializeDeviceQueue
VerifierKeInitializeEvent
VerifierKeInitializeGuardedMutex
VerifierKeInitializeMutant
VerifierKeInitializeMutantNoReboot
VerifierKeInitializeMutex
VerifierKeInitializeMutexNoReboot
VerifierKeInitializeSemaphore
VerifierKeInitializeTimer
VerifierKeInitializeTimerEx
VerifierKeInsertByKeyDeviceQueue
VerifierKeInsertDeviceQueue
VerifierKeInsertHeadQueue
VerifierKeInsertQueue
VerifierKeIsApcRunningThread
VerifierKeIsExecutingLegacyDpc
VerifierKeLeaveCriticalRegion
VerifierKeLeaveGuardedRegion
VerifierKeLowerIrql
VerifierKePulseEvent
VerifierKeQueryPriorityThread
VerifierKeQueryRuntimeThread
VerifierKeRaiseIrqlToDpcLevel
VerifierKeReadStateEvent
VerifierKeReadStateMutex
VerifierKeReadStateSemaphore
VerifierKeReadStateTimer
VerifierKeRegisterNmiCallback
VerifierKeReleaseGuardedMutex
VerifierKeReleaseGuardedMutexUnsafe
VerifierKeReleaseInStackQueuedSpinLock
VerifierKeReleaseInStackQueuedSpinLockForDpc
VerifierKeReleaseInStackQueuedSpinLockForDpcNoReboot
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevel
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevelNoReboot
VerifierKeReleaseInStackQueuedSpinLockNoReboot
VerifierKeReleaseInterruptSpinLock
VerifierKeReleaseMutant
VerifierKeReleaseMutantNoReboot
VerifierKeReleaseMutex
VerifierKeReleaseMutexNoReboot
VerifierKeReleaseQueuedSpinLock
VerifierKeReleaseSemaphore
VerifierKeReleaseSpinLock
VerifierKeReleaseSpinLockForDpc
VerifierKeReleaseSpinLockFromDpcLevel
VerifierKeReleaseSpinLockFromDpcLevelNoReboot
VerifierKeReleaseSpinLockNoReboot
VerifierKeRemoveByKeyDeviceQueue
VerifierKeRemoveDeviceQueue
VerifierKeRemoveEntryDeviceQueue
VerifierKeRemoveQueue
VerifierKeResetEvent
VerifierKeSetEvent
VerifierKeSetSystemGroupAffinityThread
VerifierKeSetTimer
VerifierKeSetTimerEx
VerifierKeSynchronizeExecution
VerifierKeTestSpinLock
VerifierKeTryToAcquireGuardedMutex
VerifierKeTryToAcquireQueuedSpinLock
VerifierKeTryToAcquireQueuedSpinLockRaiseToSynch
VerifierKeTryToAcquireSpinLockAtDpcLevel
VerifierKeTryToAcquireSpinLockAtDpcLevelNoReboot
VerifierKeWaitForMultipleObjects
VerifierKeWaitForMultipleObjectsNoReboot
VerifierKeWaitForSingleObject
VerifierKeWaitForSingleObjectNoReboot
VerifierKfRaiseIrql
VerifierMmAddPhysicalMemory
VerifierMmAllocateContiguousMemory
VerifierMmAllocateContiguousMemorySpecifyCache
VerifierMmAllocateContiguousMemorySpecifyCacheNode
VerifierMmAllocateContiguousNodeMemory
VerifierMmAllocateNonCachedMemory
VerifierMmAllocatePagesForMdl
VerifierMmAllocatePagesForMdlEx
VerifierMmCreateMdl
VerifierMmCreateMirror
VerifierMmDoesFileHaveUserWritableReferences
VerifierMmFreeContiguousMemory
VerifierMmFreeContiguousMemorySpecifyCache
VerifierMmFreeNonCachedMemory
VerifierMmFreePagesFromMdl
VerifierMmGetPhysicalMemoryRanges
VerifierMmGetSystemRoutineAddress
VerifierMmLockPagableDataSection
VerifierMmLockPagableSectionByHandle
VerifierMmMapIoSpace
VerifierMmMapLockedPages
VerifierMmMapLockedPagesSpecifyCache
VerifierMmMapLockedPagesWithReservedMapping
VerifierMmPageEntireDriver
VerifierMmPrefetchPages
VerifierMmProbeAndLockPages
VerifierMmProbeAndLockProcessPages
VerifierMmRemovePhysicalMemory
VerifierMmResetDriverPaging
VerifierMmSecureVirtualMemory
VerifierMmUnlockPagableImageSection
VerifierMmUnlockPages
VerifierMmUnmapIoSpace
VerifierMmUnmapLockedPages
VerifierMmUnsecureVirtualMemory
VerifierNdisAllocateVerifierContext
VerifierNdisFreeVerifierContext
VerifierNdisMIndicateStatusEx
VerifierNdisMOidRequestComplete
VerifierNdisMSendNetBufferListsComplete
VerifierNdisMiniportDevicePnPEventNotify
VerifierNdisMiniportHaltEx
VerifierNdisMiniportOidRequest
VerifierNdisMiniportSendNetBufferLists
VerifierNtCreateFile
VerifierNtLockFile
VerifierNtReadFile
VerifierNtUnlockFile
VerifierNtWriteFile
VerifierObGetObjectSecurity
VerifierObReferenceObjectByHandle
VerifierObReferenceObjectByHandleWithTag
VerifierObReferenceObjectByPointer
VerifierObReferenceObjectByPointerWithTag
VerifierObReleaseObjectSecurity
VerifierObfDereferenceObject
VerifierObfDereferenceObjectWithTag
VerifierObfReferenceObject
VerifierObfReferenceObjectWithTag
VerifierPoCallDriver
VerifierPoFxActivateComponent
VerifierPoFxCompleteDevicePowerNotRequired
VerifierPoFxCompleteIdleCondition
VerifierPoFxCompleteIdleState
VerifierPoFxIdleComponent
VerifierPoFxNotifySurprisePowerOn
VerifierPoFxPowerControl
VerifierPoFxRegisterDevice
VerifierPoFxReportDevicePoweredOn
VerifierPoFxSetComponentLatency
VerifierPoFxSetComponentResidency
VerifierPoFxSetComponentWake
VerifierPoFxSetDeviceIdleTimeout
VerifierPoFxStartDevicePowerManagement
VerifierPoFxUnregisterDevice
VerifierPoRequestPowerIrp
VerifierPortExAllocatePoolWithQuotaTag
VerifierPortExAllocatePoolWithTagPriority
VerifierPortIoAllocateIrp
VerifierPortIoAllocateMdl
VerifierPortIoAllocateWorkItem
VerifierPortKeAcquireSpinLock
VerifierPortKeAcquireSpinLockNoXdv
VerifierPortKeReleaseSpinLock
VerifierPortKeReleaseSpinLockNoXdv
VerifierProbeForRead
VerifierProbeForWrite
VerifierPsAssignImpersonationToken
VerifierPsCreateSystemThread
VerifierPsDereferenceImpersonationToken
VerifierPsDereferencePrimaryToken
VerifierPsDisableImpersonation
VerifierPsGetVersion
VerifierPsImpersonateClient
VerifierPsReferenceImpersonationToken
VerifierPsReferencePrimaryToken
VerifierPsRemoveLoadImageNotifyRoutine
VerifierPsRestoreImpersonation
VerifierPsRevertToSelf
VerifierPsSetCreateProcessNotifyRoutine
VerifierPsSetCreateProcessNotifyRoutineEx
VerifierPsSetCreateThreadNotifyRoutine
VerifierPsSetLoadImageNotifyRoutine
VerifierPsTerminateSystemThread
VerifierRtlAnsiStringToUnicodeString
VerifierRtlCompareUnicodeString
VerifierRtlCreateUnicodeString
VerifierRtlDeleteRegistryValue
VerifierRtlDowncaseUnicodeChar
VerifierRtlDowncaseUnicodeString
VerifierRtlDuplicateUnicodeString
VerifierRtlEqualUnicodeString
VerifierRtlFreeUnicodeString
VerifierRtlGUIDFromString
VerifierRtlGenerateClass5Guid
VerifierRtlHashUnicodeString
VerifierRtlOemStringToCountedUnicodeString
VerifierRtlOemStringToUnicodeString
VerifierRtlStringFromGUID
VerifierRtlUTF8ToUnicodeN
VerifierRtlUnicodeStringToAnsiString
VerifierRtlUnicodeStringToCountedOemString
VerifierRtlUnicodeStringToOemString
VerifierRtlUnicodeToUTF8N
VerifierRtlUpcaseUnicodeChar
VerifierRtlUpcaseUnicodeString
VerifierRtlUpcaseUnicodeStringToAnsiString
VerifierRtlUpcaseUnicodeStringToCountedOemString
VerifierRtlUpcaseUnicodeStringToOemString
VerifierRtlxAnsiStringToUnicodeSize
VerifierRtlxUnicodeStringToAnsiSize
VerifierSeAccessCheck
VerifierSeAssignSecurity
VerifierSeAssignSecurityEx
VerifierSeDeassignSecurity
VerifierSeLockSubjectContext
VerifierSeReleaseSubjectContext
VerifierSeSinglePrivilegeCheck
VerifierSeUnlockSubjectContext
VerifierSeValidSecurityDescriptor
VerifierZwAllocateLocallyUniqueId
VerifierZwClose
VerifierZwCommitComplete
VerifierZwCommitTransaction
VerifierZwCreateKeyTransacted
VerifierZwCreateResourceManager
VerifierZwDeleteKey
VerifierZwEnumerateTransactionObject
VerifierZwFlushBuffersFile
VerifierZwFlushKey
VerifierZwGetNotificationResourceManager
VerifierZwLockFile
VerifierZwMakeTemporaryObject
VerifierZwOpenKeyEx
VerifierZwOpenKeyTransacted
VerifierZwOpenKeyTransactedEx
VerifierZwOpenResourceManager
VerifierZwPrePrepareComplete
VerifierZwQueryInformationResourceManager
VerifierZwQueryQuotaInformationFile
VerifierZwReadOnlyEnlistment
VerifierZwRecoverEnlistment
VerifierZwRecoverTransactionManager
VerifierZwRenameKey
VerifierZwRollbackComplete
VerifierZwRollbackTransaction
VerifierZwSetInformationResourceManager
VerifierZwSetInformationToken
VerifierZwSetQuotaInformationFile
VerifierZwSetTimerEx
VerifierZwTerminateProcess
VerifierZwUnlockFile
VerifierZwUnmapViewOfSection
VfAddVerifierEntry
VfAfterCallDriver
VfAllocPoolNotification
VfAllocateAdapterChannel
VfAllocateAdapterChannelEx
VfAllocateCommonBuffer
VfAllocateCommonBufferEx
VfAllocateCrashDumpRegisters
VfAvlCleanupLockContext
VfAvlDeleteTreeNode
VfAvlEnumerateNodes
VfAvlInitializeLockContext
VfAvlInitializeTree
VfAvlInsertReservedTreeNode
VfAvlLookupTreeNode
VfAvlReserveNode
VfBeforeCallDriver
VfBugCheckNoStackUsage
VfBuildMdlFromScatterGatherList
VfBuildScatterGatherList
VfBuildScatterGatherListEx
VfCalculateScatterGatherListSize
VfCancelAdapterChannel
VfCancelMappedTransfer
VfCheckForLookaside
VfCheckForResource
VfCheckUserHandle
VfConfigureAdapterChannel
VfCtxHookAndConnectInterruptEx
VfCtxInit
VfDeadlockAcquireResource
VfDeadlockAfterCallDriver
VfDeadlockBeforeCallDriver
VfDeadlockDeleteMemoryRange
VfDeadlockInitialize
VfDeadlockInitializeResource
VfDeadlockReleaseResource
VfDevObjAdjustFdoForVerifierFilters
VfDevObjIsDeviceRemoved
VfDevObjMarkDeviceRemoved
VfDevObjPostAddDevice
VfDevObjPreAddDevice
VfDisableHalVerifier
VfDriverEnableVerifier
VfDriverEnableVerifierForAll
VfDriverInitStarting
VfDriverInitSuccess
VfDriverLoadBootDrivers
VfDriverLoadImage
VfDriverLock
VfDriverUnloadImage
VfDriverUnlock
VfErrorReleaseTriageInformation
VfErrorReport7
VfErrorReport8
VfErrorStoreTriageInformation
VfFailDeviceNode
VfFailDriver
VfFailSystemBIOS
VfFastIoCheckState
VfFastIoSnapState
VfFaultsInjectPoolAllocationFailure
VfFaultsInjectResourceFailure
VfFaultsIsSystemSufficientlyBooted
VfFaultsSetParameters
VfFillAllocatePagesForMdl
VfFillAllocatedMemory
VfFilterAttach
VfFlushAdapterBuffers
VfFlushAdapterBuffersEx
VfFreeAdapterChannel
VfFreeAdapterObject
VfFreeCapturedUnicodeString
VfFreeCommonBuffer
VfFreeMapRegisters
VfFreeMemoryNotification
VfFreePoolNotification
VfGetDmaAdapter
VfGetDmaAdapterInfo
VfGetDmaAlignment
VfGetDmaTransferInfo
VfGetHookAddressForOriginal
VfGetScatterGatherList
VfGetScatterGatherListEx
VfGetVerifierInformation
VfGetVerifierInformationEx
VfHalAllocateMapRegisters
VfInitBootDriversLoaded
VfInitSetVerifyDriverTargets
VfInitSystemNoRebootNeeded
VfInitVerifierComponents
VfInitializeBranchTracing
VfInitializeDmaTransferContext
VfInsertContext
VfIoAllocateIrp1
VfIoAllocateIrp2
VfIoCompletionCheckState
VfIoDeleteDevice
VfIoDetachDevice
VfIoFreeIrp
VfIoInitializeIrp
VfIrpAllocateCallDriverData
VfIrpDatabaseCheckExFreePool
VfIrpDatabaseEntryAcquireLock
VfIrpDatabaseEntryFindAndLock
VfIrpDatabaseEntryInsertAndLock
VfIrpDatabaseEntryReleaseLock
VfIrpLogDeleteDeviceLogs
VfIrpLogLockDatabase
VfIrpLogRecordEvent
VfIrpLogRetrieveWmiData
VfIrpLogUnlockDatabase
VfIrpSendSynchronousIrp
VfIrpWatermark
VfIsPCIBus
VfIsVerificationEnabled
VfIsVerificationEnabledForImage
VfIsVerifierEnabled
VfIsVerifierExtensionEnabled
VfKeActivityNotification
VfKeCheckForChanges
VfKeInitPhase1
VfKeInsertQueueDpc
VfKeIrqlTransitionReserveLogEntry
VfKeRemoveQueueDpc
VfLookasideInitializeInternalNPagedList
VfMajorAdvanceIrpStatus
VfMajorBuildIrpLogEntry
VfMajorIsNewRequest
VfMajorIsValidIrpStatus
VfMajorRegisterHandlers
VfMajorTestStartedPdoStack
VfMajorVerifyFinalIrpStack
VfMajorVerifyIrpStackDownward
VfMajorVerifyIrpStackUpward
VfMajorVerifyNewIrp
VfMajorVerifyNewRequest
VfMapTransfer
VfMapTransferEx
VfNotifyOfHibernate
VfNotifyVerifierExtensions
VfNotifyVerifierOfEvent
VfPacketCreateAndLock
VfPendingCheckForChanges
VfPendingFinishLogging
VfPendingInitPhase1
VfPendingMoreProcessingRequired
VfPendingStartLogging
VfPnpAdvanceIrpStatus
VfPnpDumpIrpStack
VfPnpIsSystemRestrictedIrp
VfPnpTestStartedPdoStack
VfPnpVerifyIrpStackDownward
VfPnpVerifyIrpStackUpward
VfPnpVerifyNewRequest
VfPoolCheckForLeaks
VfPoolDelayFreeIfPossible
VfPoolInitPhase1
VfPowerDumpIrpStack
VfPowerIsSystemRestrictedIrp
VfPowerTestStartedPdoStack
VfPowerVerifyIrpStackDownward
VfPowerVerifyIrpStackUpward
VfPowerVerifyNewRequest
VfProbeAndCaptureUnicodeString
VfProbeAndCaptureUnicodeStringBuffer
VfPutDmaAdapter
VfPutScatterGatherList
VfQueryDeviceContext
VfQueryDispatchTable
VfQueryDriverContext
VfQueryIrpContext
VfQueryThreadContext
VfRandomGetNumber
VfReadDmaCounter
VfRemLockDeleteMemoryRange
VfRemLockReportBadReleaseAndWaitTag
VfRemLockReportBadReleaseTag
VfRemoveContext
VfRemoveVerifierEntry
VfReportIssueWithOptions
VfSetIoBuildRequest
VfSetVerifierInformation
VfSetVerifierInformationEx
VfSetVerifierRunningMode
VfSettingsApplyMiscellaneousChecks
VfSettingsCheckForChanges
VfSettingsMiscellaneousChecksInitPhase1
VfShutdownScheduleWatchdog
VfStartBranchTracing
VfStopBranchTracing
VfSuspectDriversAllocateEntry
VfSuspectDriversGetVerifierInformation
VfSuspectDriversInsert
VfSuspectDriversIsLoaded
VfSuspectDriversLoadCallback
VfSuspectDriversParseRegistryString
VfSuspectDriversRemove
VfSuspectDriversUnloadCallback
VfSuspectExcludedDriversAllocateEntry
VfTargetDriversAdd
VfTargetDriversEnableVerifier
VfTargetDriversGetNode
VfTargetDriversGetVerifierData
VfTargetDriversGetZeroCounters
VfTargetDriversIsEnabled
VfTargetDriversRemove
VfTargetEtwRegister
VfTargetEtwUnregister
VfThunkAddDriverThunks
VfThunkAddTargetNotify
VfThunkAdjustExportAddressIfHooked
VfThunkApplyDriverAddedThunks
VfThunkApplyMandatoryThunks
VfThunkApplyThunks
VfThunkFindExportAddressAllTables
VfThunkInit
VfThunkRemoveTargetNotify
VfTriageAddDrivers
VfTriageSystem
VfUtilAddressRangeAdd
VfUtilAddressRangeFit
VfUtilAddressRangeRemove
VfUtilAddressRangeRemoveCheckEmpty
VfUtilClearOneBootSettings
VfUtilDbgPrint
VfUtilFreePoolCheckIRQL
VfUtilFreePoolDispatchLevel
VfUtilIsLocalSystem
VfUtilIsProtectedDriver
VfUtilPrintCheckinString
VfUtilSynchronizationObjectSanityChecks
VfWdCheckForSettingsChange
VfWdInit
VfWdSetCancelTimeout
VfWmiDumpIrpStack
VfWmiTestStartedPdoStack
VfWmiVerifyIrpStackDownward
VfWmiVerifyIrpStackUpward
VfWmiVerifyNewRequest
VfXdvDriverCaptureIoCallbacks
VfXdvExcludeParseRegistryString
VfZwAccessCheckAndAuditAlarm
VfZwAddBootEntry
VfZwAddDriverEntry
VfZwAdjustPrivilegesToken
VfZwAllocateVirtualMemory
VfZwAlpcAcceptConnectPort
VfZwAlpcConnectPort
VfZwAlpcCreatePort
VfZwAlpcCreatePortSection
VfZwAlpcCreateResourceReserve
VfZwAlpcCreateSectionView
VfZwAlpcCreateSecurityContext
VfZwAlpcQueryInformation
VfZwAlpcSendWaitReceivePort
VfZwAlpcSetInformation
VfZwCancelIoFile
VfZwCancelTimer
VfZwCloseObjectAuditAlarm
VfZwCommitEnlistment
VfZwConnectPort
VfZwCreateDirectoryObject
VfZwCreateEnlistment
VfZwCreateEvent
VfZwCreateFile
VfZwCreateJobObject
VfZwCreateKey
VfZwCreateSection
VfZwCreateSymbolicLinkObject
VfZwCreateTimer
VfZwCreateTransaction
VfZwCreateTransactionManager
VfZwDeleteBootEntry
VfZwDeleteFile
VfZwDeleteValueKey
VfZwDeviceIoControlFile
VfZwDisplayString
VfZwDuplicateObject
VfZwDuplicateToken
VfZwEnumerateBootEntries
VfZwEnumerateDriverEntries
VfZwEnumerateKey
VfZwEnumerateValueKey
VfZwFlushInstructionCache
VfZwFlushVirtualMemory
VfZwFreeVirtualMemory
VfZwFsControlFile
VfZwLoadDriver
VfZwLoadKey
VfZwMapViewOfSection
VfZwModifyBootEntry
VfZwModifyDriverEntry
VfZwNotifyChangeKey
VfZwOpenDirectoryObject
VfZwOpenEnlistment
VfZwOpenEvent
VfZwOpenFile
VfZwOpenJobObject
VfZwOpenKey
VfZwOpenProcess
VfZwOpenProcessToken
VfZwOpenProcessTokenEx
VfZwOpenSection
VfZwOpenSymbolicLinkObject
VfZwOpenThread
VfZwOpenThreadToken
VfZwOpenThreadTokenEx
VfZwOpenTimer
VfZwOpenTransaction
VfZwOpenTransactionManager
VfZwPowerInformation
VfZwPrePrepareEnlistment
VfZwPrepareComplete
VfZwPrepareEnlistment
VfZwPulseEvent
VfZwQueryBootEntryOrder
VfZwQueryBootOptions
VfZwQueryDefaultLocale
VfZwQueryDefaultUILanguage
VfZwQueryDirectoryFile
VfZwQueryDirectoryObject
VfZwQueryDriverEntryOrder
VfZwQueryEaFile
VfZwQueryFullAttributesFile
VfZwQueryInformationEnlistment
VfZwQueryInformationFile
VfZwQueryInformationJobObject
VfZwQueryInformationProcess
VfZwQueryInformationThread
VfZwQueryInformationToken
VfZwQueryInformationTransaction
VfZwQueryInformationTransactionManager
VfZwQueryInstallUILanguage
VfZwQueryKey
VfZwQueryLicenseValue
VfZwQueryObject
VfZwQuerySection
VfZwQuerySecurityObject
VfZwQuerySymbolicLinkObject
VfZwQuerySystemInformation
VfZwQueryValueKey
VfZwQueryVolumeInformationFile
VfZwReadFile
VfZwRemoveIoCompletionEx
VfZwReplaceKey
VfZwRequestWaitReplyPort
VfZwResetEvent
VfZwRestoreKey
VfZwRollbackEnlistment
VfZwSetBootEntryOrder
VfZwSetBootOptions
VfZwSetDriverEntryOrder
VfZwSetEaFile
VfZwSetEvent
VfZwSetInformationEnlistment
VfZwSetInformationFile
VfZwSetInformationJobObject
VfZwSetInformationObject
VfZwSetInformationProcess
VfZwSetInformationThread
VfZwSetInformationTransaction
VfZwSetSecurityObject
VfZwSetSystemInformation
VfZwSetSystemTime
VfZwSetTimer
VfZwSetValueKey
VfZwSetVolumeInformationFile
VfZwTranslateFilePath
VfZwUnloadDriver
VfZwUnloadKey
VfZwWaitForMultipleObjects
VfZwWaitForSingleObject
VfZwWriteFile
VhdiGetDiskParameters
VhdiGetPartitionNumber
VhdiGetVolumeNumber
VhdiInitializeBootDisk
VhdiMountVhdFile
VhdiQueryVolumeVhdFilePath
VhdiVerifyBootDisk
ViAdapterCallback
ViAllocateContiguousMemory
ViAllocateFromContiguousMemory
ViAllocateMapRegisterFile
ViAllocateMapRegistersFromFile
ViAvlAcquireTableLockAtDpcLevel
ViAvlAcquireTableLockAtDpcLevelSafe
ViAvlAllocateNode
ViAvlCompareNode
ViAvlReleaseTableLockFromDpcLevel
ViAvlTableIndex
ViCheckAdapterBuffers
ViCheckMdlLength
ViCheckPadding
ViCheckTag
ViCommonBufferCalculatePadding
ViCopyBackModifiedBuffer
ViCopyDeviceDescription
ViCreateProcessCallback
ViCreateProcessCallbackInternal
ViCtxAllocateIsrContext
ViCtxCaptureInitialIsrState
ViCtxCheckAndReleaseIsrState
ViCtxEqualExtendedState
ViCtxIsr
ViCtxIsrMessageBased
ViCtxSetPrivateConnectParameters
ViDdiBuildWmiRegInfoData
ViDdiDispatchWmi
ViDdiDispatchWmiQueryAllData
ViDdiDispatchWmiRegInfoEx
ViDdiDriverEntry
ViDeadlockAddParticipant
ViDeadlockAddResource
ViDeadlockAddThread
ViDeadlockAllocate
ViDeadlockAnalyze
ViDeadlockCanProceed
ViDeadlockCertify
ViDeadlockCheckDuplicatesAmongChildren
ViDeadlockCheckDuplicatesAmongRoots
ViDeadlockCheckStackLimits
ViDeadlockDetectionApplySettings
ViDeadlockDetectionLock
ViDeadlockDetectionUnlock
ViDeadlockEmptyDatabase
ViDeadlockForgetResourceHistory
ViDeadlockFree
ViDeadlockKernelVerifierLookasideAllocate
ViDeadlockMergeNodes
ViDeadlockPopulateLookasideCache
ViDeadlockPreprocessOptions
ViDeadlockRemoveNode
ViDeadlockRemoveResource
ViDeadlockRemoveThread
ViDeadlockSearchResource
ViDeadlockSearchThread
ViDeadlockSimilarNode
ViDeadlockSimilarNodes
ViDeadlockTrimResources
ViDeadlockUpdateChildrenCount
ViDevObjAdd
ViDevObjDelayFreeAvlNode
ViDevObjRemove
ViDriverReApplyVerifierForAll
ViErrorDisplayDescription
ViErrorFinishReport
ViExAcquireFastMutexCommon
ViExCheckAPCLevelOrBelow
ViExCheckAPCsDisabled
ViExReleaseFastMutexCommon
ViExTryToAcquireFastMutexCommon
ViFaultsAddAllApps
ViFaultsAddAllTags
ViFaultsAddAppNoDuplicates
ViFaultsAddTagNoDuplicates
ViFaultsGetBaseImageName
ViFaultsInitializeAppsList
ViFaultsInitializeTagsList
ViFaultsInjectionNotification
ViFaultsIsAppTarget
ViFaultsIsCurrentAppTarget
ViFaultsIsTagPresentInList
ViFaultsIsTagTarget
ViFaultsRemoveAllApps
ViFaultsRemoveAllTags
ViFilterAddDevice
ViFilterDeviceUsageNotificationCompletion
ViFilterDispatchGeneric
ViFilterDispatchPnp
ViFilterDispatchPower
ViFilterDriverEntry
ViFilterGenericCompletionRoutine
ViFilterIsDeviceExcluded
ViFilterRemoveNotificationCompletion
ViFilterStartCompletionRoutine
ViFindMappedRegisterInFile
ViFindTriageDriverTargets
ViFindTriageRule
ViFlushDoubleBuffer
ViFlushZeroMapRegisterBaseWcbs
ViFreeMapRegisterFile
ViFreeMapRegistersToFile
ViFreeToContiguousMemory
ViFreeTrackedPool
ViGenericAddDevice
ViGenericBuildIrpLogEntry
ViGenericCleanup
ViGenericClose
ViGenericCreate
ViGenericCreateMailslot
ViGenericCreateNamedPipe
ViGenericDeviceChange
ViGenericDeviceControl
ViGenericDirectoryControl
ViGenericDispatchHandler
ViGenericDriverEntry
ViGenericDriverStartIo
ViGenericDriverUnload
ViGenericDumpIrpStack
ViGenericFileSystemControl
ViGenericFlushBuffers
ViGenericInternalDeviceControl
ViGenericIsNewRequest
ViGenericIsValidIrpStatus
ViGenericLockControl
ViGenericPnp
ViGenericPower
ViGenericQueryEa
ViGenericQueryInformation
ViGenericQueryQuota
ViGenericQuerySecurity
ViGenericQueryVolumeInformation
ViGenericRead
ViGenericSetEa
ViGenericSetInformation
ViGenericSetQuota
ViGenericSetSecurity
ViGenericSetVolumeInformation
ViGenericShutdown
ViGenericSystemControl
ViGenericVerifyFinalIrpStack
ViGenericVerifyIrpStackDownward
ViGenericVerifyIrpStackUpward
ViGenericVerifyNewIrp
ViGenericVerifyNewRequest
ViGenericWrite
ViGetAdapterInformation
ViGetContextPointer
ViGetMapRegisterFile
ViGetMdlBufferSa
ViGetRealDmaOperation
ViGrowPoolAllocation
ViHalApplySettings
ViHalPreprocessOptions
ViHasBufferBeenTouched
ViHookDmaAdapter
ViInitSystemPhase0
ViInitializeLocalSystemDescriptor
ViInitializePadding
ViIoCallbackSnapState
ViIrpAllocateLockedPacket
ViIrpCheckKernelAddressForIrp
ViIrpDatabaseAcquireLockExclusive
ViIrpDatabaseAcquireLockShared
ViIrpDatabaseFindPointer
ViIrpDatabaseReleaseLockExclusive
ViIrpDatabaseReleaseLockShared
ViIrpLogDatabaseFindPointer
ViIrpLogExposeWmiCallback
ViIrpSynchronousCompletionRoutine
ViIsActiveChannelWcb
ViIsBTSSupported
ViIsDriverSuspectForVerifier
ViIsThreadInsidePagingCodePaths
ViKeInjectStatusAlerted
ViKeLowerIrqlSanityChecks
ViKeObjectAcquired
ViKeRaiseIrqlSanityChecks
ViKeTrimWorkerThreadRoutine
ViLockContextPointer
ViLookasideAdd
ViLookasideDelayFreeAvlNode
ViLookasideDelete
ViLookasideTrackList
ViLookupThunkArray
ViMakeVerifierSettings
ViMapDoubleBuffer
ViMmMapLockedPagesSanityChecks
ViMmValidateIrql
ViPacketNotificationCallback
ViPendingCompleteAfterWait
ViPendingCompleteAtDPC
ViPendingDelayCompletion
ViPendingQueuePassiveLevelCompletion
ViPendingWorkerThread
ViPnpVerifyMinorWasProcessedProperly
ViPoolDelayFreeTrimThreadRoutine
ViPoolLogStackCallout
ViPoolLogStackTrace
ViPostPoolAllocation
ViQueryObjectContext
ViReleaseDmaAdapter
ViRemLockDelayFreeAvlNode
ViRemLockDeleteFirstTreeNode
ViRemLockFindSurrogate
ViRemoveChannelWcb
ViResourceAcquireSanityChecks
ViResourceDelayFreeNode
ViResourceReleaseSanityChecks
ViRtlReplaceStringBuffer
ViScatterGatherCallback
ViSettingsEnableKernelHandleChecking
ViSettingsIoCheckForChanges
ViSetupBTSPerProcNoEnable
ViShutdownScheduleWatchdog
ViShutdownWatchdogExecuteDpc
ViSpecialAllocateCommonBuffer
ViSpecialFreeCommonBuffer
ViSuspectDriversLookupEntry
ViSwap
ViTagBuffer
ViTargetAddCountersCallback
ViTargetAddToCounter
ViTargetDelayFreeAvlNode
ViTargetDriversAllocateVerifiedData
ViTargetFreeContiguousMemory
ViTargetFreeContiguousMemoryCallback
ViTargetFreeContiguousMemoryFromNode
ViTargetIncrementCounter
ViTargetRemovingCheckContiguousMemory
ViTargetRemovingCheckEtwWmi
ViTargetTrackContiguousMemory
ViTargetUpdateTreeAllowed
ViTargetWMIDeregister
ViTargetWMIDeregisterCallback
ViTargetWMIRegister
ViThunkAdjustExportAddressIfHooked
ViThunkApplyMandatoryThunksCurrentSession
ViThunkApplyThunksCurrentSession
ViThunkCreateSharedExportInformation
ViThunkFindAllExportAddresses
ViThunkFindExportAddress
ViThunkFreeSharedThunksArray
ViThunkIsExportAddressShared
ViThunkReplaceAllSharedExports
ViThunkReplaceAllThunkedImports
ViThunkReplaceImportIfThunkedRegular
ViThunkReplaceSharedExports
ViThunkSnapSharedExportByName
ViThunkSnapSharedExports
ViTriageSameDriversFromDump
ViValidateTriageRules
ViWdBeforeCallDriver
ViWdBeforeCancelIrp
ViWdInsertSortIrp
ViWdIrpBeforeCompletionRoutine
ViWdIrpTimedOut
ViWdIrpTimerDpcRoutine
ViWdStartTimer
ViXdvBindXdvDDIWrappers
ViXdvBindXdvDriverEntryWrappers
ViXdvDriverLoadImage
ViXdvGetFuncAddress
ViXdvSearchAllThunkArrays
ViXdvSearchAndReplaceThunkArray
ViXdvSearchAndReplaceThunkArrayOrderDependent
ViZwCheckAddress
ViZwCheckApcRequirement
ViZwCheckObjectAttributes
ViZwCheckUnicodeString
ViZwShouldCheck
WMIInitialize
WdiDispatchControl
WdiUpdateSem
WdipAccessCheck
WdipSemActivateInstance
WdipSemAddContextEventToScenario
WdipSemAddEndEventToScenario
WdipSemAddScenarioToTable
WdipSemAllocatePool
WdipSemBuildScenarioInstance
WdipSemCaptureState
WdipSemCleanStart
WdipSemCleanupGroupPolicy
WdipSemClearFrequentScenarioTable
WdipSemDeleteTransitionalInstance
WdipSemDisableAllProviders
WdipSemDisableContextProvider
WdipSemDisableContextProviders
WdipSemDisableScenario
WdipSemEnableAllProviders
WdipSemEnableContextProvider
WdipSemEnableContextProviders
WdipSemEnableDisableTrace
WdipSemEnableScenario
WdipSemEnableSemProvider
WdipSemFastAllocate
WdipSemFastFree
WdipSemFreePool
WdipSemFreeScenario
WdipSemGetGuidKey
WdipSemGetLoggerDroppedEventCount
WdipSemGetLoggerIds
WdipSemInitialize
WdipSemInitializeGlobalState
WdipSemLoadConfigInfo
WdipSemLoadGroupPolicy
WdipSemLoadLocalGroupPolicy
WdipSemLoadNextContextProvider
WdipSemLoadNextEndEvent
WdipSemLoadNextScenario
WdipSemLoadScenarioTable
WdipSemLogInflightLimitExceededInformation
WdipSemLogTimeoutInformation
WdipSemMarkInstanceForDeletion
WdipSemMarkNextTimedOutInstanceForDeletion
WdipSemMergeEvents
WdipSemMergeScenarios
WdipSemOpenRegistryKey
WdipSemQueryEnabledInstanceTable
WdipSemQueryInflightScenarioTable
WdipSemQueryProviderTable
WdipSemQueryScenarioTable
WdipSemQueryValueFromRegistry
WdipSemReserveInstanceTableEntry
WdipSemRollBackProviderTable
WdipSemShutdown
WdipSemSqmAddToStream
WdipSemSqmEnabled
WdipSemSqmIncrementDword
WdipSemSqmInit
WdipSemSqmLogInflightLimitExceededDataPoints
WdipSemSqmLogTimeoutDataPoints
WdipSemStartTimeoutCheck
WdipSemUpdate
WdipSemUpdateFrequentScenarioTable
WdipSemUpdateInflightScenarioTable
WdipSemUpdateProviderEntriesForScenario
WdipSemUpdateProviderEntryForEvent
WdipSemUpdateProviderTableWithEvent
WdipSemUpdateProviderTableWithScenario
WdipSemValidateEndEvent
WdipSemWriteEvent
WdipSemWriteInflightLimitExceededEvent
WdipSemWriteMisconfigEvent
WdipSemWriteProviderLimitExceededEvent
WdipSemWriteScenarioLimitExceededEvent
WdipSemWriteSemActionsEvent
WdipSemWriteSemFailureEvent
WdipSemWriteTimeoutEvent
WdipStartEndScenario
WdipTimeoutCheckRoutine
WdipTimeoutDpcRoutine
WheaAddErrorSource
WheaAttemptPhysicalPageOffline
WheaConfigureErrorSource
WheaCrashDumpInitializationComplete
WheaDeferredRecoveryService
WheaGetErrPacketFromErrRecord
WheaGetErrorSource
WheaInitialize
WheaInitializeDeferredRecoveryObject
WheaInitializeProcessor
WheaInitializeRecordHeader
WheaInitializeServices
WheaPersistOfflinedPage
WheaRegisterInUsePageOfflineNotification
WheaReportHwError
WheaRequestDeferredRecovery
WheaTerminateProcess
WheaUnregisterInUsePageOfflineNotification
WheaWmiDispatch
WheapAddErrorSource
WheapAddSectionFromGenericErrorData
WheapAddToDumpFile
WheapAllocErrorRecord
WheapApplyPolicyChanges
WheapApplyThresholdChecks
WheapAttemptErrorRecovery
WheapAttemptPhysicalPageOffline
WheapAttemptPhysicalPageOfflineWorker
WheapCallInUsePageNotificationCallbacks
WheapCheckForAndReportErrorsFromPreviousSession
WheapCommitPolicy
WheapCompressErrorRecord
WheapCountBadPageExtents
WheapCreateLiveTriageDump
WheapCreatePerProcessorInfo
WheapCreateRecordFromGenericErrorData
WheapCreateTriageDumpFromPreviousSession
WheapDefaultErrSrcCorrect
WheapDefaultErrSrcCreateRecord
WheapDefaultErrSrcInitialize
WheapDefaultErrSrcRecover
WheapDeferredRecoveryServiceDpcRoutine
WheapDeferredRecoveryServiceWorker
WheapEtwEnableCallback
WheapFillOutErrorRecord
WheapFreeErrorRecord
WheapGenerateETWEvents
WheapGetAllPolicyBufferSize
WheapGetAllPolicyValues
WheapGetErrorSource
WheapGetPolicyValue
WheapInitializeDeferredErrorSources
WheapInitializeErrorRecordWrapper
WheapInitializeErrorSource
WheapInitializeErrorSourceTable
WheapInitializeEventing
WheapInitializeInUsePageOfflineNotifications
WheapInitializeWorkQueue
WheapInsertTriageDataBlock
WheapIsPageInList
WheapIsSqmLoggerRunning
WheapLoadPolicy
WheapLogInitEvent
WheapLogPageOfflineAttemptEvent
WheapLogProcessTerminateEvent
WheapPfaCollectSqmData
WheapPfaMemoryCheck
WheapPfaReset
WheapPfaRetireExpiredMemoryEntries
WheapPredictiveFailureAnalysis
WheapProcessWorkQueueItem
WheapQueryPshedForErrorSources
WheapReportBootError
WheapReportPersistedErrorRecord
WheapSetPolicyValue
WheapSortBadPages
WheapSqmAddToStream
WheapSqmCollectConfigurationDataPoints
WheapSqmCollectPshedPluginTelemetry
WheapSqmCollectWheaOscTelemetry
WheapSqmCollectWheaPolicyTelemetry
WheapSqmDwordCommon
WheapSqmIncrementDword
WheapSqmSetDword
WheapSqmWaitDpcRoutine
WheapSqmWaitWorkerRoutine
WheapWmiExecuteErrorInjectionMethod
WheapWmiExecuteErrorSourceMethod
WheapWmiExecuteMethod
WheapWmiExecutePolicyManagementMethod
WheapWorkQueueAddItem
WheapWorkQueueDpcRoutine
WheapWorkQueueWorkerRoutine
WheapWriteTriageDump
Win7PsGetVersion
Win7RtlGetVersion
Win8PsGetVersion
Win8RtlGetVersion
WmiGetClock
WmiQueryTraceInformation
WmiQueryTraceProviderCount
WmiSetNetworkNotify
WmiTraceMessage
WmiTraceMessageVa
WmiTraceRundownNotify
WmiVerifierCopyEvent
WmiVerifierTakeEventOwnership
WmipAddDataSource
WmipAddMofResource
WmipAddProviderIdToPIList
WmipAllocDataSource
WmipAllocEntry
WmipAllocGuidEntry
WmipAllocProviderId
WmipAllocRegEntry
WmipAllocateSingleInstanceWnode
WmipBuildInstanceSet
WmipBuildTraceDeviceList
WmipCachePtrs
WmipClearIrpObjectList
WmipCompleteGuidIrpWithError
WmipCopyFromEventQueues
WmipCountedToSz
WmipCreateAdminSD
WmipCreateGuidObject
WmipDSCleanup
WmipDeleteMethod
WmipDeliverWnodeToDS
WmipDereferenceEvent
WmipDeregisterDevice
WmipDeregisterRegEntry
WmipDetermineInstanceBaseIndex
WmipDisableCollectOrEvent
WmipDisableCollectionForRemovedGuid
WmipDoDisableRequest
WmipDoFindRegEntryByDevice
WmipDoFindRegEntryByProviderId
WmipDriverEntry
WmipEnableCollectOrEvent
WmipEnableCollectionForNewGuid
WmipEnumerateGuids
WmipEnumerateMofResources
WmipEventNotification
WmipFindGEByGuid
WmipFindGuid
WmipFindISInDSByGuid
WmipFindISinGEbyName
WmipFindMRByNames
WmipFindRegEntryByDevice
WmipFindRegEntryByProviderId
WmipFindSMBiosStructure
WmipFindSysIdTable
WmipFirmwareTableHandler
WmipForwardWmiIrp
WmipFreeTraceDeviceList
WmipGECleanup
WmipGenerateBinaryMofNotification
WmipGenerateMofResourceNotification
WmipGenerateRegistrationNotification
WmipGetFilePDO
WmipGetGuidObjectInstanceInfo
WmipGetGuidPropertiesFromGuidEntry
WmipGetGuidSecurityDescriptor
WmipGetSMBiosEventlog
WmipGetSMBiosFromLoaderBlock
WmipGetSMBiosTableData
WmipGetSysIds
WmipHexStringToDword
WmipISCleanup
WmipIncludeStaticNames
WmipInitializeAllocs
WmipInitializeDataStructs
WmipInitializeRegistration
WmipInitializeSecurity
WmipInsertMofResource
WmipInsertStaticNames
WmipIoControl
WmipIsEqualInstanceSets
WmipIsNumber
WmipIsQuerySetGuid
WmipLegacyEtwCallback
WmipLegacyEtwWorker
WmipLinkDataSourceToList
WmipMRCleanup
WmipMangleInstanceName
WmipNotificationIrpCancel
WmipOpenBlock
WmipOpenCloseCleanup
WmipOpenGuidObject
WmipParseSysIdTable
WmipPrepareForWnodeAD
WmipPrepareWnodeSI
WmipProbeAndCaptureGuidObjectAttributes
WmipProbeWmiOpenGuidBlock
WmipProbeWnodeMethodItem
WmipProbeWnodeSingleInstance
WmipProbeWnodeSingleItem
WmipProbeWnodeWorker
WmipProcessEvent
WmipProcessLegacyEtwCallback
WmipProcessLegacyEtwRegister
WmipProcessWmiRegInfo
WmipQueryAllData
WmipQueryAllDataMultiple
WmipQueryGuidInfo
WmipQuerySetExecuteSI
WmipQuerySingleMultiple
WmipQueryWmiDataBlock
WmipQueryWmiRegInfo
WmipQueueLegacyEtwWork
WmipQueueNotification
WmipQueueRegWork
WmipRawSMBiosTableHandler
WmipReceiveNotifications
WmipReferenceEntry
WmipRegisterDevice
WmipRegisterEtwProvider
WmipRegisterFirmwareProviders
WmipRegisterOrUpdateDS
WmipRegistrationWorker
WmipReleaseCollectionEnabled
WmipRemoveDS
WmipSDRegistryQueryRoutine
WmipSecurityMethod
WmipSendEnableDisableRequest
WmipSendEnableRequest
WmipSendGuidUpdateNotifications
WmipSendWmiIrp
WmipSendWmiIrpToTraceDeviceList
WmipSetTraceNotify
WmipStaticInstanceNameSize
WmipSystemControl
WmipTranslateFileHandle
WmipTranslatePDOInstanceNames
WmipUnlinkInstanceSetFromGuidEntry
WmipUnreferenceEntry
WmipUnreferenceRegEntry
WmipUnregisterEtwProvider
WmipUpdateAddGuid
WmipUpdateDataSource
WmipUpdateDeviceStackSize
WmipUpdateModifyGuid
WmipUuidFromString
WmipValidateWmiRegInfoString
WmipWaitForCollectionEnabled
WmipWmiIrpCompletion
WmipWriteWnodeToObject
WriteAMDMsr
WritebackInvalidateWorker
XIPDispatch
XdvExAllocatePoolInternal
XdvExInitializeLookasideListExInternal
XdvExInitializeNPagedLookasideListInternal
XdvExInitializePagedLookasideListInternal
XdvIoAllocateIrp
XdvIoAllocateMdl
XdvIoAllocateWorkItem
XdvIoBuildDeviceIoControlRequest
XdvIoBuildSynchronousFsdRequest
XdvIopBuildAsynchronousFsdRequest
XpressBuildHuffmanDecodingTable
XpressBuildHuffmanEncodings
XpressDecode
XpressDecodeClose
XpressDecodeCreate
XpressDoHuffmanPass
ZwAcceptConnectPort
ZwAccessCheck
ZwAccessCheckAndAuditAlarm
ZwAccessCheckByType
ZwAccessCheckByTypeAndAuditAlarm
ZwAccessCheckByTypeResultList
ZwAccessCheckByTypeResultListAndAuditAlarm
ZwAccessCheckByTypeResultListAndAuditAlarmByHandle
ZwAddAtom
ZwAddAtomEx
ZwAddBootEntry
ZwAddDriverEntry
ZwAdjustGroupsToken
ZwAdjustPrivilegesToken
ZwAdjustTokenClaimsAndDeviceGroups
ZwAlertResumeThread
ZwAlertThread
ZwAlertThreadByThreadId
ZwAllocateLocallyUniqueId
ZwAllocateReserveObject
ZwAllocateUserPhysicalPages
ZwAllocateUuids
ZwAllocateVirtualMemory
ZwAlpcAcceptConnectPort
ZwAlpcCancelMessage
ZwAlpcConnectPort
ZwAlpcConnectPortEx
ZwAlpcCreatePort
ZwAlpcCreatePortSection
ZwAlpcCreateResourceReserve
ZwAlpcCreateSectionView
ZwAlpcCreateSecurityContext
ZwAlpcDeletePortSection
ZwAlpcDeleteResourceReserve
ZwAlpcDeleteSectionView
ZwAlpcDeleteSecurityContext
ZwAlpcDisconnectPort
ZwAlpcImpersonateClientOfPort
ZwAlpcOpenSenderProcess
ZwAlpcOpenSenderThread
ZwAlpcQueryInformation
ZwAlpcQueryInformationMessage
ZwAlpcRevokeSecurityContext
ZwAlpcSendWaitReceivePort
ZwAlpcSetInformation
ZwApphelpCacheControl
ZwAreMappedFilesTheSame
ZwAssignProcessToJobObject
ZwAssociateWaitCompletionPacket
ZwCallbackReturn
ZwCancelIoFile
ZwCancelIoFileEx
ZwCancelSynchronousIoFile
ZwCancelTimer
ZwCancelTimer2
ZwCancelWaitCompletionPacket
ZwClearEvent
ZwClose
ZwCloseObjectAuditAlarm
ZwCommitComplete
ZwCommitEnlistment
ZwCommitTransaction
ZwCompactKeys
ZwCompareTokens
ZwCompleteConnectPort
ZwCompressKey
ZwConnectPort
ZwContinue
ZwCreateDebugObject
ZwCreateDirectoryObject
ZwCreateDirectoryObjectEx
ZwCreateEnlistment
ZwCreateEvent
ZwCreateEventPair
ZwCreateFile
ZwCreateIRTimer
ZwCreateIoCompletion
ZwCreateJobObject
ZwCreateJobSet
ZwCreateKey
ZwCreateKeyTransacted
ZwCreateKeyedEvent
ZwCreateLowBoxToken
ZwCreateMailslotFile
ZwCreateMutant
ZwCreateNamedPipeFile
ZwCreatePagingFile
ZwCreatePort
ZwCreatePrivateNamespace
ZwCreateProcess
ZwCreateProcessEx
ZwCreateProfile
ZwCreateProfileEx
ZwCreateResourceManager
ZwCreateSection
ZwCreateSemaphore
ZwCreateSymbolicLinkObject
ZwCreateThread
ZwCreateThreadEx
ZwCreateTimer
ZwCreateTimer2
ZwCreateToken
ZwCreateTokenEx
ZwCreateTransaction
ZwCreateTransactionManager
ZwCreateUserProcess
ZwCreateWaitCompletionPacket
ZwCreateWaitablePort
ZwCreateWnfStateName
ZwCreateWorkerFactory
ZwDebugActiveProcess
ZwDebugContinue
ZwDelayExecution
ZwDeleteAtom
ZwDeleteBootEntry
ZwDeleteDriverEntry
ZwDeleteFile
ZwDeleteKey
ZwDeleteObjectAuditAlarm
ZwDeletePrivateNamespace
ZwDeleteValueKey
ZwDeleteWnfStateData
ZwDeleteWnfStateName
ZwDeviceIoControlFile
ZwDisableLastKnownGood
ZwDisplayString
ZwDrawText
ZwDuplicateObject
ZwDuplicateToken
ZwEnableLastKnownGood
ZwEnumerateBootEntries
ZwEnumerateDriverEntries
ZwEnumerateKey
ZwEnumerateSystemEnvironmentValuesEx
ZwEnumerateTransactionObject
ZwEnumerateValueKey
ZwExtendSection
ZwFilterBootOption
ZwFilterToken
ZwFilterTokenEx
ZwFindAtom
ZwFlushBuffersFile
ZwFlushBuffersFileEx
ZwFlushInstallUILanguage
ZwFlushInstructionCache
ZwFlushKey
ZwFlushProcessWriteBuffers
ZwFlushVirtualMemory
ZwFlushWriteBuffer
ZwFreeUserPhysicalPages
ZwFreeVirtualMemory
ZwFreezeRegistry
ZwFreezeTransactions
ZwFsControlFile
ZwGetCachedSigningLevel
ZwGetCompleteWnfStateSubscription
ZwGetContextThread
ZwGetCurrentProcessorNumber
ZwGetDevicePowerState
ZwGetMUIRegistryInfo
ZwGetNextProcess
ZwGetNextThread
ZwGetNlsSectionPtr
ZwGetNotificationResourceManager
ZwGetWriteWatch
ZwImpersonateAnonymousToken
ZwImpersonateClientOfPort
ZwImpersonateThread
ZwInitializeNlsFiles
ZwInitializeRegistry
ZwInitiatePowerAction
ZwIsProcessInJob
ZwIsSystemResumeAutomatic
ZwIsUILanguageComitted
ZwListenPort
ZwLoadDriver
ZwLoadKey
ZwLoadKey2
ZwLoadKeyEx
ZwLockFile
ZwLockProductActivationKeys
ZwLockRegistryKey
ZwLockVirtualMemory
ZwMakePermanentObject
ZwMakeTemporaryObject
ZwMapCMFModule
ZwMapUserPhysicalPages
ZwMapUserPhysicalPagesScatter
ZwMapViewOfSection
ZwModifyBootEntry
ZwModifyDriverEntry
ZwNotifyChangeDirectoryFile
ZwNotifyChangeKey
ZwNotifyChangeMultipleKeys
ZwNotifyChangeSession
ZwOpenDirectoryObject
ZwOpenEnlistment
ZwOpenEvent
ZwOpenEventPair
ZwOpenFile
ZwOpenIoCompletion
ZwOpenJobObject
ZwOpenKey
ZwOpenKeyEx
ZwOpenKeyTransacted
ZwOpenKeyTransactedEx
ZwOpenKeyedEvent
ZwOpenMutant
ZwOpenObjectAuditAlarm
ZwOpenPrivateNamespace
ZwOpenProcess
ZwOpenProcessToken
ZwOpenProcessTokenEx
ZwOpenResourceManager
ZwOpenSection
ZwOpenSemaphore
ZwOpenSession
ZwOpenSymbolicLinkObject
ZwOpenThread
ZwOpenThreadToken
ZwOpenThreadTokenEx
ZwOpenTimer
ZwOpenTransaction
ZwOpenTransactionManager
ZwPlugPlayControl
ZwPowerInformation
ZwPrePrepareComplete
ZwPrePrepareEnlistment
ZwPrepareComplete
ZwPrepareEnlistment
ZwPrivilegeCheck
ZwPrivilegeObjectAuditAlarm
ZwPrivilegedServiceAuditAlarm
ZwPropagationComplete
ZwPropagationFailed
ZwProtectVirtualMemory
ZwPulseEvent
ZwQueryAttributesFile
ZwQueryBootEntryOrder
ZwQueryBootOptions
ZwQueryDebugFilterState
ZwQueryDefaultLocale
ZwQueryDefaultUILanguage
ZwQueryDirectoryFile
ZwQueryDirectoryObject
ZwQueryDriverEntryOrder
ZwQueryEaFile
ZwQueryEvent
ZwQueryFullAttributesFile
ZwQueryInformationAtom
ZwQueryInformationEnlistment
ZwQueryInformationFile
ZwQueryInformationJobObject
ZwQueryInformationPort
ZwQueryInformationProcess
ZwQueryInformationResourceManager
ZwQueryInformationThread
ZwQueryInformationToken
ZwQueryInformationTransaction
ZwQueryInformationTransactionManager
ZwQueryInformationWorkerFactory
ZwQueryInstallUILanguage
ZwQueryIntervalProfile
ZwQueryIoCompletion
ZwQueryKey
ZwQueryLicenseValue
ZwQueryMultipleValueKey
ZwQueryMutant
ZwQueryObject
ZwQueryOpenSubKeys
ZwQueryOpenSubKeysEx
ZwQueryPerformanceCounter
ZwQueryPortInformationProcess
ZwQueryQuotaInformationFile
ZwQuerySection
ZwQuerySecurityAttributesToken
ZwQuerySecurityObject
ZwQuerySemaphore
ZwQuerySymbolicLinkObject
ZwQuerySystemEnvironmentValue
ZwQuerySystemEnvironmentValueEx
ZwQuerySystemInformation
ZwQuerySystemInformationEx
ZwQuerySystemTime
ZwQueryTimer
ZwQueryTimerResolution
ZwQueryValueKey
ZwQueryVirtualMemory
ZwQueryVolumeInformationFile
ZwQueryWnfStateData
ZwQueryWnfStateNameInformation
ZwQueueApcThread
ZwQueueApcThreadEx
ZwRaiseException
ZwRaiseHardError
ZwReadFile
ZwReadFileScatter
ZwReadOnlyEnlistment
ZwReadRequestData
ZwReadVirtualMemory
ZwRecoverEnlistment
ZwRecoverResourceManager
ZwRecoverTransactionManager
ZwRegisterProtocolAddressInformation
ZwRegisterThreadTerminatePort
ZwReleaseKeyedEvent
ZwReleaseMutant
ZwReleaseSemaphore
ZwReleaseWorkerFactoryWorker
ZwRemoveIoCompletion
ZwRemoveIoCompletionEx
ZwRemoveProcessDebug
ZwRenameKey
ZwRenameTransactionManager
ZwReplaceKey
ZwReplacePartitionUnit
ZwReplyPort
ZwReplyWaitReceivePort
ZwReplyWaitReceivePortEx
ZwReplyWaitReplyPort
ZwRequestPort
ZwRequestWaitReplyPort
ZwResetEvent
ZwResetWriteWatch
ZwRestoreKey
ZwResumeProcess
ZwResumeThread
ZwRollbackComplete
ZwRollbackEnlistment
ZwRollbackTransaction
ZwRollforwardTransactionManager
ZwSaveKey
ZwSaveKeyEx
ZwSaveMergedKeys
ZwSecureConnectPort
ZwSerializeBoot
ZwSetBootEntryOrder
ZwSetBootOptions
ZwSetCachedSigningLevel
ZwSetContextThread
ZwSetDebugFilterState
ZwSetDefaultHardErrorPort
ZwSetDefaultLocale
ZwSetDefaultUILanguage
ZwSetDriverEntryOrder
ZwSetEaFile
ZwSetEvent
ZwSetEventBoostPriority
ZwSetHighEventPair
ZwSetHighWaitLowEventPair
ZwSetIRTimer
ZwSetInformationDebugObject
ZwSetInformationEnlistment
ZwSetInformationFile
ZwSetInformationJobObject
ZwSetInformationKey
ZwSetInformationObject
ZwSetInformationProcess
ZwSetInformationResourceManager
ZwSetInformationThread
ZwSetInformationToken
ZwSetInformationTransaction
ZwSetInformationTransactionManager
ZwSetInformationVirtualMemory
ZwSetInformationWorkerFactory
ZwSetIntervalProfile
ZwSetIoCompletion
ZwSetIoCompletionEx
ZwSetLdtEntries
ZwSetLowEventPair
ZwSetLowWaitHighEventPair
ZwSetQuotaInformationFile
ZwSetSecurityObject
ZwSetSystemEnvironmentValue
ZwSetSystemEnvironmentValueEx
ZwSetSystemInformation
ZwSetSystemPowerState
ZwSetSystemTime
ZwSetThreadExecutionState
ZwSetTimer
ZwSetTimer2
ZwSetTimerEx
ZwSetTimerResolution
ZwSetUuidSeed
ZwSetValueKey
ZwSetVolumeInformationFile
ZwSetWnfProcessNotificationEvent
ZwShutdownSystem
ZwShutdownWorkerFactory
ZwSignalAndWaitForSingleObject
ZwSinglePhaseReject
ZwStartProfile
ZwStopProfile
ZwSubscribeWnfStateChange
ZwSuspendProcess
ZwSuspendThread
ZwSystemDebugControl
ZwTerminateJobObject
ZwTerminateProcess
ZwTerminateThread
ZwTestAlert
ZwThawRegistry
ZwThawTransactions
ZwTraceControl
ZwTraceEvent
ZwTranslateFilePath
ZwUmsThreadYield
ZwUnloadDriver
ZwUnloadKey
ZwUnloadKey2
ZwUnloadKeyEx
ZwUnlockFile
ZwUnlockVirtualMemory
ZwUnmapViewOfSection
ZwUnmapViewOfSectionEx
ZwUnsubscribeWnfStateChange
ZwUpdateWnfStateData
ZwVdmControl
ZwWaitForAlertByThreadId
ZwWaitForDebugEvent
ZwWaitForKeyedEvent
ZwWaitForMultipleObjects
ZwWaitForMultipleObjects32
ZwWaitForSingleObject
ZwWaitForWorkViaWorkerFactory
ZwWaitHighEventPair
ZwWaitLowEventPair
ZwWorkerFactoryWorkerReady
ZwWriteFile
ZwWriteFileGather
ZwWriteRequestData
ZwWriteVirtualMemory
ZwYieldExecution
_CmAddDeviceToContainer
_CmAddDeviceToContainerWorker
_CmClassFilterCallback
_CmClassSubkeyCallback
_CmContainerListGenericObjectCallback
_CmCreateDevice
_CmCreateDeviceContainer
_CmCreateDeviceContainerWorker
_CmCreateDeviceInterface
_CmCreateDeviceInterfaceWorker
_CmCreateDeviceWorker
_CmCreateInstallerClass
_CmCreateInstallerClassWorker
_CmCreateInterfaceClass
_CmCreateInterfaceClassWorker
_CmCreateOrdinalInstanceKey
_CmDeleteCommonClassRegKey
_CmDeleteCommonClassRegKeyWorker
_CmDeleteDevice
_CmDeleteDeviceContainer
_CmDeleteDeviceContainerRegKey
_CmDeleteDeviceContainerRegKeyWorker
_CmDeleteDeviceContainerWorker
_CmDeleteDeviceInterface
_CmDeleteDeviceInterfaceMappedPropertyFromRegValue
_CmDeleteDeviceInterfaceRegKey
_CmDeleteDeviceInterfaceRegKeyWorker
_CmDeleteDeviceInterfaceWorker
_CmDeleteDeviceMappedPropertyForAllDriverKeyRegValues
_CmDeleteDeviceMappedPropertyFromDriverKeyRegValue
_CmDeleteDeviceMappedPropertyFromInstanceKeyRegValue
_CmDeleteDeviceRegKey
_CmDeleteDeviceRegKeyWorker
_CmDeleteDeviceWorker
_CmDeleteInstallerClass
_CmDeleteInstallerClassMappedPropertyFromCoInstallers
_CmDeleteInstallerClassMappedPropertyFromRegValue
_CmDeleteInstallerClassRegKey
_CmDeleteInstallerClassWorker
_CmDeleteInterfaceClass
_CmDeleteInterfaceClassMappedPropertyFromRegValue
_CmDeleteInterfaceClassRegKey
_CmDeleteInterfaceClassWorker
_CmDeviceClassesSubkeyCallback
_CmEnumDevicesInContainerWithCallback
_CmEnumDevicesInContainerWithCallbackWorker
_CmEnumSubkeyCallback
_CmGetAdminAccessSecurityDescriptor
_CmGetCommonClassRegKeyPath
_CmGetContainerBooleanProperty
_CmGetContainerBooleanPropertyCallback
_CmGetDeviceChildren
_CmGetDeviceContainerIdFromBase
_CmGetDeviceContainerMappedProperty
_CmGetDeviceContainerMappedPropertyKeys
_CmGetDeviceContainerMappedPropertyLocales
_CmGetDeviceContainerRegKeyPath
_CmGetDeviceControlKeyPath
_CmGetDeviceHardwareKeyPath
_CmGetDeviceInstanceKeyPath
_CmGetDeviceInterfaceClassGuid
_CmGetDeviceInterfaceClassGuidString
_CmGetDeviceInterfaceMappedProperty
_CmGetDeviceInterfaceMappedPropertyFromComposite
_CmGetDeviceInterfaceMappedPropertyFromRegValue
_CmGetDeviceInterfaceMappedPropertyKeys
_CmGetDeviceInterfaceMappedPropertyLocales
_CmGetDeviceInterfaceName
_CmGetDeviceInterfacePathFormat
_CmGetDeviceInterfaceReferenceString
_CmGetDeviceInterfaceRegKeyPath
_CmGetDeviceInterfaceSubkeyPath
_CmGetDeviceInterfaceSymbolicLinkName
_CmGetDeviceLogConfKeyPath
_CmGetDeviceMappedProperty
_CmGetDeviceMappedPropertyFromComposite
_CmGetDeviceMappedPropertyFromInstanceKeyRegValue
_CmGetDeviceMappedPropertyFromRegProp
_CmGetDeviceMappedPropertyKeys
_CmGetDeviceMappedPropertyLocales
_CmGetDeviceParent
_CmGetDeviceRegKeyPath
_CmGetDeviceRegProp
_CmGetDeviceRegPropWorker
_CmGetDeviceRelationsList
_CmGetDeviceSiblings
_CmGetDeviceSoftwareKey
_CmGetDeviceSoftwareKeyPath
_CmGetDeviceStatus
_CmGetDevicesInBaseContainerList
_CmGetInstallerClassMappedProperty
_CmGetInstallerClassMappedPropertyFromCoInstallers
_CmGetInstallerClassMappedPropertyFromComposite
_CmGetInstallerClassMappedPropertyFromRegProp
_CmGetInstallerClassMappedPropertyFromRegValue
_CmGetInstallerClassMappedPropertyKeys
_CmGetInstallerClassMappedPropertyLocales
_CmGetInstallerClassRegProp
_CmGetInstallerClassRegPropWorker
_CmGetInterfaceClassMappedProperty
_CmGetInterfaceClassMappedPropertyFromComposite
_CmGetInterfaceClassMappedPropertyFromRegValue
_CmGetInterfaceClassMappedPropertyKeys
_CmGetInterfaceClassMappedPropertyLocales
_CmGetMatchingCommonClassList
_CmGetMatchingCommonClassListWorker
_CmGetMatchingDeviceContainerList
_CmGetMatchingDeviceContainerListWorker
_CmGetMatchingDeviceInterfaceList
_CmGetMatchingDeviceList
_CmGetMatchingDeviceListForSubkey
_CmGetMatchingFilteredDeviceInterfaceList
_CmGetMatchingFilteredDeviceInterfaceListWorker
_CmGetMatchingFilteredDeviceList
_CmGetMatchingFilteredDeviceListWorker
_CmIsDeviceInContainer
_CmIsDeviceInterfaceEnabled
_CmIsDevicePresent
_CmIsDeviceSafeRemovalRequired
_CmIsLocalMachineContainer
_CmIsRootDevice
_CmIsRootEnumeratedDevice
_CmMapCmObjectTypeToPnpObjectType
_CmMapPropertyKeyToRegProp
_CmMatchLastKnownParentCallback
_CmMoveBaseContainer
_CmOpenCommonClassRegKey
_CmOpenCommonClassRegKeyWorker
_CmOpenDeviceContainerRegKey
_CmOpenDeviceContainerRegKeyWorker
_CmOpenDeviceInterfaceRegKey
_CmOpenDeviceInterfaceRegKeyWorker
_CmOpenDeviceRegKey
_CmOpenDeviceRegKeyWorker
_CmOpenInstallerClassRegKey
_CmOpenInterfaceClassRegKey
_CmRaiseCreateEvent
_CmRaiseDeleteEvent
_CmRaisePropertyChangeEvent
_CmRemoveDeviceFromContainer
_CmRemoveDeviceFromContainerWorker
_CmServiceFilterCallback
_CmSetDeviceContainerMappedProperty
_CmSetDeviceInterfaceMappedProperty
_CmSetDeviceInterfaceMappedPropertyFromRegValue
_CmSetDeviceInterfacePathFormat
_CmSetDeviceMappedProperty
_CmSetDeviceMappedPropertyFromDriverKeyRegValue
_CmSetDeviceMappedPropertyFromInstanceKeyRegValue
_CmSetDeviceMappedPropertyFromRegProp
_CmSetDeviceRegProp
_CmSetDeviceRegPropWorker
_CmSetInstallerClassMappedProperty
_CmSetInstallerClassMappedPropertyFromCoInstallers
_CmSetInstallerClassMappedPropertyFromRegProp
_CmSetInstallerClassMappedPropertyFromRegValue
_CmSetInstallerClassRegProp
_CmSetInstallerClassRegPropWorker
_CmSetInterfaceClassMappedProperty
_CmSetInterfaceClassMappedPropertyFromRegValue
_CmValidateDeviceContainerName
_CmValidateDeviceInterfaceName
_CmValidateDeviceName
_CmValidateInstallerClassName
_CmValidateInterfaceClassName
_GetBaseTypeSize
_IsFixedSizeType
_MapCmClassPropertyToRegValue
_MapCmDevicePropertyToNtProperty
_MapCmDevicePropertyToRegType
_MapCmDevicePropertyToRegValue
_NLG_Notify
_NtPlugPlayGetDeviceInterfaceEnabled
_NtPlugPlayGetDeviceProperty
_NtPlugPlayGetDeviceRelatedDevice
_NtPlugPlayGetDeviceRelationsList
_NtPlugPlayGetDeviceStatus
_ObReferenceObjectByHandle
_PnpCmMatchCallbackRoutine
_PnpContainerRaiseDevicesChangedEvent
_PnpCreateObject
_PnpCreateObjectDispatch
_PnpCtxGetCachedContextBaseKey
_PnpCtxGetNtPlugPlayRoutine
_PnpCtxGetObjectContext
_PnpCtxGetObjectDispatchCallback
_PnpCtxOpenContextBaseKey
_PnpCtxOpenEffectiveToken
_PnpCtxOpenMachine
_PnpCtxRegCloseKey
_PnpCtxRegCopyTree
_PnpCtxRegCreateKey
_PnpCtxRegCreateTree
_PnpCtxRegDeleteKey
_PnpCtxRegDeleteTree
_PnpCtxRegEnumKey
_PnpCtxRegEnumKeyWithCallback
_PnpCtxRegEnumValue
_PnpCtxRegOpenCurrentUserKey
_PnpCtxRegOpenKey
_PnpCtxRegQueryInfoKey
_PnpCtxRegQueryValue
_PnpCtxRegQueryValueIndirect
_PnpCtxRegSetValue
_PnpCtxSetNtPlugPlayRoutine
_PnpDeleteObject
_PnpDeleteObjectDispatch
_PnpDeletePropertyWorker
_PnpDeviceRaisePropertyChangeEventWorker
_PnpDispatchDevice
_PnpDispatchDeviceContainer
_PnpDispatchDeviceInterface
_PnpDispatchInstallerClass
_PnpDispatchInterfaceClass
_PnpGetEnumSecurityDescriptor
_PnpGetGenericObjectList
_PnpGetGenericStoreProperty
_PnpGetGenericStorePropertyKeys
_PnpGetGenericStorePropertyLocales
_PnpGetMappedPropertyDispatch
_PnpGetMappedPropertyKeysDispatch
_PnpGetMappedPropertyLocalesDispatch
_PnpGetObjectList
_PnpGetObjectListDispatch
_PnpGetObjectProperty
_PnpGetObjectPropertyKeys
_PnpGetObjectPropertyKeysWorker
_PnpGetObjectPropertyLocales
_PnpGetObjectPropertyLocalesWorker
_PnpGetObjectPropertyWorker
_PnpGetPropertiesSecurityDescriptor
_PnpHasDerivedKeys
_PnpInstallerClassRaisePropertyChangeEventWorker
_PnpInterfaceClassRaisePropertyChangeEventWorker
_PnpInterfaceRaisePropertyChangeEventWorker
_PnpIsIndirectInfString
_PnpIsIndirectResourceString
_PnpIsValidGuidString
_PnpMapCmStatusToDispatchStatus
_PnpMultiSzAppend
_PnpMultiSzDeleteString
_PnpMultiSzGetLen
_PnpNotifyDerivedKeys
_PnpObjectListCallback
_PnpObjectRaiseCreateEvent
_PnpObjectRaiseDeleteEvent
_PnpObjectRaisePropertyChangeEvent
_PnpOpenObjectRegKey
_PnpOpenObjectRegKeyDispatch
_PnpOpenPropertiesKey
_PnpParseIndirectInfString
_PnpParseIndirectResourceString
_PnpRaiseNtPlugPlayDevicePropertyChangeEvent
_PnpRegQueryValueIndirect
_PnpSetGenericStoreProperty
_PnpSetMappedPropertyDispatch
_PnpSetObjectProperty
_PnpSetObjectPropertyWorker
_PnpSetPropertyWorker
_PnpStringFromGuid
_PnpUpdateInterfacesCallback
_PnpValidateObjectName
_PnpValidateObjectNameDispatch
_PnpValidatePropertyData
_PopInternalError
_RegRtlCopyTreeInternal
_RegRtlCreateKeyTransacted
_RegRtlCreateTreeTransacted
_RegRtlDeleteKeyTransacted
_RegRtlDeleteTreeInternal
_RegRtlEnumKey
_RegRtlEnumValue
_RegRtlOpenKeyTransacted
_RegRtlOpenPredefinedKey
_RegRtlQueryValue
_RegRtlSetValue
_RtlMuiRegAddLIPParent
_RtlpMuiRegAddBaseLanguage
_RtlpMuiRegAddNeutralLanguage
_RtlpMuiRegInitAnyLanguage
_RtlpMuiRegInitLIPLanguage
_RtlpMuiRegInitPartialLanguage
_RtlpMuiRegPopulateBaseLanguages
_RtlpMuiRegSerializeRegistryInfo
_RtlpMuiRegValidateAndGetInstallFallbackBase
_RtlpRemovePendingDeleteLanguages
_SysCtxCloseMachine
_SysCtxGetCachedContextBaseKey
_SysCtxOpenControlSet
_SysCtxOpenMachine
_SysCtxRegCreateTree
_SysCtxRegOpenCurrentUserKey
_SysCtxRegOpenKey
__C_specific_handler
__GSHandlerCheck
__GSHandlerCheckCommon
__GSHandlerCheck_SEH
__NLG_Dispatch2
__NLG_Return2
__ascii_memicmp
__ascii_stricmp
__ascii_strnicmp
__chkstk
__except_validate_jump_buffer
__isascii
__longjmp_internal
__misaligned_access
__pctype_func
__report_gsfailure
__report_rangecheckfailure
__security_check_cookie
_atoi64
_fgetwc_nolock
_filbuf_s
_filwbuf_s
_flsbuf
_flsbuf_s
_flswbuf
_fputwc_nolock
_get_printf_count_output
_guard_check_icall_nop
_i64toa_s
_i64tow_s
_input_s
_invalid_parameter
_iswctype_l
_itoa
_itoa_s
_itow
_itow_s
_local_unwind
_ltoa_s
_ltow_s
_makepath_s
_mbstrlen
_memicmp
_output_l
_output_s
_purecall
_safecrt_mbtowc
_safecrt_wctomb_s
_setjmp
_setjmpex
_sinput_s
_snprintf
_snprintf_s
_snscanf_s
_snwprintf
_snwprintf_s
_snwscanf_s
_soutput_s
_splitpath_s
_stricmp
_strlwr
_strnicmp
_strnset
_strnset_s
_strrev
_strset
_strset_s
_strtoi64
_strtoui64
_strupr
_swinput_s
_swoutput_s
_swprintf
_ui64toa_s
_ui64tow_s
_ultoa_s
_ultow
_ultow_s
_ungetc_nolock
_ungetwc_nolock
_vsnprintf
_vsnprintf_l
_vsnprintf_s
_vsnwprintf
_vsnwprintf_l
_vsnwprintf_s
_vsprintf_l
_vswprintf
_vswprintf_l
_wchartodigit
_wcsicmp
_wcsistr
_wcslwr
_wcsnicmp
_wcsnset
_wcsnset_s
_wcsrev
_wcsset_s
_wcstoi64
_wcsupr
_wctomb_s_l
_winput_s
_wmakepath_s
_woutput_l
_woutput_s
_wsplitpath_s
_wtoi
_wtol
adapt
atoi
atol
bsearch
bsearch_s
ext_ms_win_fs_clfs_l1_1_0_ClfsAddLogContainer
ext_ms_win_fs_clfs_l1_1_0_ClfsCloseLogFileObject
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateLogFile
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateMarshallingArea
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteLogByPointer
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteMarshallingArea
ext_ms_win_fs_clfs_l1_1_0_ClfsFlushToLsn
ext_ms_win_fs_clfs_l1_1_0_ClfsGetLogFileInformation
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnContainer
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnDifference
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnEqual
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnInvalid
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnLess
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtDeregisterManagedClient
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtInstallPolicy
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtRegisterManagedClient
ext_ms_win_fs_clfs_l1_1_0_ClfsReadLogRecord
ext_ms_win_fs_clfs_l1_1_0_ClfsReadNextLogRecord
ext_ms_win_fs_clfs_l1_1_0_ClfsReadRestartArea
ext_ms_win_fs_clfs_l1_1_0_ClfsRemoveLogContainer
ext_ms_win_fs_clfs_l1_1_0_ClfsReserveAndAppendLog
ext_ms_win_fs_clfs_l1_1_0_ClfsTerminateReadLog
ext_ms_win_fs_clfs_l1_1_0_ClfsWriteRestartArea
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmCompleteInitMachineConfig
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmSetInitMachineConfig
ext_ms_win_ntos_ksecurity_l1_1_1_AppContainerPrivilegesEnabledExt
ext_ms_win_ntos_ksecurity_l1_1_1_QueryUpdateFileEaAllowedExt
ext_ms_win_ntos_ksigningpolicy_l1_1_0_SeQuerySigningPolicyExt
ext_ms_win_ntos_ksr_l1_1_0_KsrCleanupPageDatabase
ext_ms_win_ntos_ksr_l1_1_0_KsrInitPageDatabase
ext_ms_win_ntos_ksr_l1_1_0_KsrInitSystem
ext_ms_win_ntos_pico_l1_1_0_PicoDispatchException
ext_ms_win_ntos_pico_l1_1_0_PicoInit
ext_ms_win_ntos_pico_l1_1_0_PicoProcessExit
ext_ms_win_ntos_pico_l1_1_0_PicoSystemCallDispatch
ext_ms_win_ntos_pico_l1_1_0_PicoThreadExit
ext_ms_win_ntos_tm_l1_1_0_NtCommitComplete
ext_ms_win_ntos_tm_l1_1_0_NtCommitEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtCommitTransaction
ext_ms_win_ntos_tm_l1_1_0_NtCreateEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtCreateResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransaction
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtEnumerateTransactionObject
ext_ms_win_ntos_tm_l1_1_0_NtFreezeTransactions
ext_ms_win_ntos_tm_l1_1_0_NtGetNotificationResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtOpenEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtOpenResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransaction
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareComplete
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtPrepareComplete
ext_ms_win_ntos_tm_l1_1_0_NtPrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtPropagationComplete
ext_ms_win_ntos_tm_l1_1_0_NtPropagationFailed
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransaction
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtReadOnlyEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtRecoverEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtRecoverResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtRecoverTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtRegisterProtocolAddressInformation
ext_ms_win_ntos_tm_l1_1_0_NtRenameTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtRollbackComplete
ext_ms_win_ntos_tm_l1_1_0_NtRollbackEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtRollbackTransaction
ext_ms_win_ntos_tm_l1_1_0_NtRollforwardTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransaction
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtSinglePhaseReject
ext_ms_win_ntos_tm_l1_1_0_NtThawTransactions
ext_ms_win_ntos_tm_l1_1_0_TmCancelPropagationRequest
ext_ms_win_ntos_tm_l1_1_0_TmCommitComplete
ext_ms_win_ntos_tm_l1_1_0_TmCommitEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmCommitTransaction
ext_ms_win_ntos_tm_l1_1_0_TmCreateEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmCurrentTransaction
ext_ms_win_ntos_tm_l1_1_0_TmDereferenceEnlistmentKey
ext_ms_win_ntos_tm_l1_1_0_TmEnableCallbacks
ext_ms_win_ntos_tm_l1_1_0_TmEndPropagationRequest
ext_ms_win_ntos_tm_l1_1_0_TmFreezeTransactions
ext_ms_win_ntos_tm_l1_1_0_TmGetTransactionId
ext_ms_win_ntos_tm_l1_1_0_TmInitSystem
ext_ms_win_ntos_tm_l1_1_0_TmInitSystemPhase2
ext_ms_win_ntos_tm_l1_1_0_TmInitializeTransactionManager
ext_ms_win_ntos_tm_l1_1_0_TmIsKTMCommitCoordinator
ext_ms_win_ntos_tm_l1_1_0_TmIsTransactionActive
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareComplete
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmPrepareComplete
ext_ms_win_ntos_tm_l1_1_0_TmPrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmPropagationComplete
ext_ms_win_ntos_tm_l1_1_0_TmPropagationFailed
ext_ms_win_ntos_tm_l1_1_0_TmReadOnlyEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRecoverEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRecoverResourceManager
ext_ms_win_ntos_tm_l1_1_0_TmRecoverTransactionManager
ext_ms_win_ntos_tm_l1_1_0_TmReferenceEnlistmentKey
ext_ms_win_ntos_tm_l1_1_0_TmRenameTransactionManager
ext_ms_win_ntos_tm_l1_1_0_TmRequestOutcomeEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRollbackComplete
ext_ms_win_ntos_tm_l1_1_0_TmRollbackEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRollbackTransaction
ext_ms_win_ntos_tm_l1_1_0_TmSetCurrentTransaction
ext_ms_win_ntos_tm_l1_1_0_TmShutdownSystem
ext_ms_win_ntos_tm_l1_1_0_TmSinglePhaseReject
ext_ms_win_ntos_tm_l1_1_0_TmThawTransactions
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCancelReport
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCloseHandle
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCreateReport
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelInitSystem
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelOpenDumpFile
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelSubmitReport
isdigit
islower
isprint
isspace
isupper
iswctype
iswdigit
isxdigit
longjmp
mbstowcs
mbtowc
memchr
memcmp
memcpy
memcpy_s
memmove
memmove_s
memset
pIoQueryBusDescription
pIoQueryDeviceDescription
punycode_decode
punycode_encode
qsort
rand
setjmp
sprintf
sprintf_s
srand
sscanf_s
strcat
strcat_s
strchr
strcmp
strcpy
strcpy_s
strlen
strncat
strncat_s
strncmp
strncpy
strncpy_s
strnlen
strrchr
strspn
strstr
strtok_s
strtol
strtolX
strtoul
swprintf
swprintf_s
swscanf_s
tcpxsum
tolower
toupper
towlower
towupper
vDbgPrintEx
vDbgPrintExWithPrefix
vDbgPrintExWithPrefixInternal
vsprintf
vsprintf_s
vswprintf_s
wcscat
wcscat_s
wcschr
wcscmp
wcscpy
wcscpy_s
wcscspn
wcslen
wcsncat
wcsncat_s
wcsncmp
wcsncpy
wcsncpy_s
wcsnlen
wcspbrk
wcsrchr
wcsspn
wcsstr
wcstol
wcstolX
wcstombs
wcstoul
wctomb
wctomb_s
xHalAcpiAoacCapable
xHalAcpiGetMultiNode
xHalAddInterruptRemapping
xHalAllocateGsivForSecondaryInterrupt
xHalAllocateMapRegisters
xHalAllocateMessageTarget
xHalAllocatePmcCounterSet
xHalAssignSlotResources
xHalClockTimerActivate
xHalClockTimerArm
xHalClockTimerInitialize
xHalClockTimerStop
xHalCollectPmcCounters
xHalDmaFreeCrashDumpRegisters
xHalDpGetInterruptReplayState
xHalDpMaskLevelTriggeredInterrupts
xHalDpReplaceBegin
xHalDpReplaceControl
xHalDpReplaceEnd
xHalDpReplaceTarget
xHalDpReplayInterrupts
xHalDpUnmaskLevelTriggeredInterrupts
xHalEndMirroring
xHalEndOfBoot
xHalEnumerateUnmaskedInterrupts
xHalFlushAndInvalidatePageExternalCache
xHalFlushExternalCache
xHalFlushIoBuffersExternalCache
xHalFlushIoRectangleExternalCache
xHalFreeMessageTarget
xHalFreePmcCounterSet
xHalGetClockConfiguration
xHalGetInterruptTranslator
xHalGetInterruptVector
xHalGetPartialGeometry
xHalGetProcessorId
xHalGetVectorInput
xHalHaltSystem
xHalHandlerForBus
xHalInitPnpDriver
xHalInitPowerManagement
xHalInterruptSetDestination
xHalIommuAccessFault
xHalIommuDismissPageFault
xHalIommuEnableDevice
xHalIommuFlushTb
xHalIommuFreeAsid
xHalIommuGetConfiguration
xHalIommuGetPageFault
xHalIommuInitialize
xHalIommuLocateFromDevice
xHalIommuMapDevice
xHalIommuRegisterDispatchTable
xHalIommuSupportEnabled
xHalLoadMicrocode
xHalLocateHiberRanges
xHalMaskInterrupt
xHalMirrorPhysicalMemory
xHalMirrorVerify
xHalNotifyProcessorFreeze
xHalPciEarlyRestore
xHalPciMarkHiberPhase
xHalPciMultiStageResumeCapable
xHalPostMicrocodeUpdate
xHalPowerEarlyRestore
xHalPowerSetRebootHandler
xHalPrepareForBugcheck
xHalPrepareProcessorForIdle
xHalProcessorHalt
xHalQueryBusSlots
xHalQueryCapsuleCapabilities
xHalQueryIoPortAccessSupported
xHalQueryProcessorRestartEntryPoint
xHalQuerySystemInformation
xHalQueryWakeTime
xHalReadWheaPhysicalMemory
xHalReferenceHandler
xHalRegisterBusHandler
xHalRegisterLogRoutine
xHalRemoveInterruptRemapping
xHalReportIdleStateUsage
xHalRequestInterrupt
xHalRestoreHvEnlightenment
xHalResumeProcessorFromIdle
xHalSaveAndDisableHvEnlightenment
xHalSecondaryInterruptQueryPrimaryInformation
xHalSetSystemInformation
xHalSetWakeAlarm
xHalStartMirroring
xHalStopLegacyUsbInterrupts
xHalTimerOnlyClockInterruptPending
xHalTimerQueryCycleCounter
xHalTimerWatchdogGeneratedLastReset
xHalTimerWatchdogResetCountdown
xHalTimerWatchdogStart
xHalTimerWatchdogStop
xHalTimerWatchdogTriggerSystemReset
xHalTranslateBusAddress
xHalTscSynchronization
xHalUnloadMicrocode
xHalUnmaskInterrupt
xHalUpdateCapsule
xHalVectorToIDTEntry
xHalVectorToIDTEntryEx
xHalWheaInitProcessorGenericSection
xHalWriteWheaPhysicalMemory
xHalpIsInterruptTypeSecondary
xKdCheckPowerButton
xKdEnumerateDebuggingDevices
xKdGetAcpiTablePhase0
xKdMapPhysicalMemory64
xKdReleaseIntegratedDeviceForDebugging
xKdReleasePciDeviceForDebugging
xKdSetupIntegratedDeviceForDebugging
xKdSetupPciDeviceForDebugging
xKdUnmapVirtualAddress
*/
