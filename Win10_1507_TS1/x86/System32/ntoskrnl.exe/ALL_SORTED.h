struct BATTERY_REPORTING_SCALE;
enum BUS_QUERY_ID_TYPE;
struct CMP_OFFSET_ARRAY;
enum CPU_VENDORS;
enum DEVICE_TEXT_TYPE;
struct DOCK_INTERFACE;
enum HAL_APIC_DESTINATION_MODE;
enum HSTORAGE_TYPE;
enum INTERRUPT_CONNECTION_TYPE;
enum IRPLOCK;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum KTM_STATE;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
enum LSA_FOREST_TRUST_RECORD_TYPE;
struct PEPHANDLE__;
enum POWER_ACTION;
struct POWER_ACTION_POLICY;
enum POWER_POLICY_DEVICE_TYPE;
struct PO_MEMORY_IMAGE;
enum PPM_IDLE_BUCKET_TIME_TYPE;
struct PROCESSOR_IDLESTATE_INFO;
struct PROCESSOR_IDLESTATE_POLICY;
struct PROCESSOR_PERFSTATE_POLICY;
enum PROFILE_DEPARTURE_STYLE;
enum PROFILE_STATUS;
enum ReplacesCorHdrNumericDefines;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT;
struct SYSTEM_POWER_CAPABILITIES;
enum SYSTEM_POWER_CONDITION;
struct SYSTEM_POWER_LEVEL;
enum UoWActionType;
struct VACB_LEVEL_ALLOCATION_LIST;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACL;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
struct _ADAPTER_OBJECT;
union _AER_BRIDGE_DESCRIPTOR_FLAGS;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
struct _AGGREGATED_PAYLOAD_FILTER;
struct _ALPC_COMMUNICATION_INFO;
struct _ALPC_COMPLETION_LIST;
struct _ALPC_COMPLETION_LIST_HEADER;
struct _ALPC_COMPLETION_LIST_STATE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
struct _ALPC_DISPATCH_CONTEXT;
struct _ALPC_HANDLE_ENTRY;
struct _ALPC_HANDLE_TABLE;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _ALPC_PORT;
struct _ALPC_PORT_ATTRIBUTES;
struct _ALPC_PROCESS_CONTEXT;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
struct _AMD64_DBGKD_CONTROL_SET;
enum _ARBITER_ACTION;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
struct _ARBITER_ALLOCATION_STATE;
struct _ARBITER_ALTERNATIVE;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_CONFLICT_INFO;
struct _ARBITER_INSTANCE;
struct _ARBITER_INTERFACE;
struct _ARBITER_LIST_ENTRY;
struct _ARBITER_ORDERING;
struct _ARBITER_ORDERING_LIST;
struct _ARBITER_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
enum _ARBITER_REQUEST_SOURCE;
enum _ARBITER_RESULT;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARM64_DBGKD_CONTROL_SET;
struct _ARMCE_DBGKD_CONTROL_SET;
struct _ARM_DBGKD_CONTROL_SET;
struct _ASSEMBLY_STORAGE_MAP;
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
struct _AUX_ACCESS_DATA;
struct _BITMAP_RANGE;
struct _BLOB;
struct _BLOB_COUNTERS;
enum _BLOB_ID;
struct _BLOB_TYPE;
struct _BUS_EXTENSION_LIST;
struct _CACHED_CHILD_LIST;
struct _CACHED_KSTACK_LIST;
struct _CACHE_DESCRIPTOR;
struct _CACHE_MANAGER_CALLBACKS;
struct _CACHE_UNINITIALIZE_EVENT;
struct _CALLBACK_OBJECT;
struct _CALL_HASH_ENTRY;
struct _CALL_PERFORMANCE_DATA;
struct _CC_ASYNC_READ_CONTEXT;
struct _CC_EXTERNAL_CACHE_INFO;
struct _CELL_DATA;
struct _CHILD_LIST;
struct _CLIENT_ID;
struct _CLIENT_ID32;
struct _CLIENT_ID64;
union _CLS_LSN;
struct _CMHIVE;
enum _CMP_FAILURE_INJECTION_POINT;
struct _CM_BIG_DATA;
struct _CM_CACHED_VALUE_INDEX;
struct _CM_CELL_REMAP_BLOCK;
struct _CM_DIRTY_VECTOR_LOG;
struct _CM_DIRTY_VECTOR_LOG_ENTRY;
enum _CM_DIRTY_VECTOR_OPERATION;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_INDEX;
struct _CM_INDEX_HINT_BLOCK;
struct _CM_INTENT_LOCK;
struct _CM_KCB_UOW;
struct _CM_KEY_BODY;
struct _CM_KEY_CONTROL_BLOCK;
struct _CM_KEY_HASH;
struct _CM_KEY_HASH_TABLE_ENTRY;
struct _CM_KEY_INDEX;
struct _CM_KEY_NODE;
struct _CM_KEY_REFERENCE;
struct _CM_KEY_SECURITY;
struct _CM_KEY_SECURITY_CACHE;
struct _CM_KEY_SECURITY_CACHE_ENTRY;
struct _CM_KEY_VALUE;
enum _CM_LOAD_FAILURE_TYPE;
struct _CM_NAME_CONTROL_BLOCK;
struct _CM_NAME_HASH;
struct _CM_NOTIFY_BLOCK;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_RESOURCE_LIST;
struct _CM_RM;
enum _CM_SHARE_DISPOSITION;
struct _CM_TRANS;
struct _CM_WORKITEM;
struct _COLORED_PAGE_INFO;
struct _COMPRESSED_DATA_INFO;
struct _CONTEXT;
struct _CONTROL_AREA;
struct _COUNTER_READING;
union _CPU_INFO;
enum _CREATE_FILE_TYPE;
struct _CURDIR;
union _CVDD;
enum _ConnectionResourceConsumerDesc;
struct _DBGKD_ANY_CONTROL_SET;
struct _DBGKD_BREAKPOINTEX;
struct _DBGKD_CONTEXT_EX;
struct _DBGKD_CONTINUE;
struct _DBGKD_CONTINUE2;
struct _DBGKD_FILL_MEMORY;
struct _DBGKD_GET_CONTEXT;
struct _DBGKD_GET_INTERNAL_BREAKPOINT32;
struct _DBGKD_GET_INTERNAL_BREAKPOINT64;
struct _DBGKD_GET_SET_BUS_DATA;
struct _DBGKD_GET_VERSION32;
struct _DBGKD_GET_VERSION64;
struct _DBGKD_LOAD_SYMBOLS32;
struct _DBGKD_LOAD_SYMBOLS64;
struct _DBGKD_MANIPULATE_STATE32;
struct _DBGKD_MANIPULATE_STATE64;
struct _DBGKD_QUERY_MEMORY;
struct _DBGKD_QUERY_SPECIAL_CALLS;
struct _DBGKD_READ_MEMORY32;
struct _DBGKD_READ_MEMORY64;
struct _DBGKD_READ_WRITE_IO32;
struct _DBGKD_READ_WRITE_IO64;
struct _DBGKD_READ_WRITE_IO_EXTENDED32;
struct _DBGKD_READ_WRITE_IO_EXTENDED64;
struct _DBGKD_READ_WRITE_MSR;
struct _DBGKD_RESTORE_BREAKPOINT;
struct _DBGKD_SEARCH_MEMORY;
struct _DBGKD_SET_CONTEXT;
struct _DBGKD_SET_INTERNAL_BREAKPOINT32;
struct _DBGKD_SET_INTERNAL_BREAKPOINT64;
struct _DBGKD_SET_SPECIAL_CALL32;
struct _DBGKD_SET_SPECIAL_CALL64;
struct _DBGKD_SWITCH_PARTITION;
struct _DBGKD_WRITE_BREAKPOINT32;
struct _DBGKD_WRITE_BREAKPOINT64;
struct _DBGKD_WRITE_CUSTOM_BREAKPOINT;
struct _DBGKD_WRITE_MEMORY32;
struct _DBGKD_WRITE_MEMORY64;
struct _DBGKM_EXCEPTION32;
struct _DBGKM_EXCEPTION64;
struct _DEFERRED_WRITE;
struct _DELAY_ACK_FO;
struct _DESCRIPTOR;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_DESCRIPTION;
struct _DEVICE_MAP;
struct _DEVICE_NODE;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_LIST;
struct _DEVICE_OBJECT_POWER_EXTENSION;
enum _DEVICE_POWER_STATE;
struct _DEVICE_RELATIONS;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
struct _DEVOBJ_EXTENSION;
enum _DEVPROP_OPERATOR;
struct _DIAGNOSTIC_BUFFER;
struct _DIAGNOSTIC_CONTEXT;
struct _DIRTY_PAGE_STATISTICS;
struct _DIRTY_PAGE_THRESHOLDS;
struct _DISALLOWED_GUIDS;
struct _DISPATCHER_HEADER;
enum _DMA_SPEED;
enum _DMA_WIDTH;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _DUAL;
struct _DUMMY_FILE_OBJECT;
enum _DUMP_EVENTS;
struct _DUMP_INITIALIZATION_CONTEXT;
struct _DUMP_STACK_CONTEXT;
struct _ECP_LIST;
struct _EJOB;
struct _ENODE;
struct _EPROCESS;
struct _EPROCESS_QUOTA_BLOCK;
struct _EPROCESS_VALUES;
struct _ERESOURCE;
struct _ESILO;
struct _ETHREAD;
struct _ETIMER;
struct _ETWP_NOTIFICATION_HEADER;
struct _ETW_BUFFER_CONTEXT;
struct _ETW_BUFFER_QUEUE;
enum _ETW_BUFFER_STATE;
struct _ETW_FILTER_HEADER;
struct _ETW_FILTER_PID;
struct _ETW_FILTER_STRING_TOKEN;
struct _ETW_FILTER_STRING_TOKEN_ELEMENT;
struct _ETW_GUID_ENTRY;
enum _ETW_HEADER_TYPE;
struct _ETW_LAST_ENABLE_INFO;
struct _ETW_LOGGER_HANDLE;
enum _ETW_NOTIFICATION_TYPE;
struct _ETW_PAYLOAD_FILTER;
struct _ETW_PERFECT_HASH_FUNCTION;
enum _ETW_PERFECT_HASH_FUNCTION_TYPE;
struct _ETW_PERF_COUNTERS;
struct _ETW_PMC_SUPPORT;
struct _ETW_PROVIDER_TRAITS;
struct _ETW_QUEUE_ENTRY;
struct _ETW_REALTIME_CONSUMER;
struct _ETW_REF_CLOCK;
struct _ETW_REG_ENTRY;
struct _ETW_REPLY_QUEUE;
enum _ETW_RT_EVENT_LOSS;
struct _ETW_SESSION_PERF_COUNTERS;
struct _ETW_SILODRIVERSTATE;
struct _ETW_STACK_CACHE;
enum _ETW_STRING_TOKEN_TYPE;
struct _ETW_SYSTEMTIME;
struct _ETW_WMITRACE_WORK;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EVENT_FILTER_HEADER;
struct _EVENT_HEADER;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
enum _EVENT_INFO_CLASS;
struct _EVENT_PAYLOAD_PREDICATE;
struct _EVENT_RECORD;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_RECORD32;
struct _EXCEPTION_RECORD64;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EXHANDLE;
enum _EXQUEUEINDEX;
struct _EXT_DELETE_PARAMETERS;
struct _EXT_SET_PARAMETERS_V0;
enum _EX_BALANCE_OBJECT;
struct _EX_FAST_REF;
enum _EX_GEN_RANDOM_DOMAIN;
enum _EX_POOL_PRIORITY;
struct _EX_PUSH_LOCK;
struct _EX_PUSH_LOCK_AUTO_EXPAND;
struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE;
struct _EX_RUNDOWN_REF;
struct _EX_WORK_QUEUE;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FILESYSTEM_DISK_COUNTERS;
struct _FILE_BASIC_INFORMATION;
struct _FILE_GET_QUOTA_INFORMATION;
enum _FILE_INFORMATION_CLASS;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_OBJECT;
enum _FILE_OBJECT_EXTENSION_TYPE;
union _FILE_SEGMENT_ELEMENT;
struct _FILE_STANDARD_INFORMATION;
struct _FLOATING_SAVE_AREA;
struct _FLS_CALLBACK_INFO;
struct _FREE_DISPLAY;
enum _FSINFOCLASS;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _FS_FILTER_CALLBACKS;
struct _FS_FILTER_CALLBACK_DATA;
union _FS_FILTER_PARAMETERS;
struct _FS_FILTER_SECTION_SYNC_OUTPUT;
enum _FS_FILTER_SECTION_SYNC_TYPE;
enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE;
struct _GDI_TEB_BATCH;
struct _GDI_TEB_BATCH32;
struct _GDI_TEB_BATCH64;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERIC_MAPPING;
enum _GPIO_PIN_CONFIG_TYPE;
enum _GPIO_PIN_IORESTRICTION_TYPE;
struct _GROUP_AFFINITY;
struct _GUID;
struct _HAL_CHANNEL_MEMORY_RANGES;
struct _HAL_NODE_RANGE;
struct _HAL_PMC_COUNTERS;
struct _HANDLE_TABLE;
union _HANDLE_TABLE_ENTRY;
struct _HANDLE_TABLE_ENTRY_INFO;
struct _HANDLE_TABLE_FREE_LIST;
struct _HANDLE_TRACE_DB_ENTRY;
struct _HANDLE_TRACE_DEBUG_INFO;
enum _HARDWARE_COUNTER_TYPE;
struct _HARDWARE_PTE;
struct _HBASE_BLOCK;
struct _HBIN;
struct _HCELL;
struct _HEAP;
struct _HEAP_COUNTERS;
struct _HEAP_ENTRY;
struct _HEAP_ENTRY_EXTRA;
struct _HEAP_EXTENDED_ENTRY;
enum _HEAP_FAILURE_TYPE;
struct _HEAP_FREE_ENTRY;
struct _HEAP_FREE_ENTRY_EXTRA;
struct _HEAP_LIST_LOOKUP;
struct _HEAP_LOCK;
struct _HEAP_LOOKASIDE;
struct _HEAP_PSEUDO_TAG_ENTRY;
struct _HEAP_SEGMENT;
struct _HEAP_STOP_ON_TAG;
struct _HEAP_STOP_ON_VALUES;
struct _HEAP_TAG_ENTRY;
struct _HEAP_TUNING_PARAMETERS;
struct _HEAP_UCR_DESCRIPTOR;
struct _HEAP_UNPACKED_ENTRY;
struct _HEAP_VIRTUAL_ALLOC_ENTRY;
struct _HHIVE;
struct _HIVE_LIST_ENTRY;
struct _HIVE_LOAD_FAILURE;
struct _HIVE_WAIT_PACKET;
struct _HIVE_WRITE_WAIT_QUEUE;
struct _HMAP_DIRECTORY;
struct _HMAP_ENTRY;
struct _HMAP_TABLE;
struct _HVIEW_MAP;
struct _HVIEW_MAP_DIRECTORY;
struct _HVIEW_MAP_ENTRY;
struct _HVIEW_MAP_PIN_LOG;
struct _HVIEW_MAP_PIN_LOG_ENTRY;
struct _HVIEW_MAP_TABLE;
struct _HV_GET_CELL_CONTEXT;
union _HV_PARTITION_PRIVILEGE_MASK;
struct _HV_X64_HYPERVISOR_FEATURES;
struct _IA64_DBGKD_CONTROL_SET;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_SECTION_HEADER;
struct _IMAGE_SECURITY_CONTEXT;
struct _INITIAL_PRIVILEGE_SET;
struct _INTERFACE;
enum _INTERFACE_TYPE;
struct _INTERRUPT_CONNECTION_DATA;
struct _INTERRUPT_HT_INTR_INFO;
struct _INTERRUPT_REMAPPING_INFO;
struct _INTERRUPT_VECTOR_DATA;
struct _IOP_FILE_OBJECT_EXTENSION;
struct _IOP_IRP_EXTENSION;
struct _IOP_IRP_EXTENSION_STATUS;
struct _IOP_IRP_STACK_PROFILER;
enum _IOP_PRIORITY_HINT;
struct _IOV_FORCED_PENDING_TRACE;
struct _IOV_IRP_TRACE;
enum _IO_ALLOCATION_ACTION;
struct _IO_CLIENT_EXTENSION;
struct _IO_COMPLETION_CONTEXT;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
struct _IO_MINI_COMPLETION_PACKET_USER;
enum _IO_PRIORITY_HINT;
struct _IO_PRIORITY_INFO;
struct _IO_REMOVE_LOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
enum _IO_SESSION_STATE;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_TIMER;
struct _IO_WORKITEM;
enum _IPI_TYPE;
struct _IRP;
enum _IRQ_PRIORITY;
struct _ISRDPCSTATS;
enum _JOBOBJECTINFOCLASS;
struct _JOBOBJECT_WAKE_FILTER;
struct _JOB_ACCESS_STATE;
struct _JOB_CPU_RATE_CONTROL;
struct _JOB_IO_RATE_CONTROL;
struct _JOB_NET_RATE_CONTROL;
struct _JOB_NOTIFICATION_INFORMATION;
struct _KAFFINITY_ENUMERATION_CONTEXT;
struct _KAFFINITY_EX;
union _KALPC_DIRECT_EVENT;
struct _KALPC_HANDLE_DATA;
struct _KALPC_MESSAGE;
struct _KALPC_MESSAGE_ATTRIBUTES;
struct _KALPC_REGION;
struct _KALPC_RESERVE;
struct _KALPC_SECTION;
struct _KALPC_SECURITY_DATA;
struct _KALPC_VIEW;
struct _KAPC;
struct _KAPC_STATE;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KDPC_DATA;
struct _KDPC_LIST;
struct _KENLISTMENT;
struct _KENLISTMENT_HISTORY;
enum _KENLISTMENT_STATE;
struct _KENTROPY_TIMING_STATE;
enum _KERNEL_STACK_LIMITS;
struct _KERNEL_STACK_SEGMENT;
struct _KEVENT;
union _KEXECUTE_OPTIONS;
struct _KGATE;
struct _KGDTENTRY;
enum _KHETERO_CPU_POLICY;
struct _KHETERO_PROCESSOR_SET;
struct _KIDTENTRY;
struct _KINTERRUPT;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
struct _KLDR_DATA_TABLE_ENTRY;
struct _KLOCK_ENTRY;
struct _KLOCK_ENTRY_LOCK_STATE;
struct _KLOCK_QUEUE_HANDLE;
struct _KMUTANT;
struct _KNODE;
enum _KOBJECTS;
struct _KPCR;
struct _KPRCB;
struct _KPRIQUEUE;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
enum _KPROCESS_STATE;
enum _KPROFILE_SOURCE;
struct _KQUEUE;
struct _KREQUEST_PACKET;
struct _KRESOURCEMANAGER;
struct _KRESOURCEMANAGER_COMPLETION_BINDING;
enum _KRESOURCEMANAGER_STATE;
struct _KSCB;
struct _KSCHEDULING_GROUP;
struct _KSCHEDULING_GROUP_POLICY;
struct _KSECONDARY_IDT_ENTRY;
struct _KSEMAPHORE;
struct _KSHARED_READY_QUEUE;
struct _KSPECIAL_REGISTERS;
struct _KSPIN_LOCK_QUEUE;
enum _KSPIN_LOCK_QUEUE_NUMBER;
struct _KSTACK_CONTROL;
union _KSTACK_COUNT;
struct _KSYSTEM_TIME;
struct _KTHREAD;
struct _KTHREAD_COUNTERS;
enum _KTHREAD_STATE;
enum _KTHREAD_TAG;
struct _KTIMER;
struct _KTIMER2;
struct _KTIMER2_COLLECTION;
enum _KTIMER2_TYPE;
struct _KTIMER_EXPIRATION_TRACE;
struct _KTIMER_TABLE;
struct _KTIMER_TABLE_ENTRY;
struct _KTM;
struct _KTMNOTIFICATION_PACKET;
struct _KTMOBJECT_NAMESPACE;
struct _KTMOBJECT_NAMESPACE_LINK;
struct _KTRANSACTION;
struct _KTRANSACTION_HISTORY;
enum _KTRANSACTION_OUTCOME;
enum _KTRANSACTION_STATE;
struct _KTRAP_FRAME;
struct _KTSS;
struct _KUSER_SHARED_DATA;
struct _KWAIT_BLOCK;
enum _KWAIT_BLOCK_STATE;
struct _KWAIT_CHAIN;
enum _KWAIT_REASON;
enum _KWAIT_STATE;
union _KWAIT_STATUS_REGISTER;
struct _KiIoAccessMap;
union _LARGE_INTEGER;
struct _LAZY_WRITER;
struct _LDRP_CSLIST;
struct _LDRP_LOAD_CONTEXT;
struct _LDR_DATA_TABLE_ENTRY;
struct _LDR_DDAG_NODE;
enum _LDR_DDAG_STATE;
enum _LDR_DLL_LOAD_REASON;
struct _LDR_SERVICE_TAG_RECORD;
struct _LEARNING_MODE_DATA;
struct _LIST_ENTRY;
struct _LOCK_HEADER;
enum _LOCK_OPERATION;
struct _LOCK_TRACKER;
struct _LOGGED_STREAM_CALLBACK_V1;
struct _LOGGED_STREAM_CALLBACK_V2;
struct _LOG_HANDLE_CONTEXT;
struct _LOOKASIDE_LIST_EX;
struct _LPCP_MESSAGE;
struct _LPCP_NONPAGED_PORT_QUEUE;
struct _LPCP_PORT_OBJECT;
struct _LPCP_PORT_QUEUE;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _M128A;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MAPPED_FILE_SEGMENT;
struct _MBCB;
struct _MCGEN_TRACE_CONTEXT;
struct _MDL;
struct _MEMORY_ALLOCATION_DESCRIPTOR;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
struct _MIPFNBLINK;
struct _MI_ACCESS_LOG_STATE;
struct _MI_ACTIVE_WSLE_LISTHEAD;
struct _MI_AVAILABLE_PAGE_WAIT_STATES;
enum _MI_AVAILABLE_PAGE_WAIT_TYPES;
struct _MI_BAD_MEMORY_EVENT_ENTRY;
struct _MI_CACHED_PTE;
struct _MI_CACHED_PTES;
struct _MI_CFG_BITMAP_INFO;
enum _MI_CFG_BITMAP_TYPE;
struct _MI_CLONE_BLOCK_FLAGS;
struct _MI_COMBINE_PAGE_LISTHEAD;
struct _MI_COMBINE_STATE;
struct _MI_COMBINE_WORKITEM;
struct _MI_COMMON_PAGE_STATE;
struct _MI_CONTROL_AREA_WAIT_BLOCK;
struct _MI_DEBUGGER_STATE;
struct _MI_DECAY_TIMER_LINK;
struct _MI_DECAY_TIMER_LINKAGE;
struct _MI_DRIVER_VA;
enum _MI_DYNAMICBASE_BITMAP;
struct _MI_ERROR_STATE;
struct _MI_EXTRA_IMAGE_INFORMATION;
struct _MI_FILE_EXTENTS;
struct _MI_FILE_EXTENTS_WAIT_BLOCK;
struct _MI_FORCED_COMMITS;
struct _MI_HARDWARE_STATE;
struct _MI_IMAGE_SECURITY_REFERENCE;
struct _MI_IO_CACHE_STATS;
struct _MI_IO_PAGE_STATE;
enum _MI_IO_PFN_TYPE;
enum _MI_KSTACK_TYPE;
struct _MI_LARGEPAGE_MEMORY_INFO;
struct _MI_LDW_WORK_CONTEXT;
enum _MI_LOCK_ACQUIRE_TYPE;
enum _MI_MEMORY_EVENT_TYPES;
enum _MI_MEMORY_HIGHLOW;
struct _MI_MODWRITE_DATA;
struct _MI_NODE_INFORMATION;
enum _MI_NODE_NONPAGED_POOL_BITMAP;
struct _MI_PAGEFILE_TRACES;
struct _MI_PAGE_COMBINE_STATISTICS;
struct _MI_PAGE_COMBINING_SUPPORT;
struct _MI_PAGING_FILE_SPACE_BITMAPS;
struct _MI_PAGING_IO_STATE;
struct _MI_PARTITION;
struct _MI_PARTITION_COMMIT;
struct _MI_PARTITION_CORE;
struct _MI_PARTITION_FLAGS;
struct _MI_PARTITION_MODWRITES;
struct _MI_PARTITION_PAGE_LISTS;
struct _MI_PARTITION_SEGMENTS;
struct _MI_PARTITION_STATE;
struct _MI_PARTITION_STATISTICS;
struct _MI_PARTITION_STORES;
struct _MI_PARTITION_ZEROING;
struct _MI_PER_SESSION_PROTOS;
enum _MI_PFN_CACHE_ATTRIBUTE;
struct _MI_POOL_STATE;
struct _MI_PROBE_RAISE_TRACKER;
struct _MI_PROCESS_STATE;
struct _MI_PTE_CHAIN_HEAD;
struct _MI_QUEUED_DEADSTACK_WORKITEM;
struct _MI_REBUILD_LARGE_PAGES;
struct _MI_REBUILD_LARGE_PAGE_COUNTDOWN;
struct _MI_RESAVAIL_TRACKER;
union _MI_RESERVATION_CLUSTER_INFO;
struct _MI_RESUME_WORKITEM;
struct _MI_REVERSE_VIEW_MAP;
struct _MI_SECTION_IMAGE_INFORMATION;
struct _MI_SECTION_STATE;
struct _MI_SESSION_DRIVER_UNLOAD;
struct _MI_SESSION_STATE;
struct _MI_SHUTDOWN_STATE;
struct _MI_SPECIAL_POOL;
struct _MI_STANDBY_STATE;
struct _MI_SYSTEM_IMAGE_STATE;
struct _MI_SYSTEM_INFORMATION;
struct _MI_SYSTEM_NODE_INFORMATION;
struct _MI_SYSTEM_PTE_STATE;
struct _MI_SYSTEM_PTE_TYPE;
struct _MI_SYSTEM_TRIM_STATE;
struct _MI_SYSTEM_VA_STATE;
enum _MI_SYSTEM_VA_TYPE;
struct _MI_TRIAGE_DUMP_DATA;
struct _MI_USER_VA_INFO;
struct _MI_VAD_EVENT_BLOCK;
struct _MI_VAD_SEQUENTIAL_INFO;
struct _MI_VERIFIER_POOL_HEADER;
struct _MI_VISIBLE_PARTITION;
struct _MI_VISIBLE_STATE;
enum _MI_WORKING_SET_TYPE;
struct _MI_ZERO_COST_COUNTS;
struct _MMADDRESS_LIST;
struct _MMCLONE_BLOCK;
struct _MMCLONE_DESCRIPTOR;
struct _MMCLONE_HEADER;
struct _MMDEREFERENCE_SEGMENT_HEADER;
struct _MMEXTEND_INFO;
struct _MMINPAGE_FLAGS;
struct _MMINPAGE_SUPPORT;
struct _MMINPAGE_SUPPORT_FLOW_THROUGH;
enum _MMLISTS;
struct _MMMOD_WRITER_LISTHEAD;
struct _MMMOD_WRITER_MDL_ENTRY;
struct _MMPAGE_FILE_EXPANSION;
struct _MMPAGE_FILE_EXPANSION_FLAGS;
struct _MMPAGING_FILE;
struct _MMPFN;
struct _MMPFNENTRY;
struct _MMPFNLIST;
struct _MMPTE;
struct _MMPTE_HARDWARE;
struct _MMPTE_HIGHLOW;
struct _MMPTE_LIST;
struct _MMPTE_PROTOTYPE;
struct _MMPTE_SOFTWARE;
struct _MMPTE_SUBSECTION;
struct _MMPTE_TIMESTAMP;
struct _MMPTE_TRANSITION;
struct _MMSECTION_FLAGS;
struct _MMSECURE_FLAGS;
struct _MMSESSION;
struct _MMSUBSECTION_FLAGS;
struct _MMSUPPORT;
struct _MMSUPPORT_FLAGS;
struct _MMVAD;
struct _MMVAD_FLAGS;
struct _MMVAD_FLAGS1;
struct _MMVAD_FLAGS2;
struct _MMVAD_SHORT;
struct _MMWORKING_SET_EXPANSION_HEAD;
struct _MMWSL;
struct _MMWSLE;
struct _MMWSLENTRY;
struct _MMWSLE_FREE_ENTRY;
struct _MMWSLE_HASH;
struct _MMWSLE_NONDIRECT_HASH;
struct _MM_DRIVER_VERIFIER_DATA;
struct _MM_PAGED_POOL_INFO;
struct _MM_PAGE_ACCESS_INFO;
union _MM_PAGE_ACCESS_INFO_FLAGS;
struct _MM_PAGE_ACCESS_INFO_HEADER;
enum _MM_PAGE_ACCESS_TYPE;
enum _MM_POOL_FAILURE_REASONS;
enum _MM_POOL_PRIORITIES;
enum _MM_POOL_TYPES;
enum _MM_PREEMPTIVE_TRIMS;
struct _MM_SESSION_SPACE;
struct _MM_SESSION_SPACE_FLAGS;
union _MM_STORE_KEY;
struct _MM_SYSTEM_PAGE_COUNTS;
enum _MODE;
struct _MODWRITER_FLAGS;
struct _MSUBSECTION;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NB10;
struct _NONOPAQUE_OPLOCK;
struct _NON_PAGED_DEBUG_INFO;
struct _NPAGED_LOOKASIDE_LIST;
enum _NT_PRODUCT_TYPE;
struct _NT_TIB;
struct _NT_TIB32;
struct _NT_TIB64;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_CREATE_INFORMATION;
struct _OBJECT_DIRECTORY;
struct _OBJECT_DIRECTORY_ENTRY;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HANDLE_COUNT_DATABASE;
struct _OBJECT_HANDLE_COUNT_ENTRY;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_HEADER;
struct _OBJECT_HEADER_AUDIT_INFO;
struct _OBJECT_HEADER_CREATOR_INFO;
struct _OBJECT_HEADER_HANDLE_INFO;
struct _OBJECT_HEADER_HANDLE_REVOCATION_INFO;
struct _OBJECT_HEADER_NAME_INFO;
struct _OBJECT_HEADER_PADDING_INFO;
struct _OBJECT_HEADER_PROCESS_INFO;
struct _OBJECT_HEADER_QUOTA_INFO;
enum _OBJECT_INFORMATION_CLASS;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_REF_INFO;
struct _OBJECT_REF_STACK_INFO;
struct _OBJECT_REF_TRACE;
struct _OBJECT_SYMBOLIC_LINK;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OBP_LOOKUP_CONTEXT;
struct _OBP_SILODRIVERSTATE;
struct _OBP_SYSTEM_DOS_DEVICE_STATE;
struct _OB_DUPLICATE_OBJECT_STATE;
struct _OB_HANDLE_REVOCATION_BLOCK;
enum _OB_OPEN_REASON;
struct _OPEN_PACKET;
struct _OWNER_ENTRY;
struct _PAE_ENTRY;
struct _PAE_PAGEINFO;
struct _PAGED_LOOKASIDE_LIST;
struct _PAGEFAULT_HISTORY;
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK;
struct _PCW_BUFFER;
union _PCW_CALLBACK_INFORMATION;
enum _PCW_CALLBACK_TYPE;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_DATA;
struct _PCW_INSTANCE;
struct _PCW_MASK_INFORMATION;
struct _PCW_PROCESSOR_INFO;
struct _PCW_REGISTRATION;
struct _PCW_REGISTRATION_INFORMATION;
struct _PEB;
struct _PEBS_DS_SAVE_AREA;
struct _PEB_LDR_DATA;
struct _PENDING_RELATIONS_LIST_ENTRY;
struct _PEP_ACPI_EXTENDED_ADDRESS;
struct _PEP_ACPI_GPIO_RESOURCE;
struct _PEP_ACPI_INTERRUPT_RESOURCE;
struct _PEP_ACPI_IO_MEMORY_RESOURCE;
union _PEP_ACPI_RESOURCE;
union _PEP_ACPI_RESOURCE_FLAGS;
enum _PEP_ACPI_RESOURCE_TYPE;
struct _PEP_ACPI_SPB_I2C_RESOURCE;
struct _PEP_ACPI_SPB_RESOURCE;
struct _PEP_ACPI_SPB_SPI_RESOURCE;
struct _PEP_ACPI_SPB_UART_RESOURCE;
struct _PEP_CRASHDUMP_INFORMATION;
struct _PERFINFO_GROUPMASK;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _PERFINFO_MM_STAT;
struct _PERFINFO_PPM_STATE_SELECTION;
enum _PF_FILE_ACCESS_TYPE;
struct _PF_KERNEL_GLOBALS;
struct _PHYSICAL_MEMORY_DESCRIPTOR;
struct _PHYSICAL_MEMORY_RUN;
struct _PI_BUS_EXTENSION;
struct _PI_RESOURCE_ARBITER_ENTRY;
struct _PLATFORM_IDLE_ACCOUNTING;
struct _PLATFORM_IDLE_STATE_ACCOUNTING;
struct _PLUGPLAY_EVENT_BLOCK;
enum _PLUGPLAY_EVENT_CATEGORY;
struct _PNP_ASSIGN_RESOURCES_CONTEXT;
struct _PNP_DEVICE_ACTION_ENTRY;
enum _PNP_DEVICE_ACTION_REQUEST;
struct _PNP_DEVICE_COMPLETION_QUEUE;
struct _PNP_DEVICE_COMPLETION_REQUEST;
enum _PNP_DEVICE_DELETE_TYPE;
struct _PNP_DEVICE_EVENT_ENTRY;
struct _PNP_DEVICE_EVENT_LIST;
enum _PNP_DEVNODE_STATE;
struct _PNP_RESOURCE_REQUEST;
enum _PNP_VETO_TYPE;
enum _POLICY_AUDIT_EVENT_TYPE;
struct _POOL_BLOCK_HEAD;
struct _POOL_DESCRIPTOR;
struct _POOL_HACKER;
struct _POOL_HEADER;
struct _POOL_TRACKER_BIG_PAGES;
struct _POOL_TRACKER_TABLE;
enum _POOL_TYPE;
struct _POP_ACTION_TRIGGER;
struct _POP_COOLING_EXTENSION;
struct _POP_CPU_INFO;
struct _POP_CURRENT_BROADCAST;
enum _POP_DEVICE_IDLE_TYPE;
struct _POP_DEVICE_SYS_STATE;
struct _POP_FX_ACCOUNTING;
struct _POP_FX_COMPONENT;
union _POP_FX_COMPONENT_FLAGS;
struct _POP_FX_DEPENDENT;
struct _POP_FX_DEVICE;
union _POP_FX_DEVICE_STATUS;
struct _POP_FX_DRIVER_CALLBACKS;
struct _POP_FX_IDLE_STATE;
union _POP_FX_PERF_FLAGS;
struct _POP_FX_PERF_INFO;
struct _POP_FX_PERF_SET;
struct _POP_FX_PLUGIN;
struct _POP_FX_PROVIDER;
struct _POP_FX_WORK_ORDER;
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO;
struct _POP_HIBER_CONTEXT;
struct _POP_IO_INFO;
enum _POP_IO_STATUS;
struct _POP_IRP_DATA;
struct _POP_IRP_WORKER_ENTRY;
struct _POP_PER_PROCESSOR_CONTEXT;
struct _POP_POLICY_DEVICE;
struct _POP_POWER_ACTION;
struct _POP_POWER_SETTING_VALUES;
struct _POP_PPM_PROFILE;
struct _POP_RW_LOCK;
struct _POP_SHUTDOWN_BUG_CHECK;
struct _POP_THERMAL_TELEMETRY_TRACKER;
struct _POP_THERMAL_ZONE;
struct _POP_TRIGGER_WAIT;
struct _PORT_MESSAGE;
enum _POWER_REQUEST_TYPE;
enum _POWER_REQUEST_TYPE_INTERNAL;
struct _POWER_SEQUENCE;
union _POWER_STATE;
enum _POWER_STATE_TYPE;
struct _PO_DEVICE_NOTIFY;
struct _PO_DEVICE_NOTIFY_ORDER;
struct _PO_DIAG_STACK_RECORD;
struct _PO_FX_COMPONENT_PERF_SET;
struct _PO_FX_PERF_STATE;
struct _PO_FX_PERF_STATE_CHANGE;
enum _PO_FX_PERF_STATE_TYPE;
enum _PO_FX_PERF_STATE_UNIT;
struct _PO_HIBER_PERF;
struct _PO_IRP_MANAGER;
struct _PO_IRP_QUEUE;
struct _PO_NOTIFY_ORDER_LEVEL;
struct _PPC_DBGKD_CONTROL_SET;
struct _PPM_CONCURRENCY_ACCOUNTING;
struct _PPM_COORDINATED_SELECTION;
union _PPM_COORDINATED_SYNCHRONIZATION;
struct _PPM_ENGINE_SETTINGS;
struct _PPM_FFH_THROTTLE_STATE_INFO;
struct _PPM_IDLE_STATE;
struct _PPM_IDLE_STATES;
union _PPM_IDLE_SYNCHRONIZATION_STATE;
struct _PPM_PLATFORM_STATE;
struct _PPM_PLATFORM_STATES;
union _PPM_POLICY_SETTINGS_MASK;
struct _PPM_SELECTION_DEPENDENCY;
struct _PPM_SELECTION_MENU;
struct _PPM_SELECTION_MENU_ENTRY;
struct _PPM_SELECTION_STATISTICS;
struct _PPM_VETO_ACCOUNTING;
struct _PPM_VETO_ENTRY;
struct _PP_LOOKASIDE_LIST;
enum _PP_NPAGED_LOOKASIDE_NUMBER;
struct _PRIVATE_CACHE_MAP;
struct _PRIVATE_CACHE_MAP_FLAGS;
struct _PRIVILEGE_SET;
enum _PROCESSOR_CACHE_TYPE;
struct _PROCESSOR_IDLE_CONSTRAINTS;
struct _PROCESSOR_IDLE_DEPENDENCY;
struct _PROCESSOR_IDLE_PREPARE_INFO;
struct _PROCESSOR_NUMBER;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
struct _PROCESSOR_POWER_STATE;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
struct _PROCESS_DISK_COUNTERS;
struct _PROCESS_ENERGY_VALUES;
enum _PROCESS_SECTION_TYPE;
enum _PROCESS_VA_TYPE;
struct _PROC_FEEDBACK;
struct _PROC_FEEDBACK_COUNTER;
enum _PROC_HYPERVISOR_STATE;
struct _PROC_IDLE_ACCOUNTING;
struct _PROC_IDLE_POLICY;
struct _PROC_IDLE_SNAP;
struct _PROC_IDLE_STATE_ACCOUNTING;
struct _PROC_IDLE_STATE_BUCKET;
struct _PROC_PERF_CHECK;
struct _PROC_PERF_CHECK_SNAP;
struct _PROC_PERF_CONSTRAINT;
struct _PROC_PERF_DOMAIN;
struct _PROC_PERF_HISTORY;
struct _PROC_PERF_HISTORY_ENTRY;
struct _PROC_PERF_LOAD;
struct _PROVIDER_BINARY_ENTRY;
union _PS_CLIENT_SECURITY_CONTEXT;
struct _PS_PROPERTY_SET;
enum _PS_PROTECTED_SIGNER;
struct _PS_PROTECTION;
enum _PS_RESOURCE_TYPE;
struct _PS_WAKE_INFORMATION;
enum _PS_WAKE_REASON;
struct _PTE_TRACKER;
struct _QUAD;
enum _REG_NOTIFY_CLASS;
struct _RELATION_LIST;
struct _RELATIVE_SYMLINK_INFO;
struct _REMOTE_PORT_VIEW;
enum _REQUESTER_TYPE;
struct _REQUEST_MAILBOX;
struct _RH_OP_CONTEXT;
struct _RSDS;
struct _RTLP_RANGE_LIST_ENTRY;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_ATOM_TABLE;
struct _RTL_ATOM_TABLE_ENTRY;
struct _RTL_ATOM_TABLE_REFERENCE;
struct _RTL_AVL_TABLE;
struct _RTL_AVL_TREE;
struct _RTL_BALANCED_LINKS;
struct _RTL_BALANCED_NODE;
struct _RTL_BITMAP;
struct _RTL_CRITICAL_SECTION;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
enum _RTL_GENERIC_COMPARE_RESULTS;
struct _RTL_RANGE;
struct _RTL_RANGE_LIST;
struct _RTL_RB_TREE;
struct _RTL_SPLAY_LINKS;
struct _RTL_SRWLOCK;
struct _RTL_TIME_ZONE_INFORMATION;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCSI_REQUEST_BLOCK;
struct _SECTION;
struct _SECTION_IMAGE_INFORMATION;
struct _SECTION_OBJECT;
struct _SECTION_OBJECT_POINTERS;
struct _SECURITY_CLIENT_CONTEXT;
struct _SECURITY_DESCRIPTOR;
struct _SECURITY_DESCRIPTOR_RELATIVE;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SEGMENT;
struct _SEGMENT_FLAGS;
struct _SEGMENT_OBJECT;
struct _SEP_AUDIT_POLICY;
struct _SEP_LOGON_SESSION_REFERENCES;
struct _SEP_LOWBOX_HANDLES_ENTRY;
struct _SEP_LOWBOX_HANDLES_TABLE;
struct _SEP_LOWBOX_NUMBER_ENTRY;
struct _SEP_LOWBOX_NUMBER_MAPPING;
struct _SEP_SID_VALUES_BLOCK;
struct _SEP_TOKEN_PRIVILEGES;
struct _SERVER_SILO_MONITOR;
struct _SESSION_LOWBOX_MAP;
struct _SE_AUDIT_PROCESS_CREATION_INFO;
struct _SHARED_CACHE_MAP;
struct _SHARED_CACHE_MAP_LIST_CURSOR;
struct _SID;
struct _SID_AND_ATTRIBUTES;
struct _SID_AND_ATTRIBUTES_HASH;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SINGLE_LIST_ENTRY;
union _SLIST_HEADER;
struct _STACK_TABLE;
struct _STRING;
struct _STRING32;
struct _STRING64;
struct _SUBSECTION;
struct _SYNCH_COUNTERS;
struct _SYSPTES_HEADER;
struct _SYSTEM_POWER_POLICY;
enum _SYSTEM_POWER_STATE;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _TEB;
struct _TEB32;
struct _TEB64;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TERMINATION_PORT;
struct _THERMAL_COOLING_INTERFACE;
struct _THERMAL_INFORMATION;
struct _THERMAL_INFORMATION_EX;
struct _THERMAL_POLICY;
struct _THERMAL_ZONE_COUNTERS;
struct _THREAD_ENERGY_VALUES;
struct _THREAD_PERFORMANCE_DATA;
struct _TIME_FIELDS;
struct _TOKEN;
struct _TOKEN_ACCESS_INFORMATION;
struct _TOKEN_AUDIT_POLICY;
struct _TOKEN_CONTROL;
enum _TOKEN_INFORMATION_CLASS;
struct _TOKEN_MANDATORY_POLICY;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_SOURCE;
enum _TOKEN_TYPE;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
enum _TP_CALLBACK_PRIORITY;
struct _TP_CLEANUP_GROUP;
struct _TP_POOL;
struct _TRACE_ENABLE_INFO;
enum _TRACE_INFORMATION_CLASS;
struct _TRACE_LOGFILE_HEADER;
enum _TRANSFER_TYPE;
struct _TRIAGE_9F_PNP;
struct _TRIAGE_9F_POWER;
struct _TRIAGE_DEVICE_NODE;
struct _TRIAGE_EX_WORK_QUEUE;
struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE;
struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST;
struct _TRIAGE_POP_FX_DEVICE;
struct _TRIAGE_POP_IRP_DATA;
struct _TXN_PARAMETER_BLOCK;
enum _TYPE_OF_MEMORY;
enum _TlgBlob_t;
enum _TlgIn_t;
enum _TlgOut_t;
struct _TlgProviderMetadata_t;
struct _TlgProvider_t;
struct _TraceLoggingMetadata_t;
union _ULARGE_INTEGER;
struct _UNICODE_STRING;
struct _UNLOADED_DRIVERS;
enum _USER_ACTIVITY_PRESENCE;
struct _VACB;
struct _VACB_ARRAY_HEADER;
struct _VACB_LEVEL_REFERENCE;
struct _VERIFIER_SHARED_EXPORT_THUNK;
struct _VF_ADDRESS_RANGE;
struct _VF_AVL_TABLE;
struct _VF_AVL_TREE;
struct _VF_AVL_TREE_NODE;
struct _VF_BTS_DATA_MANAGEMENT_AREA;
struct _VF_BTS_RECORD;
struct _VF_DRIVER_IO_CALLBACKS;
struct _VF_KE_CRITICAL_REGION_TRACE;
struct _VF_POOL_TRACE;
struct _VF_SUSPECT_DRIVER_ENTRY;
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;
struct _VF_TARGET_DRIVER;
struct _VF_TARGET_VERIFIED_DRIVER_DATA;
struct _VF_TRACKER;
struct _VF_TRACKER_STAMP;
struct _VF_WATCHDOG_IRP;
struct _VI_DEADLOCK_GLOBALS;
struct _VI_DEADLOCK_NODE;
struct _VI_DEADLOCK_RESOURCE;
enum _VI_DEADLOCK_RESOURCE_TYPE;
struct _VI_DEADLOCK_THREAD;
struct _VI_FAULT_TRACE;
struct _VI_POOL_ENTRY;
struct _VI_POOL_ENTRY_INUSE;
struct _VI_POOL_PAGE_HEADER;
struct _VI_TRACK_IRQL;
struct _VI_VERIFIER_ISSUE;
struct _VOLUME_CACHE_MAP;
struct _VPB;
struct _WAITING_IRP;
struct _WAIT_CONTEXT_BLOCK;
struct _WHEAP_ERROR_RECORD_WRAPPER;
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;
struct _WHEAP_ERROR_SOURCE;
struct _WHEAP_ERROR_SOURCE_TABLE;
struct _WHEAP_INFO_BLOCK;
struct _WHEAP_WORK_QUEUE;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
union _WHEA_ERROR_PACKET_FLAGS;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
enum _WHEA_ERROR_SEVERITY;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
enum _WHEA_ERROR_SOURCE_STATE;
enum _WHEA_ERROR_SOURCE_TYPE;
union _WHEA_ERROR_STATUS;
enum _WHEA_ERROR_TYPE;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_IPF_MCA_DESCRIPTOR;
struct _WHEA_MEMORY_ERROR_SECTION;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
union _WHEA_NOTIFICATION_FLAGS;
struct _WHEA_PCI_SLOT_NUMBER;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_MCE_DESCRIPTOR;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WMI_BUFFER_HEADER;
struct _WMI_LOGGER_CONTEXT;
struct _WNF_STATE_NAME;
enum _WORKING_SET_TYPE;
struct _WORK_QUEUE_ENTRY;
struct _WORK_QUEUE_ITEM;
enum _WOW64_SHARED_INFORMATION;
struct _X86_DBGKD_CONTROL_SET;
struct _X86_KTRAP_FRAME;
struct _X86_KTRAP_FRAME_BLUE;
union _XPF_MCE_FLAGS;
union _XPF_MC_BANK_FLAGS;
struct _XSAVE_AREA;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_FORMAT;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_CONTEXT;
struct _XSTATE_FEATURE;
struct _XSTATE_SAVE;
struct _flags;
struct _iobuf;
union _u;
struct tagSWITCH_CONTEXT;
struct tagSWITCH_CONTEXT_ATTRIBUTE;
struct tagSWITCH_CONTEXT_DATA;

struct BATTERY_REPORTING_SCALE
{
  /* 0x0000 */ unsigned long Granularity;
  /* 0x0004 */ unsigned long Capacity;
}; /* size: 0x0008 */

enum BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

struct CMP_OFFSET_ARRAY
{
  /* 0x0000 */ unsigned long FileOffset;
  /* 0x0004 */ void* DataBuffer;
  /* 0x0008 */ unsigned long DataLength;
}; /* size: 0x000c */

enum CPU_VENDORS
{
  CPU_NONE = 0,
  CPU_INTEL = 1,
  CPU_AMD = 2,
  CPU_CYRIX = 3,
  CPU_TRANSMETA = 4,
  CPU_VIA = 5,
  CPU_CENTAUR = 5,
  CPU_RISE = 6,
  CPU_UNKNOWN = 7,
};

enum DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

struct DOCK_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
  /* 0x0010 */ void* ProfileDepartureSetMode /* function */;
  /* 0x0014 */ void* ProfileDepartureUpdate /* function */;
}; /* size: 0x0018 */

enum HAL_APIC_DESTINATION_MODE
{
  ApicDestinationModePhysical = 1,
  ApicDestinationModeLogicalFlat = 2,
  ApicDestinationModeLogicalClustered = 3,
  ApicDestinationModeUnknown = 4,
};

enum HSTORAGE_TYPE
{
  Stable = 0,
  Volatile = 1,
  InvalidStorage = 2,
};

enum INTERRUPT_CONNECTION_TYPE
{
  InterruptTypeControllerInput = 0,
  InterruptTypeXapicMessage = 1,
  InterruptTypeHypertransport = 2,
  InterruptTypeMessageRequest = 3,
};

enum IRPLOCK
{
  IRPLOCK_CANCELABLE = 0,
  IRPLOCK_CANCEL_STARTED = 1,
  IRPLOCK_CANCEL_COMPLETE = 2,
  IRPLOCK_COMPLETED = 3,
};

enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 1,
};

enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};

enum KTM_STATE
{
  KKtmUninitialized = 0,
  KKtmInitialized = 1,
  KKtmRecovering = 2,
  KKtmOnline = 3,
  KKtmRecoveryFailed = 4,
  KKtmOffline = 5,
};

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

enum LSA_FOREST_TRUST_RECORD_TYPE
{
  ForestTrustTopLevelName = 0,
  ForestTrustTopLevelNameEx = 1,
  ForestTrustDomainInfo = 2,
  ForestTrustRecordTypeLast = 2,
};

struct PEPHANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
  PowerActionDisplayOff = 8,
};

struct POWER_ACTION_POLICY
{
  /* 0x0000 */ enum POWER_ACTION Action;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EventCode;
}; /* size: 0x000c */

enum POWER_POLICY_DEVICE_TYPE
{
  PolicyDeviceSystemButton = 0,
  PolicyDeviceThermalZone = 1,
  PolicyDeviceBattery = 2,
  PolicyDeviceMemory = 3,
  PolicyInitiatePowerActionAPI = 4,
  PolicySetPowerStateAPI = 5,
  PolicyImmediateDozeS4 = 6,
  PolicySystemIdle = 7,
  PolicyDeviceWakeAlarm = 8,
  PolicyDeviceFan = 9,
  PolicyCsBatterySaver = 10,
  PolicyDeviceMax = 11,
};

struct PO_MEMORY_IMAGE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long ImageType;
  /* 0x0008 */ unsigned long CheckSum;
  /* 0x000c */ unsigned long LengthSelf;
  /* 0x0010 */ unsigned long PageSelf;
  /* 0x0014 */ unsigned long PageSize;
  /* 0x0018 */ union _LARGE_INTEGER SystemTime;
  /* 0x0020 */ unsigned __int64 InterruptTime;
  /* 0x0028 */ unsigned __int64 FeatureFlags;
  /* 0x0030 */ unsigned char HiberFlags;
  /* 0x0031 */ unsigned char spare[3];
  /* 0x0034 */ unsigned long NoHiberPtes;
  /* 0x0038 */ unsigned long HiberVa;
  /* 0x003c */ unsigned long NoFreePages;
  /* 0x0040 */ unsigned long FreeMapCheck;
  /* 0x0044 */ unsigned long WakeCheck;
  /* 0x0048 */ unsigned __int64 NumPagesForLoader;
  /* 0x0050 */ unsigned long FirstBootRestorePage;
  /* 0x0054 */ unsigned long FirstKernelRestorePage;
  /* 0x0058 */ unsigned long FirstChecksumRestorePage;
  /* 0x0060 */ unsigned __int64 NoChecksumEntries;
  /* 0x0068 */ struct _PO_HIBER_PERF PerfInfo;
  /* 0x0248 */ unsigned long FirmwareRuntimeInformationPages;
  /* 0x024c */ unsigned long FirmwareRuntimeInformation[1];
  /* 0x0250 */ unsigned long SiLogOffset;
  /* 0x0254 */ unsigned long NoBootLoaderLogPages;
  /* 0x0258 */ unsigned long BootLoaderLogPages[24];
  /* 0x02b8 */ unsigned long NotUsed;
  /* 0x02bc */ unsigned long ResumeContextCheck;
  /* 0x02c0 */ unsigned long ResumeContextPages;
  /* 0x02c4 */ unsigned char Hiberboot;
  /* 0x02c8 */ unsigned __int64 HvCr3;
  /* 0x02d0 */ unsigned __int64 HvEntryPoint;
  /* 0x02d8 */ unsigned __int64 HvReservedTransitionAddress;
  /* 0x02e0 */ unsigned __int64 HvReservedTransitionAddressSize;
  /* 0x02e8 */ unsigned __int64 BootFlags;
  /* 0x02f0 */ unsigned __int64 HalEntryPointPhysical;
  /* 0x02f8 */ unsigned long HighestPhysicalPage;
  /* 0x02fc */ unsigned long BitlockerKeyPfns[4];
  /* 0x030c */ unsigned long HardwareSignature;
}; /* size: 0x0310 */

enum PPM_IDLE_BUCKET_TIME_TYPE
{
  PpmIdleBucketTimeInQpc = 0,
  PpmIdleBucketTimeIn100ns = 1,
  PpmIdleBucketTimeMaximum = 2,
};

struct PROCESSOR_IDLESTATE_INFO
{
  /* 0x0000 */ unsigned long TimeCheck;
  /* 0x0004 */ unsigned char DemotePercent;
  /* 0x0005 */ unsigned char PromotePercent;
  /* 0x0006 */ unsigned char Spare[2];
}; /* size: 0x0008 */

struct PROCESSOR_IDLESTATE_POLICY
{
  /* 0x0000 */ unsigned short Revision;
  union // _TAG_UNNAMED_1
  {
    union
    {
      /* 0x0002 */ unsigned short AsUSHORT;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short AllowScaling : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned short Disabled : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned short Reserved : 14; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ Flags;
  /* 0x0004 */ unsigned long PolicyCount;
  /* 0x0008 */ struct PROCESSOR_IDLESTATE_INFO Policy[3];
}; /* size: 0x0020 */

struct PROCESSOR_PERFSTATE_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ unsigned char MaxThrottle;
  /* 0x0005 */ unsigned char MinThrottle;
  /* 0x0006 */ unsigned char BusyAdjThreshold;
  union
  {
    /* 0x0007 */ unsigned char Spare;
    union // _TAG_UNNAMED_2
    {
      union
      {
        /* 0x0007 */ unsigned char AsUCHAR;
        struct /* bitfield */
        {
          /* 0x0007 */ unsigned char NoDomainAccounting : 1; /* bit position: 0 */
          /* 0x0007 */ unsigned char IncreasePolicy : 2; /* bit position: 1 */
          /* 0x0007 */ unsigned char DecreasePolicy : 2; /* bit position: 3 */
          /* 0x0007 */ unsigned char Reserved : 3; /* bit position: 5 */
        }; /* bitfield */
      }; /* size: 0x0001 */
    } /* size: 0x0001 */ Flags;
  }; /* size: 0x0001 */
  /* 0x0008 */ unsigned long TimeCheck;
  /* 0x000c */ unsigned long IncreaseTime;
  /* 0x0010 */ unsigned long DecreaseTime;
  /* 0x0014 */ unsigned long IncreasePercent;
  /* 0x0018 */ unsigned long DecreasePercent;
}; /* size: 0x001c */

enum PROFILE_DEPARTURE_STYLE
{
  PDS_UPDATE_DEFAULT = 1,
  PDS_UPDATE_ON_REMOVE = 2,
  PDS_UPDATE_ON_INTERFACE = 3,
  PDS_UPDATE_ON_EJECT = 4,
};

enum PROFILE_STATUS
{
  DOCK_NOTDOCKDEVICE = 0,
  DOCK_QUIESCENT = 1,
  DOCK_ARRIVING = 2,
  DOCK_DEPARTING = 3,
  DOCK_EJECTIRP_COMPLETED = 4,
};

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 5,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

enum SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4,
};

enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT
{
  SpmScenarioStopReasonUnspecified = 16,
  SpmScenarioStopReasonCsExit = 17,
  SpmScenarioStopReasonMax = 18,
};

struct SYSTEM_POWER_CAPABILITIES
{
  /* 0x0000 */ unsigned char PowerButtonPresent;
  /* 0x0001 */ unsigned char SleepButtonPresent;
  /* 0x0002 */ unsigned char LidPresent;
  /* 0x0003 */ unsigned char SystemS1;
  /* 0x0004 */ unsigned char SystemS2;
  /* 0x0005 */ unsigned char SystemS3;
  /* 0x0006 */ unsigned char SystemS4;
  /* 0x0007 */ unsigned char SystemS5;
  /* 0x0008 */ unsigned char HiberFilePresent;
  /* 0x0009 */ unsigned char FullWake;
  /* 0x000a */ unsigned char VideoDimPresent;
  /* 0x000b */ unsigned char ApmPresent;
  /* 0x000c */ unsigned char UpsPresent;
  /* 0x000d */ unsigned char ThermalControl;
  /* 0x000e */ unsigned char ProcessorThrottle;
  /* 0x000f */ unsigned char ProcessorMinThrottle;
  /* 0x0010 */ unsigned char ProcessorMaxThrottle;
  /* 0x0011 */ unsigned char FastSystemS4;
  /* 0x0012 */ unsigned char Hiberboot;
  /* 0x0013 */ unsigned char WakeAlarmPresent;
  /* 0x0014 */ unsigned char AoAc;
  /* 0x0015 */ unsigned char DiskSpinDown;
  /* 0x0016 */ unsigned char HiberFileType;
  /* 0x0017 */ unsigned char AoAcConnectivitySupported;
  /* 0x0018 */ unsigned char spare3[6];
  /* 0x001e */ unsigned char SystemBatteriesPresent;
  /* 0x001f */ unsigned char BatteriesAreShortTerm;
  /* 0x0020 */ struct BATTERY_REPORTING_SCALE BatteryScale[3];
  /* 0x0038 */ enum _SYSTEM_POWER_STATE AcOnLineWake;
  /* 0x003c */ enum _SYSTEM_POWER_STATE SoftLidWake;
  /* 0x0040 */ enum _SYSTEM_POWER_STATE RtcWake;
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
}; /* size: 0x004c */

enum SYSTEM_POWER_CONDITION
{
  PoAc = 0,
  PoDc = 1,
  PoHot = 2,
  PoConditionMaximum = 3,
};

struct SYSTEM_POWER_LEVEL
{
  /* 0x0000 */ unsigned char Enable;
  /* 0x0001 */ unsigned char Spare[3];
  /* 0x0004 */ unsigned long BatteryLevel;
  /* 0x0008 */ struct POWER_ACTION_POLICY PowerPolicy;
  /* 0x0014 */ enum _SYSTEM_POWER_STATE MinSystemState;
}; /* size: 0x0018 */

enum UoWActionType
{
  UoWAddThisKey = 0,
  UoWAddChildKey = 1,
  UoWDeleteThisKey = 2,
  UoWDeleteChildKey = 3,
  UoWSetValueNew = 4,
  UoWSetValueExisting = 5,
  UoWDeleteValue = 6,
  UoWSetKeyUserFlags = 7,
  UoWSetLastWriteTime = 8,
  UoWSetSecurityDescriptor = 9,
  UoWRenameSubKey = 10,
  UoWRenameOldSubKey = 11,
  UoWRenameNewSubKey = 12,
  UoWIsolation = 13,
  UoWInvalid = 14,
};

struct VACB_LEVEL_ALLOCATION_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY VacbLevelList;
  /* 0x0008 */ void* VacbLevelWithBcbListHeads;
  /* 0x000c */ unsigned long VacbLevelsAllocated;
}; /* size: 0x0010 */

typedef struct _ACCESS_REASONS
{
  /* 0x0000 */ unsigned long Data[32];
} ACCESS_REASONS, *PACCESS_REASONS; /* size: 0x0080 */

typedef struct _ACCESS_STATE
{
  /* 0x0000 */ struct _LUID OperationID;
  /* 0x0008 */ unsigned char SecurityEvaluated;
  /* 0x0009 */ unsigned char GenerateAudit;
  /* 0x000a */ unsigned char GenerateOnClose;
  /* 0x000b */ unsigned char PrivilegesAllocated;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long RemainingDesiredAccess;
  /* 0x0014 */ unsigned long PreviouslyGrantedAccess;
  /* 0x0018 */ unsigned long OriginalDesiredAccess;
  /* 0x001c */ struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  /* 0x002c */ void* SecurityDescriptor;
  /* 0x0030 */ void* AuxData;
  union // _TAG_UNNAMED_3
  {
    union
    {
      /* 0x0034 */ struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      /* 0x0034 */ struct _PRIVILEGE_SET PrivilegeSet;
    }; /* size: 0x002c */
  } /* size: 0x002c */ Privileges;
  /* 0x0060 */ unsigned char AuditPrivileges;
  /* 0x0064 */ struct _UNICODE_STRING ObjectName;
  /* 0x006c */ struct _UNICODE_STRING ObjectTypeName;
} ACCESS_STATE, *PACCESS_STATE; /* size: 0x0074 */

typedef struct _ACL
{
  /* 0x0000 */ unsigned char AclRevision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short AclSize;
  /* 0x0004 */ unsigned short AceCount;
  /* 0x0006 */ unsigned short Sbz2;
} ACL, *PACL; /* size: 0x0008 */

struct _ACTIVATION_CONTEXT;

struct _ACTIVATION_CONTEXT_DATA;

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x0004 */ struct _LIST_ENTRY FrameListCache;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long NextCookieSequenceNumber;
  /* 0x0014 */ unsigned long StackId;
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0018 */

struct _ADAPTER_OBJECT;

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorMaskRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorSevRW : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned short SecondaryCapsAndControlRW : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned short Reserved : 9; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_BRIDGE_DESCRIPTOR_FLAGS, *PAER_BRIDGE_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short Reserved : 12; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ENDPOINT_DESCRIPTOR_FLAGS, *PAER_ENDPOINT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short RootErrorCommandRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ROOTPORT_DESCRIPTOR_FLAGS, *PAER_ROOTPORT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _AGGREGATED_PAYLOAD_FILTER
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short MagicValue : 12; /* bit position: 0 */
    /* 0x0000 */ unsigned short DescriptorVersion : 4; /* bit position: 12 */
  }; /* bitfield */
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short PredicateCount;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ unsigned __int64 HashedEventIdBitmap;
  /* 0x0010 */ struct _GUID ProviderGuid;
  /* 0x0020 */ unsigned short EachEventTableOffset;
  /* 0x0022 */ unsigned short EachEventTableLength;
  /* 0x0024 */ unsigned short PayloadDecoderTableOffset;
  /* 0x0026 */ unsigned short PayloadDecoderTableLength;
  /* 0x0028 */ unsigned short EventFilterTableOffset;
  /* 0x002a */ unsigned short EventFilterTableLength;
  /* 0x002c */ unsigned short UNICODEStringTableOffset;
  /* 0x002e */ unsigned short UNICODEStringTableLength;
  /* 0x0030 */ unsigned short ANSIStringTableOffset;
  /* 0x0032 */ unsigned short ANSIStringTableLength;
  /* 0x0038 */ struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];
} AGGREGATED_PAYLOAD_FILTER, *PAGGREGATED_PAYLOAD_FILTER; /* size: 0x0050 */

typedef struct _ALPC_COMMUNICATION_INFO
{
  /* 0x0000 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x0004 */ struct _ALPC_PORT* ServerCommunicationPort;
  /* 0x0008 */ struct _ALPC_PORT* ClientCommunicationPort;
  /* 0x000c */ struct _LIST_ENTRY CommunicationList;
  /* 0x0014 */ struct _ALPC_HANDLE_TABLE HandleTable;
  /* 0x0024 */ struct _KALPC_MESSAGE* CloseMessage;
} ALPC_COMMUNICATION_INFO, *PALPC_COMMUNICATION_INFO; /* size: 0x0028 */

typedef struct _ALPC_COMPLETION_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0008 */ struct _EPROCESS* OwnerProcess;
  /* 0x000c */ struct _EX_PUSH_LOCK CompletionListLock;
  /* 0x0010 */ struct _MDL* Mdl;
  /* 0x0014 */ void* UserVa;
  /* 0x0018 */ void* UserLimit;
  /* 0x001c */ void* DataUserVa;
  /* 0x0020 */ void* SystemVa;
  /* 0x0024 */ unsigned long TotalSize;
  /* 0x0028 */ struct _ALPC_COMPLETION_LIST_HEADER* Header;
  /* 0x002c */ void* List;
  /* 0x0030 */ unsigned long ListSize;
  /* 0x0034 */ void* Bitmap;
  /* 0x0038 */ unsigned long BitmapSize;
  /* 0x003c */ void* Data;
  /* 0x0040 */ unsigned long DataSize;
  /* 0x0044 */ unsigned long BitmapLimit;
  /* 0x0048 */ unsigned long BitmapNextHint;
  /* 0x004c */ unsigned long ConcurrencyCount;
  /* 0x0050 */ unsigned long AttributeFlags;
  /* 0x0054 */ unsigned long AttributeSize;
} ALPC_COMPLETION_LIST, *PALPC_COMPLETION_LIST; /* size: 0x0058 */

typedef struct _ALPC_COMPLETION_LIST_HEADER
{
  /* 0x0000 */ unsigned __int64 StartMagic;
  /* 0x0008 */ unsigned long TotalSize;
  /* 0x000c */ unsigned long ListOffset;
  /* 0x0010 */ unsigned long ListSize;
  /* 0x0014 */ unsigned long BitmapOffset;
  /* 0x0018 */ unsigned long BitmapSize;
  /* 0x001c */ unsigned long DataOffset;
  /* 0x0020 */ unsigned long DataSize;
  /* 0x0024 */ unsigned long AttributeFlags;
  /* 0x0028 */ unsigned long AttributeSize;
  /* 0x0040 */ volatile struct _ALPC_COMPLETION_LIST_STATE State;
  /* 0x0048 */ volatile unsigned long LastMessageId;
  /* 0x004c */ volatile unsigned long LastCallbackId;
  /* 0x0080 */ volatile unsigned long PostCount;
  /* 0x00c0 */ volatile unsigned long ReturnCount;
  /* 0x0100 */ volatile unsigned long LogSequenceNumber;
  /* 0x0140 */ struct _RTL_SRWLOCK UserLock;
  /* 0x0148 */ unsigned __int64 EndMagic;
  /* 0x0150 */ long __PADDING__[12];
} ALPC_COMPLETION_LIST_HEADER, *PALPC_COMPLETION_LIST_HEADER; /* size: 0x0180 */

typedef struct _ALPC_COMPLETION_LIST_STATE
{
  union // _TAG_UNNAMED_4
  {
    union
    {
      struct // _TAG_UNNAMED_5
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 Head : 24; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 Tail : 24; /* bit position: 24 */
          /* 0x0000 */ unsigned __int64 ActiveThreadCount : 16; /* bit position: 48 */
        }; /* bitfield */
      } /* size: 0x0008 */ s1;
      /* 0x0000 */ __int64 Value;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} ALPC_COMPLETION_LIST_STATE, *PALPC_COMPLETION_LIST_STATE; /* size: 0x0008 */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long ActiveCount;
  /* 0x000c */ unsigned long PendingNullCount;
  /* 0x0010 */ unsigned long PendingCheckCompletionListCount;
  /* 0x0014 */ unsigned long PendingDelete;
  /* 0x0018 */ struct _SINGLE_LIST_ENTRY FreeListHead;
  /* 0x001c */ void* CompletionPort;
  /* 0x0020 */ void* CompletionKey;
  /* 0x0024 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];
} ALPC_COMPLETION_PACKET_LOOKASIDE, *PALPC_COMPLETION_PACKET_LOOKASIDE; /* size: 0x0030 */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListEntry;
  /* 0x0004 */ struct _IO_MINI_COMPLETION_PACKET_USER* Packet;
  /* 0x0008 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* Lookaside;
} ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY, *PALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY; /* size: 0x000c */

typedef struct _ALPC_DISPATCH_CONTEXT
{
  /* 0x0000 */ struct _ALPC_PORT* PortObject;
  /* 0x0004 */ struct _KALPC_MESSAGE* Message;
  /* 0x0008 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x000c */ struct _ETHREAD* TargetThread;
  /* 0x0010 */ struct _ALPC_PORT* TargetPort;
  /* 0x0014 */ union _KALPC_DIRECT_EVENT DirectEvent;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned short TotalLength;
  /* 0x001e */ unsigned short Type;
  /* 0x0020 */ unsigned short DataInfoOffset;
  /* 0x0022 */ unsigned char SignalCompletion;
  /* 0x0023 */ unsigned char PostedToCompletionList;
} ALPC_DISPATCH_CONTEXT, *PALPC_DISPATCH_CONTEXT; /* size: 0x0024 */

typedef struct _ALPC_HANDLE_ENTRY
{
  /* 0x0000 */ void* Object;
} ALPC_HANDLE_ENTRY, *PALPC_HANDLE_ENTRY; /* size: 0x0004 */

typedef struct _ALPC_HANDLE_TABLE
{
  /* 0x0000 */ struct _ALPC_HANDLE_ENTRY* Handles;
  /* 0x0004 */ unsigned long TotalHandles;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _EX_PUSH_LOCK Lock;
} ALPC_HANDLE_TABLE, *PALPC_HANDLE_TABLE; /* size: 0x0010 */

typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ unsigned long AllocatedAttributes;
  /* 0x0004 */ unsigned long ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES; /* size: 0x0008 */

typedef struct _ALPC_PORT
{
  /* 0x0000 */ struct _LIST_ENTRY PortListEntry;
  /* 0x0008 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x000c */ struct _EPROCESS* OwnerProcess;
  /* 0x0010 */ void* CompletionPort;
  /* 0x0014 */ void* CompletionKey;
  /* 0x0018 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* CompletionPacketLookaside;
  /* 0x001c */ void* PortContext;
  /* 0x0020 */ struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  /* 0x005c */ struct _EX_PUSH_LOCK IncomingQueueLock;
  /* 0x0060 */ struct _LIST_ENTRY MainQueue;
  /* 0x0068 */ struct _LIST_ENTRY LargeMessageQueue;
  /* 0x0070 */ struct _EX_PUSH_LOCK PendingQueueLock;
  /* 0x0074 */ struct _LIST_ENTRY PendingQueue;
  /* 0x007c */ struct _EX_PUSH_LOCK DirectQueueLock;
  /* 0x0080 */ struct _LIST_ENTRY DirectQueue;
  /* 0x0088 */ struct _EX_PUSH_LOCK WaitQueueLock;
  /* 0x008c */ struct _LIST_ENTRY WaitQueue;
  union
  {
    /* 0x0094 */ struct _KSEMAPHORE* Semaphore;
    /* 0x0094 */ struct _KEVENT* DummyEvent;
  }; /* size: 0x0004 */
  /* 0x0098 */ struct _ALPC_PORT_ATTRIBUTES PortAttributes;
  /* 0x00c4 */ struct _EX_PUSH_LOCK ResourceListLock;
  /* 0x00c8 */ struct _LIST_ENTRY ResourceListHead;
  /* 0x00d0 */ struct _EX_PUSH_LOCK PortObjectLock;
  /* 0x00d4 */ struct _ALPC_COMPLETION_LIST* CompletionList;
  /* 0x00d8 */ struct _CALLBACK_OBJECT* CallbackObject;
  /* 0x00dc */ void* CallbackContext;
  /* 0x00e0 */ struct _LIST_ENTRY CanceledQueue;
  /* 0x00e8 */ long SequenceNo;
  /* 0x00ec */ long ReferenceNo;
  /* 0x00f0 */ struct _PALPC_PORT_REFERENCE_WAIT_BLOCK* ReferenceNoWait;
  union // _TAG_UNNAMED_6
  {
    union
    {
      struct // _TAG_UNNAMED_7
      {
        struct /* bitfield */
        {
          /* 0x00f4 */ unsigned long Initialized : 1; /* bit position: 0 */
          /* 0x00f4 */ unsigned long Type : 2; /* bit position: 1 */
          /* 0x00f4 */ unsigned long ConnectionPending : 1; /* bit position: 3 */
          /* 0x00f4 */ unsigned long ConnectionRefused : 1; /* bit position: 4 */
          /* 0x00f4 */ unsigned long Disconnected : 1; /* bit position: 5 */
          /* 0x00f4 */ unsigned long Closed : 1; /* bit position: 6 */
          /* 0x00f4 */ unsigned long NoFlushOnClose : 1; /* bit position: 7 */
          /* 0x00f4 */ unsigned long ReturnExtendedInfo : 1; /* bit position: 8 */
          /* 0x00f4 */ unsigned long Waitable : 1; /* bit position: 9 */
          /* 0x00f4 */ unsigned long DynamicSecurity : 1; /* bit position: 10 */
          /* 0x00f4 */ unsigned long Wow64CompletionList : 1; /* bit position: 11 */
          /* 0x00f4 */ unsigned long Lpc : 1; /* bit position: 12 */
          /* 0x00f4 */ unsigned long LpcToLpc : 1; /* bit position: 13 */
          /* 0x00f4 */ unsigned long HasCompletionList : 1; /* bit position: 14 */
          /* 0x00f4 */ unsigned long HadCompletionList : 1; /* bit position: 15 */
          /* 0x00f4 */ unsigned long EnableCompletionList : 1; /* bit position: 16 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x00f4 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x00f8 */ struct _ALPC_PORT* TargetQueuePort;
  /* 0x00fc */ struct _ALPC_PORT* TargetSequencePort;
  /* 0x0100 */ struct _KALPC_MESSAGE* CachedMessage;
  /* 0x0104 */ unsigned long MainQueueLength;
  /* 0x0108 */ unsigned long LargeMessageQueueLength;
  /* 0x010c */ unsigned long PendingQueueLength;
  /* 0x0110 */ unsigned long DirectQueueLength;
  /* 0x0114 */ unsigned long CanceledQueueLength;
  /* 0x0118 */ unsigned long WaitQueueLength;
} ALPC_PORT, *PALPC_PORT; /* size: 0x011c */

typedef struct _ALPC_PORT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x0010 */ unsigned long MaxMessageLength;
  /* 0x0014 */ unsigned long MemoryBandwidth;
  /* 0x0018 */ unsigned long MaxPoolUsage;
  /* 0x001c */ unsigned long MaxSectionSize;
  /* 0x0020 */ unsigned long MaxViewSize;
  /* 0x0024 */ unsigned long MaxTotalSectionSize;
  /* 0x0028 */ unsigned long DupObjectTypes;
} ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES; /* size: 0x002c */

typedef struct _ALPC_PROCESS_CONTEXT
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _LIST_ENTRY ViewListHead;
  /* 0x000c */ volatile unsigned long PagedPoolQuotaCache;
} ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT; /* size: 0x0010 */

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef struct _AMD64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned __int64 Dr7;
  /* 0x000c */ unsigned __int64 CurrentSymbolStart;
  /* 0x0014 */ unsigned __int64 CurrentSymbolEnd;
} AMD64_DBGKD_CONTROL_SET, *PAMD64_DBGKD_CONTROL_SET; /* size: 0x001c */

typedef enum _ARBITER_ACTION
{
  ArbiterActionTestAllocation = 0,
  ArbiterActionRetestAllocation = 1,
  ArbiterActionCommitAllocation = 2,
  ArbiterActionRollbackAllocation = 3,
  ArbiterActionQueryAllocatedResources = 4,
  ArbiterActionWriteReservedResources = 5,
  ArbiterActionQueryConflict = 6,
  ArbiterActionQueryArbitrate = 7,
  ArbiterActionAddReserved = 8,
  ArbiterActionBootAllocation = 9,
} ARBITER_ACTION, *PARBITER_ACTION;

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* ReserveDevice;
} ARBITER_ADD_RESERVED_PARAMETERS, *PARBITER_ADD_RESERVED_PARAMETERS; /* size: 0x0004 */

typedef struct _ARBITER_ALLOCATION_STATE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ unsigned __int64 CurrentMinimum;
  /* 0x0018 */ unsigned __int64 CurrentMaximum;
  /* 0x0020 */ struct _ARBITER_LIST_ENTRY* Entry;
  /* 0x0024 */ struct _ARBITER_ALTERNATIVE* CurrentAlternative;
  /* 0x0028 */ unsigned long AlternativeCount;
  /* 0x002c */ struct _ARBITER_ALTERNATIVE* Alternatives;
  /* 0x0030 */ unsigned short Flags;
  /* 0x0032 */ unsigned char RangeAttributes;
  /* 0x0033 */ unsigned char RangeAvailableAttributes;
  /* 0x0034 */ unsigned long WorkSpace;
} ARBITER_ALLOCATION_STATE, *PARBITER_ALLOCATION_STATE; /* size: 0x0038 */

typedef struct _ARBITER_ALTERNATIVE
{
  /* 0x0000 */ unsigned __int64 Minimum;
  /* 0x0008 */ unsigned __int64 Maximum;
  /* 0x0010 */ unsigned __int64 Length;
  /* 0x0018 */ unsigned __int64 Alignment;
  /* 0x0020 */ long Priority;
  /* 0x0024 */ unsigned long Flags;
  /* 0x0028 */ struct _IO_RESOURCE_DESCRIPTOR* Descriptor;
  /* 0x002c */ unsigned long Reserved[3];
} ARBITER_ALTERNATIVE, *PARBITER_ALTERNATIVE; /* size: 0x0038 */

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_BOOT_ALLOCATION_PARAMETERS, *PARBITER_BOOT_ALLOCATION_PARAMETERS; /* size: 0x0004 */

typedef struct _ARBITER_CONFLICT_INFO
{
  /* 0x0000 */ struct _DEVICE_OBJECT* OwningObject;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 End;
} ARBITER_CONFLICT_INFO, *PARBITER_CONFLICT_INFO; /* size: 0x0018 */

typedef struct _ARBITER_INSTANCE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _KEVENT* MutexEvent;
  /* 0x0008 */ unsigned short* Name;
  /* 0x000c */ unsigned short* OrderingName;
  /* 0x0010 */ int ResourceType;
  /* 0x0014 */ struct _RTL_RANGE_LIST* Allocation;
  /* 0x0018 */ struct _RTL_RANGE_LIST* PossibleAllocation;
  /* 0x001c */ struct _ARBITER_ORDERING_LIST OrderingList;
  /* 0x0024 */ struct _ARBITER_ORDERING_LIST ReservedList;
  /* 0x002c */ long ReferenceCount;
  /* 0x0030 */ struct _ARBITER_INTERFACE* Interface;
  /* 0x0034 */ unsigned long AllocationStackMaxSize;
  /* 0x0038 */ struct _ARBITER_ALLOCATION_STATE* AllocationStack;
  /* 0x003c */ void* UnpackRequirement /* function */;
  /* 0x0040 */ void* PackResource /* function */;
  /* 0x0044 */ void* UnpackResource /* function */;
  /* 0x0048 */ void* ScoreRequirement /* function */;
  /* 0x004c */ void* TestAllocation /* function */;
  /* 0x0050 */ void* RetestAllocation /* function */;
  /* 0x0054 */ void* CommitAllocation /* function */;
  /* 0x0058 */ void* RollbackAllocation /* function */;
  /* 0x005c */ void* BootAllocation /* function */;
  /* 0x0060 */ void* QueryArbitrate /* function */;
  /* 0x0064 */ void* QueryConflict /* function */;
  /* 0x0068 */ void* AddReserved /* function */;
  /* 0x006c */ void* StartArbiter /* function */;
  /* 0x0070 */ void* PreprocessEntry /* function */;
  /* 0x0074 */ void* AllocateEntry /* function */;
  /* 0x0078 */ void* GetNextAllocationRange /* function */;
  /* 0x007c */ void* FindSuitableRange /* function */;
  /* 0x0080 */ void* AddAllocation /* function */;
  /* 0x0084 */ void* BacktrackAllocation /* function */;
  /* 0x0088 */ void* OverrideConflict /* function */;
  /* 0x008c */ void* InitializeRangeList /* function */;
  /* 0x0090 */ unsigned char TransactionInProgress;
  /* 0x0094 */ struct _KEVENT* TransactionEvent;
  /* 0x0098 */ void* Extension;
  /* 0x009c */ struct _DEVICE_OBJECT* BusDeviceObject;
  /* 0x00a0 */ void* ConflictCallbackContext;
  /* 0x00a4 */ void* ConflictCallback /* function */;
} ARBITER_INSTANCE, *PARBITER_INSTANCE; /* size: 0x00a8 */

typedef struct _ARBITER_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
  /* 0x0010 */ void* ArbiterHandler /* function */;
  /* 0x0014 */ unsigned long Flags;
} ARBITER_INTERFACE, *PARBITER_INTERFACE; /* size: 0x0018 */

typedef struct _ARBITER_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long AlternativeCount;
  /* 0x000c */ struct _IO_RESOURCE_DESCRIPTOR* Alternatives;
  /* 0x0010 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0014 */ enum _ARBITER_REQUEST_SOURCE RequestSource;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ long WorkSpace;
  /* 0x0020 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0024 */ unsigned long SlotNumber;
  /* 0x0028 */ unsigned long BusNumber;
  /* 0x002c */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* Assignment;
  /* 0x0030 */ struct _IO_RESOURCE_DESCRIPTOR* SelectedAlternative;
  /* 0x0034 */ enum _ARBITER_RESULT Result;
} ARBITER_LIST_ENTRY, *PARBITER_LIST_ENTRY; /* size: 0x0038 */

typedef struct _ARBITER_ORDERING
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
} ARBITER_ORDERING, *PARBITER_ORDERING; /* size: 0x0010 */

typedef struct _ARBITER_ORDERING_LIST
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Maximum;
  /* 0x0004 */ struct _ARBITER_ORDERING* Orderings;
} ARBITER_ORDERING_LIST, *PARBITER_ORDERING_LIST; /* size: 0x0008 */

typedef struct _ARBITER_PARAMETERS
{
  union // _TAG_UNNAMED_8
  {
    union
    {
      /* 0x0000 */ struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
      /* 0x0000 */ struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
      /* 0x0000 */ struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
      /* 0x0000 */ struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
      /* 0x0000 */ struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
      /* 0x0000 */ struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
      /* 0x0000 */ struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Parameters;
} ARBITER_PARAMETERS, *PARBITER_PARAMETERS; /* size: 0x0010 */

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
{
  /* 0x0000 */ struct _CM_PARTIAL_RESOURCE_LIST** AllocatedResources;
} ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, *PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS; /* size: 0x0004 */

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_QUERY_ARBITRATE_PARAMETERS, *PARBITER_QUERY_ARBITRATE_PARAMETERS; /* size: 0x0004 */

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0004 */ struct _IO_RESOURCE_DESCRIPTOR* ConflictingResource;
  /* 0x0008 */ unsigned long* ConflictCount;
  /* 0x000c */ struct _ARBITER_CONFLICT_INFO** Conflicts;
} ARBITER_QUERY_CONFLICT_PARAMETERS, *PARBITER_QUERY_CONFLICT_PARAMETERS; /* size: 0x0010 */

typedef enum _ARBITER_REQUEST_SOURCE
{
  ArbiterRequestUndefined = -1,
  ArbiterRequestLegacyReported = 0,
  ArbiterRequestHalReported = 1,
  ArbiterRequestLegacyAssigned = 2,
  ArbiterRequestPnpDetected = 3,
  ArbiterRequestPnpEnumerated = 4,
} ARBITER_REQUEST_SOURCE, *PARBITER_REQUEST_SOURCE;

typedef enum _ARBITER_RESULT
{
  ArbiterResultUndefined = -1,
  ArbiterResultSuccess = 0,
  ArbiterResultExternalConflict = 1,
  ArbiterResultNullRequest = 2,
} ARBITER_RESULT, *PARBITER_RESULT;

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0004 */ unsigned long AllocateFromCount;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_RETEST_ALLOCATION_PARAMETERS, *PARBITER_RETEST_ALLOCATION_PARAMETERS; /* size: 0x000c */

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0004 */ unsigned long AllocateFromCount;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_TEST_ALLOCATION_PARAMETERS, *PARBITER_TEST_ALLOCATION_PARAMETERS; /* size: 0x000c */

typedef struct _ARM64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long TraceFlag;
  /* 0x0008 */ unsigned __int64 CurrentSymbolStart;
  /* 0x0010 */ unsigned __int64 CurrentSymbolEnd;
} ARM64_DBGKD_CONTROL_SET, *PARM64_DBGKD_CONTROL_SET; /* size: 0x0018 */

typedef struct _ARMCE_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARMCE_DBGKD_CONTROL_SET, *PARMCE_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _ARM_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARM_DBGKD_CONTROL_SET, *PARM_DBGKD_CONTROL_SET; /* size: 0x000c */

struct _ASSEMBLY_STORAGE_MAP;

typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
{
  /* 0x0000 */ unsigned long DeviceGroupsCount;
  /* 0x0004 */ struct _SID_AND_ATTRIBUTES* pDeviceGroups;
  /* 0x0008 */ unsigned long RestrictedDeviceGroupsCount;
  /* 0x000c */ struct _SID_AND_ATTRIBUTES* pRestrictedDeviceGroups;
  /* 0x0010 */ struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;
  /* 0x0098 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;
  /* 0x0120 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pUserSecurityAttributes;
  /* 0x0124 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pDeviceSecurityAttributes;
  /* 0x0128 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedUserSecurityAttributes;
  /* 0x012c */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedDeviceSecurityAttributes;
} AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION, *PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION; /* size: 0x0130 */

typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
{
  /* 0x0000 */ unsigned long SecurityAttributeCount;
  /* 0x0004 */ struct _LIST_ENTRY SecurityAttributesList;
  /* 0x000c */ unsigned long WorkingSecurityAttributeCount;
  /* 0x0010 */ struct _LIST_ENTRY WorkingSecurityAttributesList;
} AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION, *PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION; /* size: 0x0018 */

typedef struct _AUX_ACCESS_DATA
{
  /* 0x0000 */ struct _PRIVILEGE_SET* PrivilegesUsed;
  /* 0x0004 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0014 */ unsigned long AccessesToAudit;
  /* 0x0018 */ unsigned long MaximumAuditMask;
  /* 0x001c */ struct _GUID TransactionId;
  /* 0x002c */ void* NewSecurityDescriptor;
  /* 0x0030 */ void* ExistingSecurityDescriptor;
  /* 0x0034 */ void* ParentSecurityDescriptor;
  /* 0x0038 */ void* DeRefSecurityDescriptor /* function */;
  /* 0x003c */ void* SDLock;
  /* 0x0040 */ struct _ACCESS_REASONS AccessReasons;
  /* 0x00c0 */ unsigned char GenerateStagingEvents;
  /* 0x00c1 */ char __PADDING__[3];
} AUX_ACCESS_DATA, *PAUX_ACCESS_DATA; /* size: 0x00c4 */

typedef struct _BITMAP_RANGE
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ __int64 BasePage;
  /* 0x0010 */ unsigned long FirstDirtyPage;
  /* 0x0014 */ unsigned long LastDirtyPage;
  /* 0x0018 */ unsigned long DirtyPages;
  /* 0x001c */ unsigned long* Bitmap;
} BITMAP_RANGE, *PBITMAP_RANGE; /* size: 0x0020 */

typedef struct _BLOB
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ResourceList;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  union // _TAG_UNNAMED_9
  {
    union
    {
      struct // _TAG_UNNAMED_10
      {
        struct /* bitfield */
        {
          /* 0x0008 */ unsigned char ReferenceCache : 1; /* bit position: 0 */
          /* 0x0008 */ unsigned char Lookaside : 1; /* bit position: 1 */
          /* 0x0008 */ unsigned char Initializing : 1; /* bit position: 2 */
          /* 0x0008 */ unsigned char Deleted : 1; /* bit position: 3 */
        }; /* bitfield */
      } /* size: 0x0001 */ s1;
      /* 0x0008 */ unsigned char Flags;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ u1;
  /* 0x0009 */ unsigned char ResourceId;
  /* 0x000a */ short CachedReferences;
  /* 0x000c */ long ReferenceCount;
  /* 0x0010 */ unsigned long Pad;
  /* 0x0014 */ struct _EX_PUSH_LOCK Lock;
} BLOB, *PBLOB; /* size: 0x0018 */

typedef struct _BLOB_COUNTERS
{
  /* 0x0000 */ unsigned long CreatedObjects;
  /* 0x0004 */ unsigned long DeletedObjects;
} BLOB_COUNTERS, *PBLOB_COUNTERS; /* size: 0x0008 */

typedef enum _BLOB_ID
{
  BLOB_TYPE_UNKNOWN = 0,
  BLOB_TYPE_CONNECTION_INFO = 1,
  BLOB_TYPE_MESSAGE = 2,
  BLOB_TYPE_SECURITY_CONTEXT = 3,
  BLOB_TYPE_SECTION = 4,
  BLOB_TYPE_REGION = 5,
  BLOB_TYPE_VIEW = 6,
  BLOB_TYPE_RESERVE = 7,
  BLOB_TYPE_DIRECT_TRANSFER = 8,
  BLOB_TYPE_HANDLE_DATA = 9,
  BLOB_TYPE_MAX_ID = 10,
} BLOB_ID, *PBLOB_ID;

typedef struct _BLOB_TYPE
{
  /* 0x0000 */ enum _BLOB_ID ResourceId;
  /* 0x0004 */ unsigned long PoolTag;
  /* 0x0008 */ unsigned long LookasideIndex;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ struct _BLOB_COUNTERS* Counters;
  /* 0x0014 */ void* DeleteProcedure /* function */;
  /* 0x0018 */ void* DestroyProcedure /* function */;
  /* 0x001c */ unsigned long UsualSize;
} BLOB_TYPE, *PBLOB_TYPE; /* size: 0x0020 */

typedef struct _BUS_EXTENSION_LIST
{
  /* 0x0000 */ void* Next;
  /* 0x0004 */ struct _PI_BUS_EXTENSION* BusExtension;
} BUS_EXTENSION_LIST, *PBUS_EXTENSION_LIST; /* size: 0x0008 */

typedef struct _CACHED_CHILD_LIST
{
  /* 0x0000 */ unsigned long Count;
  union
  {
    /* 0x0004 */ unsigned long ValueList;
    /* 0x0004 */ struct _CM_KEY_CONTROL_BLOCK* RealKcb;
  }; /* size: 0x0004 */
} CACHED_CHILD_LIST, *PCACHED_CHILD_LIST; /* size: 0x0008 */

typedef struct _CACHED_KSTACK_LIST
{
  /* 0x0000 */ union _SLIST_HEADER SListHead;
  /* 0x0008 */ long MinimumFree;
  /* 0x000c */ unsigned long Misses;
  /* 0x0010 */ unsigned long MissesLast;
  /* 0x0014 */ unsigned long AllStacksInUse;
} CACHED_KSTACK_LIST, *PCACHED_KSTACK_LIST; /* size: 0x0018 */

typedef struct _CACHE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char Associativity;
  /* 0x0002 */ unsigned short LineSize;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ enum _PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR; /* size: 0x000c */

typedef struct _CACHE_MANAGER_CALLBACKS
{
  /* 0x0000 */ void* AcquireForLazyWrite /* function */;
  /* 0x0004 */ void* ReleaseFromLazyWrite /* function */;
  /* 0x0008 */ void* AcquireForReadAhead /* function */;
  /* 0x000c */ void* ReleaseFromReadAhead /* function */;
} CACHE_MANAGER_CALLBACKS, *PCACHE_MANAGER_CALLBACKS; /* size: 0x0010 */

typedef struct _CACHE_UNINITIALIZE_EVENT
{
  /* 0x0000 */ struct _CACHE_UNINITIALIZE_EVENT* Next;
  /* 0x0004 */ struct _KEVENT Event;
} CACHE_UNINITIALIZE_EVENT, *PCACHE_UNINITIALIZE_EVENT; /* size: 0x0014 */

struct _CALLBACK_OBJECT;

typedef struct _CALL_HASH_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ void* CallersAddress;
  /* 0x000c */ void* CallersCaller;
  /* 0x0010 */ unsigned long CallCount;
} CALL_HASH_ENTRY, *PCALL_HASH_ENTRY; /* size: 0x0014 */

typedef struct _CALL_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ struct _LIST_ENTRY HashTable[64];
} CALL_PERFORMANCE_DATA, *PCALL_PERFORMANCE_DATA; /* size: 0x0204 */

typedef struct _CC_ASYNC_READ_CONTEXT
{
  /* 0x0000 */ void* CompletionRoutine /* function */;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ struct _MDL* Mdl;
  /* 0x000c */ char RequestorMode;
  /* 0x0010 */ unsigned long NestingLevel;
} CC_ASYNC_READ_CONTEXT, *PCC_ASYNC_READ_CONTEXT; /* size: 0x0014 */

typedef struct _CC_EXTERNAL_CACHE_INFO
{
  /* 0x0000 */ void* Callback /* function */;
  /* 0x0004 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0010 */ struct _LIST_ENTRY Links;
} CC_EXTERNAL_CACHE_INFO, *PCC_EXTERNAL_CACHE_INFO; /* size: 0x0018 */

typedef struct _CELL_DATA
{
  /* 0x0000 */ union _u u;
} CELL_DATA, *PCELL_DATA; /* size: 0x0050 */

typedef struct _CHILD_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long List;
} CHILD_LIST, *PCHILD_LIST; /* size: 0x0008 */

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0004 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0008 */

typedef struct _CLIENT_ID32
{
  /* 0x0000 */ unsigned long UniqueProcess;
  /* 0x0004 */ unsigned long UniqueThread;
} CLIENT_ID32, *PCLIENT_ID32; /* size: 0x0008 */

typedef struct _CLIENT_ID64
{
  /* 0x0000 */ unsigned __int64 UniqueProcess;
  /* 0x0008 */ unsigned __int64 UniqueThread;
} CLIENT_ID64, *PCLIENT_ID64; /* size: 0x0010 */

typedef union _CLS_LSN
{
  union
  {
    struct // _TAG_UNNAMED_11
    {
      /* 0x0000 */ unsigned int idxRecord;
      /* 0x0004 */ unsigned long cidContainer;
    } /* size: 0x0008 */ offset;
    /* 0x0000 */ unsigned __int64 ullOffset;
  }; /* size: 0x0008 */
} CLS_LSN, *PCLS_LSN; /* size: 0x0008 */

typedef struct _CMHIVE
{
  /* 0x0000 */ struct _HHIVE Hive;
  /* 0x06f0 */ void* FileHandles[6];
  /* 0x0708 */ struct _LIST_ENTRY NotifyList;
  /* 0x0710 */ struct _LIST_ENTRY HiveList;
  /* 0x0718 */ struct _LIST_ENTRY PreloadedHiveList;
  /* 0x0720 */ struct _LIST_ENTRY FailedUnloadList;
  /* 0x0728 */ struct _EX_RUNDOWN_REF HiveRundown;
  /* 0x072c */ struct _LIST_ENTRY ParseCacheEntries;
  /* 0x0734 */ struct _CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;
  /* 0x0738 */ unsigned long KcbCacheTableSize;
  /* 0x073c */ struct _CM_KEY_HASH_TABLE_ENTRY* DeletedKcbTable;
  /* 0x0740 */ unsigned long DeletedKcbTableSize;
  /* 0x0744 */ unsigned long Identity;
  /* 0x0748 */ struct _FAST_MUTEX* HiveLock;
  /* 0x074c */ struct _FAST_MUTEX* WriterLock;
  /* 0x0750 */ struct _ERESOURCE* FlusherLock;
  /* 0x0754 */ struct _RTL_BITMAP FlushDirtyVector;
  /* 0x075c */ unsigned long FlushDirtyVectorSize;
  /* 0x0760 */ unsigned char* FlushLogEntry;
  /* 0x0764 */ unsigned long FlushLogEntrySize;
  /* 0x0768 */ unsigned long FlushHiveTruncated;
  /* 0x076c */ unsigned char FlushBaseBlockDirty;
  /* 0x0770 */ struct _RTL_BITMAP CapturedUnreconciledVector;
  /* 0x0778 */ unsigned long CapturedUnreconciledVectorSize;
  /* 0x077c */ struct CMP_OFFSET_ARRAY* UnreconciledOffsetArray;
  /* 0x0780 */ unsigned long UnreconciledOffsetArrayCount;
  /* 0x0784 */ struct _HBASE_BLOCK* UnreconciledBaseBlock;
  /* 0x0788 */ struct _EX_PUSH_LOCK SecurityLock;
  /* 0x078c */ unsigned long UseCount;
  /* 0x0790 */ unsigned long LastShrinkHiveSize;
  /* 0x0798 */ union _LARGE_INTEGER ActualFileSize;
  /* 0x07a0 */ union _LARGE_INTEGER LogFileSizes[2];
  /* 0x07b0 */ struct _UNICODE_STRING FileFullPath;
  /* 0x07b8 */ struct _UNICODE_STRING FileUserName;
  /* 0x07c0 */ struct _UNICODE_STRING HiveRootPath;
  /* 0x07c8 */ unsigned long SecurityCount;
  /* 0x07cc */ unsigned long SecurityCacheSize;
  /* 0x07d0 */ long SecurityHitHint;
  /* 0x07d4 */ struct _CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;
  /* 0x07d8 */ struct _LIST_ENTRY SecurityHash[64];
  /* 0x09d8 */ unsigned long UnloadEventCount;
  /* 0x09dc */ struct _KEVENT** UnloadEventArray;
  /* 0x09e0 */ struct _CM_KEY_CONTROL_BLOCK* RootKcb;
  /* 0x09e4 */ unsigned char Frozen;
  /* 0x09e8 */ struct _CM_WORKITEM* UnloadWorkItem;
  /* 0x09ec */ struct _CM_WORKITEM UnloadWorkItemHolder;
  /* 0x0a00 */ unsigned char GrowOnlyMode;
  /* 0x0a04 */ unsigned long GrowOffset;
  /* 0x0a08 */ struct _LIST_ENTRY KcbConvertListHead;
  /* 0x0a10 */ struct _CM_CELL_REMAP_BLOCK* CellRemapArray;
  /* 0x0a14 */ struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;
  /* 0x0c9c */ unsigned long Flags;
  /* 0x0ca0 */ struct _LIST_ENTRY TrustClassEntry;
  /* 0x0ca8 */ unsigned __int64 DirtyTime;
  /* 0x0cb0 */ unsigned __int64 UnreconciledTime;
  /* 0x0cb8 */ struct _CM_RM* CmRm;
  /* 0x0cbc */ unsigned long CmRmInitFailPoint;
  /* 0x0cc0 */ long CmRmInitFailStatus;
  /* 0x0cc4 */ struct _KTHREAD* CreatorOwner;
  /* 0x0cc8 */ struct _KTHREAD* RundownThread;
  /* 0x0cd0 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0cd8 */ struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;
  /* 0x0ce4 */ struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;
  union
  {
    /* 0x0cf0 */ unsigned long FlushFlags;
    struct /* bitfield */
    {
      /* 0x0cf0 */ unsigned long FlushActive : 1; /* bit position: 0 */
      /* 0x0cf0 */ unsigned long ReconcileActive : 1; /* bit position: 1 */
      /* 0x0cf0 */ unsigned long PrimaryFilePurged : 1; /* bit position: 2 */
      /* 0x0cf0 */ unsigned long DiskFileBad : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0cf4 */ unsigned long PrimaryFileSizeBeforeLastFlush;
  /* 0x0cf8 */ volatile long ReferenceCount;
  /* 0x0cfc */ long UnloadHistoryIndex;
  /* 0x0d00 */ unsigned long UnloadHistory[128];
  /* 0x0f00 */ unsigned long BootStart;
  /* 0x0f04 */ unsigned long UnaccessedStart;
  /* 0x0f08 */ unsigned long UnaccessedEnd;
  /* 0x0f0c */ unsigned long LoadedKeyCount;
  /* 0x0f10 */ volatile unsigned long HandleClosePending;
  /* 0x0f14 */ struct _EX_PUSH_LOCK HandleClosePendingEvent;
  /* 0x0f18 */ unsigned char FinalFlushSucceeded;
  /* 0x0f19 */ unsigned char FailedUnload;
  /* 0x0f1a */ char __PADDING__[6];
} CMHIVE, *PCMHIVE; /* size: 0x0f20 */

typedef enum _CMP_FAILURE_INJECTION_POINT
{
  CmpFailurePointPoolAllocation = 0,
  CmpFailurePointViewMapping = 1,
  CmpFailurePointViewPinning = 2,
  CmpFailurePointResourceCharging = 3,
  CmpFailurePointFileWrite = 4,
  CmpFailurePointFileRead = 5,
  CmpFailurePointCacheFlush = 6,
  CmpFailurePointFlush = 7,
  CmpFailurePointFlushAndPurge = 8,
  CmpFailurePointForceLargeBin = 9,
  CmpFailurePointDontFixAlignment = 10,
  CmpFailureInjectionPointCount = 11,
} CMP_FAILURE_INJECTION_POINT, *PCMP_FAILURE_INJECTION_POINT;

typedef struct _CM_BIG_DATA
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List;
} CM_BIG_DATA, *PCM_BIG_DATA; /* size: 0x0008 */

typedef struct _CM_CACHED_VALUE_INDEX
{
  /* 0x0000 */ unsigned long CellIndex;
  union // _TAG_UNNAMED_12
  {
    union
    {
      /* 0x0004 */ struct _CELL_DATA CellData;
      /* 0x0004 */ unsigned long List[1];
    }; /* size: 0x0050 */
  } /* size: 0x0050 */ Data;
} CM_CACHED_VALUE_INDEX, *PCM_CACHED_VALUE_INDEX; /* size: 0x0054 */

typedef struct _CM_CELL_REMAP_BLOCK
{
  /* 0x0000 */ unsigned long OldCell;
  /* 0x0004 */ unsigned long NewCell;
} CM_CELL_REMAP_BLOCK, *PCM_CELL_REMAP_BLOCK; /* size: 0x0008 */

typedef struct _CM_DIRTY_VECTOR_LOG
{
  /* 0x0000 */ volatile unsigned long Next;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];
} CM_DIRTY_VECTOR_LOG, *PCM_DIRTY_VECTOR_LOG; /* size: 0x0288 */

typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0004 */ enum _CM_DIRTY_VECTOR_OPERATION Operation;
  union // _TAG_UNNAMED_13
  {
    union
    {
      struct // _TAG_UNNAMED_14
      {
        /* 0x0008 */ unsigned long Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x0008 */ DirtyVectorModifiedContext;
      struct // _TAG_UNNAMED_15
      {
        /* 0x0008 */ unsigned long RangeCount;
        /* 0x000c */ unsigned long SetBitCount;
      } /* size: 0x0008 */ DirtyDataCaptureContext;
      struct // _TAG_UNNAMED_16
      {
        /* 0x0008 */ unsigned long Context1;
        /* 0x000c */ unsigned long Context2;
      } /* size: 0x0008 */ Raw;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Data;
  /* 0x0010 */ void* Stack[6];
} CM_DIRTY_VECTOR_LOG_ENTRY, *PCM_DIRTY_VECTOR_LOG_ENTRY; /* size: 0x0028 */

typedef enum _CM_DIRTY_VECTOR_OPERATION
{
  DirtyVectorModified = 0,
  DirtyDataCaptureStart = 1,
  DirtyDataCaptureEnd = 2,
} CM_DIRTY_VECTOR_OPERATION, *PCM_DIRTY_VECTOR_OPERATION;

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _CM_INDEX
{
  /* 0x0000 */ unsigned long Cell;
  union
  {
    /* 0x0004 */ unsigned char NameHint[4];
    /* 0x0004 */ unsigned long HashKey;
  }; /* size: 0x0004 */
} CM_INDEX, *PCM_INDEX; /* size: 0x0008 */

typedef struct _CM_INDEX_HINT_BLOCK
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long HashKey[1];
} CM_INDEX_HINT_BLOCK, *PCM_INDEX_HINT_BLOCK; /* size: 0x0008 */

typedef struct _CM_INTENT_LOCK
{
  /* 0x0000 */ unsigned long OwnerCount;
  /* 0x0004 */ struct _CM_KCB_UOW** OwnerTable;
} CM_INTENT_LOCK, *PCM_INTENT_LOCK; /* size: 0x0008 */

typedef struct _CM_KCB_UOW
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0008 */ struct _CM_INTENT_LOCK* KCBLock;
  /* 0x000c */ struct _CM_INTENT_LOCK* KeyLock;
  /* 0x0010 */ struct _LIST_ENTRY KCBListEntry;
  /* 0x0018 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x001c */ struct _CM_TRANS* Transaction;
  /* 0x0020 */ unsigned long UoWState;
  /* 0x0024 */ enum UoWActionType ActionType;
  /* 0x0028 */ enum HSTORAGE_TYPE StorageType;
  union
  {
    /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* ChildKCB;
    /* 0x0030 */ unsigned long VolatileKeyCell;
    struct
    {
      /* 0x0030 */ unsigned long OldValueCell;
      /* 0x0034 */ unsigned long NewValueCell;
    }; /* size: 0x0008 */
    /* 0x0030 */ unsigned long UserFlags;
    /* 0x0030 */ union _LARGE_INTEGER LastWriteTime;
    /* 0x0030 */ unsigned long TxSecurityCell;
    struct
    {
      /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* OldChildKCB;
      /* 0x0034 */ struct _CM_KEY_CONTROL_BLOCK* NewChildKCB;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* OtherChildKCB;
      /* 0x0034 */ unsigned long ThisVolatileKeyCell;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} CM_KCB_UOW, *PCM_KCB_UOW; /* size: 0x0038 */

typedef struct _CM_KEY_BODY
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0008 */ struct _CM_NOTIFY_BLOCK* NotifyBlock;
  /* 0x000c */ void* ProcessID;
  /* 0x0010 */ struct _LIST_ENTRY KeyBodyList;
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned long Flags : 16; /* bit position: 0 */
    /* 0x0018 */ unsigned long HandleTags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x001c */ void* KtmTrans;
  /* 0x0020 */ struct _GUID* KtmUow;
  /* 0x0024 */ struct _LIST_ENTRY ContextListHead;
} CM_KEY_BODY, *PCM_KEY_BODY; /* size: 0x002c */

typedef struct _CM_KEY_CONTROL_BLOCK
{
  /* 0x0000 */ unsigned long RefCount;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long ExtFlags : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned long PrivateAlloc : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long Delete : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long HiveUnloaded : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long Decommissioned : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long LockTablePresent : 1; /* bit position: 20 */
    /* 0x0004 */ unsigned long TotalLevels : 10; /* bit position: 21 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long DelayedDeref : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long DelayedClose : 1; /* bit position: 1 */
    /* 0x0008 */ unsigned long Parking : 1; /* bit position: 2 */
  }; /* bitfield */
  union
  {
    /* 0x000c */ struct _CM_KEY_HASH KeyHash;
    struct
    {
      /* 0x000c */ unsigned long ConvKey;
      /* 0x0010 */ struct _CM_KEY_HASH* NextHash;
      /* 0x0014 */ struct _HHIVE* KeyHive;
      /* 0x0018 */ unsigned long KeyCell;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x001c */ struct _EX_PUSH_LOCK KcbPushlock;
  union
  {
    /* 0x0020 */ struct _KTHREAD* Owner;
    /* 0x0020 */ long SharedCount;
  }; /* size: 0x0004 */
  /* 0x0024 */ unsigned long SlotHint;
  /* 0x0028 */ struct _CM_KEY_CONTROL_BLOCK* ParentKcb;
  /* 0x002c */ struct _CM_NAME_CONTROL_BLOCK* NameBlock;
  /* 0x0030 */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
  /* 0x0034 */ struct _CACHED_CHILD_LIST ValueCache;
  union
  {
    /* 0x003c */ struct _CM_INDEX_HINT_BLOCK* IndexHint;
    /* 0x003c */ unsigned long HashKey;
    /* 0x003c */ unsigned long SubKeyCount;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0040 */ struct _LIST_ENTRY KeyBodyListHead;
    /* 0x0040 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  /* 0x0048 */ struct _CM_KEY_BODY* KeyBodyArray[4];
  /* 0x0058 */ union _LARGE_INTEGER KcbLastWriteTime;
  /* 0x0060 */ unsigned short KcbMaxNameLen;
  /* 0x0062 */ unsigned short KcbMaxValueNameLen;
  /* 0x0064 */ unsigned long KcbMaxValueDataLen;
  struct /* bitfield */
  {
    /* 0x0068 */ unsigned long KcbUserFlags : 4; /* bit position: 0 */
    /* 0x0068 */ unsigned long KcbVirtControlFlags : 4; /* bit position: 4 */
    /* 0x0068 */ unsigned long KcbDebug : 8; /* bit position: 8 */
    /* 0x0068 */ unsigned long Flags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x006c */ struct _LIST_ENTRY KCBUoWListHead;
  union
  {
    /* 0x0074 */ struct _LIST_ENTRY DelayQueueEntry;
    /* 0x0074 */ volatile unsigned char* Stolen;
  }; /* size: 0x0008 */
  /* 0x007c */ struct _CM_TRANS* TransKCBOwner;
  /* 0x0080 */ struct _CM_INTENT_LOCK KCBLock;
  /* 0x0088 */ struct _CM_INTENT_LOCK KeyLock;
  /* 0x0090 */ struct _CHILD_LIST TransValueCache;
  /* 0x0098 */ struct _CM_TRANS* TransValueListOwner;
  /* 0x009c */ struct _UNICODE_STRING* FullKCBName;
} CM_KEY_CONTROL_BLOCK, *PCM_KEY_CONTROL_BLOCK; /* size: 0x00a0 */

typedef struct _CM_KEY_HASH
{
  /* 0x0000 */ unsigned long ConvKey;
  /* 0x0004 */ struct _CM_KEY_HASH* NextHash;
  /* 0x0008 */ struct _HHIVE* KeyHive;
  /* 0x000c */ unsigned long KeyCell;
} CM_KEY_HASH, *PCM_KEY_HASH; /* size: 0x0010 */

typedef struct _CM_KEY_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _KTHREAD* Owner;
  /* 0x0008 */ struct _CM_KEY_HASH* Entry;
} CM_KEY_HASH_TABLE_ENTRY, *PCM_KEY_HASH_TABLE_ENTRY; /* size: 0x000c */

typedef struct _CM_KEY_INDEX
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List[1];
} CM_KEY_INDEX, *PCM_KEY_INDEX; /* size: 0x0008 */

typedef struct _CM_KEY_NODE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x000c */ unsigned long AccessBits;
  /* 0x0010 */ unsigned long Parent;
  /* 0x0014 */ unsigned long SubKeyCounts[2];
  union
  {
    struct
    {
      /* 0x001c */ unsigned long SubKeyLists[2];
      /* 0x0024 */ struct _CHILD_LIST ValueList;
    }; /* size: 0x0010 */
    /* 0x001c */ struct _CM_KEY_REFERENCE ChildHiveReference;
  }; /* size: 0x0010 */
  /* 0x002c */ unsigned long Security;
  /* 0x0030 */ unsigned long Class;
  struct /* bitfield */
  {
    /* 0x0034 */ unsigned long MaxNameLen : 16; /* bit position: 0 */
    /* 0x0034 */ unsigned long UserFlags : 4; /* bit position: 16 */
    /* 0x0034 */ unsigned long VirtControlFlags : 4; /* bit position: 20 */
    /* 0x0034 */ unsigned long Debug : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x0038 */ unsigned long MaxClassLen;
  /* 0x003c */ unsigned long MaxValueNameLen;
  /* 0x0040 */ unsigned long MaxValueDataLen;
  /* 0x0044 */ unsigned long WorkVar;
  /* 0x0048 */ unsigned short NameLength;
  /* 0x004a */ unsigned short ClassLength;
  /* 0x004c */ wchar_t Name[1];
  /* 0x004e */ char __PADDING__[2];
} CM_KEY_NODE, *PCM_KEY_NODE; /* size: 0x0050 */

typedef struct _CM_KEY_REFERENCE
{
  /* 0x0000 */ unsigned long KeyCell;
  /* 0x0004 */ struct _HHIVE* KeyHive;
} CM_KEY_REFERENCE, *PCM_KEY_REFERENCE; /* size: 0x0008 */

typedef struct _CM_KEY_SECURITY
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long Flink;
  /* 0x0008 */ unsigned long Blink;
  /* 0x000c */ unsigned long ReferenceCount;
  /* 0x0010 */ unsigned long DescriptorLength;
  /* 0x0014 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
} CM_KEY_SECURITY, *PCM_KEY_SECURITY; /* size: 0x0028 */

typedef struct _CM_KEY_SECURITY_CACHE
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ unsigned long ConvKey;
  /* 0x0008 */ struct _LIST_ENTRY List;
  /* 0x0010 */ unsigned long DescriptorLength;
  /* 0x0014 */ unsigned long RealRefCount;
  /* 0x0018 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
} CM_KEY_SECURITY_CACHE, *PCM_KEY_SECURITY_CACHE; /* size: 0x002c */

typedef struct _CM_KEY_SECURITY_CACHE_ENTRY
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
} CM_KEY_SECURITY_CACHE_ENTRY, *PCM_KEY_SECURITY_CACHE_ENTRY; /* size: 0x0008 */

typedef struct _CM_KEY_VALUE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short NameLength;
  /* 0x0004 */ unsigned long DataLength;
  /* 0x0008 */ unsigned long Data;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned short Flags;
  /* 0x0012 */ unsigned short Spare;
  /* 0x0014 */ wchar_t Name[1];
  /* 0x0016 */ char __PADDING__[2];
} CM_KEY_VALUE, *PCM_KEY_VALUE; /* size: 0x0018 */

typedef enum _CM_LOAD_FAILURE_TYPE
{
  _None = 0,
  _CmInitializeHive = 1,
  _HvInitializeHive = 2,
  _HvpBuildMap = 3,
  _HvpBuildMapForLoaderHive = 4,
  _HvpInitMap = 5,
  _HvLoadHive = 6,
  _HvpMapHiveImage = 7,
  _HvpRecoverData = 8,
  _CmpValidateHiveSecurityDescriptors = 9,
  _HvpEnlistBinInMap = 10,
  _CmCheckRegistry = 11,
  _CmRegistryIO = 12,
  _CmCheckRegistry2 = 13,
  _CmpCheckKey = 14,
  _CmpCheckValueList = 15,
  _HvCheckHive = 16,
  _HvCheckBin = 17,
  _HvpGetLogEntryDirtyVector = 18,
  _HvpReadLogEntryHeader = 19,
  _HvpReadLogEntry = 20,
  _CmpMountPreloadedHives = 21,
  _CmpLoadHiveThread = 22,
} CM_LOAD_FAILURE_TYPE, *PCM_LOAD_FAILURE_TYPE;

typedef struct _CM_NAME_CONTROL_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Compressed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long RefCount : 31; /* bit position: 1 */
  }; /* bitfield */
  union
  {
    /* 0x0004 */ struct _CM_NAME_HASH NameHash;
    struct
    {
      /* 0x0004 */ unsigned long ConvKey;
      /* 0x0008 */ struct _CM_KEY_HASH* NextHash;
      /* 0x000c */ unsigned short NameLength;
      /* 0x000e */ wchar_t Name[1];
    }; /* size: 0x000c */
  }; /* size: 0x000c */
} CM_NAME_CONTROL_BLOCK, *PCM_NAME_CONTROL_BLOCK; /* size: 0x0010 */

typedef struct _CM_NAME_HASH
{
  /* 0x0000 */ unsigned long ConvKey;
  /* 0x0004 */ struct _CM_NAME_HASH* NextHash;
  /* 0x0008 */ unsigned short NameLength;
  /* 0x000a */ wchar_t Name[1];
} CM_NAME_HASH, *PCM_NAME_HASH; /* size: 0x000c */

typedef struct _CM_NOTIFY_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY HiveList;
  /* 0x0008 */ struct _LIST_ENTRY PostList;
  /* 0x0010 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0014 */ struct _CM_KEY_BODY* KeyBody;
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned long Filter : 30; /* bit position: 0 */
    /* 0x0018 */ unsigned long WatchTree : 1; /* bit position: 30 */
    /* 0x0018 */ unsigned long NotifyPending : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x001c */ struct _SECURITY_SUBJECT_CONTEXT SubjectContext;
} CM_NOTIFY_BLOCK, *PCM_NOTIFY_BLOCK; /* size: 0x002c */

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char ShareDisposition;
  /* 0x0002 */ unsigned short Flags;
  union // _TAG_UNNAMED_17
  {
    union
    {
      struct // _TAG_UNNAMED_18
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Generic;
      struct // _TAG_UNNAMED_18
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Port;
      struct // _TAG_UNNAMED_19
      {
        /* 0x0004 */ unsigned short Level;
        /* 0x0006 */ unsigned short Group;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long Affinity;
      } /* size: 0x000c */ Interrupt;
      struct // _TAG_UNNAMED_20
      {
        union
        {
          struct // _TAG_UNNAMED_21
          {
            /* 0x0004 */ unsigned short Group;
            /* 0x0006 */ unsigned short MessageCount;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned long Affinity;
          } /* size: 0x000c */ Raw;
          struct // _TAG_UNNAMED_19
          {
            /* 0x0004 */ unsigned short Level;
            /* 0x0006 */ unsigned short Group;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned long Affinity;
          } /* size: 0x000c */ Translated;
        }; /* size: 0x000c */
      } /* size: 0x000c */ MessageInterrupt;
      struct // _TAG_UNNAMED_18
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Memory;
      struct // _TAG_UNNAMED_22
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long Port;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ Dma;
      struct // _TAG_UNNAMED_23
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned char TransferWidth;
        /* 0x000d */ unsigned char Reserved1;
        /* 0x000e */ unsigned char Reserved2;
        /* 0x000f */ unsigned char Reserved3;
      } /* size: 0x000c */ DmaV3;
      struct // _TAG_UNNAMED_24
      {
        /* 0x0004 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct // _TAG_UNNAMED_25
      {
        /* 0x0004 */ unsigned long Start;
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Reserved;
      } /* size: 0x000c */ BusNumber;
      struct // _TAG_UNNAMED_26
      {
        /* 0x0004 */ unsigned long DataSize;
        /* 0x0008 */ unsigned long Reserved1;
        /* 0x000c */ unsigned long Reserved2;
      } /* size: 0x000c */ DeviceSpecificData;
      struct // _TAG_UNNAMED_27
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length40;
      } /* size: 0x000c */ Memory40;
      struct // _TAG_UNNAMED_28
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length48;
      } /* size: 0x000c */ Memory48;
      struct // _TAG_UNNAMED_29
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length64;
      } /* size: 0x000c */ Memory64;
      struct // _TAG_UNNAMED_30
      {
        /* 0x0004 */ unsigned char Class;
        /* 0x0005 */ unsigned char Type;
        /* 0x0006 */ unsigned char Reserved1;
        /* 0x0007 */ unsigned char Reserved2;
        /* 0x0008 */ unsigned long IdLowPart;
        /* 0x000c */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x000c */
  } /* size: 0x000c */ u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR; /* size: 0x0010 */

typedef struct _CM_PARTIAL_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST; /* size: 0x0018 */

typedef struct _CM_RESOURCE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST; /* size: 0x0024 */

typedef struct _CM_RM
{
  /* 0x0000 */ struct _LIST_ENTRY RmListEntry;
  /* 0x0008 */ struct _LIST_ENTRY TransactionListHead;
  /* 0x0010 */ void* TmHandle;
  /* 0x0014 */ void* Tm;
  /* 0x0018 */ void* RmHandle;
  /* 0x001c */ void* KtmRm;
  /* 0x0020 */ unsigned long RefCount;
  /* 0x0024 */ unsigned long ContainerNum;
  /* 0x0028 */ unsigned __int64 ContainerSize;
  /* 0x0030 */ struct _CMHIVE* CmHive;
  /* 0x0034 */ void* LogFileObject;
  /* 0x0038 */ void* MarshallingContext;
  /* 0x003c */ unsigned long RmFlags;
  /* 0x0040 */ long LogStartStatus1;
  /* 0x0044 */ long LogStartStatus2;
  /* 0x0048 */ unsigned __int64 BaseLsn;
  /* 0x0050 */ struct _ERESOURCE* RmLock;
  /* 0x0054 */ long __PADDING__[1];
} CM_RM, *PCM_RM; /* size: 0x0058 */

typedef enum _CM_SHARE_DISPOSITION
{
  CmResourceShareUndetermined = 0,
  CmResourceShareDeviceExclusive = 1,
  CmResourceShareDriverExclusive = 2,
  CmResourceShareShared = 3,
} CM_SHARE_DISPOSITION, *PCM_SHARE_DISPOSITION;

typedef struct _CM_TRANS
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0008 */ struct _LIST_ENTRY KCBUoWListHead;
  /* 0x0010 */ struct _LIST_ENTRY LazyCommitListEntry;
  /* 0x0018 */ void* KtmTrans;
  /* 0x001c */ struct _CM_RM* CmRm;
  /* 0x0020 */ struct _KENLISTMENT* KtmEnlistmentObject;
  /* 0x0024 */ void* KtmEnlistmentHandle;
  /* 0x0028 */ struct _GUID KtmUow;
  /* 0x0038 */ unsigned __int64 StartLsn;
  /* 0x0040 */ unsigned long TransState;
  /* 0x0044 */ unsigned long HiveCount;
  /* 0x0048 */ struct _CMHIVE* HiveArray[7];
  /* 0x0064 */ long __PADDING__[1];
} CM_TRANS, *PCM_TRANS; /* size: 0x0068 */

typedef struct _CM_WORKITEM
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long Private;
  /* 0x000c */ void* WorkerRoutine /* function */;
  /* 0x0010 */ void* Parameter;
} CM_WORKITEM, *PCM_WORKITEM; /* size: 0x0014 */

typedef struct _COLORED_PAGE_INFO
{
  /* 0x0000 */ volatile long BeingZeroed;
  /* 0x0004 */ unsigned long Processor;
  /* 0x0008 */ unsigned long PagesQueued;
  /* 0x000c */ struct _MMPFN* PfnAllocation;
} COLORED_PAGE_INFO, *PCOLORED_PAGE_INFO; /* size: 0x0010 */

typedef struct _COMPRESSED_DATA_INFO
{
  /* 0x0000 */ unsigned short CompressionFormatAndEngine;
  /* 0x0002 */ unsigned char CompressionUnitShift;
  /* 0x0003 */ unsigned char ChunkShift;
  /* 0x0004 */ unsigned char ClusterShift;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ unsigned short NumberOfChunks;
  /* 0x0008 */ unsigned long CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO; /* size: 0x000c */

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
  /* 0x0004 */ unsigned long Dr0;
  /* 0x0008 */ unsigned long Dr1;
  /* 0x000c */ unsigned long Dr2;
  /* 0x0010 */ unsigned long Dr3;
  /* 0x0014 */ unsigned long Dr6;
  /* 0x0018 */ unsigned long Dr7;
  /* 0x001c */ struct _FLOATING_SAVE_AREA FloatSave;
  /* 0x008c */ unsigned long SegGs;
  /* 0x0090 */ unsigned long SegFs;
  /* 0x0094 */ unsigned long SegEs;
  /* 0x0098 */ unsigned long SegDs;
  /* 0x009c */ unsigned long Edi;
  /* 0x00a0 */ unsigned long Esi;
  /* 0x00a4 */ unsigned long Ebx;
  /* 0x00a8 */ unsigned long Edx;
  /* 0x00ac */ unsigned long Ecx;
  /* 0x00b0 */ unsigned long Eax;
  /* 0x00b4 */ unsigned long Ebp;
  /* 0x00b8 */ unsigned long Eip;
  /* 0x00bc */ unsigned long SegCs;
  /* 0x00c0 */ unsigned long EFlags;
  /* 0x00c4 */ unsigned long Esp;
  /* 0x00c8 */ unsigned long SegSs;
  /* 0x00cc */ unsigned char ExtendedRegisters[512];
} CONTEXT, *PCONTEXT; /* size: 0x02cc */

typedef struct _CONTROL_AREA
{
  /* 0x0000 */ struct _SEGMENT* Segment;
  /* 0x0004 */ struct _LIST_ENTRY ListHead;
  /* 0x000c */ unsigned long NumberOfSectionReferences;
  /* 0x0010 */ unsigned long NumberOfPfnReferences;
  /* 0x0014 */ unsigned long NumberOfMappedViews;
  /* 0x0018 */ unsigned long NumberOfUserReferences;
  union // _TAG_UNNAMED_31
  {
    union
    {
      /* 0x001c */ unsigned long LongFlags;
      /* 0x001c */ struct _MMSECTION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0020 */ struct _EX_FAST_REF FilePointer;
  /* 0x0024 */ volatile long ControlAreaLock;
  /* 0x0028 */ unsigned long ModifiedWriteCount;
  /* 0x002c */ struct _MI_CONTROL_AREA_WAIT_BLOCK* WaitList;
  union // _TAG_UNNAMED_32
  {
    struct // _TAG_UNNAMED_33
    {
      union
      {
        /* 0x0030 */ unsigned long NumberOfSystemCacheViews;
        /* 0x0030 */ unsigned long ImageRelocationStartBit;
      }; /* size: 0x0004 */
      union
      {
        /* 0x0034 */ volatile long WritableUserReferences;
        struct /* bitfield */
        {
          /* 0x0034 */ unsigned long ImageRelocationSizeIn64k : 16; /* bit position: 0 */
          /* 0x0034 */ unsigned long Unused : 9; /* bit position: 16 */
          /* 0x0034 */ unsigned long SystemImage : 1; /* bit position: 25 */
          /* 0x0034 */ unsigned long StrongCode : 2; /* bit position: 26 */
          /* 0x0034 */ unsigned long CantMove : 1; /* bit position: 28 */
          /* 0x0034 */ unsigned long BitMap : 2; /* bit position: 29 */
          /* 0x0034 */ unsigned long ImageActive : 1; /* bit position: 31 */
        }; /* bitfield */
      }; /* size: 0x0004 */
      union
      {
        /* 0x0038 */ unsigned long FlushInProgressCount;
        /* 0x0038 */ unsigned long NumberOfSubsections;
        /* 0x0038 */ struct _MI_IMAGE_SECURITY_REFERENCE* SeImageStub;
      }; /* size: 0x0004 */
    } /* size: 0x000c */ e2;
  } /* size: 0x000c */ u2;
  /* 0x0040 */ volatile unsigned __int64 LockedPages;
  /* 0x0048 */ struct _EX_PUSH_LOCK FileObjectLock;
  /* 0x004c */ long __PADDING__[1];
} CONTROL_AREA, *PCONTROL_AREA; /* size: 0x0050 */

typedef struct _COUNTER_READING
{
  /* 0x0000 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* 0x0004 */ unsigned long Index;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 Total;
} COUNTER_READING, *PCOUNTER_READING; /* size: 0x0018 */

typedef union _CPU_INFO
{
  union
  {
    /* 0x0000 */ unsigned int AsUINT32[4];
    struct
    {
      /* 0x0000 */ unsigned long Eax;
      /* 0x0004 */ unsigned long Ebx;
      /* 0x0008 */ unsigned long Ecx;
      /* 0x000c */ unsigned long Edx;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} CPU_INFO, *PCPU_INFO; /* size: 0x0010 */

typedef enum _CREATE_FILE_TYPE
{
  CreateFileTypeNone = 0,
  CreateFileTypeNamedPipe = 1,
  CreateFileTypeMailslot = 2,
} CREATE_FILE_TYPE, *PCREATE_FILE_TYPE;

typedef struct _CURDIR
{
  /* 0x0000 */ struct _UNICODE_STRING DosPath;
  /* 0x0008 */ void* Handle;
} CURDIR, *PCURDIR; /* size: 0x000c */

typedef union _CVDD
{
  union
  {
    /* 0x0000 */ unsigned long Signature;
    /* 0x0000 */ struct _NB10 NB10;
    /* 0x0000 */ struct _RSDS RsDs;
  }; /* size: 0x001c */
} CVDD, *PCVDD; /* size: 0x001c */

typedef enum _ConnectionResourceConsumerDesc
{
  ConnectionResourceConsumerDescIsUndefined = 0,
  ConnectionResourceConsumerDescIsDevice = 1,
  ConnectionResourceConsumerDescIsOpregion = 2,
  ConnectionResourceConsumerDescMax = 3,
} ConnectionResourceConsumerDesc, *PConnectionResourceConsumerDesc;

typedef struct _DBGKD_ANY_CONTROL_SET
{
  union
  {
    /* 0x0000 */ struct _X86_DBGKD_CONTROL_SET X86ControlSet;
    /* 0x0000 */ unsigned long AlphaControlSet;
    /* 0x0000 */ struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;
    /* 0x0000 */ struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
    /* 0x0000 */ struct _ARM_DBGKD_CONTROL_SET ArmControlSet;
    /* 0x0000 */ struct _ARM64_DBGKD_CONTROL_SET Arm64ControlSet;
    /* 0x0000 */ struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
    struct
    {
      /* 0x0000 */ struct _PPC_DBGKD_CONTROL_SET PpcControlSet;
      /* 0x000c */ long __PADDING__[4];
    }; /* size: 0x001c */
  }; /* size: 0x001c */
} DBGKD_ANY_CONTROL_SET, *PDBGKD_ANY_CONTROL_SET; /* size: 0x001c */

typedef struct _DBGKD_BREAKPOINTEX
{
  /* 0x0000 */ unsigned long BreakPointCount;
  /* 0x0004 */ long ContinueStatus;
} DBGKD_BREAKPOINTEX, *PDBGKD_BREAKPOINTEX; /* size: 0x0008 */

typedef struct _DBGKD_CONTEXT_EX
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long ByteCount;
  /* 0x0008 */ unsigned long BytesCopied;
} DBGKD_CONTEXT_EX, *PDBGKD_CONTEXT_EX; /* size: 0x000c */

typedef struct _DBGKD_CONTINUE
{
  /* 0x0000 */ long ContinueStatus;
} DBGKD_CONTINUE, *PDBGKD_CONTINUE; /* size: 0x0004 */

typedef struct _DBGKD_CONTINUE2
{
  /* 0x0000 */ long ContinueStatus;
  union
  {
    /* 0x0004 */ struct _X86_DBGKD_CONTROL_SET ControlSet;
    /* 0x0004 */ struct _DBGKD_ANY_CONTROL_SET AnyControlSet;
  }; /* size: 0x001c */
} DBGKD_CONTINUE2, *PDBGKD_CONTINUE2; /* size: 0x0020 */

typedef struct _DBGKD_FILL_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned short Flags;
  /* 0x000e */ unsigned short PatternLength;
} DBGKD_FILL_MEMORY, *PDBGKD_FILL_MEMORY; /* size: 0x0010 */

typedef struct _DBGKD_GET_CONTEXT
{
  /* 0x0000 */ unsigned long Unused;
} DBGKD_GET_CONTEXT, *PDBGKD_GET_CONTEXT; /* size: 0x0004 */

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Calls;
  /* 0x000c */ unsigned long MaxCallsPerPeriod;
  /* 0x0010 */ unsigned long MinInstructions;
  /* 0x0014 */ unsigned long MaxInstructions;
  /* 0x0018 */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT32, *PDBGKD_GET_INTERNAL_BREAKPOINT32; /* size: 0x001c */

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long Calls;
  /* 0x0010 */ unsigned long MaxCallsPerPeriod;
  /* 0x0014 */ unsigned long MinInstructions;
  /* 0x0018 */ unsigned long MaxInstructions;
  /* 0x001c */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT64, *PDBGKD_GET_INTERNAL_BREAKPOINT64; /* size: 0x0020 */

typedef struct _DBGKD_GET_SET_BUS_DATA
{
  /* 0x0000 */ unsigned long BusDataType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ unsigned long SlotNumber;
  /* 0x000c */ unsigned long Offset;
  /* 0x0010 */ unsigned long Length;
} DBGKD_GET_SET_BUS_DATA, *PDBGKD_GET_SET_BUS_DATA; /* size: 0x0014 */

typedef struct _DBGKD_GET_VERSION32
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned short ProtocolVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned long KernBase;
  /* 0x000c */ unsigned long PsLoadedModuleList;
  /* 0x0010 */ unsigned short MachineType;
  /* 0x0012 */ unsigned short ThCallbackStack;
  /* 0x0014 */ unsigned short NextCallback;
  /* 0x0016 */ unsigned short FramePointer;
  /* 0x0018 */ unsigned long KiCallUserMode;
  /* 0x001c */ unsigned long KeUserCallbackDispatcher;
  /* 0x0020 */ unsigned long BreakpointWithStatus;
  /* 0x0024 */ unsigned long DebuggerDataList;
} DBGKD_GET_VERSION32, *PDBGKD_GET_VERSION32; /* size: 0x0028 */

typedef struct _DBGKD_GET_VERSION64
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned char ProtocolVersion;
  /* 0x0005 */ unsigned char KdSecondaryVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned short MachineType;
  /* 0x000a */ unsigned char MaxPacketType;
  /* 0x000b */ unsigned char MaxStateChange;
  /* 0x000c */ unsigned char MaxManipulate;
  /* 0x000d */ unsigned char Simulation;
  /* 0x000e */ unsigned short Unused[1];
  /* 0x0010 */ unsigned __int64 KernBase;
  /* 0x0018 */ unsigned __int64 PsLoadedModuleList;
  /* 0x0020 */ unsigned __int64 DebuggerDataList;
} DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64; /* size: 0x0028 */

typedef struct _DBGKD_LOAD_SYMBOLS32
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ unsigned long BaseOfDll;
  /* 0x0008 */ unsigned long ProcessId;
  /* 0x000c */ unsigned long CheckSum;
  /* 0x0010 */ unsigned long SizeOfImage;
  /* 0x0014 */ unsigned char UnloadSymbols;
  /* 0x0015 */ char __PADDING__[3];
} DBGKD_LOAD_SYMBOLS32, *PDBGKD_LOAD_SYMBOLS32; /* size: 0x0018 */

typedef struct _DBGKD_LOAD_SYMBOLS64
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0008 */ unsigned __int64 BaseOfDll;
  /* 0x0010 */ unsigned __int64 ProcessId;
  /* 0x0018 */ unsigned long CheckSum;
  /* 0x001c */ unsigned long SizeOfImage;
  /* 0x0020 */ unsigned char UnloadSymbols;
  /* 0x0021 */ char __PADDING__[7];
} DBGKD_LOAD_SYMBOLS64, *PDBGKD_LOAD_SYMBOLS64; /* size: 0x0028 */

typedef struct _DBGKD_MANIPULATE_STATE32
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  union // _TAG_UNNAMED_34
  {
    union
    {
      /* 0x000c */ struct _DBGKD_READ_MEMORY32 ReadMemory;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY32 WriteMemory;
      /* 0x000c */ struct _DBGKD_READ_MEMORY64 ReadMemory64;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY64 WriteMemory64;
      /* 0x000c */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x000c */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x000c */ struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
      /* 0x000c */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x000c */ struct _DBGKD_CONTINUE Continue;
      /* 0x000c */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
      /* 0x000c */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x000c */ struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
      /* 0x000c */ struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_VERSION32 GetVersion32;
      /* 0x000c */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x000c */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x000c */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX SetContextEx;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE32, *PDBGKD_MANIPULATE_STATE32; /* size: 0x0034 */

typedef struct _DBGKD_MANIPULATE_STATE64
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  union // _TAG_UNNAMED_35
  {
    union
    {
      /* 0x0010 */ struct _DBGKD_READ_MEMORY64 ReadMemory;
      /* 0x0010 */ struct _DBGKD_WRITE_MEMORY64 WriteMemory;
      /* 0x0010 */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x0010 */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x0010 */ struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
      /* 0x0010 */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x0010 */ struct _DBGKD_CONTINUE Continue;
      /* 0x0010 */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
      /* 0x0010 */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x0010 */ struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
      /* 0x0010 */ struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_VERSION64 GetVersion64;
      /* 0x0010 */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x0010 */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x0010 */ struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;
      /* 0x0010 */ struct _DBGKD_FILL_MEMORY FillMemory;
      /* 0x0010 */ struct _DBGKD_QUERY_MEMORY QueryMemory;
      /* 0x0010 */ struct _DBGKD_SWITCH_PARTITION SwitchPartition;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX SetContextEx;
      /* 0x0010 */ struct _DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE64, *PDBGKD_MANIPULATE_STATE64; /* size: 0x0038 */

typedef struct _DBGKD_QUERY_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ unsigned long AddressSpace;
  /* 0x0014 */ unsigned long Flags;
} DBGKD_QUERY_MEMORY, *PDBGKD_QUERY_MEMORY; /* size: 0x0018 */

typedef struct _DBGKD_QUERY_SPECIAL_CALLS
{
  /* 0x0000 */ unsigned long NumberOfSpecialCalls;
} DBGKD_QUERY_SPECIAL_CALLS, *PDBGKD_QUERY_SPECIAL_CALLS; /* size: 0x0004 */

typedef struct _DBGKD_READ_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY32, *PDBGKD_READ_MEMORY32; /* size: 0x000c */

typedef struct _DBGKD_READ_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY64, *PDBGKD_READ_MEMORY64; /* size: 0x0010 */

typedef struct _DBGKD_READ_WRITE_IO32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long IoAddress;
  /* 0x0008 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO32, *PDBGKD_READ_WRITE_IO32; /* size: 0x000c */

typedef struct _DBGKD_READ_WRITE_IO64
{
  /* 0x0000 */ unsigned __int64 IoAddress;
  /* 0x0008 */ unsigned long DataSize;
  /* 0x000c */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO64, *PDBGKD_READ_WRITE_IO64; /* size: 0x0010 */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned long IoAddress;
  /* 0x0014 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO_EXTENDED32, *PDBGKD_READ_WRITE_IO_EXTENDED32; /* size: 0x0018 */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned __int64 IoAddress;
  /* 0x0018 */ unsigned long DataValue;
  /* 0x001c */ long __PADDING__[1];
} DBGKD_READ_WRITE_IO_EXTENDED64, *PDBGKD_READ_WRITE_IO_EXTENDED64; /* size: 0x0020 */

typedef struct _DBGKD_READ_WRITE_MSR
{
  /* 0x0000 */ unsigned long Msr;
  /* 0x0004 */ unsigned long DataValueLow;
  /* 0x0008 */ unsigned long DataValueHigh;
} DBGKD_READ_WRITE_MSR, *PDBGKD_READ_WRITE_MSR; /* size: 0x000c */

typedef struct _DBGKD_RESTORE_BREAKPOINT
{
  /* 0x0000 */ unsigned long BreakPointHandle;
} DBGKD_RESTORE_BREAKPOINT, *PDBGKD_RESTORE_BREAKPOINT; /* size: 0x0004 */

typedef struct _DBGKD_SEARCH_MEMORY
{
  union
  {
    /* 0x0000 */ unsigned __int64 SearchAddress;
    /* 0x0000 */ unsigned __int64 FoundAddress;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 SearchLength;
  /* 0x0010 */ unsigned long PatternLength;
  /* 0x0014 */ long __PADDING__[1];
} DBGKD_SEARCH_MEMORY, *PDBGKD_SEARCH_MEMORY; /* size: 0x0018 */

typedef struct _DBGKD_SET_CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
} DBGKD_SET_CONTEXT, *PDBGKD_SET_CONTEXT; /* size: 0x0004 */

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
} DBGKD_SET_INTERNAL_BREAKPOINT32, *PDBGKD_SET_INTERNAL_BREAKPOINT32; /* size: 0x0008 */

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_SET_INTERNAL_BREAKPOINT64, *PDBGKD_SET_INTERNAL_BREAKPOINT64; /* size: 0x0010 */

typedef struct _DBGKD_SET_SPECIAL_CALL32
{
  /* 0x0000 */ unsigned long SpecialCall;
} DBGKD_SET_SPECIAL_CALL32, *PDBGKD_SET_SPECIAL_CALL32; /* size: 0x0004 */

typedef struct _DBGKD_SET_SPECIAL_CALL64
{
  /* 0x0000 */ unsigned __int64 SpecialCall;
} DBGKD_SET_SPECIAL_CALL64, *PDBGKD_SET_SPECIAL_CALL64; /* size: 0x0008 */

typedef struct _DBGKD_SWITCH_PARTITION
{
  /* 0x0000 */ unsigned long Partition;
} DBGKD_SWITCH_PARTITION, *PDBGKD_SWITCH_PARTITION; /* size: 0x0004 */

typedef struct _DBGKD_WRITE_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakPointAddress;
  /* 0x0004 */ unsigned long BreakPointHandle;
} DBGKD_WRITE_BREAKPOINT32, *PDBGKD_WRITE_BREAKPOINT32; /* size: 0x0008 */

typedef struct _DBGKD_WRITE_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakPointAddress;
  /* 0x0008 */ unsigned long BreakPointHandle;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_WRITE_BREAKPOINT64, *PDBGKD_WRITE_BREAKPOINT64; /* size: 0x0010 */

typedef struct _DBGKD_WRITE_CUSTOM_BREAKPOINT
{
  /* 0x0000 */ unsigned __int64 BreakPointAddress;
  /* 0x0008 */ unsigned __int64 BreakPointInstruction;
  /* 0x0010 */ unsigned long BreakPointHandle;
  /* 0x0014 */ unsigned char BreakPointInstructionSize;
  /* 0x0015 */ unsigned char BreakPointInstructionAlignment;
  /* 0x0016 */ char __PADDING__[2];
} DBGKD_WRITE_CUSTOM_BREAKPOINT, *PDBGKD_WRITE_CUSTOM_BREAKPOINT; /* size: 0x0018 */

typedef struct _DBGKD_WRITE_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY32, *PDBGKD_WRITE_MEMORY32; /* size: 0x000c */

typedef struct _DBGKD_WRITE_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY64, *PDBGKD_WRITE_MEMORY64; /* size: 0x0010 */

typedef struct _DBGKM_EXCEPTION32
{
  /* 0x0000 */ struct _EXCEPTION_RECORD32 ExceptionRecord;
  /* 0x0050 */ unsigned long FirstChance;
} DBGKM_EXCEPTION32, *PDBGKM_EXCEPTION32; /* size: 0x0054 */

typedef struct _DBGKM_EXCEPTION64
{
  /* 0x0000 */ struct _EXCEPTION_RECORD64 ExceptionRecord;
  /* 0x0098 */ unsigned long FirstChance;
  /* 0x009c */ long __PADDING__[1];
} DBGKM_EXCEPTION64, *PDBGKM_EXCEPTION64; /* size: 0x00a0 */

typedef struct _DEFERRED_WRITE
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ struct _FILE_OBJECT* FileObject;
  /* 0x0008 */ unsigned long BytesToWrite;
  /* 0x000c */ struct _LIST_ENTRY DeferredWriteLinks;
  /* 0x0014 */ struct _KEVENT* Event;
  /* 0x0018 */ void* PostRoutine /* function */;
  /* 0x001c */ void* Context1;
  /* 0x0020 */ void* Context2;
} DEFERRED_WRITE, *PDEFERRED_WRITE; /* size: 0x0024 */

typedef struct _DELAY_ACK_FO
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ struct _FILE_OBJECT* OriginalFileObject;
} DELAY_ACK_FO, *PDELAY_ACK_FO; /* size: 0x000c */

typedef struct _DESCRIPTOR
{
  /* 0x0000 */ unsigned short Pad;
  /* 0x0002 */ unsigned short Limit;
  /* 0x0004 */ unsigned long Base;
} DESCRIPTOR, *PDESCRIPTOR; /* size: 0x0008 */

typedef struct _DEVICE_CAPABILITIES
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long DeviceD1 : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long DeviceD2 : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long LockSupported : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long EjectSupported : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Removable : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long DockDevice : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long UniqueID : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long SilentInstall : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned long RawDeviceOK : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned long SurpriseRemovalOK : 1; /* bit position: 9 */
    /* 0x0004 */ unsigned long WakeFromD0 : 1; /* bit position: 10 */
    /* 0x0004 */ unsigned long WakeFromD1 : 1; /* bit position: 11 */
    /* 0x0004 */ unsigned long WakeFromD2 : 1; /* bit position: 12 */
    /* 0x0004 */ unsigned long WakeFromD3 : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned long HardwareDisabled : 1; /* bit position: 14 */
    /* 0x0004 */ unsigned long NonDynamic : 1; /* bit position: 15 */
    /* 0x0004 */ unsigned long WarmEjectSupported : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long NoDisplayInUI : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long Reserved1 : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long WakeFromInterrupt : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long Reserved : 12; /* bit position: 20 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long Address;
  /* 0x000c */ unsigned long UINumber;
  /* 0x0010 */ enum _DEVICE_POWER_STATE DeviceState[7];
  /* 0x002c */ enum _SYSTEM_POWER_STATE SystemWake;
  /* 0x0030 */ enum _DEVICE_POWER_STATE DeviceWake;
  /* 0x0034 */ unsigned long D1Latency;
  /* 0x0038 */ unsigned long D2Latency;
  /* 0x003c */ unsigned long D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES; /* size: 0x0040 */

typedef struct _DEVICE_DESCRIPTION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char Master;
  /* 0x0005 */ unsigned char ScatterGather;
  /* 0x0006 */ unsigned char DemandMode;
  /* 0x0007 */ unsigned char AutoInitialize;
  /* 0x0008 */ unsigned char Dma32BitAddresses;
  /* 0x0009 */ unsigned char IgnoreCount;
  /* 0x000a */ unsigned char Reserved1;
  /* 0x000b */ unsigned char Dma64BitAddresses;
  /* 0x000c */ unsigned long BusNumber;
  /* 0x0010 */ unsigned long DmaChannel;
  /* 0x0014 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0018 */ enum _DMA_WIDTH DmaWidth;
  /* 0x001c */ enum _DMA_SPEED DmaSpeed;
  /* 0x0020 */ unsigned long MaximumLength;
  /* 0x0024 */ unsigned long DmaPort;
  /* 0x0028 */ unsigned long DmaAddressWidth;
  /* 0x002c */ unsigned long DmaControllerInstance;
  /* 0x0030 */ unsigned long DmaRequestLine;
  /* 0x0038 */ union _LARGE_INTEGER DeviceAddress;
} DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION; /* size: 0x0040 */

typedef struct _DEVICE_MAP
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* DosDevicesDirectory;
  /* 0x0004 */ struct _OBJECT_DIRECTORY* GlobalDosDevicesDirectory;
  /* 0x0008 */ void* DosDevicesDirectoryHandle;
  /* 0x000c */ volatile long ReferenceCount;
  /* 0x0010 */ unsigned long DriveMap;
  /* 0x0014 */ unsigned char DriveType[32];
} DEVICE_MAP, *PDEVICE_MAP; /* size: 0x0034 */

typedef struct _DEVICE_NODE
{
  /* 0x0000 */ struct _DEVICE_NODE* Sibling;
  /* 0x0004 */ struct _DEVICE_NODE* Child;
  /* 0x0008 */ struct _DEVICE_NODE* Parent;
  /* 0x000c */ struct _DEVICE_NODE* LastChild;
  /* 0x0010 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0014 */ struct _UNICODE_STRING InstancePath;
  /* 0x001c */ struct _UNICODE_STRING ServiceName;
  /* 0x0024 */ struct _IRP* PendingIrp;
  /* 0x0028 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x002c */ volatile long FxDeviceLock;
  /* 0x0030 */ struct _KEVENT FxRemoveEvent;
  /* 0x0040 */ volatile long FxActivationCount;
  /* 0x0044 */ volatile long FxSleepCount;
  /* 0x0048 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x004c */ unsigned long Level;
  /* 0x0050 */ union _POWER_STATE CurrentPowerState;
  /* 0x0054 */ struct _PO_DEVICE_NOTIFY Notify;
  /* 0x0090 */ struct _PO_IRP_MANAGER PoIrpManager;
  /* 0x00a0 */ struct _UNICODE_STRING UniqueId;
  /* 0x00a8 */ unsigned long PowerFlags;
  /* 0x00ac */ enum _PNP_DEVNODE_STATE State;
  /* 0x00b0 */ enum _PNP_DEVNODE_STATE PreviousState;
  /* 0x00b4 */ enum _PNP_DEVNODE_STATE StateHistory[20];
  /* 0x0104 */ unsigned long StateHistoryEntry;
  /* 0x0108 */ long CompletionStatus;
  /* 0x010c */ unsigned long Flags;
  /* 0x0110 */ unsigned long UserFlags;
  /* 0x0114 */ unsigned long Problem;
  /* 0x0118 */ long ProblemStatus;
  /* 0x011c */ struct _CM_RESOURCE_LIST* ResourceList;
  /* 0x0120 */ struct _CM_RESOURCE_LIST* ResourceListTranslated;
  /* 0x0124 */ struct _DEVICE_OBJECT* DuplicatePDO;
  /* 0x0128 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x012c */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0130 */ unsigned long BusNumber;
  /* 0x0134 */ enum _INTERFACE_TYPE ChildInterfaceType;
  /* 0x0138 */ unsigned long ChildBusNumber;
  /* 0x013c */ unsigned short ChildBusTypeIndex;
  /* 0x013e */ unsigned char RemovalPolicy;
  /* 0x013f */ unsigned char HardwareRemovalPolicy;
  /* 0x0140 */ struct _LIST_ENTRY TargetDeviceNotify;
  /* 0x0148 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x0150 */ struct _LIST_ENTRY DeviceTranslatorList;
  /* 0x0158 */ unsigned short NoTranslatorMask;
  /* 0x015a */ unsigned short QueryTranslatorMask;
  /* 0x015c */ unsigned short NoArbiterMask;
  /* 0x015e */ unsigned short QueryArbiterMask;
  union // _TAG_UNNAMED_36
  {
    union
    {
      /* 0x0160 */ struct _DEVICE_NODE* LegacyDeviceNode;
      /* 0x0160 */ struct _DEVICE_RELATIONS* PendingDeviceRelations;
      /* 0x0160 */ void* Information;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ OverUsed1;
  union // _TAG_UNNAMED_37
  {
    /* 0x0164 */ struct _DEVICE_NODE* NextResourceDeviceNode;
  } /* size: 0x0004 */ OverUsed2;
  /* 0x0168 */ struct _CM_RESOURCE_LIST* BootResources;
  /* 0x016c */ struct _CM_RESOURCE_LIST* BootResourcesTranslated;
  /* 0x0170 */ unsigned long CapabilityFlags;
  struct // _TAG_UNNAMED_38
  {
    /* 0x0174 */ enum PROFILE_STATUS DockStatus;
    /* 0x0178 */ struct _LIST_ENTRY ListEntry;
    /* 0x0180 */ unsigned short* SerialNumber;
  } /* size: 0x0010 */ DockInfo;
  /* 0x0184 */ unsigned long DisableableDepends;
  /* 0x0188 */ struct _LIST_ENTRY PendedSetInterfaceState;
  /* 0x0190 */ struct _LIST_ENTRY LegacyBusListEntry;
  /* 0x0198 */ unsigned long DriverUnloadRetryCount;
  /* 0x019c */ struct _DEVICE_NODE* PreviousParent;
  /* 0x01a0 */ long DeletedChildren;
  /* 0x01a4 */ unsigned long NumaNodeIndex;
  /* 0x01a8 */ struct _GUID ContainerID;
  /* 0x01b8 */ unsigned char OverrideFlags;
  /* 0x01bc */ unsigned long DeviceIdsHash;
  /* 0x01c0 */ unsigned char RequiresUnloadedDriver;
  /* 0x01c4 */ struct _PENDING_RELATIONS_LIST_ENTRY* PendingEjectRelations;
  /* 0x01c8 */ unsigned long StateFlags;
} DEVICE_NODE, *PDEVICE_NODE; /* size: 0x01cc */

typedef struct _DEVICE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x000c */ struct _DEVICE_OBJECT* NextDevice;
  /* 0x0010 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0014 */ struct _IRP* CurrentIrp;
  /* 0x0018 */ struct _IO_TIMER* Timer;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ unsigned long Characteristics;
  /* 0x0024 */ struct _VPB* Vpb;
  /* 0x0028 */ void* DeviceExtension;
  /* 0x002c */ unsigned long DeviceType;
  /* 0x0030 */ char StackSize;
  union // _TAG_UNNAMED_39
  {
    union
    {
      /* 0x0034 */ struct _LIST_ENTRY ListEntry;
      /* 0x0034 */ struct _WAIT_CONTEXT_BLOCK Wcb;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ Queue;
  /* 0x005c */ unsigned long AlignmentRequirement;
  /* 0x0060 */ struct _KDEVICE_QUEUE DeviceQueue;
  /* 0x0074 */ struct _KDPC Dpc;
  /* 0x0094 */ unsigned long ActiveThreadCount;
  /* 0x0098 */ void* SecurityDescriptor;
  /* 0x009c */ struct _KEVENT DeviceLock;
  /* 0x00ac */ unsigned short SectorSize;
  /* 0x00ae */ unsigned short Spare1;
  /* 0x00b0 */ struct _DEVOBJ_EXTENSION* DeviceObjectExtension;
  /* 0x00b4 */ void* Reserved;
} DEVICE_OBJECT, *PDEVICE_OBJECT; /* size: 0x00b8 */

struct _DEVICE_OBJECT_LIST;

typedef struct _DEVICE_OBJECT_POWER_EXTENSION
{
  /* 0x0000 */ volatile unsigned long IdleCount;
  /* 0x0004 */ volatile unsigned long BusyCount;
  /* 0x0008 */ volatile unsigned long BusyReference;
  /* 0x000c */ unsigned long TotalBusyCount;
  /* 0x0010 */ unsigned long ConservationIdleTime;
  /* 0x0014 */ unsigned long PerformanceIdleTime;
  /* 0x0018 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x001c */ struct _LIST_ENTRY IdleList;
  /* 0x0024 */ enum _POP_DEVICE_IDLE_TYPE IdleType;
  /* 0x0028 */ enum _DEVICE_POWER_STATE IdleState;
  /* 0x002c */ enum _DEVICE_POWER_STATE CurrentState;
  /* 0x0030 */ struct _POP_COOLING_EXTENSION* CoolingExtension;
  /* 0x0034 */ struct _LIST_ENTRY Volume;
  union // _TAG_UNNAMED_40
  {
    struct // _TAG_UNNAMED_41
    {
      /* 0x003c */ unsigned long IdleTime;
      /* 0x0040 */ unsigned long NonIdleTime;
    } /* size: 0x0008 */ Disk;
  } /* size: 0x0008 */ Specific;
} DEVICE_OBJECT_POWER_EXTENSION, *PDEVICE_OBJECT_POWER_EXTENSION; /* size: 0x0044 */

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef struct _DEVICE_RELATIONS
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _DEVICE_OBJECT* Objects[1];
} DEVICE_RELATIONS, *PDEVICE_RELATIONS; /* size: 0x0008 */

typedef enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
} DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
} DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef struct _DEVOBJ_EXTENSION
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ unsigned long PowerFlags;
  /* 0x000c */ struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;
  /* 0x0010 */ unsigned long ExtensionFlags;
  /* 0x0014 */ void* DeviceNode;
  /* 0x0018 */ struct _DEVICE_OBJECT* AttachedTo;
  /* 0x001c */ long StartIoCount;
  /* 0x0020 */ long StartIoKey;
  /* 0x0024 */ unsigned long StartIoFlags;
  /* 0x0028 */ struct _VPB* Vpb;
  /* 0x002c */ void* DependencyNode;
  /* 0x0030 */ void* InterruptContext;
  /* 0x0034 */ void* VerifierContext;
} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION; /* size: 0x0038 */

typedef enum _DEVPROP_OPERATOR
{
  DEVPROP_OPERATOR_MODIFIER_NOT = 0x10000,
  DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 0x20000,
  DEVPROP_OPERATOR_NONE = 0,
  DEVPROP_OPERATOR_EXISTS = 1,
  DEVPROP_OPERATOR_NOT_EXISTS = 0x10001,
  DEVPROP_OPERATOR_EQUALS = 2,
  DEVPROP_OPERATOR_NOT_EQUALS = 0x10002,
  DEVPROP_OPERATOR_GREATER_THAN = 3,
  DEVPROP_OPERATOR_LESS_THAN = 4,
  DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
  DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
  DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 0x20002,
  DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 0x30002,
  DEVPROP_OPERATOR_BITWISE_AND = 7,
  DEVPROP_OPERATOR_BITWISE_OR = 8,
  DEVPROP_OPERATOR_BEGINS_WITH = 9,
  DEVPROP_OPERATOR_ENDS_WITH = 10,
  DEVPROP_OPERATOR_CONTAINS = 11,
  DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 0x20009,
  DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 0x2000a,
  DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 0x2000b,
  DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
  DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 0x21000,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 0x22000,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 0x23000,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 0x24000,
  DEVPROP_OPERATOR_AND_OPEN = 0x100000,
  DEVPROP_OPERATOR_AND_CLOSE = 0x200000,
  DEVPROP_OPERATOR_OR_OPEN = 0x300000,
  DEVPROP_OPERATOR_OR_CLOSE = 0x400000,
  DEVPROP_OPERATOR_NOT_OPEN = 0x500000,
  DEVPROP_OPERATOR_NOT_CLOSE = 0x600000,
  DEVPROP_OPERATOR_ARRAY_CONTAINS = 0x10000000,
  DEVPROP_OPERATOR_MASK_EVAL = 4095,
  DEVPROP_OPERATOR_MASK_LIST = 0xfffff000,
  DEVPROP_OPERATOR_MASK_MODIFIER = 0xf0000,
  DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,
  DEVPROP_OPERATOR_MASK_LOGICAL = 0xff00000,
  DEVPROP_OPERATOR_MASK_ARRAY = -268435456,
} DEVPROP_OPERATOR, *PDEVPROP_OPERATOR;

typedef struct _DIAGNOSTIC_BUFFER
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ enum _REQUESTER_TYPE CallerType;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long ProcessImageNameOffset;
      /* 0x000c */ unsigned long ProcessId;
      /* 0x0010 */ unsigned long ServiceTag;
    }; /* size: 0x000c */
    struct
    {
      /* 0x0008 */ unsigned long DeviceDescriptionOffset;
      /* 0x000c */ unsigned long DevicePathOffset;
    }; /* size: 0x0008 */
  }; /* size: 0x000c */
  /* 0x0014 */ unsigned long ReasonOffset;
} DIAGNOSTIC_BUFFER, *PDIAGNOSTIC_BUFFER; /* size: 0x0018 */

typedef struct _DIAGNOSTIC_CONTEXT
{
  /* 0x0000 */ enum _REQUESTER_TYPE CallerType;
  union
  {
    struct
    {
      /* 0x0004 */ struct _EPROCESS* Process;
      /* 0x0008 */ unsigned long ServiceTag;
    }; /* size: 0x0008 */
    /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  }; /* size: 0x0008 */
  /* 0x000c */ unsigned long ReasonSize;
} DIAGNOSTIC_CONTEXT, *PDIAGNOSTIC_CONTEXT; /* size: 0x0010 */

typedef struct _DIRTY_PAGE_STATISTICS
{
  /* 0x0000 */ unsigned long DirtyPages;
  /* 0x0004 */ unsigned long DirtyPagesLastScan;
  /* 0x0008 */ unsigned long DirtyPagesScheduledLastScan;
} DIRTY_PAGE_STATISTICS, *PDIRTY_PAGE_STATISTICS; /* size: 0x000c */

typedef struct _DIRTY_PAGE_THRESHOLDS
{
  /* 0x0000 */ unsigned long DirtyPageThreshold;
  /* 0x0004 */ unsigned long DirtyPageThresholdTop;
  /* 0x0008 */ unsigned long DirtyPageThresholdBottom;
  /* 0x000c */ unsigned long DirtyPageTarget;
  /* 0x0010 */ unsigned __int64 AggregateAvailablePages;
  /* 0x0018 */ unsigned __int64 AggregateDirtyPages;
  /* 0x0020 */ unsigned long AvailableHistory;
  /* 0x0024 */ long __PADDING__[1];
} DIRTY_PAGE_THRESHOLDS, *PDIRTY_PAGE_THRESHOLDS; /* size: 0x0028 */

typedef struct _DISALLOWED_GUIDS
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0004 */ struct _GUID* Guids;
} DISALLOWED_GUIDS, *PDISALLOWED_GUIDS; /* size: 0x0008 */

typedef struct _DISPATCHER_HEADER
{
  union
  {
    /* 0x0000 */ volatile long Lock;
    /* 0x0000 */ long LockNV;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Signalling;
      /* 0x0002 */ unsigned char Size;
      /* 0x0003 */ unsigned char Reserved1;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char TimerType;
      union
      {
        /* 0x0001 */ unsigned char TimerControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Absolute : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Wake : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char EncodedTolerableDelay : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Hand;
          union
          {
            /* 0x0003 */ unsigned char TimerMiscFlags;
            struct /* bitfield */
            {
              /* 0x0003 */ unsigned char Index : 1; /* bit position: 0 */
              /* 0x0003 */ unsigned char Processor : 5; /* bit position: 1 */
              /* 0x0003 */ unsigned char Inserted : 1; /* bit position: 6 */
              /* 0x0003 */ volatile unsigned char Expired : 1; /* bit position: 7 */
            }; /* bitfield */
          }; /* size: 0x0001 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char Timer2Type;
      union
      {
        /* 0x0001 */ unsigned char Timer2Flags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Timer2Inserted : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Timer2Expiring : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char Timer2CancelPending : 1; /* bit position: 2 */
            /* 0x0001 */ unsigned char Timer2SetPending : 1; /* bit position: 3 */
            /* 0x0001 */ unsigned char Timer2Running : 1; /* bit position: 4 */
            /* 0x0001 */ unsigned char Timer2Disabled : 1; /* bit position: 5 */
            /* 0x0001 */ unsigned char Timer2ReservedFlags : 2; /* bit position: 6 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Timer2Reserved1;
          /* 0x0003 */ unsigned char Timer2Reserved2;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char QueueType;
      union
      {
        /* 0x0001 */ unsigned char QueueControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Abandoned : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char DisableIncrement : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char QueueReservedControlFlags : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char QueueSize;
          /* 0x0003 */ unsigned char QueueReserved;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char ThreadType;
      /* 0x0001 */ unsigned char ThreadReserved;
      union
      {
        /* 0x0002 */ unsigned char ThreadControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0002 */ unsigned char CycleProfiling : 1; /* bit position: 0 */
            /* 0x0002 */ unsigned char CounterProfiling : 1; /* bit position: 1 */
            /* 0x0002 */ unsigned char GroupScheduling : 1; /* bit position: 2 */
            /* 0x0002 */ unsigned char AffinitySet : 1; /* bit position: 3 */
            /* 0x0002 */ unsigned char Tagged : 1; /* bit position: 4 */
            /* 0x0002 */ unsigned char EnergyProfiling : 1; /* bit position: 5 */
            /* 0x0002 */ unsigned char Instrumented : 1; /* bit position: 6 */
            /* 0x0002 */ unsigned char ThreadReservedControlFlags : 1; /* bit position: 7 */
          }; /* bitfield */
          /* 0x0003 */ unsigned char DebugActive;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char MutantType;
      /* 0x0001 */ unsigned char MutantSize;
      /* 0x0002 */ unsigned char DpcActive;
      /* 0x0003 */ unsigned char MutantReserved;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ long SignalState;
  /* 0x0008 */ struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; /* size: 0x0010 */

typedef enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
} DMA_SPEED, *PDMA_SPEED;

typedef enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
} DMA_WIDTH, *PDMA_WIDTH;

typedef struct _DRIVER_EXTENSION
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0004 */ void* AddDevice /* function */;
  /* 0x0008 */ unsigned long Count;
  /* 0x000c */ struct _UNICODE_STRING ServiceKeyName;
  /* 0x0014 */ struct _IO_CLIENT_EXTENSION* ClientDriverExtension;
  /* 0x0018 */ struct _FS_FILTER_CALLBACKS* FsFilterCallbacks;
  /* 0x001c */ void* KseCallbacks;
  /* 0x0020 */ void* DvCallbacks;
  /* 0x0024 */ void* VerifierContext;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION; /* size: 0x0028 */

typedef struct _DRIVER_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ void* DriverStart;
  /* 0x0010 */ unsigned long DriverSize;
  /* 0x0014 */ void* DriverSection;
  /* 0x0018 */ struct _DRIVER_EXTENSION* DriverExtension;
  /* 0x001c */ struct _UNICODE_STRING DriverName;
  /* 0x0024 */ struct _UNICODE_STRING* HardwareDatabase;
  /* 0x0028 */ struct _FAST_IO_DISPATCH* FastIoDispatch;
  /* 0x002c */ void* DriverInit /* function */;
  /* 0x0030 */ void* DriverStartIo /* function */;
  /* 0x0034 */ void* DriverUnload /* function */;
  /* 0x0038 */ void* MajorFunction[28] /* function */;
} DRIVER_OBJECT, *PDRIVER_OBJECT; /* size: 0x00a8 */

typedef struct _DUAL
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ struct _HMAP_DIRECTORY* Map;
  /* 0x0008 */ struct _HMAP_TABLE* SmallDir;
  /* 0x000c */ unsigned long Guard;
  /* 0x0010 */ struct _FREE_DISPLAY FreeDisplay[24];
  /* 0x0190 */ struct _LIST_ENTRY FreeBins;
  /* 0x0198 */ unsigned long FreeSummary;
} DUAL, *PDUAL; /* size: 0x019c */

typedef struct _DUMMY_FILE_OBJECT
{
  /* 0x0000 */ struct _OBJECT_HEADER ObjectHeader;
  /* 0x0020 */ char FileObjectBody[128];
} DUMMY_FILE_OBJECT, *PDUMMY_FILE_OBJECT; /* size: 0x00a0 */

typedef enum _DUMP_EVENTS
{
  DUMP_EVENT_NONE = 0,
  DUMP_EVENT_HIBER_RESUME = 1,
  DUMP_EVENT_HIBER_RESUME_END = 2,
} DUMP_EVENTS, *PDUMP_EVENTS;

typedef struct _DUMP_INITIALIZATION_CONTEXT
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* MemoryBlock;
  /* 0x000c */ void* CommonBuffer[2];
  /* 0x0018 */ union _LARGE_INTEGER PhysicalAddress[2];
  /* 0x0028 */ void* StallRoutine /* function */;
  /* 0x002c */ void* OpenRoutine /* function */;
  /* 0x0030 */ void* WriteRoutine /* function */;
  /* 0x0034 */ void* FinishRoutine /* function */;
  /* 0x0038 */ struct _ADAPTER_OBJECT* AdapterObject;
  /* 0x003c */ void* MappedRegisterBase;
  /* 0x0040 */ void* PortConfiguration;
  /* 0x0044 */ unsigned char CrashDump;
  /* 0x0045 */ unsigned char MarkMemoryOnly;
  /* 0x0046 */ unsigned char HiberResume;
  /* 0x0047 */ unsigned char Reserved1;
  /* 0x0048 */ unsigned long MaximumTransferSize;
  /* 0x004c */ unsigned long CommonBufferSize;
  /* 0x0050 */ void* TargetAddress;
  /* 0x0054 */ void* WritePendingRoutine /* function */;
  /* 0x0058 */ unsigned long PartitionStyle;
  union // _TAG_UNNAMED_42
  {
    union
    {
      struct // _TAG_UNNAMED_43
      {
        /* 0x005c */ unsigned long Signature;
        /* 0x0060 */ unsigned long CheckSum;
      } /* size: 0x0008 */ Mbr;
      struct // _TAG_UNNAMED_44
      {
        /* 0x005c */ struct _GUID DiskId;
      } /* size: 0x0010 */ Gpt;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ DiskInfo;
  /* 0x006c */ void* ReadRoutine /* function */;
  /* 0x0070 */ void* GetDriveTelemetryRoutine /* function */;
  /* 0x0074 */ unsigned long LogSectionTruncateSize;
  /* 0x0078 */ unsigned long Parameters[16];
  /* 0x00b8 */ void* GetTransferSizesRoutine /* function */;
  /* 0x00bc */ void* DumpNotifyRoutine /* function */;
} DUMP_INITIALIZATION_CONTEXT, *PDUMP_INITIALIZATION_CONTEXT; /* size: 0x00c0 */

typedef struct _DUMP_STACK_CONTEXT
{
  /* 0x0000 */ struct _DUMP_INITIALIZATION_CONTEXT Init;
  /* 0x00c0 */ union _LARGE_INTEGER PartitionOffset;
  /* 0x00c8 */ void* DumpPointers;
  /* 0x00cc */ unsigned long PointersLength;
  /* 0x00d0 */ unsigned short* ModulePrefix;
  /* 0x00d4 */ struct _LIST_ENTRY DriverList;
  /* 0x00dc */ struct _STRING InitMsg;
  /* 0x00e4 */ struct _STRING ProgMsg;
  /* 0x00ec */ struct _STRING DoneMsg;
  /* 0x00f4 */ void* FileObject;
  /* 0x00f8 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;
  /* 0x00fc */ long __PADDING__[1];
} DUMP_STACK_CONTEXT, *PDUMP_STACK_CONTEXT; /* size: 0x0100 */

typedef struct _ECP_LIST
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _LIST_ENTRY EcpList;
} ECP_LIST, *PECP_LIST; /* size: 0x0010 */

typedef struct _EJOB
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0010 */ struct _LIST_ENTRY JobLinks;
  /* 0x0018 */ struct _LIST_ENTRY ProcessListHead;
  /* 0x0020 */ struct _ERESOURCE JobLock;
  /* 0x0058 */ union _LARGE_INTEGER TotalUserTime;
  /* 0x0060 */ union _LARGE_INTEGER TotalKernelTime;
  /* 0x0068 */ union _LARGE_INTEGER TotalCycleTime;
  /* 0x0070 */ union _LARGE_INTEGER ThisPeriodTotalUserTime;
  /* 0x0078 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime;
  /* 0x0080 */ unsigned __int64 TotalContextSwitches;
  /* 0x0088 */ unsigned long TotalPageFaultCount;
  /* 0x008c */ unsigned long TotalProcesses;
  /* 0x0090 */ unsigned long ActiveProcesses;
  /* 0x0094 */ unsigned long TotalTerminatedProcesses;
  /* 0x0098 */ union _LARGE_INTEGER PerProcessUserTimeLimit;
  /* 0x00a0 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* 0x00a8 */ unsigned long MinimumWorkingSetSize;
  /* 0x00ac */ unsigned long MaximumWorkingSetSize;
  /* 0x00b0 */ unsigned long LimitFlags;
  /* 0x00b4 */ unsigned long ActiveProcessLimit;
  /* 0x00b8 */ struct _KAFFINITY_EX Affinity;
  /* 0x00c4 */ struct _JOB_ACCESS_STATE* AccessState;
  /* 0x00c8 */ void* AccessStateQuotaReference;
  /* 0x00cc */ unsigned long UIRestrictionsClass;
  /* 0x00d0 */ unsigned long EndOfJobTimeAction;
  /* 0x00d4 */ void* CompletionPort;
  /* 0x00d8 */ void* CompletionKey;
  /* 0x00e0 */ unsigned __int64 CompletionCount;
  /* 0x00e8 */ unsigned long SessionId;
  /* 0x00ec */ unsigned long SchedulingClass;
  /* 0x00f0 */ unsigned __int64 ReadOperationCount;
  /* 0x00f8 */ unsigned __int64 WriteOperationCount;
  /* 0x0100 */ unsigned __int64 OtherOperationCount;
  /* 0x0108 */ unsigned __int64 ReadTransferCount;
  /* 0x0110 */ unsigned __int64 WriteTransferCount;
  /* 0x0118 */ unsigned __int64 OtherTransferCount;
  /* 0x0120 */ struct _PROCESS_DISK_COUNTERS DiskIoInfo;
  /* 0x0148 */ unsigned long ProcessMemoryLimit;
  /* 0x014c */ unsigned long JobMemoryLimit;
  /* 0x0150 */ unsigned long JobTotalMemoryLimit;
  /* 0x0154 */ unsigned long PeakProcessMemoryUsed;
  /* 0x0158 */ unsigned long PeakJobMemoryUsed;
  /* 0x015c */ struct _KAFFINITY_EX EffectiveAffinity;
  /* 0x0168 */ union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
  /* 0x0170 */ unsigned long EffectiveMinimumWorkingSetSize;
  /* 0x0174 */ unsigned long EffectiveMaximumWorkingSetSize;
  /* 0x0178 */ unsigned long EffectiveProcessMemoryLimit;
  /* 0x017c */ struct _EJOB* EffectiveProcessMemoryLimitJob;
  /* 0x0180 */ struct _EJOB* EffectivePerProcessUserTimeLimitJob;
  /* 0x0184 */ struct _EJOB* EffectiveDiskIoRateLimitJob;
  /* 0x0188 */ struct _EJOB* EffectiveNetIoRateLimitJob;
  /* 0x018c */ struct _EJOB* EffectiveHeapAttributionJob;
  /* 0x0190 */ unsigned long EffectiveLimitFlags;
  /* 0x0194 */ unsigned long EffectiveSchedulingClass;
  /* 0x0198 */ unsigned long EffectiveFreezeCount;
  /* 0x019c */ unsigned long EffectiveBackgroundCount;
  /* 0x01a0 */ unsigned long EffectiveSwapCount;
  /* 0x01a4 */ unsigned long EffectiveNotificationLimitCount;
  /* 0x01a8 */ unsigned char EffectivePriorityClass;
  /* 0x01a9 */ unsigned char PriorityClass;
  /* 0x01aa */ unsigned char NestingDepth;
  /* 0x01ab */ unsigned char Reserved1[1];
  /* 0x01ac */ unsigned long CompletionFilter;
  union
  {
    /* 0x01b0 */ struct _WNF_STATE_NAME WakeChannel;
    /* 0x01b0 */ struct _PS_WAKE_INFORMATION WakeInfo;
  }; /* size: 0x0038 */
  /* 0x01e8 */ struct _JOBOBJECT_WAKE_FILTER WakeFilter;
  /* 0x01f0 */ unsigned long LowEdgeLatchFilter;
  /* 0x01f4 */ unsigned long OwnedHighEdgeFilters;
  /* 0x01f8 */ struct _EJOB* NotificationLink;
  /* 0x0200 */ unsigned __int64 CurrentJobMemoryUsed;
  /* 0x0208 */ struct _JOB_NOTIFICATION_INFORMATION* NotificationInfo;
  /* 0x020c */ void* NotificationInfoQuotaReference;
  /* 0x0210 */ struct _IO_MINI_COMPLETION_PACKET_USER* NotificationPacket;
  /* 0x0214 */ struct _JOB_CPU_RATE_CONTROL* CpuRateControl;
  /* 0x0218 */ void* EffectiveSchedulingGroup;
  /* 0x0220 */ unsigned __int64 ReadyTime;
  /* 0x0228 */ struct _EX_PUSH_LOCK MemoryLimitsLock;
  /* 0x022c */ struct _LIST_ENTRY SiblingJobLinks;
  /* 0x0234 */ struct _LIST_ENTRY ChildJobListHead;
  /* 0x023c */ struct _EJOB* ParentJob;
  /* 0x0240 */ struct _EJOB* volatile RootJob;
  /* 0x0244 */ struct _LIST_ENTRY IteratorListHead;
  /* 0x024c */ unsigned long AncestorCount;
  union
  {
    /* 0x0250 */ struct _EJOB** Ancestors;
    /* 0x0250 */ void* SessionObject;
  }; /* size: 0x0004 */
  /* 0x0258 */ struct _EPROCESS_VALUES Accounting;
  /* 0x02a8 */ unsigned long ShadowActiveProcessCount;
  /* 0x02ac */ unsigned long ActiveAuxiliaryProcessCount;
  /* 0x02b0 */ unsigned long SequenceNumber;
  /* 0x02b4 */ unsigned long TimerListLock;
  /* 0x02b8 */ struct _LIST_ENTRY TimerListHead;
  /* 0x02c0 */ struct _GUID ContainerId;
  /* 0x02d0 */ struct _ESILO* Container;
  /* 0x02d4 */ struct _PS_PROPERTY_SET PropertySet;
  /* 0x02e0 */ struct _JOB_NET_RATE_CONTROL* NetRateControl;
  /* 0x02e4 */ struct _JOB_IO_RATE_CONTROL* IoRateControl;
  union
  {
    /* 0x02e8 */ unsigned long JobFlags;
    struct /* bitfield */
    {
      /* 0x02e8 */ unsigned long CloseDone : 1; /* bit position: 0 */
      /* 0x02e8 */ unsigned long MultiGroup : 1; /* bit position: 1 */
      /* 0x02e8 */ unsigned long OutstandingNotification : 1; /* bit position: 2 */
      /* 0x02e8 */ unsigned long NotificationInProgress : 1; /* bit position: 3 */
      /* 0x02e8 */ unsigned long UILimits : 1; /* bit position: 4 */
      /* 0x02e8 */ unsigned long CpuRateControlActive : 1; /* bit position: 5 */
      /* 0x02e8 */ unsigned long OwnCpuRateControl : 1; /* bit position: 6 */
      /* 0x02e8 */ unsigned long Terminating : 1; /* bit position: 7 */
      /* 0x02e8 */ unsigned long WorkingSetLock : 1; /* bit position: 8 */
      /* 0x02e8 */ unsigned long JobFrozen : 1; /* bit position: 9 */
      /* 0x02e8 */ unsigned long Background : 1; /* bit position: 10 */
      /* 0x02e8 */ unsigned long WakeNotificationAllocated : 1; /* bit position: 11 */
      /* 0x02e8 */ unsigned long WakeNotificationEnabled : 1; /* bit position: 12 */
      /* 0x02e8 */ unsigned long WakeNotificationPending : 1; /* bit position: 13 */
      /* 0x02e8 */ unsigned long LimitNotificationRequired : 1; /* bit position: 14 */
      /* 0x02e8 */ unsigned long ZeroCountNotificationRequired : 1; /* bit position: 15 */
      /* 0x02e8 */ unsigned long CycleTimeNotificationRequired : 1; /* bit position: 16 */
      /* 0x02e8 */ unsigned long CycleTimeNotificationPending : 1; /* bit position: 17 */
      /* 0x02e8 */ unsigned long TimersVirtualized : 1; /* bit position: 18 */
      /* 0x02e8 */ unsigned long JobSwapped : 1; /* bit position: 19 */
      /* 0x02e8 */ unsigned long ViolationDetected : 1; /* bit position: 20 */
      /* 0x02e8 */ unsigned long EmptyJobNotified : 1; /* bit position: 21 */
      /* 0x02e8 */ unsigned long NoSystemCharge : 1; /* bit position: 22 */
      /* 0x02e8 */ unsigned long DropNoWakeCharges : 1; /* bit position: 23 */
      /* 0x02e8 */ unsigned long NoWakeChargePolicyDecided : 1; /* bit position: 24 */
      /* 0x02e8 */ unsigned long NetRateControlActive : 1; /* bit position: 25 */
      /* 0x02e8 */ unsigned long OwnNetRateControl : 1; /* bit position: 26 */
      /* 0x02e8 */ unsigned long IoRateControlActive : 1; /* bit position: 27 */
      /* 0x02e8 */ unsigned long OwnIoRateControl : 1; /* bit position: 28 */
      /* 0x02e8 */ unsigned long IsContainerRoot : 1; /* bit position: 29 */
      /* 0x02e8 */ unsigned long SpareJobFlags : 2; /* bit position: 30 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02ec */ unsigned long EffectiveHighEdgeFilters;
  /* 0x02f0 */ struct _PROCESS_ENERGY_VALUES* EnergyValues;
  /* 0x02f4 */ volatile unsigned long SharedCommitCharge;
} EJOB, *PEJOB; /* size: 0x02f8 */

typedef struct _ENODE
{
  /* 0x0000 */ struct _KNODE Ncb;
  /* 0x0100 */ struct _EX_WORK_QUEUE* volatile ExWorkQueues[8];
  /* 0x0120 */ struct _EX_WORK_QUEUE ExWorkQueue;
  /* 0x02d8 */ struct _KEVENT ExpThreadSetManagerEvent;
  /* 0x02e8 */ struct _KTIMER ExpDeadlockTimer;
  /* 0x0310 */ struct _KEVENT ExpThreadReaperEvent;
  /* 0x0320 */ struct _KWAIT_BLOCK WaitBlocks[3];
  /* 0x0368 */ struct _ETHREAD* ExpWorkerThreadBalanceManagerPtr;
  /* 0x036c */ unsigned long ExpWorkerSeed;
  union
  {
    struct /* bitfield */
    {
      /* 0x0370 */ volatile unsigned long ExWorkerFullInit : 1; /* bit position: 0 */
      /* 0x0370 */ volatile unsigned long ExWorkerStructInit : 1; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0370 */ volatile unsigned long ExWorkerFlags;
  }; /* size: 0x0004 */
  /* 0x0374 */ long __PADDING__[3];
} ENODE, *PENODE; /* size: 0x0380 */

typedef struct _EPROCESS
{
  /* 0x0000 */ struct _KPROCESS Pcb;
  /* 0x00a8 */ struct _EX_PUSH_LOCK ProcessLock;
  /* 0x00ac */ struct _EX_RUNDOWN_REF RundownProtect;
  /* 0x00b0 */ void* VdmObjects;
  /* 0x00b4 */ void* UniqueProcessId;
  /* 0x00b8 */ struct _LIST_ENTRY ActiveProcessLinks;
  union
  {
    /* 0x00c0 */ unsigned long Flags2;
    struct /* bitfield */
    {
      /* 0x00c0 */ unsigned long JobNotReallyActive : 1; /* bit position: 0 */
      /* 0x00c0 */ unsigned long AccountingFolded : 1; /* bit position: 1 */
      /* 0x00c0 */ unsigned long NewProcessReported : 1; /* bit position: 2 */
      /* 0x00c0 */ unsigned long ExitProcessReported : 1; /* bit position: 3 */
      /* 0x00c0 */ unsigned long ReportCommitChanges : 1; /* bit position: 4 */
      /* 0x00c0 */ unsigned long LastReportMemory : 1; /* bit position: 5 */
      /* 0x00c0 */ unsigned long ForceWakeCharge : 1; /* bit position: 6 */
      /* 0x00c0 */ unsigned long CrossSessionCreate : 1; /* bit position: 7 */
      /* 0x00c0 */ unsigned long NeedsHandleRundown : 1; /* bit position: 8 */
      /* 0x00c0 */ unsigned long RefTraceEnabled : 1; /* bit position: 9 */
      /* 0x00c0 */ unsigned long DisableDynamicCode : 1; /* bit position: 10 */
      /* 0x00c0 */ unsigned long EmptyJobEvaluated : 1; /* bit position: 11 */
      /* 0x00c0 */ unsigned long DefaultPagePriority : 3; /* bit position: 12 */
      /* 0x00c0 */ unsigned long PrimaryTokenFrozen : 1; /* bit position: 15 */
      /* 0x00c0 */ unsigned long ProcessVerifierTarget : 1; /* bit position: 16 */
      /* 0x00c0 */ unsigned long StackRandomizationDisabled : 1; /* bit position: 17 */
      /* 0x00c0 */ unsigned long AffinityPermanent : 1; /* bit position: 18 */
      /* 0x00c0 */ unsigned long AffinityUpdateEnable : 1; /* bit position: 19 */
      /* 0x00c0 */ unsigned long PropagateNode : 1; /* bit position: 20 */
      /* 0x00c0 */ unsigned long ExplicitAffinity : 1; /* bit position: 21 */
      /* 0x00c0 */ unsigned long ProcessExecutionState : 2; /* bit position: 22 */
      /* 0x00c0 */ unsigned long DisallowStrippedImages : 1; /* bit position: 24 */
      /* 0x00c0 */ unsigned long HighEntropyASLREnabled : 1; /* bit position: 25 */
      /* 0x00c0 */ unsigned long ExtensionPointDisable : 1; /* bit position: 26 */
      /* 0x00c0 */ unsigned long ForceRelocateImages : 1; /* bit position: 27 */
      /* 0x00c0 */ unsigned long ProcessStateChangeRequest : 2; /* bit position: 28 */
      /* 0x00c0 */ unsigned long ProcessStateChangeInProgress : 1; /* bit position: 30 */
      /* 0x00c0 */ unsigned long DisallowWin32kSystemCalls : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x00c4 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x00c4 */ unsigned long CreateReported : 1; /* bit position: 0 */
      /* 0x00c4 */ unsigned long NoDebugInherit : 1; /* bit position: 1 */
      /* 0x00c4 */ unsigned long ProcessExiting : 1; /* bit position: 2 */
      /* 0x00c4 */ unsigned long ProcessDelete : 1; /* bit position: 3 */
      /* 0x00c4 */ unsigned long ControlFlowGuardEnabled : 1; /* bit position: 4 */
      /* 0x00c4 */ unsigned long VmDeleted : 1; /* bit position: 5 */
      /* 0x00c4 */ unsigned long OutswapEnabled : 1; /* bit position: 6 */
      /* 0x00c4 */ unsigned long Outswapped : 1; /* bit position: 7 */
      /* 0x00c4 */ unsigned long FailFastOnCommitFail : 1; /* bit position: 8 */
      /* 0x00c4 */ unsigned long Wow64VaSpace4Gb : 1; /* bit position: 9 */
      /* 0x00c4 */ unsigned long AddressSpaceInitialized : 2; /* bit position: 10 */
      /* 0x00c4 */ unsigned long SetTimerResolution : 1; /* bit position: 12 */
      /* 0x00c4 */ unsigned long BreakOnTermination : 1; /* bit position: 13 */
      /* 0x00c4 */ unsigned long DeprioritizeViews : 1; /* bit position: 14 */
      /* 0x00c4 */ unsigned long WriteWatch : 1; /* bit position: 15 */
      /* 0x00c4 */ unsigned long ProcessInSession : 1; /* bit position: 16 */
      /* 0x00c4 */ unsigned long OverrideAddressSpace : 1; /* bit position: 17 */
      /* 0x00c4 */ unsigned long HasAddressSpace : 1; /* bit position: 18 */
      /* 0x00c4 */ unsigned long LaunchPrefetched : 1; /* bit position: 19 */
      /* 0x00c4 */ unsigned long Background : 1; /* bit position: 20 */
      /* 0x00c4 */ unsigned long VmTopDown : 1; /* bit position: 21 */
      /* 0x00c4 */ unsigned long ImageNotifyDone : 1; /* bit position: 22 */
      /* 0x00c4 */ unsigned long PdeUpdateNeeded : 1; /* bit position: 23 */
      /* 0x00c4 */ unsigned long VdmAllowed : 1; /* bit position: 24 */
      /* 0x00c4 */ unsigned long ProcessRundown : 1; /* bit position: 25 */
      /* 0x00c4 */ unsigned long ProcessInserted : 1; /* bit position: 26 */
      /* 0x00c4 */ unsigned long DefaultIoPriority : 3; /* bit position: 27 */
      /* 0x00c4 */ unsigned long ProcessSelfDelete : 1; /* bit position: 30 */
      /* 0x00c4 */ unsigned long SetTimerResolutionLink : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x00c8 */ union _LARGE_INTEGER CreateTime;
  /* 0x00d0 */ unsigned long ProcessQuotaUsage[2];
  /* 0x00d8 */ unsigned long ProcessQuotaPeak[2];
  /* 0x00e0 */ unsigned long PeakVirtualSize;
  /* 0x00e4 */ unsigned long VirtualSize;
  /* 0x00e8 */ struct _LIST_ENTRY SessionProcessLinks;
  union
  {
    /* 0x00f0 */ void* ExceptionPortData;
    /* 0x00f0 */ unsigned long ExceptionPortValue;
    /* 0x00f0 */ unsigned long ExceptionPortState : 3; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x00f4 */ struct _EX_FAST_REF Token;
  /* 0x00f8 */ unsigned long WorkingSetPage;
  /* 0x00fc */ struct _EX_PUSH_LOCK AddressCreationLock;
  /* 0x0100 */ struct _EX_PUSH_LOCK PageTableCommitmentLock;
  /* 0x0104 */ struct _ETHREAD* RotateInProgress;
  /* 0x0108 */ struct _ETHREAD* ForkInProgress;
  /* 0x010c */ struct _EJOB* volatile CommitChargeJob;
  /* 0x0110 */ struct _RTL_AVL_TREE CloneRoot;
  /* 0x0114 */ volatile unsigned long NumberOfPrivatePages;
  /* 0x0118 */ volatile unsigned long NumberOfLockedPages;
  /* 0x011c */ void* Win32Process;
  /* 0x0120 */ struct _EJOB* volatile Job;
  /* 0x0124 */ void* SectionObject;
  /* 0x0128 */ void* SectionBaseAddress;
  /* 0x012c */ unsigned long Cookie;
  /* 0x0130 */ struct _PAGEFAULT_HISTORY* WorkingSetWatch;
  /* 0x0134 */ void* Win32WindowStation;
  /* 0x0138 */ void* InheritedFromUniqueProcessId;
  /* 0x013c */ void* LdtInformation;
  /* 0x0140 */ volatile unsigned long OwnerProcessId;
  /* 0x0144 */ struct _PEB* Peb;
  /* 0x0148 */ void* Session;
  /* 0x014c */ void* AweInfo;
  /* 0x0150 */ struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;
  /* 0x0154 */ struct _HANDLE_TABLE* ObjectTable;
  /* 0x0158 */ void* DebugPort;
  /* 0x015c */ void* PaeTop;
  /* 0x0160 */ void* DeviceMap;
  /* 0x0164 */ void* EtwDataSource;
  /* 0x0168 */ unsigned __int64 PageDirectoryPte;
  /* 0x0170 */ unsigned char ImageFileName[15];
  /* 0x017f */ unsigned char PriorityClass;
  /* 0x0180 */ void* SecurityPort;
  /* 0x0184 */ struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
  /* 0x0188 */ struct _LIST_ENTRY JobLinks;
  /* 0x0190 */ void* HighestUserAddress;
  /* 0x0194 */ struct _LIST_ENTRY ThreadListHead;
  /* 0x019c */ volatile unsigned long ActiveThreads;
  /* 0x01a0 */ unsigned long ImagePathHash;
  /* 0x01a4 */ unsigned long DefaultHardErrorProcessing;
  /* 0x01a8 */ long LastThreadExitStatus;
  /* 0x01ac */ struct _EX_FAST_REF PrefetchTrace;
  /* 0x01b0 */ void* LockedPagesList;
  /* 0x01b8 */ union _LARGE_INTEGER ReadOperationCount;
  /* 0x01c0 */ union _LARGE_INTEGER WriteOperationCount;
  /* 0x01c8 */ union _LARGE_INTEGER OtherOperationCount;
  /* 0x01d0 */ union _LARGE_INTEGER ReadTransferCount;
  /* 0x01d8 */ union _LARGE_INTEGER WriteTransferCount;
  /* 0x01e0 */ union _LARGE_INTEGER OtherTransferCount;
  /* 0x01e8 */ unsigned long CommitChargeLimit;
  /* 0x01ec */ volatile unsigned long CommitCharge;
  /* 0x01f0 */ volatile unsigned long CommitChargePeak;
  /* 0x01f4 */ struct _MMSUPPORT Vm;
  /* 0x0274 */ struct _LIST_ENTRY MmProcessLinks;
  /* 0x027c */ unsigned long ModifiedPageCount;
  /* 0x0280 */ long ExitStatus;
  /* 0x0284 */ struct _RTL_AVL_TREE VadRoot;
  /* 0x0288 */ void* VadHint;
  /* 0x028c */ unsigned long VadCount;
  /* 0x0290 */ volatile unsigned long VadPhysicalPages;
  /* 0x0294 */ unsigned long VadPhysicalPagesLimit;
  /* 0x0298 */ struct _ALPC_PROCESS_CONTEXT AlpcContext;
  /* 0x02a8 */ struct _LIST_ENTRY TimerResolutionLink;
  /* 0x02b0 */ struct _PO_DIAG_STACK_RECORD* TimerResolutionStackRecord;
  /* 0x02b4 */ unsigned long RequestedTimerResolution;
  /* 0x02b8 */ unsigned long SmallestTimerResolution;
  /* 0x02c0 */ union _LARGE_INTEGER ExitTime;
  /* 0x02c8 */ unsigned long ActiveThreadsHighWatermark;
  /* 0x02cc */ unsigned long LargePrivateVadCount;
  /* 0x02d0 */ struct _EX_PUSH_LOCK ThreadListLock;
  /* 0x02d4 */ void* WnfContext;
  /* 0x02d8 */ unsigned long Spare0;
  /* 0x02dc */ unsigned char SignatureLevel;
  /* 0x02dd */ unsigned char SectionSignatureLevel;
  /* 0x02de */ struct _PS_PROTECTION Protection;
  /* 0x02df */ unsigned char HangCount;
  union
  {
    /* 0x02e0 */ unsigned long Flags3;
    struct /* bitfield */
    {
      /* 0x02e0 */ unsigned long Minimal : 1; /* bit position: 0 */
      /* 0x02e0 */ unsigned long ReplacingPageRoot : 1; /* bit position: 1 */
      /* 0x02e0 */ unsigned long DisableNonSystemFonts : 1; /* bit position: 2 */
      /* 0x02e0 */ unsigned long AuditNonSystemFontLoading : 1; /* bit position: 3 */
      /* 0x02e0 */ unsigned long Crashed : 1; /* bit position: 4 */
      /* 0x02e0 */ unsigned long JobVadsAreTracked : 1; /* bit position: 5 */
      /* 0x02e0 */ unsigned long VadTrackingDisabled : 1; /* bit position: 6 */
      /* 0x02e0 */ unsigned long AuxiliaryProcess : 1; /* bit position: 7 */
      /* 0x02e0 */ unsigned long SubsystemProcess : 1; /* bit position: 8 */
      /* 0x02e0 */ unsigned long IndirectCpuSets : 1; /* bit position: 9 */
      /* 0x02e0 */ unsigned long InPrivate : 1; /* bit position: 10 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02e4 */ long DeviceAsid;
  /* 0x02e8 */ void* SvmData;
  /* 0x02ec */ struct _EX_PUSH_LOCK SvmProcessLock;
  /* 0x02f0 */ unsigned long SvmLock;
  /* 0x02f4 */ struct _LIST_ENTRY SvmProcessDeviceListHead;
  /* 0x0300 */ unsigned __int64 LastFreezeInterruptTime;
  /* 0x0308 */ struct _PROCESS_DISK_COUNTERS* DiskCounters;
  /* 0x030c */ void* PicoContext;
  /* 0x0310 */ unsigned long KeepAliveCounter;
  /* 0x0314 */ unsigned long NoWakeKeepAliveCounter;
  /* 0x0318 */ unsigned long HighPriorityFaultsAllowed;
  /* 0x031c */ void* InstrumentationCallback;
  /* 0x0320 */ struct _PROCESS_ENERGY_VALUES* EnergyValues;
  /* 0x0324 */ void* VmContext;
  /* 0x0328 */ struct _ESILO* Silo;
  /* 0x032c */ struct _LIST_ENTRY SiloEntry;
  /* 0x0338 */ unsigned __int64 SequenceNumber;
  /* 0x0340 */ unsigned __int64 CreateInterruptTime;
  /* 0x0348 */ unsigned __int64 CreateUnbiasedInterruptTime;
  /* 0x0350 */ unsigned __int64 TotalUnbiasedFrozenTime;
  /* 0x0358 */ unsigned __int64 LastAppStateUpdateTime;
  struct /* bitfield */
  {
    /* 0x0360 */ unsigned __int64 LastAppStateUptime : 61; /* bit position: 0 */
    /* 0x0360 */ unsigned __int64 LastAppState : 3; /* bit position: 61 */
  }; /* bitfield */
  /* 0x0368 */ volatile unsigned long SharedCommitCharge;
  /* 0x036c */ struct _EX_PUSH_LOCK SharedCommitLock;
  /* 0x0370 */ struct _LIST_ENTRY SharedCommitLinks;
  union
  {
    struct
    {
      /* 0x0378 */ unsigned long AllowedCpuSets;
      /* 0x037c */ unsigned long DefaultCpuSets;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0378 */ unsigned long* AllowedCpuSetsIndirect;
      /* 0x037c */ unsigned long* DefaultCpuSetsIndirect;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} EPROCESS, *PEPROCESS; /* size: 0x0380 */

struct _EPROCESS_QUOTA_BLOCK;

typedef struct _EPROCESS_VALUES
{
  /* 0x0000 */ unsigned __int64 KernelTime;
  /* 0x0008 */ unsigned __int64 UserTime;
  /* 0x0010 */ unsigned __int64 CycleTime;
  /* 0x0018 */ unsigned __int64 ContextSwitches;
  /* 0x0020 */ __int64 ReadOperationCount;
  /* 0x0028 */ __int64 WriteOperationCount;
  /* 0x0030 */ __int64 OtherOperationCount;
  /* 0x0038 */ __int64 ReadTransferCount;
  /* 0x0040 */ __int64 WriteTransferCount;
  /* 0x0048 */ __int64 OtherTransferCount;
} EPROCESS_VALUES, *PEPROCESS_VALUES; /* size: 0x0050 */

typedef struct _ERESOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY SystemResourcesList;
  /* 0x0008 */ struct _OWNER_ENTRY* OwnerTable;
  /* 0x000c */ short ActiveCount;
  union
  {
    /* 0x000e */ unsigned short Flag;
    struct
    {
      /* 0x000e */ unsigned char ReservedLowFlags;
      /* 0x000f */ unsigned char WaiterPriority;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0010 */ struct _KWAIT_CHAIN SharedWaiters;
  /* 0x0014 */ struct _KEVENT* ExclusiveWaiters;
  /* 0x0018 */ struct _OWNER_ENTRY OwnerEntry;
  /* 0x0020 */ unsigned long ActiveEntries;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long NumberOfSharedWaiters;
  /* 0x002c */ unsigned long NumberOfExclusiveWaiters;
  union
  {
    /* 0x0030 */ void* Address;
    /* 0x0030 */ unsigned long CreatorBackTraceIndex;
  }; /* size: 0x0004 */
  /* 0x0034 */ unsigned long SpinLock;
} ERESOURCE, *PERESOURCE; /* size: 0x0038 */

struct _ESILO;

typedef struct _ETHREAD
{
  /* 0x0000 */ struct _KTHREAD Tcb;
  /* 0x0348 */ union _LARGE_INTEGER CreateTime;
  union
  {
    /* 0x0350 */ union _LARGE_INTEGER ExitTime;
    /* 0x0350 */ struct _LIST_ENTRY KeyedWaitChain;
  }; /* size: 0x0008 */
  /* 0x0358 */ void* ChargeOnlySession;
  union
  {
    /* 0x035c */ struct _LIST_ENTRY PostBlockList;
    struct
    {
      /* 0x035c */ void* ForwardLinkShadow;
      /* 0x0360 */ void* StartAddress;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0364 */ struct _TERMINATION_PORT* TerminationPort;
    /* 0x0364 */ struct _ETHREAD* ReaperLink;
    /* 0x0364 */ void* KeyedWaitValue;
  }; /* size: 0x0004 */
  /* 0x0368 */ unsigned long ActiveTimerListLock;
  /* 0x036c */ struct _LIST_ENTRY ActiveTimerListHead;
  /* 0x0374 */ struct _CLIENT_ID Cid;
  union
  {
    /* 0x037c */ struct _KSEMAPHORE KeyedWaitSemaphore;
    /* 0x037c */ struct _KSEMAPHORE AlpcWaitSemaphore;
  }; /* size: 0x0014 */
  /* 0x0390 */ union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
  /* 0x0394 */ struct _LIST_ENTRY IrpList;
  /* 0x039c */ unsigned long TopLevelIrp;
  /* 0x03a0 */ struct _DEVICE_OBJECT* DeviceToVerify;
  /* 0x03a4 */ void* Win32StartAddress;
  /* 0x03a8 */ void* LegacyPowerObject;
  /* 0x03ac */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x03b4 */ struct _EX_RUNDOWN_REF RundownProtect;
  /* 0x03b8 */ struct _EX_PUSH_LOCK ThreadLock;
  /* 0x03bc */ unsigned long ReadClusterSize;
  /* 0x03c0 */ volatile long MmLockOrdering;
  /* 0x03c4 */ volatile long CmLockOrdering;
  union
  {
    /* 0x03c8 */ unsigned long CrossThreadFlags;
    struct /* bitfield */
    {
      /* 0x03c8 */ unsigned long Terminated : 1; /* bit position: 0 */
      /* 0x03c8 */ unsigned long ThreadInserted : 1; /* bit position: 1 */
      /* 0x03c8 */ unsigned long HideFromDebugger : 1; /* bit position: 2 */
      /* 0x03c8 */ unsigned long ActiveImpersonationInfo : 1; /* bit position: 3 */
      /* 0x03c8 */ unsigned long HardErrorsAreDisabled : 1; /* bit position: 4 */
      /* 0x03c8 */ unsigned long BreakOnTermination : 1; /* bit position: 5 */
      /* 0x03c8 */ unsigned long SkipCreationMsg : 1; /* bit position: 6 */
      /* 0x03c8 */ unsigned long SkipTerminationMsg : 1; /* bit position: 7 */
      /* 0x03c8 */ unsigned long CopyTokenOnOpen : 1; /* bit position: 8 */
      /* 0x03c8 */ unsigned long ThreadIoPriority : 3; /* bit position: 9 */
      /* 0x03c8 */ unsigned long ThreadPagePriority : 3; /* bit position: 12 */
      /* 0x03c8 */ unsigned long RundownFail : 1; /* bit position: 15 */
      /* 0x03c8 */ unsigned long UmsForceQueueTermination : 1; /* bit position: 16 */
      /* 0x03c8 */ unsigned long IndirectCpuSets : 1; /* bit position: 17 */
      /* 0x03c8 */ unsigned long ReservedCrossThreadFlags : 14; /* bit position: 18 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x03cc */ unsigned long SameThreadPassiveFlags;
    struct /* bitfield */
    {
      /* 0x03cc */ unsigned long ActiveExWorker : 1; /* bit position: 0 */
      /* 0x03cc */ unsigned long MemoryMaker : 1; /* bit position: 1 */
      /* 0x03cc */ unsigned long ClonedThread : 1; /* bit position: 2 */
      /* 0x03cc */ unsigned long KeyedEventInUse : 1; /* bit position: 3 */
      /* 0x03cc */ unsigned long SelfTerminate : 1; /* bit position: 4 */
      /* 0x03cc */ unsigned long RespectIoPriority : 1; /* bit position: 5 */
      /* 0x03cc */ unsigned long ReservedSameThreadPassiveFlags : 26; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x03d0 */ unsigned long SameThreadApcFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x03d0 */ unsigned char OwnsProcessAddressSpaceExclusive : 1; /* bit position: 0 */
        /* 0x03d0 */ unsigned char OwnsProcessAddressSpaceShared : 1; /* bit position: 1 */
        /* 0x03d0 */ unsigned char HardFaultBehavior : 1; /* bit position: 2 */
        /* 0x03d0 */ volatile unsigned char StartAddressInvalid : 1; /* bit position: 3 */
        /* 0x03d0 */ unsigned char EtwCalloutActive : 1; /* bit position: 4 */
        /* 0x03d0 */ unsigned char SuppressSymbolLoad : 1; /* bit position: 5 */
        /* 0x03d0 */ unsigned char Prefetching : 1; /* bit position: 6 */
        /* 0x03d0 */ unsigned char OwnsVadExclusive : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x03d1 */ unsigned char SystemPagePriorityActive : 1; /* bit position: 0 */
        /* 0x03d1 */ unsigned char SystemPagePriority : 3; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  }; /* size: 0x0004 */
  /* 0x03d4 */ unsigned char CacheManagerActive;
  /* 0x03d5 */ unsigned char DisablePageFaultClustering;
  /* 0x03d6 */ unsigned char ActiveFaultCount;
  /* 0x03d7 */ unsigned char LockOrderState;
  /* 0x03d8 */ unsigned long AlpcMessageId;
  union
  {
    /* 0x03dc */ void* AlpcMessage;
    /* 0x03dc */ unsigned long AlpcReceiveAttributeSet;
  }; /* size: 0x0004 */
  /* 0x03e0 */ long ExitStatus;
  /* 0x03e4 */ struct _LIST_ENTRY AlpcWaitListEntry;
  /* 0x03ec */ unsigned long CacheManagerCount;
  /* 0x03f0 */ unsigned long IoBoostCount;
  /* 0x03f4 */ struct _LIST_ENTRY BoostList;
  /* 0x03fc */ struct _LIST_ENTRY DeboostList;
  /* 0x0404 */ unsigned long BoostListLock;
  /* 0x0408 */ unsigned long IrpListLock;
  /* 0x040c */ void* ReservedForSynchTracking;
  /* 0x0410 */ struct _SINGLE_LIST_ENTRY CmCallbackListHead;
  /* 0x0414 */ const struct _GUID* ActivityId;
  /* 0x0418 */ struct _SINGLE_LIST_ENTRY SeLearningModeListHead;
  /* 0x041c */ void* VerifierContext;
  /* 0x0420 */ unsigned long KernelStackReference;
  /* 0x0424 */ void* AdjustedClientToken;
  /* 0x0428 */ void* WorkingOnBehalfClient;
  /* 0x042c */ struct _PS_PROPERTY_SET PropertySet;
  /* 0x0438 */ void* PicoContext;
  /* 0x043c */ unsigned long UserFsBase;
  /* 0x0440 */ unsigned long UserGsBase;
  /* 0x0444 */ struct _THREAD_ENERGY_VALUES* EnergyValues;
  /* 0x0448 */ volatile unsigned long CmCellReferences;
  union
  {
    /* 0x044c */ unsigned long SelectedCpuSets;
    /* 0x044c */ unsigned long* SelectedCpuSetsIndirect;
  }; /* size: 0x0004 */
  /* 0x0450 */ struct _ESILO* Silo;
  /* 0x0454 */ long __PADDING__[1];
} ETHREAD, *PETHREAD; /* size: 0x0458 */

typedef struct _ETIMER
{
  /* 0x0000 */ struct _KTIMER KeTimer;
  /* 0x0028 */ unsigned long Lock;
  /* 0x002c */ struct _KAPC TimerApc;
  /* 0x005c */ struct _KDPC TimerDpc;
  /* 0x007c */ struct _LIST_ENTRY ActiveTimerListEntry;
  /* 0x0084 */ unsigned long Period;
  union
  {
    /* 0x0088 */ char TimerFlags;
    struct /* bitfield */
    {
      /* 0x0088 */ unsigned char ApcAssociated : 1; /* bit position: 0 */
      /* 0x0088 */ unsigned char FlushDpcs : 1; /* bit position: 1 */
      /* 0x0088 */ unsigned char Paused : 1; /* bit position: 2 */
      /* 0x0088 */ unsigned char Spare1 : 5; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0089 */ unsigned char DueTimeType;
  /* 0x008a */ unsigned short Spare2;
  /* 0x008c */ struct _DIAGNOSTIC_CONTEXT* volatile WakeReason;
  /* 0x0090 */ struct _LIST_ENTRY WakeTimerListEntry;
  /* 0x0098 */ void* VirtualizedTimerCookie;
  /* 0x009c */ struct _LIST_ENTRY VirtualizedTimerLinks;
  /* 0x00a8 */ unsigned __int64 DueTime;
  /* 0x00b0 */ unsigned long CoalescingWindow;
  /* 0x00b4 */ long __PADDING__[1];
} ETIMER, *PETIMER; /* size: 0x00b8 */

typedef struct _ETWP_NOTIFICATION_HEADER
{
  /* 0x0000 */ enum _ETW_NOTIFICATION_TYPE NotificationType;
  /* 0x0004 */ unsigned long NotificationSize;
  /* 0x0008 */ long RefCount;
  /* 0x000c */ unsigned char ReplyRequested;
  union
  {
    /* 0x0010 */ unsigned long ReplyIndex;
    /* 0x0010 */ unsigned long Timeout;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ unsigned long ReplyCount;
    /* 0x0014 */ unsigned long NotifyeeCount;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ unsigned __int64 ReplyHandle;
    /* 0x0018 */ void* ReplyObject;
    /* 0x0018 */ unsigned long RegIndex;
  }; /* size: 0x0008 */
  /* 0x0020 */ unsigned long TargetPID;
  /* 0x0024 */ unsigned long SourcePID;
  /* 0x0028 */ struct _GUID DestinationGuid;
  /* 0x0038 */ struct _GUID SourceGuid;
} ETWP_NOTIFICATION_HEADER, *PETWP_NOTIFICATION_HEADER; /* size: 0x0048 */

typedef struct _ETW_BUFFER_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char ProcessorNumber;
      /* 0x0001 */ unsigned char Alignment;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short ProcessorIndex;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short LoggerId;
} ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT; /* size: 0x0004 */

typedef struct _ETW_BUFFER_QUEUE
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* QueueHead;
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY* QueueTail;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY QueueEntry;
} ETW_BUFFER_QUEUE, *PETW_BUFFER_QUEUE; /* size: 0x000c */

typedef enum _ETW_BUFFER_STATE
{
  EtwBufferStateFree = 0,
  EtwBufferStateGeneralLogging = 1,
  EtwBufferStateCSwitch = 2,
  EtwBufferStateFlush = 3,
  EtwBufferStateMaximum = 4,
} ETW_BUFFER_STATE, *PETW_BUFFER_STATE;

typedef struct _ETW_FILTER_HEADER
{
  /* 0x0000 */ long FilterFlags;
  /* 0x0004 */ struct _ETW_FILTER_PID* PidFilter;
  /* 0x0008 */ struct _ETW_FILTER_STRING_TOKEN* ExeFilter;
  /* 0x000c */ struct _ETW_FILTER_STRING_TOKEN* PkgIdFilter;
  /* 0x0010 */ struct _ETW_FILTER_STRING_TOKEN* PkgAppIdFilter;
  /* 0x0014 */ struct _ETW_PERFECT_HASH_FUNCTION* StackWalkFilter;
  /* 0x0018 */ struct _ETW_PERFECT_HASH_FUNCTION* EventIdFilter;
  /* 0x001c */ struct _ETW_PAYLOAD_FILTER* PayloadFilter;
  /* 0x0020 */ struct _EVENT_FILTER_HEADER* ProviderSideFilter;
} ETW_FILTER_HEADER, *PETW_FILTER_HEADER; /* size: 0x0024 */

typedef struct _ETW_FILTER_PID
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Pids[8];
} ETW_FILTER_PID, *PETW_FILTER_PID; /* size: 0x0024 */

typedef struct _ETW_FILTER_STRING_TOKEN
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0004 */ struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];
} ETW_FILTER_STRING_TOKEN, *PETW_FILTER_STRING_TOKEN; /* size: 0x000c */

typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0004 */ unsigned short* String;
} ETW_FILTER_STRING_TOKEN_ELEMENT, *PETW_FILTER_STRING_TOKEN_ELEMENT; /* size: 0x0008 */

typedef struct _ETW_GUID_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY GuidList;
  /* 0x0008 */ volatile long RefCount;
  /* 0x000c */ struct _GUID Guid;
  /* 0x001c */ struct _LIST_ENTRY RegListHead;
  /* 0x0024 */ void* SecurityDescriptor;
  union
  {
    /* 0x0028 */ struct _ETW_LAST_ENABLE_INFO LastEnable;
    /* 0x0028 */ unsigned __int64 MatchId;
  }; /* size: 0x0010 */
  /* 0x0038 */ struct _TRACE_ENABLE_INFO ProviderEnableInfo;
  /* 0x0058 */ struct _TRACE_ENABLE_INFO EnableInfo[8];
  /* 0x0158 */ struct _ETW_FILTER_HEADER* FilterData;
  /* 0x015c */ struct _ESILO* ServerSilo;
} ETW_GUID_ENTRY, *PETW_GUID_ENTRY; /* size: 0x0160 */

typedef enum _ETW_HEADER_TYPE
{
  EtwHeaderTypeNative = 0,
  EtwHeaderTypeMax = 1,
} ETW_HEADER_TYPE, *PETW_HEADER_TYPE;

typedef struct _ETW_LAST_ENABLE_INFO
{
  /* 0x0000 */ union _LARGE_INTEGER EnableFlags;
  /* 0x0008 */ unsigned short LoggerId;
  /* 0x000a */ unsigned char Level;
  struct /* bitfield */
  {
    /* 0x000b */ unsigned char Enabled : 1; /* bit position: 0 */
    /* 0x000b */ unsigned char InternalFlag : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x000c */ long __PADDING__[1];
} ETW_LAST_ENABLE_INFO, *PETW_LAST_ENABLE_INFO; /* size: 0x0010 */

typedef struct _ETW_LOGGER_HANDLE
{
  /* 0x0000 */ unsigned char DereferenceAndLeave;
} ETW_LOGGER_HANDLE, *PETW_LOGGER_HANDLE; /* size: 0x0001 */

typedef enum _ETW_NOTIFICATION_TYPE
{
  EtwNotificationTypeNoReply = 1,
  EtwNotificationTypeLegacyEnable = 2,
  EtwNotificationTypeEnable = 3,
  EtwNotificationTypePrivateLogger = 4,
  EtwNotificationTypePerflib = 5,
  EtwNotificationTypeAudio = 6,
  EtwNotificationTypeSession = 7,
  EtwNotificationTypeReserved = 8,
  EtwNotificationTypeCredentialUI = 9,
  EtwNotificationTypeInProcSession = 10,
  EtwNotificationTypeMax = 11,
} ETW_NOTIFICATION_TYPE, *PETW_NOTIFICATION_TYPE;

typedef struct _ETW_PAYLOAD_FILTER
{
  /* 0x0000 */ long RefCount;
  /* 0x0008 */ struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter;
} ETW_PAYLOAD_FILTER, *PETW_PAYLOAD_FILTER; /* size: 0x0058 */

struct _ETW_PERFECT_HASH_FUNCTION;

typedef enum _ETW_PERFECT_HASH_FUNCTION_TYPE
{
  ETW_PHF_EVENT_ID = 0,
  ETW_PHF_STACK_WALK = 1,
  ETW_PHF_MAX_COUNT = 2,
} ETW_PERFECT_HASH_FUNCTION_TYPE, *PETW_PERFECT_HASH_FUNCTION_TYPE;

typedef struct _ETW_PERF_COUNTERS
{
  /* 0x0000 */ long TotalActiveSessions;
  /* 0x0004 */ long TotalBufferMemoryNonPagedPool;
  /* 0x0008 */ long TotalBufferMemoryPagedPool;
  /* 0x000c */ long TotalGuidsEnabled;
  /* 0x0010 */ long TotalGuidsNotEnabled;
  /* 0x0014 */ long TotalGuidsPreEnabled;
} ETW_PERF_COUNTERS, *PETW_PERF_COUNTERS; /* size: 0x0018 */

typedef struct _ETW_PMC_SUPPORT
{
  /* 0x0000 */ enum _KPROFILE_SOURCE Source[4];
  /* 0x0010 */ volatile unsigned long HookIdCount;
  /* 0x0014 */ unsigned short HookId[4];
  /* 0x001c */ volatile unsigned long CountersCount;
  /* 0x0020 */ struct _HAL_PMC_COUNTERS* ProcessorCtrs[1];
} ETW_PMC_SUPPORT, *PETW_PMC_SUPPORT; /* size: 0x0024 */

typedef struct _ETW_PROVIDER_TRAITS
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  /* 0x000c */ unsigned long ReferenceCount;
  /* 0x0010 */ unsigned char Traits[1];
  /* 0x0011 */ char __PADDING__[3];
} ETW_PROVIDER_TRAITS, *PETW_PROVIDER_TRAITS; /* size: 0x0014 */

typedef struct _ETW_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _ETWP_NOTIFICATION_HEADER* DataBlock;
  /* 0x000c */ struct _ETW_REG_ENTRY* RegEntry;
  /* 0x0010 */ struct _ETW_REG_ENTRY* ReplyObject;
  /* 0x0014 */ void* WakeReference;
  /* 0x0018 */ unsigned short RegIndex;
  /* 0x001a */ unsigned short ReplyIndex;
  /* 0x001c */ unsigned long Flags;
} ETW_QUEUE_ENTRY, *PETW_QUEUE_ENTRY; /* size: 0x0020 */

typedef struct _ETW_REALTIME_CONSUMER
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ void* ProcessHandle;
  /* 0x000c */ struct _EPROCESS* ProcessObject;
  /* 0x0010 */ void* NextNotDelivered;
  /* 0x0014 */ void* RealtimeConnectContext;
  /* 0x0018 */ struct _KEVENT* DisconnectEvent;
  /* 0x001c */ struct _KEVENT* DataAvailableEvent;
  /* 0x0020 */ unsigned long* UserBufferCount;
  /* 0x0024 */ struct _SINGLE_LIST_ENTRY* UserBufferListHead;
  /* 0x0028 */ unsigned long BuffersLost;
  /* 0x002c */ unsigned long EmptyBuffersCount;
  /* 0x0030 */ unsigned short LoggerId;
  union
  {
    /* 0x0032 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0032 */ unsigned char ShutDownRequested : 1; /* bit position: 0 */
      /* 0x0032 */ unsigned char NewBuffersLost : 1; /* bit position: 1 */
      /* 0x0032 */ unsigned char Disconnected : 1; /* bit position: 2 */
      /* 0x0032 */ unsigned char Notified : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0034 */ struct _RTL_BITMAP ReservedBufferSpaceBitMap;
  /* 0x003c */ unsigned char* ReservedBufferSpace;
  /* 0x0040 */ unsigned long ReservedBufferSpaceSize;
  /* 0x0044 */ unsigned long UserPagesAllocated;
  /* 0x0048 */ unsigned long UserPagesReused;
  /* 0x004c */ unsigned long* EventsLostCount;
  /* 0x0050 */ unsigned long* BuffersLostCount;
} ETW_REALTIME_CONSUMER, *PETW_REALTIME_CONSUMER; /* size: 0x0054 */

typedef struct _ETW_REF_CLOCK
{
  /* 0x0000 */ union _LARGE_INTEGER StartTime;
  /* 0x0008 */ union _LARGE_INTEGER StartPerfClock;
} ETW_REF_CLOCK, *PETW_REF_CLOCK; /* size: 0x0010 */

typedef struct _ETW_REG_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY RegList;
  /* 0x0008 */ struct _LIST_ENTRY GroupRegList;
  /* 0x0010 */ struct _ETW_GUID_ENTRY* GuidEntry;
  /* 0x0014 */ struct _ETW_GUID_ENTRY* GroupEntry;
  union
  {
    /* 0x0018 */ struct _ETW_REPLY_QUEUE* ReplyQueue;
    /* 0x0018 */ struct _ETW_QUEUE_ENTRY* ReplySlot[4];
    struct
    {
      /* 0x0018 */ void* Caller;
      /* 0x001c */ unsigned long SessionId;
    }; /* size: 0x0008 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0028 */ struct _EPROCESS* Process;
    /* 0x0028 */ void* CallbackContext;
  }; /* size: 0x0004 */
  /* 0x002c */ void* Callback;
  /* 0x0030 */ unsigned short Index;
  union
  {
    /* 0x0032 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0032 */ unsigned char DbgKernelRegistration : 1; /* bit position: 0 */
      /* 0x0032 */ unsigned char DbgUserRegistration : 1; /* bit position: 1 */
      /* 0x0032 */ unsigned char DbgReplyRegistration : 1; /* bit position: 2 */
      /* 0x0032 */ unsigned char DbgClassicRegistration : 1; /* bit position: 3 */
      /* 0x0032 */ unsigned char DbgSessionSpaceRegistration : 1; /* bit position: 4 */
      /* 0x0032 */ unsigned char DbgModernRegistration : 1; /* bit position: 5 */
      /* 0x0032 */ unsigned char DbgClosed : 1; /* bit position: 6 */
      /* 0x0032 */ unsigned char DbgInserted : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0033 */ unsigned char EnableMask;
  /* 0x0034 */ unsigned char GroupEnableMask;
  /* 0x0035 */ unsigned char UseDescriptorType;
  /* 0x0038 */ struct _ETW_PROVIDER_TRAITS* Traits;
} ETW_REG_ENTRY, *PETW_REG_ENTRY; /* size: 0x003c */

typedef struct _ETW_REPLY_QUEUE
{
  /* 0x0000 */ struct _KQUEUE Queue;
  /* 0x0028 */ long EventsLost;
} ETW_REPLY_QUEUE, *PETW_REPLY_QUEUE; /* size: 0x002c */

typedef enum _ETW_RT_EVENT_LOSS
{
  EtwRtEventNoLoss = 0,
  EtwRtEventLost = 1,
  EtwRtBufferLost = 2,
  EtwRtBackupLost = 3,
  EtwRtEventLossMax = 4,
} ETW_RT_EVENT_LOSS, *PETW_RT_EVENT_LOSS;

typedef struct _ETW_SESSION_PERF_COUNTERS
{
  /* 0x0000 */ long BufferMemoryPagedPool;
  /* 0x0004 */ long BufferMemoryNonPagedPool;
  /* 0x0008 */ unsigned __int64 EventsLoggedCount;
  /* 0x0010 */ long EventsLost;
  /* 0x0014 */ long NumConsumers;
} ETW_SESSION_PERF_COUNTERS, *PETW_SESSION_PERF_COUNTERS; /* size: 0x0018 */

typedef struct _ETW_SILODRIVERSTATE
{
  /* 0x0000 */ unsigned long EtwpSecurityProviderPID;
  /* 0x0008 */ struct _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;
  /* 0x0168 */ unsigned long AuditLoggerId;
  /* 0x0170 */ unsigned __int64 EtwPsProvRegHandle;
  /* 0x0178 */ unsigned short EtwpSecurityLoggers[8];
  /* 0x0188 */ unsigned char EtwpSecurityProviderEnableMask;
  /* 0x0189 */ unsigned char EtwpShutdownInProgress;
  /* 0x018a */ char __PADDING__[6];
} ETW_SILODRIVERSTATE, *PETW_SILODRIVERSTATE; /* size: 0x0190 */

struct _ETW_STACK_CACHE;

typedef enum _ETW_STRING_TOKEN_TYPE
{
  ETW_STRING_TOKEN_EXE = 0,
  ETW_STRING_TOKEN_PACKAGE_ID = 1,
  ETW_STRING_TOKEN_PKG_APP_ID = 2,
  ETW_STRING_TOKEN_MAX_COUNT = 3,
} ETW_STRING_TOKEN_TYPE, *PETW_STRING_TOKEN_TYPE;

typedef struct _ETW_SYSTEMTIME
{
  /* 0x0000 */ unsigned short Year;
  /* 0x0002 */ unsigned short Month;
  /* 0x0004 */ unsigned short DayOfWeek;
  /* 0x0006 */ unsigned short Day;
  /* 0x0008 */ unsigned short Hour;
  /* 0x000a */ unsigned short Minute;
  /* 0x000c */ unsigned short Second;
  /* 0x000e */ unsigned short Milliseconds;
} ETW_SYSTEMTIME, *PETW_SYSTEMTIME; /* size: 0x0010 */

typedef struct _ETW_WMITRACE_WORK
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long SpareUlong;
  union
  {
    struct
    {
      /* 0x0008 */ char LoggerName[65];
      /* 0x0049 */ char FileName[129];
      /* 0x00cc */ unsigned long MaximumFileSize;
      /* 0x00d0 */ unsigned long MinBuffers;
      /* 0x00d4 */ unsigned long MaxBuffers;
      /* 0x00d8 */ unsigned long BufferSize;
      /* 0x00dc */ unsigned long Mode;
      /* 0x00e0 */ unsigned long FlushTimer;
    }; /* size: 0x00da */
    struct
    {
      /* 0x0008 */ unsigned __int64 MatchAny;
      /* 0x0010 */ unsigned __int64 MatchAll;
      /* 0x0018 */ unsigned long EnableProperty;
      /* 0x001c */ struct _GUID Guid;
      /* 0x002c */ unsigned char Level;
      /* 0x00e8 */ long Status;
      /* 0x00ec */ long __PADDING__[1];
    }; /* size: 0x002d */
  }; /* size: 0x00da */
} ETW_WMITRACE_WORK, *PETW_WMITRACE_WORK; /* size: 0x00f0 */

typedef struct _EVENT_DATA_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  union
  {
    /* 0x000c */ unsigned long Reserved;
    struct
    {
      /* 0x000c */ unsigned char Type;
      /* 0x000d */ unsigned char Reserved1;
      /* 0x000e */ unsigned short Reserved2;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Channel;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Opcode;
  /* 0x0006 */ unsigned short Task;
  /* 0x0008 */ unsigned __int64 Keyword;
} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_FILTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Type;
} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_FILTER_HEADER
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Reserved[5];
  /* 0x0008 */ unsigned __int64 InstanceId;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long NextOffset;
} EVENT_FILTER_HEADER, *PEVENT_FILTER_HEADER; /* size: 0x0018 */

typedef struct _EVENT_HEADER
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short HeaderType;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short EventProperty;
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _GUID ProviderId;
  /* 0x0028 */ struct _EVENT_DESCRIPTOR EventDescriptor;
  union
  {
    struct
    {
      /* 0x0038 */ unsigned long KernelTime;
      /* 0x003c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0038 */ unsigned __int64 ProcessorTime;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _GUID ActivityId;
} EVENT_HEADER, *PEVENT_HEADER; /* size: 0x0050 */

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  /* 0x0000 */ unsigned short Reserved1;
  /* 0x0002 */ unsigned short ExtType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned short Linkage : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned short Reserved2 : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0006 */ unsigned short DataSize;
  /* 0x0008 */ unsigned __int64 DataPtr;
} EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM; /* size: 0x0010 */

typedef enum _EVENT_INFO_CLASS
{
  EventProviderBinaryTrackInfo = 0,
  EventProviderSetEnableAllKeywords = 1,
  EventProviderSetTraits = 2,
  EventProviderUseDescriptorType = 3,
  MaxEventInfo = 4,
} EVENT_INFO_CLASS, *PEVENT_INFO_CLASS;

typedef struct _EVENT_PAYLOAD_PREDICATE
{
  /* 0x0000 */ unsigned short FieldIndex;
  /* 0x0002 */ unsigned short CompareOp;
  /* 0x0008 */ unsigned __int64 Value[2];
} EVENT_PAYLOAD_PREDICATE, *PEVENT_PAYLOAD_PREDICATE; /* size: 0x0018 */

typedef struct _EVENT_RECORD
{
  /* 0x0000 */ struct _EVENT_HEADER EventHeader;
  /* 0x0050 */ struct _ETW_BUFFER_CONTEXT BufferContext;
  /* 0x0054 */ unsigned short ExtendedDataCount;
  /* 0x0056 */ unsigned short UserDataLength;
  /* 0x0058 */ struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
  /* 0x005c */ void* UserData;
  /* 0x0060 */ void* UserContext;
  /* 0x0064 */ long __PADDING__[1];
} EVENT_RECORD, *PEVENT_RECORD; /* size: 0x0068 */

typedef enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef struct _EXCEPTION_POINTERS
{
  /* 0x0000 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0004 */ struct _CONTEXT* ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS; /* size: 0x0008 */

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x000c */ void* ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0050 */

typedef struct _EXCEPTION_RECORD32
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned long ExceptionRecord;
  /* 0x000c */ unsigned long ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32; /* size: 0x0050 */

typedef struct _EXCEPTION_RECORD64
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned __int64 ExceptionRecord;
  /* 0x0010 */ unsigned __int64 ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ unsigned long __unusedAlignment;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64; /* size: 0x0098 */

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0004 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0008 */

typedef struct _EXHANDLE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long TagBits : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long Index : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ void* GenericHandleOverlay;
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} EXHANDLE, *PEXHANDLE; /* size: 0x0004 */

typedef enum _EXQUEUEINDEX
{
  ExPoolUntrusted = 0,
  ExPoolTrusted = 1,
  ExPoolMax = 8,
} EXQUEUEINDEX, *PEXQUEUEINDEX;

typedef struct _EXT_DELETE_PARAMETERS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* DeleteCallback /* function */;
  /* 0x000c */ void* DeleteContext;
} EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS; /* size: 0x0010 */

typedef struct _EXT_SET_PARAMETERS_V0
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ __int64 NoWakeTolerance;
} EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0; /* size: 0x0010 */

typedef enum _EX_BALANCE_OBJECT
{
  ExTimerExpiration = 0,
  ExThreadSetManagerEvent = 1,
  ExThreadReaperEvent = 2,
  ExMaximumBalanceObject = 3,
} EX_BALANCE_OBJECT, *PEX_BALANCE_OBJECT;

typedef struct _EX_FAST_REF
{
  union
  {
    /* 0x0000 */ void* Object;
    /* 0x0000 */ unsigned long RefCnt : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} EX_FAST_REF, *PEX_FAST_REF; /* size: 0x0004 */

typedef enum _EX_GEN_RANDOM_DOMAIN
{
  ExGenRandomDomainKernel = 0,
  ExGenRandomDomainFirst = 0,
  ExGenRandomDomainUserVisible = 1,
  ExGenRandomDomainMax = 2,
} EX_GEN_RANDOM_DOMAIN, *PEX_GEN_RANDOM_DOMAIN;

typedef enum _EX_POOL_PRIORITY
{
  LowPoolPriority = 0,
  LowPoolPrioritySpecialPoolOverrun = 8,
  LowPoolPrioritySpecialPoolUnderrun = 9,
  NormalPoolPriority = 16,
  NormalPoolPrioritySpecialPoolOverrun = 24,
  NormalPoolPrioritySpecialPoolUnderrun = 25,
  HighPoolPriority = 32,
  HighPoolPrioritySpecialPoolOverrun = 40,
  HighPoolPrioritySpecialPoolUnderrun = 41,
} EX_POOL_PRIORITY, *PEX_POOL_PRIORITY;

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Shared : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; /* size: 0x0004 */

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND
{
  /* 0x0000 */ struct _EX_PUSH_LOCK LocalLock;
  /* 0x0004 */ struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State;
  /* 0x0008 */ unsigned long Stats;
} EX_PUSH_LOCK_AUTO_EXPAND, *PEX_PUSH_LOCK_AUTO_EXPAND; /* size: 0x000c */

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Expanded : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Transitioning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Pageable : 1; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} EX_PUSH_LOCK_AUTO_EXPAND_STATE, *PEX_PUSH_LOCK_AUTO_EXPAND_STATE; /* size: 0x0004 */

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    /* 0x0000 */ unsigned long Count;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; /* size: 0x0004 */

typedef struct _EX_WORK_QUEUE
{
  /* 0x0000 */ struct _KPRIQUEUE WorkPriQueue;
  /* 0x019c */ struct _ENODE* Node;
  /* 0x01a0 */ volatile unsigned long WorkItemsProcessed;
  /* 0x01a4 */ unsigned long WorkItemsProcessedLastPass;
  /* 0x01a8 */ volatile long ThreadCount;
  struct /* bitfield */
  {
    /* 0x01ac */ long MinThreads : 31; /* bit position: 0 */
    /* 0x01ac */ volatile unsigned long TryFailed : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x01b0 */ long MaxThreads;
  /* 0x01b4 */ enum _EXQUEUEINDEX QueueIndex;
} EX_WORK_QUEUE, *PEX_WORK_QUEUE; /* size: 0x01b8 */

typedef struct _FAST_IO_DISPATCH
{
  /* 0x0000 */ unsigned long SizeOfFastIoDispatch;
  /* 0x0004 */ void* FastIoCheckIfPossible /* function */;
  /* 0x0008 */ void* FastIoRead /* function */;
  /* 0x000c */ void* FastIoWrite /* function */;
  /* 0x0010 */ void* FastIoQueryBasicInfo /* function */;
  /* 0x0014 */ void* FastIoQueryStandardInfo /* function */;
  /* 0x0018 */ void* FastIoLock /* function */;
  /* 0x001c */ void* FastIoUnlockSingle /* function */;
  /* 0x0020 */ void* FastIoUnlockAll /* function */;
  /* 0x0024 */ void* FastIoUnlockAllByKey /* function */;
  /* 0x0028 */ void* FastIoDeviceControl /* function */;
  /* 0x002c */ void* AcquireFileForNtCreateSection /* function */;
  /* 0x0030 */ void* ReleaseFileForNtCreateSection /* function */;
  /* 0x0034 */ void* FastIoDetachDevice /* function */;
  /* 0x0038 */ void* FastIoQueryNetworkOpenInfo /* function */;
  /* 0x003c */ void* AcquireForModWrite /* function */;
  /* 0x0040 */ void* MdlRead /* function */;
  /* 0x0044 */ void* MdlReadComplete /* function */;
  /* 0x0048 */ void* PrepareMdlWrite /* function */;
  /* 0x004c */ void* MdlWriteComplete /* function */;
  /* 0x0050 */ void* FastIoReadCompressed /* function */;
  /* 0x0054 */ void* FastIoWriteCompressed /* function */;
  /* 0x0058 */ void* MdlReadCompleteCompressed /* function */;
  /* 0x005c */ void* MdlWriteCompleteCompressed /* function */;
  /* 0x0060 */ void* FastIoQueryOpen /* function */;
  /* 0x0064 */ void* ReleaseForModWrite /* function */;
  /* 0x0068 */ void* AcquireForCcFlush /* function */;
  /* 0x006c */ void* ReleaseForCcFlush /* function */;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH; /* size: 0x0070 */

typedef struct _FAST_MUTEX
{
  /* 0x0000 */ long Count;
  /* 0x0004 */ void* Owner;
  /* 0x0008 */ unsigned long Contention;
  /* 0x000c */ struct _KEVENT Event;
  /* 0x001c */ unsigned long OldIrql;
} FAST_MUTEX, *PFAST_MUTEX; /* size: 0x0020 */

typedef struct _FILESYSTEM_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 FsBytesRead;
  /* 0x0008 */ unsigned __int64 FsBytesWritten;
} FILESYSTEM_DISK_COUNTERS, *PFILESYSTEM_DISK_COUNTERS; /* size: 0x0010 */

typedef struct _FILE_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ unsigned long FileAttributes;
  /* 0x0024 */ long __PADDING__[1];
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION; /* size: 0x0028 */

typedef struct _FILE_GET_QUOTA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long SidLength;
  /* 0x0008 */ struct _SID Sid;
} FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION; /* size: 0x0014 */

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileIdExtdBothDirectoryInformation = 63,
  FileMaximumInformation = 64,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ unsigned long FileAttributes;
  /* 0x0034 */ long __PADDING__[1];
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION; /* size: 0x0038 */

typedef struct _FILE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ struct _VPB* Vpb;
  /* 0x000c */ void* FsContext;
  /* 0x0010 */ void* FsContext2;
  /* 0x0014 */ struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;
  /* 0x0018 */ void* PrivateCacheMap;
  /* 0x001c */ long FinalStatus;
  /* 0x0020 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0024 */ unsigned char LockOperation;
  /* 0x0025 */ unsigned char DeletePending;
  /* 0x0026 */ unsigned char ReadAccess;
  /* 0x0027 */ unsigned char WriteAccess;
  /* 0x0028 */ unsigned char DeleteAccess;
  /* 0x0029 */ unsigned char SharedRead;
  /* 0x002a */ unsigned char SharedWrite;
  /* 0x002b */ unsigned char SharedDelete;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ struct _UNICODE_STRING FileName;
  /* 0x0038 */ union _LARGE_INTEGER CurrentByteOffset;
  /* 0x0040 */ unsigned long Waiters;
  /* 0x0044 */ unsigned long Busy;
  /* 0x0048 */ void* LastLock;
  /* 0x004c */ struct _KEVENT Lock;
  /* 0x005c */ struct _KEVENT Event;
  /* 0x006c */ struct _IO_COMPLETION_CONTEXT* CompletionContext;
  /* 0x0070 */ unsigned long IrpListLock;
  /* 0x0074 */ struct _LIST_ENTRY IrpList;
  /* 0x007c */ void* FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT; /* size: 0x0080 */

typedef enum _FILE_OBJECT_EXTENSION_TYPE
{
  FoExtTypeTransactionParams = 0,
  FoExtTypeInternal = 1,
  FoExtTypeIosbRange = 2,
  FoExtTypeGeneric = 3,
  FoExtTypeSfio = 4,
  FoExtTypeSymlink = 5,
  FoExtTypeOplockKey = 6,
  MaxFoExtTypes = 7,
} FILE_OBJECT_EXTENSION_TYPE, *PFILE_OBJECT_EXTENSION_TYPE;

typedef union _FILE_SEGMENT_ELEMENT
{
  union
  {
    /* 0x0000 */ void* Buffer;
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0008 */
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT; /* size: 0x0008 */

typedef struct _FILE_STANDARD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0010 */ unsigned long NumberOfLinks;
  /* 0x0014 */ unsigned char DeletePending;
  /* 0x0015 */ unsigned char Directory;
  /* 0x0016 */ char __PADDING__[2];
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION; /* size: 0x0018 */

typedef struct _FLOATING_SAVE_AREA
{
  /* 0x0000 */ unsigned long ControlWord;
  /* 0x0004 */ unsigned long StatusWord;
  /* 0x0008 */ unsigned long TagWord;
  /* 0x000c */ unsigned long ErrorOffset;
  /* 0x0010 */ unsigned long ErrorSelector;
  /* 0x0014 */ unsigned long DataOffset;
  /* 0x0018 */ unsigned long DataSelector;
  /* 0x001c */ unsigned char RegisterArea[80];
  /* 0x006c */ unsigned long Spare0;
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA; /* size: 0x0070 */

struct _FLS_CALLBACK_INFO;

typedef struct _FREE_DISPLAY
{
  /* 0x0000 */ unsigned long RealVectorSize;
  /* 0x0004 */ unsigned long Hint;
  /* 0x0008 */ struct _RTL_BITMAP Display;
} FREE_DISPLAY, *PFREE_DISPLAY; /* size: 0x0010 */

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMetadataSizeInformation = 13,
  FileFsMaximumInformation = 14,
} FSINFOCLASS, *PFSINFOCLASS;

typedef struct _FSRTL_ADVANCED_FCB_HEADER
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned char Flags;
  /* 0x0005 */ unsigned char IsFastIoPossible;
  /* 0x0006 */ unsigned char Flags2;
  struct /* bitfield */
  {
    /* 0x0007 */ unsigned char Reserved : 4; /* bit position: 0 */
    /* 0x0007 */ unsigned char Version : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0008 */ struct _ERESOURCE* Resource;
  /* 0x000c */ struct _ERESOURCE* PagingIoResource;
  /* 0x0010 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0018 */ union _LARGE_INTEGER FileSize;
  /* 0x0020 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0028 */ struct _FAST_MUTEX* FastMutex;
  /* 0x002c */ struct _LIST_ENTRY FilterContexts;
  /* 0x0034 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x0038 */ void** FileContextSupportPointer;
  union
  {
    /* 0x003c */ void* Oplock;
    /* 0x003c */ void* ReservedForRemote;
  }; /* size: 0x0004 */
  /* 0x0040 */ void* ReservedContext;
  /* 0x0044 */ long __PADDING__[1];
} FSRTL_ADVANCED_FCB_HEADER, *PFSRTL_ADVANCED_FCB_HEADER; /* size: 0x0048 */

typedef struct _FS_FILTER_CALLBACKS
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbacks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* PreAcquireForSectionSynchronization /* function */;
  /* 0x000c */ void* PostAcquireForSectionSynchronization /* function */;
  /* 0x0010 */ void* PreReleaseForSectionSynchronization /* function */;
  /* 0x0014 */ void* PostReleaseForSectionSynchronization /* function */;
  /* 0x0018 */ void* PreAcquireForCcFlush /* function */;
  /* 0x001c */ void* PostAcquireForCcFlush /* function */;
  /* 0x0020 */ void* PreReleaseForCcFlush /* function */;
  /* 0x0024 */ void* PostReleaseForCcFlush /* function */;
  /* 0x0028 */ void* PreAcquireForModifiedPageWriter /* function */;
  /* 0x002c */ void* PostAcquireForModifiedPageWriter /* function */;
  /* 0x0030 */ void* PreReleaseForModifiedPageWriter /* function */;
  /* 0x0034 */ void* PostReleaseForModifiedPageWriter /* function */;
} FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS; /* size: 0x0038 */

typedef struct _FS_FILTER_CALLBACK_DATA
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbackData;
  /* 0x0004 */ unsigned char Operation;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ union _FS_FILTER_PARAMETERS Parameters;
} FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA; /* size: 0x0024 */

typedef union _FS_FILTER_PARAMETERS
{
  union
  {
    struct // _TAG_UNNAMED_45
    {
      /* 0x0000 */ union _LARGE_INTEGER* EndingOffset;
      /* 0x0004 */ struct _ERESOURCE** ResourceToRelease;
    } /* size: 0x0008 */ AcquireForModifiedPageWriter;
    struct // _TAG_UNNAMED_46
    {
      /* 0x0000 */ struct _ERESOURCE* ResourceToRelease;
    } /* size: 0x0004 */ ReleaseForModifiedPageWriter;
    struct // _TAG_UNNAMED_47
    {
      /* 0x0000 */ enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;
      /* 0x0004 */ unsigned long PageProtection;
      /* 0x0008 */ struct _FS_FILTER_SECTION_SYNC_OUTPUT* OutputInformation;
    } /* size: 0x000c */ AcquireForSectionSynchronization;
    struct // _TAG_UNNAMED_48
    {
      /* 0x0000 */ enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;
      /* 0x0004 */ unsigned char SafeToRecurse;
      /* 0x0005 */ char __PADDING__[3];
    } /* size: 0x0008 */ NotifyStreamFileObject;
    struct // _TAG_UNNAMED_49
    {
      /* 0x0000 */ void* Argument1;
      /* 0x0004 */ void* Argument2;
      /* 0x0008 */ void* Argument3;
      /* 0x000c */ void* Argument4;
      /* 0x0010 */ void* Argument5;
    } /* size: 0x0014 */ Others;
  }; /* size: 0x0014 */
} FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS; /* size: 0x0014 */

typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT
{
  /* 0x0000 */ unsigned long StructureSize;
  /* 0x0004 */ unsigned long SizeReturned;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DesiredReadAlignment;
} FS_FILTER_SECTION_SYNC_OUTPUT, *PFS_FILTER_SECTION_SYNC_OUTPUT; /* size: 0x0010 */

typedef enum _FS_FILTER_SECTION_SYNC_TYPE
{
  SyncTypeOther = 0,
  SyncTypeCreateSection = 1,
} FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;

typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE
{
  NotifyTypeCreate = 0,
  NotifyTypeRetired = 1,
} FS_FILTER_STREAM_FO_NOTIFICATION_TYPE, *PFS_FILTER_STREAM_FO_NOTIFICATION_TYPE;

typedef struct _GDI_TEB_BATCH
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e0 */

typedef struct _GDI_TEB_BATCH32
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH32, *PGDI_TEB_BATCH32; /* size: 0x04e0 */

typedef struct _GDI_TEB_BATCH64
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH64, *PGDI_TEB_BATCH64; /* size: 0x04e8 */

typedef struct _GENERAL_LOOKASIDE
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  union
  {
    /* 0x0010 */ unsigned long AllocateMisses;
    /* 0x0010 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long TotalFrees;
  union
  {
    /* 0x0018 */ unsigned long FreeMisses;
    /* 0x0018 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x001c */ enum _POOL_TYPE Type;
  /* 0x0020 */ unsigned long Tag;
  /* 0x0024 */ unsigned long Size;
  union
  {
    /* 0x0028 */ void* AllocateEx /* function */;
    /* 0x0028 */ void* Allocate /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* FreeEx /* function */;
    /* 0x002c */ void* Free /* function */;
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _LIST_ENTRY ListEntry;
  /* 0x0038 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x003c */ unsigned long LastAllocateMisses;
    /* 0x003c */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0040 */ unsigned long Future[2];
  /* 0x0048 */ long __PADDING__[14];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE; /* size: 0x0080 */

typedef struct _GENERAL_LOOKASIDE_POOL
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  union
  {
    /* 0x0010 */ unsigned long AllocateMisses;
    /* 0x0010 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long TotalFrees;
  union
  {
    /* 0x0018 */ unsigned long FreeMisses;
    /* 0x0018 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x001c */ enum _POOL_TYPE Type;
  /* 0x0020 */ unsigned long Tag;
  /* 0x0024 */ unsigned long Size;
  union
  {
    /* 0x0028 */ void* AllocateEx /* function */;
    /* 0x0028 */ void* Allocate /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* FreeEx /* function */;
    /* 0x002c */ void* Free /* function */;
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _LIST_ENTRY ListEntry;
  /* 0x0038 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x003c */ unsigned long LastAllocateMisses;
    /* 0x003c */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0040 */ unsigned long Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL; /* size: 0x0048 */

typedef struct _GENERIC_MAPPING
{
  /* 0x0000 */ unsigned long GenericRead;
  /* 0x0004 */ unsigned long GenericWrite;
  /* 0x0008 */ unsigned long GenericExecute;
  /* 0x000c */ unsigned long GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING; /* size: 0x0010 */

typedef enum _GPIO_PIN_CONFIG_TYPE
{
  PullDefault = 0,
  PullUp = 1,
  PullDown = 2,
  PullNone = 3,
} GPIO_PIN_CONFIG_TYPE, *PGPIO_PIN_CONFIG_TYPE;

typedef enum _GPIO_PIN_IORESTRICTION_TYPE
{
  IoRestrictionNone = 0,
  IoRestrictionInputOnly = 1,
  IoRestrictionOutputOnly = 2,
  IoRestrictionNoneAndPreserve = 3,
} GPIO_PIN_IORESTRICTION_TYPE, *PGPIO_PIN_IORESTRICTION_TYPE;

typedef struct _GROUP_AFFINITY
{
  /* 0x0000 */ unsigned long Mask;
  /* 0x0004 */ unsigned short Group;
  /* 0x0006 */ unsigned short Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; /* size: 0x000c */

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

typedef struct _HAL_CHANNEL_MEMORY_RANGES
{
  /* 0x0000 */ unsigned long PageFrameIndex;
  /* 0x0004 */ unsigned short MpnId;
  /* 0x0006 */ unsigned short Node;
  /* 0x0008 */ unsigned short Channel;
  /* 0x000a */ unsigned char IsPowerManageable;
  /* 0x000b */ unsigned char DeepPowerState;
} HAL_CHANNEL_MEMORY_RANGES, *PHAL_CHANNEL_MEMORY_RANGES; /* size: 0x000c */

typedef struct _HAL_NODE_RANGE
{
  /* 0x0000 */ unsigned long PageFrameIndex;
  /* 0x0004 */ unsigned long Node;
} HAL_NODE_RANGE, *PHAL_NODE_RANGE; /* size: 0x0008 */

struct _HAL_PMC_COUNTERS;

typedef struct _HANDLE_TABLE
{
  /* 0x0000 */ unsigned long NextHandleNeedingPool;
  /* 0x0004 */ long ExtraInfoPages;
  /* 0x0008 */ volatile unsigned long TableCode;
  /* 0x000c */ struct _EPROCESS* QuotaProcess;
  /* 0x0010 */ struct _LIST_ENTRY HandleTableList;
  /* 0x0018 */ unsigned long UniqueProcessId;
  union
  {
    /* 0x001c */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x001c */ unsigned char StrictFIFO : 1; /* bit position: 0 */
      /* 0x001c */ unsigned char EnableHandleExceptions : 1; /* bit position: 1 */
      /* 0x001c */ unsigned char Rundown : 1; /* bit position: 2 */
      /* 0x001c */ unsigned char Duplicated : 1; /* bit position: 3 */
      /* 0x001c */ unsigned char RaiseUMExceptionOnInvalidHandleClose : 1; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _EX_PUSH_LOCK HandleContentionEvent;
  /* 0x0024 */ struct _EX_PUSH_LOCK HandleTableLock;
  union
  {
    /* 0x0028 */ struct _HANDLE_TABLE_FREE_LIST FreeLists[1];
    struct
    {
      /* 0x0028 */ unsigned char ActualEntry[20];
      /* 0x003c */ struct _HANDLE_TRACE_DEBUG_INFO* DebugInfo;
      /* 0x0040 */ long __PADDING__[7];
    }; /* size: 0x0034 */
  }; /* size: 0x0034 */
} HANDLE_TABLE, *PHANDLE_TABLE; /* size: 0x005c */

typedef union _HANDLE_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ volatile long VolatileLowValue;
    /* 0x0000 */ long LowValue;
    struct
    {
      /* 0x0000 */ struct _HANDLE_TABLE_ENTRY_INFO* volatile InfoTable;
      union
      {
        /* 0x0004 */ long HighValue;
        /* 0x0004 */ union _HANDLE_TABLE_ENTRY* NextFreeHandleEntry;
        /* 0x0004 */ struct _EXHANDLE LeafHandleValue;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Unlocked : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long Attributes : 2; /* bit position: 1 */
        /* 0x0000 */ unsigned long ObjectPointerBits : 29; /* bit position: 3 */
      }; /* bitfield */
      union
      {
        /* 0x0004 */ long RefCountField;
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long GrantedAccessBits : 25; /* bit position: 0 */
          /* 0x0004 */ unsigned long ProtectFromClose : 1; /* bit position: 25 */
          /* 0x0004 */ unsigned long NoRightsUpgrade : 1; /* bit position: 26 */
          /* 0x0004 */ unsigned long RefCnt : 5; /* bit position: 27 */
        }; /* bitfield */
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY; /* size: 0x0008 */

typedef struct _HANDLE_TABLE_ENTRY_INFO
{
  /* 0x0000 */ unsigned long AuditMask;
} HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO; /* size: 0x0004 */

typedef struct _HANDLE_TABLE_FREE_LIST
{
  /* 0x0000 */ struct _EX_PUSH_LOCK FreeListLock;
  /* 0x0004 */ union _HANDLE_TABLE_ENTRY* FirstFreeHandleEntry;
  /* 0x0008 */ union _HANDLE_TABLE_ENTRY* LastFreeHandleEntry;
  /* 0x000c */ long HandleCount;
  /* 0x0010 */ unsigned long HighWaterMark;
  /* 0x0014 */ unsigned long Reserved[8];
} HANDLE_TABLE_FREE_LIST, *PHANDLE_TABLE_FREE_LIST; /* size: 0x0034 */

typedef struct _HANDLE_TRACE_DB_ENTRY
{
  /* 0x0000 */ struct _CLIENT_ID ClientId;
  /* 0x0008 */ void* Handle;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ void* StackTrace[16];
} HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY; /* size: 0x0050 */

typedef struct _HANDLE_TRACE_DEBUG_INFO
{
  /* 0x0000 */ long RefCount;
  /* 0x0004 */ unsigned long TableSize;
  /* 0x0008 */ unsigned long BitMaskFlags;
  /* 0x000c */ struct _FAST_MUTEX CloseCompactionLock;
  /* 0x002c */ unsigned long CurrentStackIndex;
  /* 0x0030 */ struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];
} HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO; /* size: 0x0080 */

typedef enum _HARDWARE_COUNTER_TYPE
{
  PMCCounter = 0,
  MaxHardwareCounterType = 1,
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef struct _HARDWARE_PTE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 reserved0 : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 PageFrameNumber : 26; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 reserved1 : 26; /* bit position: 38 */
    }; /* bitfield */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} HARDWARE_PTE, *PHARDWARE_PTE; /* size: 0x0008 */

typedef struct _HBASE_BLOCK
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Sequence1;
  /* 0x0008 */ unsigned long Sequence2;
  /* 0x000c */ union _LARGE_INTEGER TimeStamp;
  /* 0x0014 */ unsigned long Major;
  /* 0x0018 */ unsigned long Minor;
  /* 0x001c */ unsigned long Type;
  /* 0x0020 */ unsigned long Format;
  /* 0x0024 */ unsigned long RootCell;
  /* 0x0028 */ unsigned long Length;
  /* 0x002c */ unsigned long Cluster;
  /* 0x0030 */ unsigned char FileName[64];
  /* 0x0070 */ struct _GUID RmId;
  /* 0x0080 */ struct _GUID LogId;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ struct _GUID TmId;
  /* 0x00a4 */ unsigned long GuidSignature;
  /* 0x00a8 */ unsigned __int64 LastReorganizeTime;
  /* 0x00b0 */ unsigned long Reserved1[83];
  /* 0x01fc */ unsigned long CheckSum;
  /* 0x0200 */ unsigned long Reserved2[882];
  /* 0x0fc8 */ struct _GUID ThawTmId;
  /* 0x0fd8 */ struct _GUID ThawRmId;
  /* 0x0fe8 */ struct _GUID ThawLogId;
  /* 0x0ff8 */ unsigned long BootType;
  /* 0x0ffc */ unsigned long BootRecover;
} HBASE_BLOCK, *PHBASE_BLOCK; /* size: 0x1000 */

typedef struct _HBIN
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long FileOffset;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Reserved1[2];
  /* 0x0014 */ union _LARGE_INTEGER TimeStamp;
  /* 0x001c */ unsigned long Spare;
} HBIN, *PHBIN; /* size: 0x0020 */

typedef struct _HCELL
{
  /* 0x0000 */ long Size;
  union // _TAG_UNNAMED_50
  {
    struct // _TAG_UNNAMED_51
    {
      union // _TAG_UNNAMED_52
      {
        union
        {
          /* 0x0004 */ unsigned long UserData;
          /* 0x0004 */ unsigned long Next;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u;
    } /* size: 0x0004 */ NewCell;
  } /* size: 0x0004 */ u;
} HCELL, *PHCELL; /* size: 0x0008 */

typedef struct _HEAP
{
  union
  {
    /* 0x0000 */ struct _HEAP_SEGMENT Segment;
    struct
    {
      /* 0x0000 */ struct _HEAP_ENTRY Entry;
      /* 0x0008 */ unsigned long SegmentSignature;
      /* 0x000c */ unsigned long SegmentFlags;
      /* 0x0010 */ struct _LIST_ENTRY SegmentListEntry;
      /* 0x0018 */ struct _HEAP* Heap;
      /* 0x001c */ void* BaseAddress;
      /* 0x0020 */ unsigned long NumberOfPages;
      /* 0x0024 */ struct _HEAP_ENTRY* FirstEntry;
      /* 0x0028 */ struct _HEAP_ENTRY* LastValidEntry;
      /* 0x002c */ unsigned long NumberOfUnCommittedPages;
      /* 0x0030 */ unsigned long NumberOfUnCommittedRanges;
      /* 0x0034 */ unsigned short SegmentAllocatorBackTraceIndex;
      /* 0x0036 */ unsigned short Reserved;
      /* 0x0038 */ struct _LIST_ENTRY UCRSegmentList;
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
  /* 0x0040 */ unsigned long Flags;
  /* 0x0044 */ unsigned long ForceFlags;
  /* 0x0048 */ unsigned long CompatibilityFlags;
  /* 0x004c */ unsigned long EncodeFlagMask;
  /* 0x0050 */ struct _HEAP_ENTRY Encoding;
  /* 0x0058 */ unsigned long Interceptor;
  /* 0x005c */ unsigned long VirtualMemoryThreshold;
  /* 0x0060 */ unsigned long Signature;
  /* 0x0064 */ unsigned long SegmentReserve;
  /* 0x0068 */ unsigned long SegmentCommit;
  /* 0x006c */ unsigned long DeCommitFreeBlockThreshold;
  /* 0x0070 */ unsigned long DeCommitTotalFreeThreshold;
  /* 0x0074 */ unsigned long TotalFreeSize;
  /* 0x0078 */ unsigned long MaximumAllocationSize;
  /* 0x007c */ unsigned short ProcessHeapsListIndex;
  /* 0x007e */ unsigned short HeaderValidateLength;
  /* 0x0080 */ void* HeaderValidateCopy;
  /* 0x0084 */ unsigned short NextAvailableTagIndex;
  /* 0x0086 */ unsigned short MaximumTagIndex;
  /* 0x0088 */ struct _HEAP_TAG_ENTRY* TagEntries;
  /* 0x008c */ struct _LIST_ENTRY UCRList;
  /* 0x0094 */ unsigned long AlignRound;
  /* 0x0098 */ unsigned long AlignMask;
  /* 0x009c */ struct _LIST_ENTRY VirtualAllocdBlocks;
  /* 0x00a4 */ struct _LIST_ENTRY SegmentList;
  /* 0x00ac */ unsigned short AllocatorBackTraceIndex;
  /* 0x00b0 */ unsigned long NonDedicatedListLength;
  /* 0x00b4 */ void* BlocksIndex;
  /* 0x00b8 */ void* UCRIndex;
  /* 0x00bc */ struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;
  /* 0x00c0 */ struct _LIST_ENTRY FreeLists;
  /* 0x00c8 */ struct _HEAP_LOCK* LockVariable;
  /* 0x00cc */ void* CommitRoutine /* function */;
  /* 0x00d0 */ void* FrontEndHeap;
  /* 0x00d4 */ unsigned short FrontHeapLockCount;
  /* 0x00d6 */ unsigned char FrontEndHeapType;
  /* 0x00d7 */ unsigned char RequestedFrontEndHeapType;
  /* 0x00d8 */ unsigned short* FrontEndHeapUsageData;
  /* 0x00dc */ unsigned short FrontEndHeapMaximumIndex;
  /* 0x00de */ volatile unsigned char FrontEndHeapStatusBitmap[257];
  /* 0x01e0 */ struct _HEAP_COUNTERS Counters;
  /* 0x023c */ struct _HEAP_TUNING_PARAMETERS TuningParameters;
  /* 0x0244 */ long __PADDING__[1];
} HEAP, *PHEAP; /* size: 0x0248 */

typedef struct _HEAP_COUNTERS
{
  /* 0x0000 */ unsigned long TotalMemoryReserved;
  /* 0x0004 */ unsigned long TotalMemoryCommitted;
  /* 0x0008 */ unsigned long TotalMemoryLargeUCR;
  /* 0x000c */ unsigned long TotalSizeInVirtualBlocks;
  /* 0x0010 */ unsigned long TotalSegments;
  /* 0x0014 */ unsigned long TotalUCRs;
  /* 0x0018 */ unsigned long CommittOps;
  /* 0x001c */ unsigned long DeCommitOps;
  /* 0x0020 */ unsigned long LockAcquires;
  /* 0x0024 */ unsigned long LockCollisions;
  /* 0x0028 */ unsigned long CommitRate;
  /* 0x002c */ unsigned long DecommittRate;
  /* 0x0030 */ unsigned long CommitFailures;
  /* 0x0034 */ unsigned long InBlockCommitFailures;
  /* 0x0038 */ unsigned long PollIntervalCounter;
  /* 0x003c */ unsigned long DecommitsSinceLastCheck;
  /* 0x0040 */ unsigned long HeapPollInterval;
  /* 0x0044 */ unsigned long AllocAndFreeOps;
  /* 0x0048 */ unsigned long AllocationIndicesActive;
  /* 0x004c */ unsigned long InBlockDeccommits;
  /* 0x0050 */ unsigned long InBlockDeccomitSize;
  /* 0x0054 */ unsigned long HighWatermarkSize;
  /* 0x0058 */ unsigned long LastPolledSize;
} HEAP_COUNTERS, *PHEAP_COUNTERS; /* size: 0x005c */

typedef struct _HEAP_ENTRY
{
  union
  {
    /* 0x0000 */ struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      /* 0x0000 */ unsigned short Size;
      /* 0x0002 */ unsigned char Flags;
      /* 0x0003 */ unsigned char SmallTagIndex;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long SubSegmentCode;
      /* 0x0004 */ unsigned short PreviousSize;
      union
      {
        /* 0x0006 */ unsigned char SegmentOffset;
        struct
        {
          /* 0x0006 */ unsigned char LFHFlags;
          /* 0x0007 */ unsigned char UnusedBytes;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0008 */
    /* 0x0000 */ struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      /* 0x0000 */ unsigned short FunctionIndex;
      /* 0x0002 */ unsigned short ContextValue;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long InterceptorValue;
      /* 0x0004 */ unsigned short UnusedBytesLength;
      /* 0x0006 */ unsigned char EntryOffset;
      /* 0x0007 */ unsigned char ExtendedBlockSignature;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long Code1;
      union
      {
        struct
        {
          /* 0x0004 */ unsigned short Code2;
          /* 0x0006 */ unsigned char Code3;
          /* 0x0007 */ unsigned char Code4;
        }; /* size: 0x0004 */
        /* 0x0004 */ unsigned long Code234;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 AgregateCode;
  }; /* size: 0x0008 */
} HEAP_ENTRY, *PHEAP_ENTRY; /* size: 0x0008 */

typedef struct _HEAP_ENTRY_EXTRA
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short AllocatorBackTraceIndex;
      /* 0x0002 */ unsigned short TagIndex;
      /* 0x0004 */ unsigned long Settable;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 ZeroInit;
  }; /* size: 0x0008 */
} HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA; /* size: 0x0008 */

typedef struct _HEAP_EXTENDED_ENTRY
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short FunctionIndex;
      /* 0x0002 */ unsigned short ContextValue;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long InterceptorValue;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short UnusedBytesLength;
  /* 0x0006 */ unsigned char EntryOffset;
  /* 0x0007 */ unsigned char ExtendedBlockSignature;
} HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY; /* size: 0x0008 */

typedef enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_usage_after_free = 10,
  heap_failure_cross_heap_operation = 11,
  heap_failure_freelists_corruption = 12,
  heap_failure_listentry_corruption = 13,
  heap_failure_lfh_bitmap_mismatch = 14,
  heap_failure_segment_lfh_bitmap_corruption = 15,
  heap_failure_segment_lfh_double_free = 16,
  heap_failure_vs_subsegment_corruption = 17,
} HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef struct _HEAP_FREE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _HEAP_ENTRY HeapEntry;
    /* 0x0000 */ struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      /* 0x0000 */ unsigned short Size;
      /* 0x0002 */ unsigned char Flags;
      /* 0x0003 */ unsigned char SmallTagIndex;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long SubSegmentCode;
      /* 0x0004 */ unsigned short PreviousSize;
      union
      {
        /* 0x0006 */ unsigned char SegmentOffset;
        struct
        {
          /* 0x0006 */ unsigned char LFHFlags;
          /* 0x0007 */ unsigned char UnusedBytes;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0008 */
    /* 0x0000 */ struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      /* 0x0000 */ unsigned short FunctionIndex;
      /* 0x0002 */ unsigned short ContextValue;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long InterceptorValue;
      /* 0x0004 */ unsigned short UnusedBytesLength;
      /* 0x0006 */ unsigned char EntryOffset;
      /* 0x0007 */ unsigned char ExtendedBlockSignature;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long Code1;
      union
      {
        struct
        {
          /* 0x0004 */ unsigned short Code2;
          /* 0x0006 */ unsigned char Code3;
          /* 0x0007 */ unsigned char Code4;
        }; /* size: 0x0004 */
        /* 0x0004 */ unsigned long Code234;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 AgregateCode;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _LIST_ENTRY FreeList;
} HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY; /* size: 0x0010 */

typedef struct _HEAP_FREE_ENTRY_EXTRA
{
  /* 0x0000 */ unsigned short TagIndex;
  /* 0x0002 */ unsigned short FreeBackTraceIndex;
} HEAP_FREE_ENTRY_EXTRA, *PHEAP_FREE_ENTRY_EXTRA; /* size: 0x0004 */

typedef struct _HEAP_LIST_LOOKUP
{
  /* 0x0000 */ struct _HEAP_LIST_LOOKUP* ExtendedLookup;
  /* 0x0004 */ unsigned long ArraySize;
  /* 0x0008 */ unsigned long ExtraItem;
  /* 0x000c */ unsigned long ItemCount;
  /* 0x0010 */ unsigned long OutOfRangeItems;
  /* 0x0014 */ unsigned long BaseIndex;
  /* 0x0018 */ struct _LIST_ENTRY* ListHead;
  /* 0x001c */ unsigned long* ListsInUseUlong;
  /* 0x0020 */ struct _LIST_ENTRY** ListHints;
} HEAP_LIST_LOOKUP, *PHEAP_LIST_LOOKUP; /* size: 0x0024 */

typedef struct _HEAP_LOCK
{
  union // _TAG_UNNAMED_53
  {
    union
    {
      /* 0x0000 */ struct _RTL_CRITICAL_SECTION CriticalSection;
      /* 0x0000 */ struct _ERESOURCE Resource;
    }; /* size: 0x0038 */
  } /* size: 0x0038 */ Lock;
} HEAP_LOCK, *PHEAP_LOCK; /* size: 0x0038 */

typedef struct _HEAP_LOOKASIDE
{
  /* 0x0000 */ union _SLIST_HEADER ListHead;
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  /* 0x0010 */ unsigned long AllocateMisses;
  /* 0x0014 */ unsigned long TotalFrees;
  /* 0x0018 */ unsigned long FreeMisses;
  /* 0x001c */ unsigned long LastTotalAllocates;
  /* 0x0020 */ unsigned long LastAllocateMisses;
  /* 0x0024 */ unsigned long Counters[2];
  /* 0x002c */ long __PADDING__[1];
} HEAP_LOOKASIDE, *PHEAP_LOOKASIDE; /* size: 0x0030 */

typedef struct _HEAP_PSEUDO_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned long Size;
} HEAP_PSEUDO_TAG_ENTRY, *PHEAP_PSEUDO_TAG_ENTRY; /* size: 0x000c */

typedef struct _HEAP_SEGMENT
{
  /* 0x0000 */ struct _HEAP_ENTRY Entry;
  /* 0x0008 */ unsigned long SegmentSignature;
  /* 0x000c */ unsigned long SegmentFlags;
  /* 0x0010 */ struct _LIST_ENTRY SegmentListEntry;
  /* 0x0018 */ struct _HEAP* Heap;
  /* 0x001c */ void* BaseAddress;
  /* 0x0020 */ unsigned long NumberOfPages;
  /* 0x0024 */ struct _HEAP_ENTRY* FirstEntry;
  /* 0x0028 */ struct _HEAP_ENTRY* LastValidEntry;
  /* 0x002c */ unsigned long NumberOfUnCommittedPages;
  /* 0x0030 */ unsigned long NumberOfUnCommittedRanges;
  /* 0x0034 */ unsigned short SegmentAllocatorBackTraceIndex;
  /* 0x0036 */ unsigned short Reserved;
  /* 0x0038 */ struct _LIST_ENTRY UCRSegmentList;
} HEAP_SEGMENT, *PHEAP_SEGMENT; /* size: 0x0040 */

typedef struct _HEAP_STOP_ON_TAG
{
  union
  {
    /* 0x0000 */ unsigned long HeapAndTagIndex;
    struct
    {
      /* 0x0000 */ unsigned short TagIndex;
      /* 0x0002 */ unsigned short HeapIndex;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} HEAP_STOP_ON_TAG, *PHEAP_STOP_ON_TAG; /* size: 0x0004 */

typedef struct _HEAP_STOP_ON_VALUES
{
  /* 0x0000 */ unsigned long AllocAddress;
  /* 0x0004 */ struct _HEAP_STOP_ON_TAG AllocTag;
  /* 0x0008 */ unsigned long ReAllocAddress;
  /* 0x000c */ struct _HEAP_STOP_ON_TAG ReAllocTag;
  /* 0x0010 */ unsigned long FreeAddress;
  /* 0x0014 */ struct _HEAP_STOP_ON_TAG FreeTag;
} HEAP_STOP_ON_VALUES, *PHEAP_STOP_ON_VALUES; /* size: 0x0018 */

typedef struct _HEAP_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned short TagIndex;
  /* 0x000e */ unsigned short CreatorBackTraceIndex;
  /* 0x0010 */ wchar_t TagName[24];
} HEAP_TAG_ENTRY, *PHEAP_TAG_ENTRY; /* size: 0x0040 */

typedef struct _HEAP_TUNING_PARAMETERS
{
  /* 0x0000 */ unsigned long CommittThresholdShift;
  /* 0x0004 */ unsigned long MaxPreCommittThreshold;
} HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS; /* size: 0x0008 */

typedef struct _HEAP_UCR_DESCRIPTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _LIST_ENTRY SegmentEntry;
  /* 0x0010 */ void* Address;
  /* 0x0014 */ unsigned long Size;
} HEAP_UCR_DESCRIPTOR, *PHEAP_UCR_DESCRIPTOR; /* size: 0x0018 */

typedef struct _HEAP_UNPACKED_ENTRY
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short Size;
      /* 0x0002 */ unsigned char Flags;
      /* 0x0003 */ unsigned char SmallTagIndex;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long SubSegmentCode;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short PreviousSize;
  union
  {
    /* 0x0006 */ unsigned char SegmentOffset;
    /* 0x0006 */ unsigned char LFHFlags;
  }; /* size: 0x0001 */
  /* 0x0007 */ unsigned char UnusedBytes;
} HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY; /* size: 0x0008 */

typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0008 */ struct _HEAP_ENTRY_EXTRA ExtraStuff;
  /* 0x0010 */ unsigned long CommitSize;
  /* 0x0014 */ unsigned long ReserveSize;
  /* 0x0018 */ struct _HEAP_ENTRY BusyBlock;
} HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY; /* size: 0x0020 */

typedef struct _HHIVE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ void* GetCellRoutine /* function */;
  /* 0x0008 */ void* ReleaseCellRoutine /* function */;
  /* 0x000c */ void* Allocate /* function */;
  /* 0x0010 */ void* Free /* function */;
  /* 0x0014 */ void* FileWrite /* function */;
  /* 0x0018 */ void* FileRead /* function */;
  /* 0x001c */ void* HiveLoadFailure;
  /* 0x0020 */ struct _HBASE_BLOCK* BaseBlock;
  /* 0x0024 */ struct _RTL_BITMAP DirtyVector;
  /* 0x002c */ unsigned long DirtyCount;
  /* 0x0030 */ unsigned long DirtyAlloc;
  /* 0x0034 */ struct _RTL_BITMAP UnreconciledVector;
  /* 0x003c */ unsigned long UnreconciledCount;
  /* 0x0040 */ unsigned long BaseBlockAlloc;
  /* 0x0044 */ unsigned long Cluster;
  struct /* bitfield */
  {
    /* 0x0048 */ unsigned char Flat : 1; /* bit position: 0 */
    /* 0x0048 */ unsigned char ReadOnly : 1; /* bit position: 1 */
    /* 0x0048 */ unsigned char SystemCacheBacked : 1; /* bit position: 2 */
    /* 0x0048 */ unsigned char Reserved : 5; /* bit position: 3 */
  }; /* bitfield */
  /* 0x0049 */ unsigned char DirtyFlag;
  /* 0x004c */ unsigned long HvBinHeadersUse;
  /* 0x0050 */ unsigned long HvFreeCellsUse;
  /* 0x0054 */ unsigned long HvUsedCellsUse;
  /* 0x0058 */ unsigned long CmUsedCellsUse;
  /* 0x005c */ unsigned long HiveFlags;
  /* 0x0060 */ unsigned long CurrentLog;
  /* 0x0064 */ unsigned long CurrentLogSequence;
  /* 0x0068 */ unsigned long CurrentLogMinimumSequence;
  /* 0x006c */ unsigned long CurrentLogOffset;
  /* 0x0070 */ unsigned long MinimumLogSequence;
  /* 0x0074 */ unsigned long LogFileSizeCap;
  /* 0x0078 */ unsigned char LogDataPresent[2];
  /* 0x007a */ unsigned char PrimaryFileValid;
  /* 0x007b */ unsigned char BaseBlockDirty;
  /* 0x0080 */ union _LARGE_INTEGER LastLogSwapTime;
  union
  {
    struct /* bitfield */
    {
      /* 0x0088 */ unsigned short FirstLogFile : 3; /* bit position: 0 */
      /* 0x0088 */ unsigned short SecondLogFile : 3; /* bit position: 3 */
      /* 0x0088 */ unsigned short HeaderRecovered : 1; /* bit position: 6 */
      /* 0x0088 */ unsigned short LegacyRecoveryIndicated : 1; /* bit position: 7 */
      /* 0x0088 */ unsigned short RecoveryInformationReserved : 8; /* bit position: 8 */
    }; /* bitfield */
    /* 0x0088 */ unsigned short RecoveryInformation;
  }; /* size: 0x0002 */
  /* 0x008a */ unsigned char LogEntriesRecovered[2];
  /* 0x008c */ unsigned long RefreshCount;
  /* 0x0090 */ unsigned long StorageTypeCount;
  /* 0x0094 */ unsigned long Version;
  /* 0x0098 */ struct _HVIEW_MAP ViewMap;
  /* 0x03b8 */ struct _DUAL Storage[2];
} HHIVE, *PHHIVE; /* size: 0x06f0 */

typedef struct _HIVE_LIST_ENTRY
{
  /* 0x0000 */ unsigned short* FileName;
  /* 0x0004 */ unsigned short* BaseName;
  /* 0x0008 */ unsigned short* RegRootName;
  /* 0x000c */ struct _CMHIVE* CmHive;
  /* 0x0010 */ unsigned long HHiveFlags;
  /* 0x0014 */ unsigned long CmHiveFlags;
  /* 0x0018 */ unsigned long CmKcbCacheSize;
  /* 0x001c */ struct _CMHIVE* CmHive2;
  /* 0x0020 */ unsigned char HiveMounted;
  /* 0x0021 */ unsigned char ThreadFinished;
  /* 0x0022 */ unsigned char ThreadStarted;
  /* 0x0023 */ unsigned char Allocate;
  /* 0x0024 */ unsigned char WinPERequired;
  /* 0x0028 */ struct _KEVENT StartEvent;
  /* 0x0038 */ struct _KEVENT FinishedEvent;
  /* 0x0048 */ struct _KEVENT MountLock;
  /* 0x0058 */ struct _UNICODE_STRING FilePath;
} HIVE_LIST_ENTRY, *PHIVE_LIST_ENTRY; /* size: 0x0060 */

typedef struct _HIVE_LOAD_FAILURE
{
  /* 0x0000 */ struct _HHIVE* Hive;
  /* 0x0004 */ unsigned long Index;
  /* 0x0008 */ unsigned long RecoverableIndex;
  /* 0x000c */ struct // _TAG_UNNAMED_54
  {
    /* 0x000c */ enum _CM_LOAD_FAILURE_TYPE Failure;
    /* 0x0010 */ long Status;
    /* 0x0014 */ unsigned long Point;
  } /* size: 0x000c */ Locations[8];
  /* 0x006c */ struct // _TAG_UNNAMED_54
  {
    /* 0x006c */ enum _CM_LOAD_FAILURE_TYPE Failure;
    /* 0x0070 */ long Status;
    /* 0x0074 */ unsigned long Point;
  } /* size: 0x000c */ RecoverableLocations[8];
  struct // _TAG_UNNAMED_55
  {
    /* 0x00cc */ unsigned long Action;
    /* 0x00d0 */ void* Handle;
    /* 0x00d4 */ long Status;
  } /* size: 0x000c */ RegistryIO;
  struct // _TAG_UNNAMED_56
  {
    /* 0x00d8 */ void* CheckStack;
  } /* size: 0x0004 */ CheckRegistry2;
  struct // _TAG_UNNAMED_57
  {
    /* 0x00dc */ unsigned long Cell;
    /* 0x00e0 */ struct _CELL_DATA* CellPoint;
    /* 0x00e4 */ void* RootPoint;
    /* 0x00e8 */ unsigned long Index;
  } /* size: 0x0010 */ CheckKey;
  struct // _TAG_UNNAMED_58
  {
    /* 0x00ec */ struct _CELL_DATA* List;
    /* 0x00f0 */ unsigned long Index;
    /* 0x00f4 */ unsigned long Cell;
    /* 0x00f8 */ struct _CELL_DATA* CellPoint;
  } /* size: 0x0010 */ CheckValueList;
  struct // _TAG_UNNAMED_59
  {
    /* 0x00fc */ unsigned long Space;
    /* 0x0100 */ unsigned long MapPoint;
    /* 0x0104 */ struct _HBIN* BinPoint;
  } /* size: 0x000c */ CheckHive;
  struct // _TAG_UNNAMED_59
  {
    /* 0x0108 */ unsigned long Space;
    /* 0x010c */ unsigned long MapPoint;
    /* 0x0110 */ struct _HBIN* BinPoint;
  } /* size: 0x000c */ CheckHive1;
  struct // _TAG_UNNAMED_60
  {
    /* 0x0114 */ struct _HBIN* Bin;
    /* 0x0118 */ struct _HCELL* CellPoint;
  } /* size: 0x0008 */ CheckBin;
  struct // _TAG_UNNAMED_61
  {
    /* 0x011c */ unsigned long FileOffset;
  } /* size: 0x0004 */ RecoverData;
} HIVE_LOAD_FAILURE, *PHIVE_LOAD_FAILURE; /* size: 0x0120 */

typedef struct _HIVE_WAIT_PACKET
{
  /* 0x0000 */ struct _KEVENT WakeEvent;
  /* 0x0010 */ long Status;
  /* 0x0014 */ struct _HIVE_WAIT_PACKET* Next;
} HIVE_WAIT_PACKET, *PHIVE_WAIT_PACKET; /* size: 0x0018 */

typedef struct _HIVE_WRITE_WAIT_QUEUE
{
  /* 0x0000 */ struct _ETHREAD* ActiveThread;
  /* 0x0004 */ struct _HIVE_WAIT_PACKET* WaitList;
  /* 0x0008 */ volatile unsigned long OwnerBoosted;
} HIVE_WRITE_WAIT_QUEUE, *PHIVE_WRITE_WAIT_QUEUE; /* size: 0x000c */

typedef struct _HMAP_DIRECTORY
{
  /* 0x0000 */ struct _HMAP_TABLE* Directory[1024];
} HMAP_DIRECTORY, *PHMAP_DIRECTORY; /* size: 0x1000 */

typedef struct _HMAP_ENTRY
{
  /* 0x0000 */ unsigned long BlockOffset;
  /* 0x0004 */ unsigned long PermanentBinAddress;
  /* 0x0008 */ unsigned long TemporaryBinAddress;
  /* 0x000c */ struct _EX_RUNDOWN_REF TemporaryBinRundown;
  /* 0x0010 */ unsigned long MemAlloc;
} HMAP_ENTRY, *PHMAP_ENTRY; /* size: 0x0014 */

typedef struct _HMAP_TABLE
{
  /* 0x0000 */ struct _HMAP_ENTRY Table[512];
} HMAP_TABLE, *PHMAP_TABLE; /* size: 0x2800 */

typedef struct _HVIEW_MAP
{
  /* 0x0000 */ unsigned long MappedLength;
  /* 0x0004 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x000c */ struct _HVIEW_MAP_DIRECTORY* Directory;
  /* 0x0010 */ unsigned long PagesCharged;
  /* 0x0018 */ struct _HVIEW_MAP_PIN_LOG PinLog;
} HVIEW_MAP, *PHVIEW_MAP; /* size: 0x0320 */

typedef struct _HVIEW_MAP_DIRECTORY
{
  /* 0x0000 */ struct _HVIEW_MAP_TABLE* Tables[128];
} HVIEW_MAP_DIRECTORY, *PHVIEW_MAP_DIRECTORY; /* size: 0x0200 */

typedef struct _HVIEW_MAP_ENTRY
{
  union
  {
    /* 0x0000 */ void* ViewStart;
    /* 0x0000 */ unsigned long IsPinned : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x0004 */ void* Bcb;
  /* 0x0008 */ unsigned __int64 PinnedPages;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ long __PADDING__[1];
} HVIEW_MAP_ENTRY, *PHVIEW_MAP_ENTRY; /* size: 0x0018 */

typedef struct _HVIEW_MAP_PIN_LOG
{
  /* 0x0000 */ unsigned long Next;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _HVIEW_MAP_PIN_LOG_ENTRY Entries[16];
} HVIEW_MAP_PIN_LOG, *PHVIEW_MAP_PIN_LOG; /* size: 0x0308 */

typedef struct _HVIEW_MAP_PIN_LOG_ENTRY
{
  /* 0x0000 */ unsigned long ViewOffset;
  /* 0x0004 */ unsigned char Pinned;
  /* 0x0008 */ unsigned __int64 PinMask;
  /* 0x0010 */ struct _KTHREAD* Thread;
  /* 0x0014 */ void* Stack[6];
  /* 0x002c */ long __PADDING__[1];
} HVIEW_MAP_PIN_LOG_ENTRY, *PHVIEW_MAP_PIN_LOG_ENTRY; /* size: 0x0030 */

typedef struct _HVIEW_MAP_TABLE
{
  /* 0x0000 */ struct _HVIEW_MAP_ENTRY Entries[64];
} HVIEW_MAP_TABLE, *PHVIEW_MAP_TABLE; /* size: 0x0600 */

typedef struct _HV_GET_CELL_CONTEXT
{
  union
  {
    /* 0x0000 */ unsigned long Cell;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IsInTempBin : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} HV_GET_CELL_CONTEXT, *PHV_GET_CELL_CONTEXT; /* size: 0x0004 */

typedef union _HV_PARTITION_PRIVILEGE_MASK
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 AccessVpRunTimeReg : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceCounter : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 AccessSynicRegs : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 AccessSyntheticTimerRegs : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 AccessIntrCtrlRegs : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 AccessHypercallMsrs : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 AccessVpIndex : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 AccessResetReg : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 AccessStatsReg : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceTsc : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 AccessGuestIdleReg : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 AccessFrequencyRegs : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 AccessDebugRegs : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 Reserved1 : 19; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 CreatePartitions : 1; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 AccessPartitionId : 1; /* bit position: 33 */
      /* 0x0000 */ unsigned __int64 AccessMemoryPool : 1; /* bit position: 34 */
      /* 0x0000 */ unsigned __int64 AdjustMessageBuffers : 1; /* bit position: 35 */
      /* 0x0000 */ unsigned __int64 PostMessages : 1; /* bit position: 36 */
      /* 0x0000 */ unsigned __int64 SignalEvents : 1; /* bit position: 37 */
      /* 0x0000 */ unsigned __int64 CreatePort : 1; /* bit position: 38 */
      /* 0x0000 */ unsigned __int64 ConnectPort : 1; /* bit position: 39 */
      /* 0x0000 */ unsigned __int64 AccessStats : 1; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 2; /* bit position: 41 */
      /* 0x0000 */ unsigned __int64 Debugging : 1; /* bit position: 43 */
      /* 0x0000 */ unsigned __int64 CpuManagement : 1; /* bit position: 44 */
      /* 0x0000 */ unsigned __int64 ConfigureProfiler : 1; /* bit position: 45 */
      /* 0x0000 */ unsigned __int64 AccessVpExitTracing : 1; /* bit position: 46 */
      /* 0x0000 */ unsigned __int64 EnableExtendedGvaRangesForFlushVirtualAddressList : 1; /* bit position: 47 */
      /* 0x0000 */ unsigned __int64 AccessVsm : 1; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 AccessVpRegisters : 1; /* bit position: 49 */
      /* 0x0000 */ unsigned __int64 UnusedBit : 1; /* bit position: 50 */
      /* 0x0000 */ unsigned __int64 FastHypercallOutput : 1; /* bit position: 51 */
      /* 0x0000 */ unsigned __int64 EnableExtendedHypercalls : 1; /* bit position: 52 */
      /* 0x0000 */ unsigned __int64 StartVirtualProcessor : 1; /* bit position: 53 */
      /* 0x0000 */ unsigned __int64 Reserved3 : 10; /* bit position: 54 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} HV_PARTITION_PRIVILEGE_MASK, *PHV_PARTITION_PRIVILEGE_MASK; /* size: 0x0008 */

typedef struct _HV_X64_HYPERVISOR_FEATURES
{
  /* 0x0000 */ union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned int MaxSupportedCState : 4; /* bit position: 0 */
    /* 0x0008 */ unsigned int HpetNeededForC3PowerState_Deprecated : 1; /* bit position: 4 */
    /* 0x0008 */ unsigned int Reserved : 27; /* bit position: 5 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x000c */ unsigned int MwaitAvailable_Deprecated : 1; /* bit position: 0 */
    /* 0x000c */ unsigned int GuestDebuggingAvailable : 1; /* bit position: 1 */
    /* 0x000c */ unsigned int PerformanceMonitorsAvailable : 1; /* bit position: 2 */
    /* 0x000c */ unsigned int CpuDynamicPartitioningAvailable : 1; /* bit position: 3 */
    /* 0x000c */ unsigned int XmmRegistersForFastHypercallAvailable : 1; /* bit position: 4 */
    /* 0x000c */ unsigned int GuestIdleAvailable : 1; /* bit position: 5 */
    /* 0x000c */ unsigned int HypervisorSleepStateSupportAvailable : 1; /* bit position: 6 */
    /* 0x000c */ unsigned int NumaDistanceQueryAvailable : 1; /* bit position: 7 */
    /* 0x000c */ unsigned int FrequencyRegsAvailable : 1; /* bit position: 8 */
    /* 0x000c */ unsigned int SyntheticMachineCheckAvailable : 1; /* bit position: 9 */
    /* 0x000c */ unsigned int GuestCrashRegsAvailable : 1; /* bit position: 10 */
    /* 0x000c */ unsigned int DebugRegsAvailable : 1; /* bit position: 11 */
    /* 0x000c */ unsigned int Npiep1Available : 1; /* bit position: 12 */
    /* 0x000c */ unsigned int DisableHypervisorAvailable : 1; /* bit position: 13 */
    /* 0x000c */ unsigned int ExtendedGvaRangesForFlushVirtualAddressListAvailable : 1; /* bit position: 14 */
    /* 0x000c */ unsigned int FastHypercallOutputAvailable : 1; /* bit position: 15 */
    /* 0x000c */ unsigned int SvmFeaturesAvailable : 1; /* bit position: 16 */
    /* 0x000c */ unsigned int SintPollingModeAvailable : 1; /* bit position: 17 */
    /* 0x000c */ unsigned int Reserved1 : 14; /* bit position: 18 */
  }; /* bitfield */
} HV_X64_HYPERVISOR_FEATURES, *PHV_X64_HYPERVISOR_FEATURES; /* size: 0x0010 */

typedef struct _IA64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned __int64 CurrentSymbolStart;
  /* 0x000c */ unsigned __int64 CurrentSymbolEnd;
} IA64_DBGKD_CONTROL_SET, *PIA64_DBGKD_CONTROL_SET; /* size: 0x0014 */

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

typedef struct _IMAGE_DEBUG_DIRECTORY
{
  /* 0x0000 */ unsigned long Characteristics;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned long SizeOfData;
  /* 0x0014 */ unsigned long AddressOfRawData;
  /* 0x0018 */ unsigned long PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY; /* size: 0x001c */

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef struct _IMAGE_NT_HEADERS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS; /* size: 0x00f8 */

typedef struct _IMAGE_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned long SizeOfStackReserve;
  /* 0x004c */ unsigned long SizeOfStackCommit;
  /* 0x0050 */ unsigned long SizeOfHeapReserve;
  /* 0x0054 */ unsigned long SizeOfHeapCommit;
  /* 0x0058 */ unsigned long LoaderFlags;
  /* 0x005c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0060 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER; /* size: 0x00e0 */

typedef struct _IMAGE_ROM_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long BaseOfBss;
  /* 0x0020 */ unsigned long GprMask;
  /* 0x0024 */ unsigned long CprMask[4];
  /* 0x0034 */ unsigned long GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER; /* size: 0x0038 */

typedef struct _IMAGE_SECTION_HEADER
{
  /* 0x0000 */ unsigned char Name[8];
  union // _TAG_UNNAMED_62
  {
    union
    {
      /* 0x0008 */ unsigned long PhysicalAddress;
      /* 0x0008 */ unsigned long VirtualSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Misc;
  /* 0x000c */ unsigned long VirtualAddress;
  /* 0x0010 */ unsigned long SizeOfRawData;
  /* 0x0014 */ unsigned long PointerToRawData;
  /* 0x0018 */ unsigned long PointerToRelocations;
  /* 0x001c */ unsigned long PointerToLinenumbers;
  /* 0x0020 */ unsigned short NumberOfRelocations;
  /* 0x0022 */ unsigned short NumberOfLinenumbers;
  /* 0x0024 */ unsigned long Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; /* size: 0x0028 */

typedef struct _IMAGE_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ void* PageHashes;
    /* 0x0000 */ unsigned long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SecurityBeingCreated : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long SecurityMandatory : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long PageHashPointer : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} IMAGE_SECURITY_CONTEXT, *PIMAGE_SECURITY_CONTEXT; /* size: 0x0004 */

typedef struct _INITIAL_PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET; /* size: 0x002c */

typedef struct _INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
} INTERFACE, *PINTERFACE; /* size: 0x0010 */

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef struct _INTERRUPT_CONNECTION_DATA
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0008 */ struct _INTERRUPT_VECTOR_DATA Vectors[1];
} INTERRUPT_CONNECTION_DATA, *PINTERRUPT_CONNECTION_DATA; /* size: 0x0050 */

typedef struct _INTERRUPT_HT_INTR_INFO
{
  union // _TAG_UNNAMED_63
  {
    union
    {
      struct // _TAG_UNNAMED_64
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long Mask : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned long Polarity : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned long MessageType : 3; /* bit position: 2 */
          /* 0x0000 */ unsigned long RequestEOI : 1; /* bit position: 5 */
          /* 0x0000 */ unsigned long DestinationMode : 1; /* bit position: 6 */
          /* 0x0000 */ unsigned long MessageType3 : 1; /* bit position: 7 */
          /* 0x0000 */ unsigned long Destination : 8; /* bit position: 8 */
          /* 0x0000 */ unsigned long Vector : 8; /* bit position: 16 */
          /* 0x0000 */ unsigned long ExtendedAddress : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ LowPart;
  union // _TAG_UNNAMED_65
  {
    union
    {
      struct // _TAG_UNNAMED_66
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long ExtendedDestination : 24; /* bit position: 0 */
          /* 0x0004 */ unsigned long Reserved : 6; /* bit position: 24 */
          /* 0x0004 */ unsigned long PassPW : 1; /* bit position: 30 */
          /* 0x0004 */ unsigned long WaitingForEOI : 1; /* bit position: 31 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0004 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighPart;
} INTERRUPT_HT_INTR_INFO, *PINTERRUPT_HT_INTR_INFO; /* size: 0x0008 */

typedef struct _INTERRUPT_REMAPPING_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long IrtIndex : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long FlagHalInternal : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long FlagTranslated : 1; /* bit position: 31 */
  }; /* bitfield */
  union // _TAG_UNNAMED_67
  {
    union
    {
      /* 0x0008 */ union _ULARGE_INTEGER RemappedFormat;
      struct // _TAG_UNNAMED_68
      {
        /* 0x0008 */ unsigned long MessageAddressLow;
        /* 0x000c */ unsigned short MessageData;
        /* 0x000e */ unsigned short Reserved;
      } /* size: 0x0008 */ Msi;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} INTERRUPT_REMAPPING_INFO, *PINTERRUPT_REMAPPING_INFO; /* size: 0x0010 */

typedef struct _INTERRUPT_VECTOR_DATA
{
  /* 0x0000 */ enum INTERRUPT_CONNECTION_TYPE Type;
  /* 0x0004 */ unsigned long Vector;
  /* 0x0008 */ unsigned char Irql;
  /* 0x000c */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0010 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0014 */ struct _GROUP_AFFINITY TargetProcessors;
  /* 0x0020 */ struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
  struct // _TAG_UNNAMED_69
  {
    /* 0x0030 */ unsigned long Gsiv;
    struct /* bitfield */
    {
      /* 0x0034 */ unsigned long WakeInterrupt : 1; /* bit position: 0 */
      /* 0x0034 */ unsigned long ReservedFlags : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0008 */ ControllerInput;
  union
  {
    struct // _TAG_UNNAMED_70
    {
      /* 0x0038 */ union _LARGE_INTEGER Address;
      /* 0x0040 */ unsigned long DataPayload;
      /* 0x0044 */ long __PADDING__[1];
    } /* size: 0x0010 */ XapicMessage;
    struct // _TAG_UNNAMED_71
    {
      /* 0x0038 */ struct _INTERRUPT_HT_INTR_INFO IntrInfo;
    } /* size: 0x0008 */ Hypertransport;
    struct // _TAG_UNNAMED_70
    {
      /* 0x0038 */ union _LARGE_INTEGER Address;
      /* 0x0040 */ unsigned long DataPayload;
      /* 0x0044 */ long __PADDING__[1];
    } /* size: 0x0010 */ GenericMessage;
    struct
    {
      struct // _TAG_UNNAMED_72
      {
        /* 0x0038 */ enum HAL_APIC_DESTINATION_MODE DestinationMode;
      } /* size: 0x0004 */ MessageRequest;
      /* 0x003c */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} INTERRUPT_VECTOR_DATA, *PINTERRUPT_VECTOR_DATA; /* size: 0x0048 */

typedef struct _IOP_FILE_OBJECT_EXTENSION
{
  /* 0x0000 */ unsigned long FoExtFlags;
  /* 0x0004 */ void* FoExtPerTypeExtension[7];
  /* 0x0020 */ enum _IOP_PRIORITY_HINT FoIoPriorityHint;
} IOP_FILE_OBJECT_EXTENSION, *PIOP_FILE_OBJECT_EXTENSION; /* size: 0x0024 */

typedef struct _IOP_IRP_EXTENSION
{
  union
  {
    /* 0x0000 */ unsigned short ExtensionFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short Allocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short PropagateId : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short SpareBits : 14; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short TypesAllocated;
  /* 0x0004 */ unsigned char GenericExtension[4];
  /* 0x0008 */ void* VerifierContext;
  /* 0x000c */ struct _GUID ActivityId;
  union
  {
    /* 0x001c */ union _LARGE_INTEGER Timestamp;
    /* 0x001c */ unsigned long ZeroingOffset;
    struct
    {
      /* 0x001c */ struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* FsTrackOffsetBlob;
      /* 0x0020 */ __int64 FsTrackedOffset;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
} IOP_IRP_EXTENSION, *PIOP_IRP_EXTENSION; /* size: 0x0028 */

typedef struct _IOP_IRP_EXTENSION_STATUS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ActivityId;
  /* 0x0008 */ unsigned long IoTracking;
} IOP_IRP_EXTENSION_STATUS, *PIOP_IRP_EXTENSION_STATUS; /* size: 0x000c */

typedef struct _IOP_IRP_STACK_PROFILER
{
  /* 0x0000 */ unsigned long Profile[20];
  /* 0x0050 */ unsigned long TotalIrps;
} IOP_IRP_STACK_PROFILER, *PIOP_IRP_STACK_PROFILER; /* size: 0x0054 */

typedef enum _IOP_PRIORITY_HINT
{
  IopIoPriorityNotSet = 0,
  IopIoPriorityVeryLow = 1,
  IopIoPriorityLow = 2,
  IopIoPriorityNormal = 3,
  IopIoPriorityHigh = 4,
  IopIoPriorityCritical = 5,
  MaxIopIoPriorityTypes = 6,
} IOP_PRIORITY_HINT, *PIOP_PRIORITY_HINT;

typedef struct _IOV_FORCED_PENDING_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0004 */ struct _ETHREAD* Thread;
  /* 0x0008 */ void* StackTrace[62];
} IOV_FORCED_PENDING_TRACE, *PIOV_FORCED_PENDING_TRACE; /* size: 0x0100 */

typedef struct _IOV_IRP_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0004 */ struct _KTHREAD* Thread;
  union
  {
    struct
    {
      /* 0x0008 */ short KernelApcDisable;
      /* 0x000a */ short SpecialApcDisable;
    }; /* size: 0x0004 */
    /* 0x0008 */ unsigned long CombinedApcDisable;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned char Irql;
  /* 0x0010 */ void* StackTrace[12];
} IOV_IRP_TRACE, *PIOV_IRP_TRACE; /* size: 0x0040 */

typedef enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef struct _IO_CLIENT_EXTENSION
{
  /* 0x0000 */ struct _IO_CLIENT_EXTENSION* NextExtension;
  /* 0x0004 */ void* ClientIdentificationAddress;
} IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION; /* size: 0x0008 */

typedef struct _IO_COMPLETION_CONTEXT
{
  /* 0x0000 */ void* Port;
  /* 0x0004 */ void* Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT; /* size: 0x0008 */

typedef struct _IO_DRIVER_CREATE_CONTEXT
{
  /* 0x0000 */ short Size;
  /* 0x0004 */ struct _ECP_LIST* ExtraCreateParameter;
  /* 0x0008 */ void* DeviceObjectHint;
  /* 0x000c */ struct _TXN_PARAMETER_BLOCK* TxnParameters;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT; /* size: 0x0010 */

typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER
{
  /* 0x0000 */ unsigned short Validation;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ void* TrackedOffsetCallback /* function */;
} IO_IRP_EXT_TRACK_OFFSET_HEADER, *PIO_IRP_EXT_TRACK_OFFSET_HEADER; /* size: 0x0008 */

typedef struct _IO_MINI_COMPLETION_PACKET_USER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long PacketType;
  /* 0x000c */ void* KeyContext;
  /* 0x0010 */ void* ApcContext;
  /* 0x0014 */ long IoStatus;
  /* 0x0018 */ unsigned long IoStatusInformation;
  /* 0x001c */ void* MiniPacketCallback /* function */;
  /* 0x0020 */ void* Context;
  /* 0x0024 */ unsigned char Allocated;
  /* 0x0025 */ char __PADDING__[3];
} IO_MINI_COMPLETION_PACKET_USER, *PIO_MINI_COMPLETION_PACKET_USER; /* size: 0x0028 */

typedef enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
} IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef struct _IO_PRIORITY_INFO
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long ThreadPriority;
  /* 0x0008 */ unsigned long PagePriority;
  /* 0x000c */ enum _IO_PRIORITY_HINT IoPriority;
} IO_PRIORITY_INFO, *PIO_PRIORITY_INFO; /* size: 0x0010 */

typedef struct _IO_REMOVE_LOCK
{
  /* 0x0000 */ struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK; /* size: 0x0018 */

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  /* 0x0000 */ unsigned char Removed;
  /* 0x0001 */ unsigned char Reserved[3];
  /* 0x0004 */ long IoCount;
  /* 0x0008 */ struct _KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK; /* size: 0x0018 */

typedef struct _IO_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Option;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char ShareDisposition;
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short Spare2;
  union // _TAG_UNNAMED_73
  {
    union
    {
      struct // _TAG_UNNAMED_74
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Port;
      struct // _TAG_UNNAMED_74
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory;
      struct // _TAG_UNNAMED_75
      {
        /* 0x0008 */ unsigned long MinimumVector;
        /* 0x000c */ unsigned long MaximumVector;
        /* 0x0010 */ unsigned short AffinityPolicy;
        /* 0x0012 */ unsigned short Group;
        /* 0x0014 */ enum _IRQ_PRIORITY PriorityPolicy;
        /* 0x0018 */ unsigned long TargetedProcessors;
      } /* size: 0x0014 */ Interrupt;
      struct // _TAG_UNNAMED_76
      {
        /* 0x0008 */ unsigned long MinimumChannel;
        /* 0x000c */ unsigned long MaximumChannel;
      } /* size: 0x0008 */ Dma;
      struct // _TAG_UNNAMED_77
      {
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved;
        /* 0x0010 */ unsigned long Channel;
        /* 0x0014 */ unsigned long TransferWidth;
      } /* size: 0x0010 */ DmaV3;
      struct // _TAG_UNNAMED_74
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Generic;
      struct // _TAG_UNNAMED_24
      {
        /* 0x0008 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct // _TAG_UNNAMED_78
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long MinBusNumber;
        /* 0x0010 */ unsigned long MaxBusNumber;
        /* 0x0014 */ unsigned long Reserved;
      } /* size: 0x0010 */ BusNumber;
      struct // _TAG_UNNAMED_79
      {
        /* 0x0008 */ unsigned long Priority;
        /* 0x000c */ unsigned long Reserved1;
        /* 0x0010 */ unsigned long Reserved2;
      } /* size: 0x000c */ ConfigData;
      struct // _TAG_UNNAMED_80
      {
        /* 0x0008 */ unsigned long Length40;
        /* 0x000c */ unsigned long Alignment40;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory40;
      struct // _TAG_UNNAMED_81
      {
        /* 0x0008 */ unsigned long Length48;
        /* 0x000c */ unsigned long Alignment48;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory48;
      struct // _TAG_UNNAMED_82
      {
        /* 0x0008 */ unsigned long Length64;
        /* 0x000c */ unsigned long Alignment64;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory64;
      struct // _TAG_UNNAMED_30
      {
        /* 0x0008 */ unsigned char Class;
        /* 0x0009 */ unsigned char Type;
        /* 0x000a */ unsigned char Reserved1;
        /* 0x000b */ unsigned char Reserved2;
        /* 0x000c */ unsigned long IdLowPart;
        /* 0x0010 */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _IO_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  /* 0x0000 */ unsigned long ListSize;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long SlotNumber;
  /* 0x0010 */ unsigned long Reserved[3];
  /* 0x001c */ unsigned long AlternativeLists;
  /* 0x0020 */ struct _IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST; /* size: 0x0048 */

typedef struct _IO_SECURITY_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0004 */ struct _ACCESS_STATE* AccessState;
  /* 0x0008 */ unsigned long DesiredAccess;
  /* 0x000c */ unsigned long FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT; /* size: 0x0010 */

typedef enum _IO_SESSION_STATE
{
  IoSessionStateCreated = 1,
  IoSessionStateInitialized = 2,
  IoSessionStateConnected = 3,
  IoSessionStateDisconnected = 4,
  IoSessionStateDisconnectedLoggedOn = 5,
  IoSessionStateLoggedOn = 6,
  IoSessionStateLoggedOff = 7,
  IoSessionStateTerminated = 8,
  IoSessionStateMax = 9,
} IO_SESSION_STATE, *PIO_SESSION_STATE;

typedef struct _IO_STACK_LOCATION
{
  /* 0x0000 */ unsigned char MajorFunction;
  /* 0x0001 */ unsigned char MinorFunction;
  /* 0x0002 */ unsigned char Flags;
  /* 0x0003 */ unsigned char Control;
  union // _TAG_UNNAMED_83
  {
    union
    {
      struct // _TAG_UNNAMED_84
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short FileAttributes;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ unsigned long EaLength;
      } /* size: 0x0010 */ Create;
      struct // _TAG_UNNAMED_85
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short Reserved;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0010 */ CreatePipe;
      struct // _TAG_UNNAMED_86
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short Reserved;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ struct _MAILSLOT_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0010 */ CreateMailslot;
      struct // _TAG_UNNAMED_87
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ Read;
      struct // _TAG_UNNAMED_87
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ Write;
      struct // _TAG_UNNAMED_88
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ struct _UNICODE_STRING* FileName;
        /* 0x000c */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0010 */ unsigned long FileIndex;
      } /* size: 0x0010 */ QueryDirectory;
      struct // _TAG_UNNAMED_89
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long CompletionFilter;
      } /* size: 0x0008 */ NotifyDirectory;
      struct // _TAG_UNNAMED_90
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
      } /* size: 0x0008 */ QueryFile;
      struct // _TAG_UNNAMED_91
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x000c */ struct _FILE_OBJECT* FileObject;
        union
        {
          struct
          {
            /* 0x0010 */ unsigned char ReplaceIfExists;
            /* 0x0011 */ unsigned char AdvanceOnly;
          }; /* size: 0x0002 */
          /* 0x0010 */ unsigned long ClusterCount;
          /* 0x0010 */ void* DeleteHandle;
        }; /* size: 0x0004 */
      } /* size: 0x0010 */ SetFile;
      struct // _TAG_UNNAMED_92
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ void* EaList;
        /* 0x000c */ unsigned long EaListLength;
        /* 0x0010 */ unsigned long EaIndex;
      } /* size: 0x0010 */ QueryEa;
      struct // _TAG_UNNAMED_93
      {
        /* 0x0004 */ unsigned long Length;
      } /* size: 0x0004 */ SetEa;
      struct // _TAG_UNNAMED_94
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FSINFOCLASS FsInformationClass;
      } /* size: 0x0008 */ QueryVolume;
      struct // _TAG_UNNAMED_94
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FSINFOCLASS FsInformationClass;
      } /* size: 0x0008 */ SetVolume;
      struct // _TAG_UNNAMED_95
      {
        /* 0x0004 */ unsigned long OutputBufferLength;
        /* 0x0008 */ unsigned long InputBufferLength;
        /* 0x000c */ unsigned long FsControlCode;
        /* 0x0010 */ void* Type3InputBuffer;
      } /* size: 0x0010 */ FileSystemControl;
      struct // _TAG_UNNAMED_96
      {
        /* 0x0004 */ union _LARGE_INTEGER* Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ LockControl;
      struct // _TAG_UNNAMED_97
      {
        /* 0x0004 */ unsigned long OutputBufferLength;
        /* 0x0008 */ unsigned long InputBufferLength;
        /* 0x000c */ unsigned long IoControlCode;
        /* 0x0010 */ void* Type3InputBuffer;
      } /* size: 0x0010 */ DeviceIoControl;
      struct // _TAG_UNNAMED_98
      {
        /* 0x0004 */ unsigned long SecurityInformation;
        /* 0x0008 */ unsigned long Length;
      } /* size: 0x0008 */ QuerySecurity;
      struct // _TAG_UNNAMED_99
      {
        /* 0x0004 */ unsigned long SecurityInformation;
        /* 0x0008 */ void* SecurityDescriptor;
      } /* size: 0x0008 */ SetSecurity;
      struct // _TAG_UNNAMED_100
      {
        /* 0x0004 */ struct _VPB* Vpb;
        /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0008 */ MountVolume;
      struct // _TAG_UNNAMED_100
      {
        /* 0x0004 */ struct _VPB* Vpb;
        /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0008 */ VerifyVolume;
      struct // _TAG_UNNAMED_101
      {
        /* 0x0004 */ struct _SCSI_REQUEST_BLOCK* Srb;
      } /* size: 0x0004 */ Scsi;
      struct // _TAG_UNNAMED_102
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ void* StartSid;
        /* 0x000c */ struct _FILE_GET_QUOTA_INFORMATION* SidList;
        /* 0x0010 */ unsigned long SidListLength;
      } /* size: 0x0010 */ QueryQuota;
      struct // _TAG_UNNAMED_93
      {
        /* 0x0004 */ unsigned long Length;
      } /* size: 0x0004 */ SetQuota;
      struct // _TAG_UNNAMED_103
      {
        /* 0x0004 */ enum _DEVICE_RELATION_TYPE Type;
      } /* size: 0x0004 */ QueryDeviceRelations;
      struct // _TAG_UNNAMED_104
      {
        /* 0x0004 */ const struct _GUID* InterfaceType;
        /* 0x0008 */ unsigned short Size;
        /* 0x000a */ unsigned short Version;
        /* 0x000c */ struct _INTERFACE* Interface;
        /* 0x0010 */ void* InterfaceSpecificData;
      } /* size: 0x0010 */ QueryInterface;
      struct // _TAG_UNNAMED_105
      {
        /* 0x0004 */ struct _DEVICE_CAPABILITIES* Capabilities;
      } /* size: 0x0004 */ DeviceCapabilities;
      struct // _TAG_UNNAMED_106
      {
        /* 0x0004 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;
      } /* size: 0x0004 */ FilterResourceRequirements;
      struct // _TAG_UNNAMED_107
      {
        /* 0x0004 */ unsigned long WhichSpace;
        /* 0x0008 */ void* Buffer;
        /* 0x000c */ unsigned long Offset;
        /* 0x0010 */ unsigned long Length;
      } /* size: 0x0010 */ ReadWriteConfig;
      struct // _TAG_UNNAMED_108
      {
        /* 0x0004 */ unsigned char Lock;
      } /* size: 0x0001 */ SetLock;
      struct // _TAG_UNNAMED_109
      {
        /* 0x0004 */ enum BUS_QUERY_ID_TYPE IdType;
      } /* size: 0x0004 */ QueryId;
      struct // _TAG_UNNAMED_110
      {
        /* 0x0004 */ enum DEVICE_TEXT_TYPE DeviceTextType;
        /* 0x0008 */ unsigned long LocaleId;
      } /* size: 0x0008 */ QueryDeviceText;
      struct // _TAG_UNNAMED_111
      {
        /* 0x0004 */ unsigned char InPath;
        /* 0x0005 */ unsigned char Reserved[3];
        /* 0x0008 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
      } /* size: 0x0008 */ UsageNotification;
      struct // _TAG_UNNAMED_112
      {
        /* 0x0004 */ enum _SYSTEM_POWER_STATE PowerState;
      } /* size: 0x0004 */ WaitWake;
      struct // _TAG_UNNAMED_113
      {
        /* 0x0004 */ struct _POWER_SEQUENCE* PowerSequence;
      } /* size: 0x0004 */ PowerSequence;
      struct // _TAG_UNNAMED_114
      {
        union
        {
          /* 0x0004 */ unsigned long SystemContext;
          /* 0x0004 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
        }; /* size: 0x0004 */
        /* 0x0008 */ enum _POWER_STATE_TYPE Type;
        /* 0x000c */ union _POWER_STATE State;
        /* 0x0010 */ enum POWER_ACTION ShutdownType;
      } /* size: 0x0010 */ Power;
      struct // _TAG_UNNAMED_115
      {
        /* 0x0004 */ struct _CM_RESOURCE_LIST* AllocatedResources;
        /* 0x0008 */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
      } /* size: 0x0008 */ StartDevice;
      struct // _TAG_UNNAMED_116
      {
        /* 0x0004 */ unsigned long ProviderId;
        /* 0x0008 */ void* DataPath;
        /* 0x000c */ unsigned long BufferSize;
        /* 0x0010 */ void* Buffer;
      } /* size: 0x0010 */ WMI;
      struct // _TAG_UNNAMED_117
      {
        /* 0x0004 */ void* Argument1;
        /* 0x0008 */ void* Argument2;
        /* 0x000c */ void* Argument3;
        /* 0x0010 */ void* Argument4;
      } /* size: 0x0010 */ Others;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Parameters;
  /* 0x0014 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ struct _FILE_OBJECT* FileObject;
  /* 0x001c */ void* CompletionRoutine /* function */;
  /* 0x0020 */ void* Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION; /* size: 0x0024 */

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    /* 0x0000 */ long Status;
    /* 0x0000 */ void* Pointer;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; /* size: 0x0008 */

typedef struct _IO_TIMER
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short TimerFlag;
  /* 0x0004 */ struct _LIST_ENTRY TimerList;
  /* 0x000c */ void* TimerRoutine /* function */;
  /* 0x0010 */ void* Context;
  /* 0x0014 */ struct _DEVICE_OBJECT* DeviceObject;
} IO_TIMER, *PIO_TIMER; /* size: 0x0018 */

typedef struct _IO_WORKITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ void* Routine /* function */;
  /* 0x0014 */ void* IoObject;
  /* 0x0018 */ void* Context;
  /* 0x001c */ void* WorkingOnBehalfClient;
  /* 0x0020 */ unsigned long Type;
  /* 0x0024 */ struct _GUID ActivityId;
} IO_WORKITEM, *PIO_WORKITEM; /* size: 0x0034 */

typedef enum _IPI_TYPE
{
  IpiAffinity = 0,
  IpiAllButSelf = 1,
  IpiAll = 2,
} IPI_TYPE, *PIPI_TYPE;

typedef struct _IRP
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _MDL* MdlAddress;
  /* 0x0008 */ unsigned long Flags;
  union // _TAG_UNNAMED_118
  {
    union
    {
      /* 0x000c */ struct _IRP* MasterIrp;
      /* 0x000c */ long IrpCount;
      /* 0x000c */ void* SystemBuffer;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ AssociatedIrp;
  /* 0x0010 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0018 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0020 */ char RequestorMode;
  /* 0x0021 */ unsigned char PendingReturned;
  /* 0x0022 */ char StackCount;
  /* 0x0023 */ char CurrentLocation;
  /* 0x0024 */ unsigned char Cancel;
  /* 0x0025 */ unsigned char CancelIrql;
  /* 0x0026 */ char ApcEnvironment;
  /* 0x0027 */ unsigned char AllocationFlags;
  /* 0x0028 */ struct _IO_STATUS_BLOCK* UserIosb;
  /* 0x002c */ struct _KEVENT* UserEvent;
  union // _TAG_UNNAMED_119
  {
    union
    {
      struct // _TAG_UNNAMED_120
      {
        union
        {
          /* 0x0030 */ void* UserApcRoutine /* function */;
          /* 0x0030 */ void* IssuingProcess;
        }; /* size: 0x0004 */
        /* 0x0034 */ void* UserApcContext;
      } /* size: 0x0008 */ AsynchronousParameters;
      /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Overlay;
  /* 0x0038 */ void* CancelRoutine /* function */;
  /* 0x003c */ void* UserBuffer;
  union // _TAG_UNNAMED_121
  {
    union
    {
      struct // _TAG_UNNAMED_122
      {
        union
        {
          /* 0x0040 */ struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
          /* 0x0040 */ void* DriverContext[4];
        }; /* size: 0x0010 */
        /* 0x0050 */ struct _ETHREAD* Thread;
        /* 0x0054 */ char* AuxiliaryBuffer;
        /* 0x0058 */ struct _LIST_ENTRY ListEntry;
        union
        {
          /* 0x0060 */ struct _IO_STACK_LOCATION* CurrentStackLocation;
          /* 0x0060 */ unsigned long PacketType;
        }; /* size: 0x0004 */
        /* 0x0064 */ struct _FILE_OBJECT* OriginalFileObject;
        /* 0x0068 */ void* IrpExtension;
      } /* size: 0x002c */ Overlay;
      /* 0x0040 */ struct _KAPC Apc;
      /* 0x0040 */ void* CompletionKey;
    }; /* size: 0x0030 */
  } /* size: 0x0030 */ Tail;
} IRP, *PIRP; /* size: 0x0070 */

typedef enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
} IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef struct _ISRDPCSTATS
{
  /* 0x0000 */ unsigned __int64 IsrTime;
  /* 0x0008 */ unsigned __int64 IsrTimeStart;
  /* 0x0010 */ unsigned __int64 IsrCount;
  /* 0x0018 */ unsigned __int64 DpcTime;
  /* 0x0020 */ unsigned __int64 DpcTimeStart;
  /* 0x0028 */ unsigned __int64 DpcCount;
  /* 0x0030 */ unsigned char IsrActive;
  /* 0x0031 */ unsigned char Reserved[15];
} ISRDPCSTATS, *PISRDPCSTATS; /* size: 0x0040 */

typedef enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectWakeInformation = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectClearEvent = 25,
  JobObjectInterferenceInformation = 26,
  JobObjectClearPeakJobMemoryUsed = 27,
  JobObjectMemoryUsageInformation = 28,
  JobObjectSharedCommit = 29,
  JobObjectContainerId = 30,
  JobObjectIoRateControlInformation = 31,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  JobObjectReserved8Information = 25,
  JobObjectReserved9Information = 26,
  JobObjectReserved10Information = 27,
  JobObjectReserved11Information = 28,
  JobObjectReserved12Information = 29,
  JobObjectReserved13Information = 30,
  JobObjectReserved14Information = 31,
  JobObjectNetRateControlInformation = 32,
  JobObjectNotificationLimitInformation2 = 33,
  JobObjectLimitViolationInformation2 = 34,
  JobObjectCreateSilo = 35,
  JobObjectSiloBasicInformation = 36,
  JobObjectSiloRootDirectory = 37,
  JobObjectServerSiloBasicInformation = 38,
  JobObjectServerSiloServiceSessionId = 39,
  JobObjectServerSiloInitialize = 40,
  JobObjectServerSiloDefaultCompartmentId = 41,
  MaxJobObjectInfoClass = 42,
} JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef struct _JOBOBJECT_WAKE_FILTER
{
  /* 0x0000 */ unsigned long HighEdgeFilter;
  /* 0x0004 */ unsigned long LowEdgeFilter;
} JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER; /* size: 0x0008 */

struct _JOB_ACCESS_STATE;

struct _JOB_CPU_RATE_CONTROL;

struct _JOB_IO_RATE_CONTROL;

struct _JOB_NET_RATE_CONTROL;

struct _JOB_NOTIFICATION_INFORMATION;

typedef struct _KAFFINITY_ENUMERATION_CONTEXT
{
  /* 0x0000 */ struct _KAFFINITY_EX* Affinity;
  /* 0x0004 */ unsigned long CurrentMask;
  /* 0x0008 */ unsigned short CurrentIndex;
  /* 0x000a */ char __PADDING__[2];
} KAFFINITY_ENUMERATION_CONTEXT, *PKAFFINITY_ENUMERATION_CONTEXT; /* size: 0x000c */

typedef struct _KAFFINITY_EX
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned long Bitmap[1];
} KAFFINITY_EX, *PKAFFINITY_EX; /* size: 0x000c */

typedef union _KALPC_DIRECT_EVENT
{
  union
  {
    /* 0x0000 */ unsigned long Event;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Referenced : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KALPC_DIRECT_EVENT, *PKALPC_DIRECT_EVENT; /* size: 0x0004 */

typedef struct _KALPC_HANDLE_DATA
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ObjectType;
  /* 0x0008 */ struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext;
} KALPC_HANDLE_DATA, *PKALPC_HANDLE_DATA; /* size: 0x0020 */

typedef struct _KALPC_MESSAGE
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0008 */ struct _ALPC_PORT* PortQueue;
  /* 0x000c */ struct _ALPC_PORT* OwnerPort;
  /* 0x0010 */ struct _ETHREAD* WaitingThread;
  union // _TAG_UNNAMED_123
  {
    union
    {
      struct // _TAG_UNNAMED_124
      {
        struct /* bitfield */
        {
          /* 0x0014 */ unsigned long QueueType : 3; /* bit position: 0 */
          /* 0x0014 */ unsigned long QueuePortType : 4; /* bit position: 3 */
          /* 0x0014 */ unsigned long Canceled : 1; /* bit position: 7 */
          /* 0x0014 */ unsigned long Ready : 1; /* bit position: 8 */
          /* 0x0014 */ unsigned long ReleaseMessage : 1; /* bit position: 9 */
          /* 0x0014 */ unsigned long SharedQuota : 1; /* bit position: 10 */
          /* 0x0014 */ unsigned long ReplyWaitReply : 1; /* bit position: 11 */
          /* 0x0014 */ unsigned long OwnerPortReference : 1; /* bit position: 12 */
          /* 0x0014 */ unsigned long ReserveReference : 1; /* bit position: 13 */
          /* 0x0014 */ unsigned long ReceiverReference : 1; /* bit position: 14 */
          /* 0x0014 */ unsigned long ViewAttributeRetrieved : 1; /* bit position: 15 */
          /* 0x0014 */ unsigned long InDispatch : 1; /* bit position: 16 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x0014 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0018 */ long SequenceNo;
  union
  {
    /* 0x001c */ struct _EPROCESS* QuotaProcess;
    /* 0x001c */ void* QuotaBlock;
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _ALPC_PORT* CancelSequencePort;
  /* 0x0024 */ struct _ALPC_PORT* CancelQueuePort;
  /* 0x0028 */ long CancelSequenceNo;
  /* 0x002c */ struct _LIST_ENTRY CancelListEntry;
  /* 0x0034 */ struct _KALPC_RESERVE* Reserve;
  /* 0x0038 */ struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;
  /* 0x0058 */ void* DataUserVa;
  /* 0x005c */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x0060 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x0064 */ struct _ETHREAD* ServerThread;
  /* 0x0068 */ void* WakeReference;
  /* 0x006c */ void* ExtensionBuffer;
  /* 0x0070 */ unsigned long ExtensionBufferSize;
  /* 0x0078 */ struct _PORT_MESSAGE PortMessage;
} KALPC_MESSAGE, *PKALPC_MESSAGE; /* size: 0x0090 */

typedef struct _KALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ void* ClientContext;
  /* 0x0004 */ void* ServerContext;
  /* 0x0008 */ void* PortContext;
  /* 0x000c */ void* CancelPortContext;
  /* 0x0010 */ struct _KALPC_SECURITY_DATA* SecurityData;
  /* 0x0014 */ struct _KALPC_VIEW* View;
  /* 0x0018 */ struct _KALPC_HANDLE_DATA* HandleData;
  /* 0x001c */ union _KALPC_DIRECT_EVENT DirectEvent;
} KALPC_MESSAGE_ATTRIBUTES, *PKALPC_MESSAGE_ATTRIBUTES; /* size: 0x0020 */

typedef struct _KALPC_REGION
{
  /* 0x0000 */ struct _LIST_ENTRY RegionListEntry;
  /* 0x0008 */ struct _KALPC_SECTION* Section;
  /* 0x000c */ unsigned long Offset;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long ViewSize;
  union // _TAG_UNNAMED_125
  {
    struct // _TAG_UNNAMED_126
    {
      /* 0x0018 */ unsigned long Secure : 1; /* bit position: 0 */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x001c */ unsigned long NumberOfViews;
  /* 0x0020 */ struct _LIST_ENTRY ViewListHead;
  /* 0x0028 */ struct _KALPC_VIEW* ReadOnlyView;
  /* 0x002c */ struct _KALPC_VIEW* ReadWriteView;
} KALPC_REGION, *PKALPC_REGION; /* size: 0x0030 */

typedef struct _KALPC_RESERVE
{
  /* 0x0000 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0004 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0008 */ void* Handle;
  /* 0x000c */ struct _KALPC_MESSAGE* Message;
  /* 0x0010 */ long Active;
} KALPC_RESERVE, *PKALPC_RESERVE; /* size: 0x0014 */

typedef struct _KALPC_SECTION
{
  /* 0x0000 */ void* SectionObject;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x000c */ void* SectionHandle;
  /* 0x0010 */ struct _EPROCESS* OwnerProcess;
  /* 0x0014 */ struct _ALPC_PORT* OwnerPort;
  union // _TAG_UNNAMED_127
  {
    struct // _TAG_UNNAMED_128
    {
      struct /* bitfield */
      {
        /* 0x0018 */ unsigned long Internal : 1; /* bit position: 0 */
        /* 0x0018 */ unsigned long Secure : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x001c */ unsigned long NumberOfRegions;
  /* 0x0020 */ struct _LIST_ENTRY RegionListHead;
} KALPC_SECTION, *PKALPC_SECTION; /* size: 0x0028 */

typedef struct _KALPC_SECURITY_DATA
{
  /* 0x0000 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0004 */ void* ContextHandle;
  /* 0x0008 */ struct _EPROCESS* OwningProcess;
  /* 0x000c */ struct _ALPC_PORT* OwnerPort;
  /* 0x0010 */ struct _SECURITY_CLIENT_CONTEXT DynamicSecurity;
  union // _TAG_UNNAMED_129
  {
    struct // _TAG_UNNAMED_130
    {
      struct /* bitfield */
      {
        /* 0x004c */ unsigned long Revoked : 1; /* bit position: 0 */
        /* 0x004c */ unsigned long Impersonated : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
} KALPC_SECURITY_DATA, *PKALPC_SECURITY_DATA; /* size: 0x0050 */

typedef struct _KALPC_VIEW
{
  /* 0x0000 */ struct _LIST_ENTRY ViewListEntry;
  /* 0x0008 */ struct _KALPC_REGION* Region;
  /* 0x000c */ struct _ALPC_PORT* OwnerPort;
  /* 0x0010 */ struct _EPROCESS* OwnerProcess;
  /* 0x0014 */ void* Address;
  /* 0x0018 */ unsigned long Size;
  /* 0x001c */ void* SecureViewHandle;
  /* 0x0020 */ void* WriteAccessHandle;
  union // _TAG_UNNAMED_131
  {
    struct // _TAG_UNNAMED_132
    {
      struct /* bitfield */
      {
        /* 0x0024 */ unsigned long WriteAccess : 1; /* bit position: 0 */
        /* 0x0024 */ unsigned long AutoRelease : 1; /* bit position: 1 */
        /* 0x0024 */ unsigned long ForceUnlink : 1; /* bit position: 2 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x0028 */ unsigned long NumberOfOwnerMessages;
  /* 0x002c */ struct _LIST_ENTRY ProcessViewListEntry;
} KALPC_VIEW, *PKALPC_VIEW; /* size: 0x0034 */

typedef struct _KAPC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char SpareByte0;
  /* 0x0002 */ unsigned char Size;
  /* 0x0003 */ unsigned char SpareByte1;
  /* 0x0004 */ unsigned long SpareLong0;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x000c */ struct _LIST_ENTRY ApcListEntry;
  union
  {
    struct
    {
      /* 0x0014 */ void* KernelRoutine /* function */;
      /* 0x0018 */ void* RundownRoutine /* function */;
      /* 0x001c */ void* NormalRoutine /* function */;
    }; /* size: 0x000c */
    /* 0x0014 */ void* Reserved[3];
  }; /* size: 0x000c */
  /* 0x0020 */ void* NormalContext;
  /* 0x0024 */ void* SystemArgument1;
  /* 0x0028 */ void* SystemArgument2;
  /* 0x002c */ char ApcStateIndex;
  /* 0x002d */ char ApcMode;
  /* 0x002e */ unsigned char Inserted;
  /* 0x002f */ char __PADDING__[1];
} KAPC, *PKAPC; /* size: 0x0030 */

typedef struct _KAPC_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY ApcListHead[2];
  /* 0x0010 */ struct _KPROCESS* Process;
  union
  {
    /* 0x0014 */ unsigned char InProgressFlags;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned char KernelApcInProgress : 1; /* bit position: 0 */
      /* 0x0014 */ unsigned char SpecialApcInProgress : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0015 */ unsigned char KernelApcPending;
  /* 0x0016 */ unsigned char UserApcPending;
  /* 0x0017 */ char __PADDING__[1];
} KAPC_STATE, *PKAPC_STATE; /* size: 0x0018 */

typedef struct _KDEVICE_QUEUE
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _LIST_ENTRY DeviceListHead;
  /* 0x000c */ unsigned long Lock;
  /* 0x0010 */ unsigned char Busy;
  /* 0x0011 */ char __PADDING__[3];
} KDEVICE_QUEUE, *PKDEVICE_QUEUE; /* size: 0x0014 */

typedef struct _KDEVICE_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceListEntry;
  /* 0x0008 */ unsigned long SortKey;
  /* 0x000c */ unsigned char Inserted;
  /* 0x000d */ char __PADDING__[3];
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY; /* size: 0x0010 */

typedef struct _KDPC
{
  union
  {
    /* 0x0000 */ unsigned long TargetInfoAsUlong;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Importance;
      /* 0x0002 */ volatile unsigned short Number;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY DpcListEntry;
  /* 0x0008 */ unsigned long ProcessorHistory;
  /* 0x000c */ void* DeferredRoutine /* function */;
  /* 0x0010 */ void* DeferredContext;
  /* 0x0014 */ void* SystemArgument1;
  /* 0x0018 */ void* SystemArgument2;
  /* 0x001c */ void* DpcData;
} KDPC, *PKDPC; /* size: 0x0020 */

typedef struct _KDPC_DATA
{
  /* 0x0000 */ struct _KDPC_LIST DpcList;
  /* 0x0008 */ unsigned long DpcLock;
  /* 0x000c */ volatile long DpcQueueDepth;
  /* 0x0010 */ unsigned long DpcCount;
  /* 0x0014 */ struct _KDPC* volatile ActiveDpc;
} KDPC_DATA, *PKDPC_DATA; /* size: 0x0018 */

typedef struct _KDPC_LIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListHead;
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY* LastEntry;
} KDPC_LIST, *PKDPC_LIST; /* size: 0x0008 */

typedef struct _KENLISTMENT
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0018 */ struct _GUID EnlistmentId;
  /* 0x0028 */ struct _KMUTANT Mutex;
  /* 0x0048 */ struct _LIST_ENTRY NextSameTx;
  /* 0x0050 */ struct _LIST_ENTRY NextSameRm;
  /* 0x0058 */ struct _KRESOURCEMANAGER* ResourceManager;
  /* 0x005c */ struct _KTRANSACTION* Transaction;
  /* 0x0060 */ enum _KENLISTMENT_STATE State;
  /* 0x0064 */ unsigned long Flags;
  /* 0x0068 */ unsigned long NotificationMask;
  /* 0x006c */ void* Key;
  /* 0x0070 */ unsigned long KeyRefCount;
  /* 0x0074 */ void* RecoveryInformation;
  /* 0x0078 */ unsigned long RecoveryInformationLength;
  /* 0x007c */ void* DynamicNameInformation;
  /* 0x0080 */ unsigned long DynamicNameInformationLength;
  /* 0x0084 */ struct _KTMNOTIFICATION_PACKET* FinalNotification;
  /* 0x0088 */ struct _KENLISTMENT* SupSubEnlistment;
  /* 0x008c */ void* SupSubEnlHandle;
  /* 0x0090 */ void* SubordinateTxHandle;
  /* 0x0094 */ struct _GUID CrmEnlistmentEnId;
  /* 0x00a4 */ struct _GUID CrmEnlistmentTmId;
  /* 0x00b4 */ struct _GUID CrmEnlistmentRmId;
  /* 0x00c4 */ unsigned long NextHistory;
  /* 0x00c8 */ struct _KENLISTMENT_HISTORY History[20];
} KENLISTMENT, *PKENLISTMENT; /* size: 0x0168 */

typedef struct _KENLISTMENT_HISTORY
{
  /* 0x0000 */ unsigned long Notification;
  /* 0x0004 */ enum _KENLISTMENT_STATE NewState;
} KENLISTMENT_HISTORY, *PKENLISTMENT_HISTORY; /* size: 0x0008 */

typedef enum _KENLISTMENT_STATE
{
  KEnlistmentUninitialized = 0,
  KEnlistmentActive = 256,
  KEnlistmentPreparing = 257,
  KEnlistmentPrepared = 258,
  KEnlistmentInDoubt = 259,
  KEnlistmentCommitted = 260,
  KEnlistmentCommittedNotify = 261,
  KEnlistmentCommitRequested = 262,
  KEnlistmentAborted = 263,
  KEnlistmentDelegated = 264,
  KEnlistmentDelegatedDisconnected = 265,
  KEnlistmentPrePreparing = 266,
  KEnlistmentForgotten = 267,
  KEnlistmentRecovering = 268,
  KEnlistmentAborting = 269,
  KEnlistmentReadOnly = 270,
  KEnlistmentOutcomeUnavailable = 271,
  KEnlistmentOffline = 272,
  KEnlistmentPrePrepared = 273,
  KEnlistmentInitialized = 274,
} KENLISTMENT_STATE, *PKENLISTMENT_STATE;

typedef struct _KENTROPY_TIMING_STATE
{
  /* 0x0000 */ unsigned long EntropyCount;
  /* 0x0004 */ unsigned long Buffer[64];
  /* 0x0104 */ struct _KDPC Dpc;
  /* 0x0124 */ unsigned long LastDeliveredBuffer;
} KENTROPY_TIMING_STATE, *PKENTROPY_TIMING_STATE; /* size: 0x0128 */

typedef enum _KERNEL_STACK_LIMITS
{
  BugcheckStackLimits = 0,
  DPCStackLimits = 1,
  ExpandedStackLimits = 2,
  NormalStackLimits = 3,
  Win32kStackLimits = 4,
  SwapBusyStackLimits = 5,
  IsrStackLimits = 6,
  MaximumStackLimits = 7,
} KERNEL_STACK_LIMITS, *PKERNEL_STACK_LIMITS;

typedef struct _KERNEL_STACK_SEGMENT
{
  /* 0x0000 */ unsigned long StackBase;
  /* 0x0004 */ unsigned long StackLimit;
  /* 0x0008 */ unsigned long KernelStack;
  /* 0x000c */ unsigned long InitialStack;
} KERNEL_STACK_SEGMENT, *PKERNEL_STACK_SEGMENT; /* size: 0x0010 */

typedef struct _KEVENT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; /* size: 0x0010 */

typedef union _KEXECUTE_OPTIONS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ExecuteDisable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ExecuteEnable : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char DisableThunkEmulation : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char Permanent : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char ExecuteDispatchEnable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char ImageDispatchEnable : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char DisableExceptionChainValidation : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Spare : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ volatile unsigned char ExecuteOptions;
    /* 0x0000 */ unsigned char ExecuteOptionsNV;
  }; /* size: 0x0001 */
} KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS; /* size: 0x0001 */

typedef struct _KGATE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KGATE, *PKGATE; /* size: 0x0010 */

typedef struct _KGDTENTRY
{
  /* 0x0000 */ unsigned short LimitLow;
  /* 0x0002 */ unsigned short BaseLow;
  union // _TAG_UNNAMED_133
  {
    union
    {
      struct // _TAG_UNNAMED_134
      {
        /* 0x0004 */ unsigned char BaseMid;
        /* 0x0005 */ unsigned char Flags1;
        /* 0x0006 */ unsigned char Flags2;
        /* 0x0007 */ unsigned char BaseHi;
      } /* size: 0x0004 */ Bytes;
      struct // _TAG_UNNAMED_135
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long BaseMid : 8; /* bit position: 0 */
          /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
          /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
          /* 0x0004 */ unsigned long Pres : 1; /* bit position: 15 */
          /* 0x0004 */ unsigned long LimitHi : 4; /* bit position: 16 */
          /* 0x0004 */ unsigned long Sys : 1; /* bit position: 20 */
          /* 0x0004 */ unsigned long Reserved_0 : 1; /* bit position: 21 */
          /* 0x0004 */ unsigned long Default_Big : 1; /* bit position: 22 */
          /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
          /* 0x0004 */ unsigned long BaseHi : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ Bits;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighWord;
} KGDTENTRY, *PKGDTENTRY; /* size: 0x0008 */

typedef enum _KHETERO_CPU_POLICY
{
  KHeteroCpuPolicyAll = 0,
  KHeteroCpuPolicyLarge = 1,
  KHeteroCpuPolicyLargeOrIdle = 2,
  KHeteroCpuPolicySmall = 3,
  KHeteroCpuPolicySmallOrIdle = 4,
  KHeteroCpuPolicyDynamic = 5,
  KHeteroCpuPolicyStaticMax = 5,
  KHeteroCpuPolicyBiasedSmall = 6,
  KHeteroCpuPolicyBiasedLarge = 7,
  KHeteroCpuPolicyDefault = 8,
  KHeteroCpuPolicyMax = 9,
} KHETERO_CPU_POLICY, *PKHETERO_CPU_POLICY;

typedef struct _KHETERO_PROCESSOR_SET
{
  /* 0x0000 */ unsigned long PreferredMask;
  /* 0x0004 */ unsigned long AvailableMask;
} KHETERO_PROCESSOR_SET, *PKHETERO_PROCESSOR_SET; /* size: 0x0008 */

typedef struct _KIDTENTRY
{
  /* 0x0000 */ unsigned short Offset;
  /* 0x0002 */ unsigned short Selector;
  /* 0x0004 */ unsigned short Access;
  /* 0x0006 */ unsigned short ExtendedOffset;
} KIDTENTRY, *PKIDTENTRY; /* size: 0x0008 */

typedef struct _KINTERRUPT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _LIST_ENTRY InterruptListEntry;
  /* 0x000c */ void* ServiceRoutine /* function */;
  /* 0x0010 */ void* MessageServiceRoutine /* function */;
  /* 0x0014 */ unsigned long MessageIndex;
  /* 0x0018 */ void* ServiceContext;
  /* 0x001c */ unsigned long SpinLock;
  /* 0x0020 */ unsigned long TickCount;
  /* 0x0024 */ unsigned long* ActualLock;
  /* 0x0028 */ void* DispatchAddress /* function */;
  /* 0x002c */ unsigned long Vector;
  /* 0x0030 */ unsigned char Irql;
  /* 0x0031 */ unsigned char SynchronizeIrql;
  /* 0x0032 */ unsigned char FloatingSave;
  /* 0x0033 */ unsigned char Connected;
  /* 0x0034 */ unsigned long Number;
  /* 0x0038 */ unsigned char ShareVector;
  /* 0x0039 */ unsigned char EmulateActiveBoth;
  /* 0x003a */ unsigned short ActiveCount;
  /* 0x003c */ long InternalState;
  /* 0x0040 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0044 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0048 */ unsigned long ServiceCount;
  /* 0x004c */ unsigned long DispatchCount;
  /* 0x0050 */ struct _KEVENT* PassiveEvent;
  /* 0x0054 */ void* DisconnectData;
  /* 0x0058 */ struct _KTHREAD* volatile ServiceThread;
  /* 0x005c */ struct _INTERRUPT_CONNECTION_DATA* ConnectionData;
  /* 0x0060 */ void* IntTrackEntry;
  /* 0x0068 */ struct _ISRDPCSTATS IsrDpcStats;
  /* 0x00a8 */ void* RedirectObject;
  /* 0x00ac */ long __PADDING__[1];
} KINTERRUPT, *PKINTERRUPT; /* size: 0x00b0 */

typedef enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
} KINTERRUPT_MODE, *PKINTERRUPT_MODE;

typedef enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
  InterruptActiveBothTriggerLow = 3,
  InterruptActiveBothTriggerHigh = 4,
} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef struct _KLDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0008 */ void* ExceptionTable;
  /* 0x000c */ unsigned long ExceptionTableSize;
  /* 0x0010 */ void* GpValue;
  /* 0x0014 */ struct _NON_PAGED_DEBUG_INFO* NonPagedDebugInfo;
  /* 0x0018 */ void* DllBase;
  /* 0x001c */ void* EntryPoint;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ struct _UNICODE_STRING FullDllName;
  /* 0x002c */ struct _UNICODE_STRING BaseDllName;
  /* 0x0034 */ unsigned long Flags;
  /* 0x0038 */ unsigned short LoadCount;
  union // _TAG_UNNAMED_136
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x003a */ unsigned short SignatureLevel : 4; /* bit position: 0 */
        /* 0x003a */ unsigned short SignatureType : 3; /* bit position: 4 */
        /* 0x003a */ unsigned short Unused : 9; /* bit position: 7 */
      }; /* bitfield */
      /* 0x003a */ unsigned short EntireField;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ u1;
  /* 0x003c */ void* SectionPointer;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned long CoverageSectionSize;
  /* 0x0048 */ void* CoverageSection;
  /* 0x004c */ void* LoadedImports;
  /* 0x0050 */ void* Spare;
  /* 0x0054 */ unsigned long SizeOfImageNotRounded;
  /* 0x0058 */ unsigned long TimeDateStamp;
} KLDR_DATA_TABLE_ENTRY, *PKLDR_DATA_TABLE_ENTRY; /* size: 0x005c */

typedef struct _KLOCK_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeListEntry;
  }; /* size: 0x000c */
  union
  {
    /* 0x000c */ unsigned long EntryFlags;
    struct
    {
      /* 0x000c */ unsigned char EntryOffset;
      union
      {
        /* 0x000d */ unsigned char ThreadLocalFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x000d */ unsigned char WaitingBit : 1; /* bit position: 0 */
            /* 0x000d */ unsigned char Spare0 : 7; /* bit position: 1 */
          }; /* bitfield */
          union
          {
            /* 0x000e */ unsigned char AcquiredByte;
            struct
            {
              /* 0x000e */ unsigned char AcquiredBit : 1; /* bit position: 0 */
              union
              {
                /* 0x000f */ unsigned char CrossThreadFlags;
                struct /* bitfield */
                {
                  /* 0x000f */ unsigned char HeadNodeBit : 1; /* bit position: 0 */
                  /* 0x000f */ unsigned char IoPriorityBit : 1; /* bit position: 1 */
                  /* 0x000f */ unsigned char Spare1 : 6; /* bit position: 2 */
                }; /* bitfield */
              }; /* size: 0x0001 */
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long StaticState : 8; /* bit position: 0 */
      /* 0x000c */ unsigned long AllFlags : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0010 */ struct _KLOCK_ENTRY_LOCK_STATE LockState;
    /* 0x0010 */ void* volatile LockUnsafe;
    struct
    {
      /* 0x0010 */ volatile unsigned char CrossThreadReleasableAndBusyByte;
      /* 0x0011 */ unsigned char Reserved[2];
      /* 0x0013 */ volatile unsigned char InTreeByte;
      union
      {
        /* 0x0014 */ void* SessionState;
        /* 0x0014 */ unsigned long SessionId;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    struct
    {
      /* 0x0018 */ struct _RTL_RB_TREE OwnerTree;
      /* 0x0020 */ struct _RTL_RB_TREE WaiterTree;
    }; /* size: 0x0010 */
    /* 0x0018 */ char CpuPriorityKey;
  }; /* size: 0x0010 */
  /* 0x0028 */ unsigned long EntryLock;
  union
  {
    /* 0x002c */ unsigned short AllBoosts;
    struct /* bitfield */
    {
      /* 0x002c */ unsigned short IoBoost : 1; /* bit position: 0 */
      /* 0x002c */ unsigned short CpuBoostsBitmap : 15; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x002e */ unsigned short IoNormalPriorityWaiterCount;
} KLOCK_ENTRY, *PKLOCK_ENTRY; /* size: 0x0030 */

typedef struct _KLOCK_ENTRY_LOCK_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long CrossThreadReleasable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Busy : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 2 */
      /* 0x0000 */ unsigned long InTree : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ void* LockState;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ void* SessionState;
    /* 0x0004 */ unsigned long SessionId;
  }; /* size: 0x0004 */
} KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE; /* size: 0x0008 */

typedef struct _KLOCK_QUEUE_HANDLE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE LockQueue;
  /* 0x0008 */ unsigned char OldIrql;
  /* 0x0009 */ char __PADDING__[3];
} KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE; /* size: 0x000c */

typedef struct _KMUTANT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY MutantListEntry;
  /* 0x0018 */ struct _KTHREAD* OwnerThread;
  /* 0x001c */ unsigned char Abandoned;
  /* 0x001d */ unsigned char ApcDisable;
  /* 0x001e */ char __PADDING__[2];
} KMUTANT, *PKMUTANT; /* size: 0x0020 */

typedef struct _KNODE
{
  /* 0x0000 */ unsigned long IdleNonParkedCpuSet;
  /* 0x0004 */ unsigned long IdleSmtSet;
  /* 0x0008 */ unsigned long IdleCpuSet;
  /* 0x0040 */ unsigned long DeepIdleSet;
  /* 0x0044 */ unsigned long IdleConstrainedSet;
  /* 0x0048 */ unsigned long NonParkedSet;
  /* 0x004c */ long ParkLock;
  /* 0x0050 */ unsigned long Seed;
  /* 0x0080 */ unsigned long SiblingMask;
  union
  {
    /* 0x0084 */ struct _GROUP_AFFINITY Affinity;
    struct
    {
      /* 0x0084 */ unsigned char AffinityFill[6];
      /* 0x008a */ unsigned short NodeNumber;
      /* 0x008c */ unsigned short PrimaryNodeNumber;
      /* 0x008e */ unsigned char Stride;
      /* 0x008f */ unsigned char Spare0;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
  /* 0x0090 */ unsigned long SharedReadyQueueLeaders;
  /* 0x0094 */ unsigned long ProximityId;
  /* 0x0098 */ unsigned long Lowest;
  /* 0x009c */ unsigned long Highest;
  /* 0x00a0 */ unsigned char MaximumProcessors;
  /* 0x00a1 */ struct _flags Flags;
  /* 0x00a2 */ unsigned char Spare10;
  /* 0x00a4 */ struct _KHETERO_PROCESSOR_SET HeteroSets[5];
  /* 0x00cc */ long __PADDING__[13];
} KNODE, *PKNODE; /* size: 0x0100 */

typedef enum _KOBJECTS
{
  EventNotificationObject = 0,
  EventSynchronizationObject = 1,
  MutantObject = 2,
  ProcessObject = 3,
  QueueObject = 4,
  SemaphoreObject = 5,
  ThreadObject = 6,
  GateObject = 7,
  TimerNotificationObject = 8,
  TimerSynchronizationObject = 9,
  Spare2Object = 10,
  Spare3Object = 11,
  Spare4Object = 12,
  Spare5Object = 13,
  Spare6Object = 14,
  Spare7Object = 15,
  Spare8Object = 16,
  ProfileCallbackObject = 17,
  ApcObject = 18,
  DpcObject = 19,
  DeviceQueueObject = 20,
  PriQueueObject = 21,
  InterruptObject = 22,
  ProfileObject = 23,
  Timer2NotificationObject = 24,
  Timer2SynchronizationObject = 25,
  ThreadedDpcObject = 26,
  MaximumKernelObject = 27,
} KOBJECTS, *PKOBJECTS;

typedef struct _KPCR
{
  union
  {
    /* 0x0000 */ struct _NT_TIB NtTib;
    struct
    {
      /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Used_ExceptionList;
      /* 0x0004 */ void* Used_StackBase;
      /* 0x0008 */ unsigned long MxCsr;
      /* 0x000c */ void* TssCopy;
      /* 0x0010 */ unsigned long ContextSwitches;
      /* 0x0014 */ unsigned long SetMemberCopy;
      /* 0x0018 */ void* Used_Self;
    }; /* size: 0x001c */
  }; /* size: 0x001c */
  /* 0x001c */ struct _KPCR* SelfPcr;
  /* 0x0020 */ struct _KPRCB* Prcb;
  /* 0x0024 */ unsigned char Irql;
  /* 0x0028 */ unsigned long IRR;
  /* 0x002c */ unsigned long IrrActive;
  /* 0x0030 */ unsigned long IDR;
  /* 0x0034 */ void* KdVersionBlock;
  /* 0x0038 */ struct _KIDTENTRY* IDT;
  /* 0x003c */ struct _KGDTENTRY* GDT;
  /* 0x0040 */ struct _KTSS* TSS;
  /* 0x0044 */ unsigned short MajorVersion;
  /* 0x0046 */ unsigned short MinorVersion;
  /* 0x0048 */ unsigned long SetMember;
  /* 0x004c */ unsigned long StallScaleFactor;
  /* 0x0050 */ unsigned char SpareUnused;
  /* 0x0051 */ unsigned char Number;
  /* 0x0052 */ unsigned char Spare0;
  /* 0x0053 */ unsigned char SecondLevelCacheAssociativity;
  /* 0x0054 */ unsigned long VdmAlert;
  /* 0x0058 */ unsigned long KernelReserved[14];
  /* 0x0090 */ unsigned long SecondLevelCacheSize;
  /* 0x0094 */ unsigned long HalReserved[16];
  /* 0x00d4 */ unsigned long InterruptMode;
  /* 0x00d8 */ unsigned char Spare1;
  /* 0x00dc */ unsigned long KernelReserved2[17];
  /* 0x0120 */ struct _KPRCB PrcbData;
} KPCR, *PKPCR; /* size: 0x4a20 */

typedef struct _KPRCB
{
  /* 0x0000 */ unsigned short MinorVersion;
  /* 0x0002 */ unsigned short MajorVersion;
  /* 0x0004 */ struct _KTHREAD* CurrentThread;
  /* 0x0008 */ struct _KTHREAD* NextThread;
  /* 0x000c */ struct _KTHREAD* IdleThread;
  /* 0x0010 */ unsigned char LegacyNumber;
  /* 0x0011 */ unsigned char NestingLevel;
  /* 0x0012 */ unsigned short BuildType;
  /* 0x0014 */ char CpuType;
  /* 0x0015 */ char CpuID;
  union
  {
    /* 0x0016 */ unsigned short CpuStep;
    struct
    {
      /* 0x0016 */ unsigned char CpuStepping;
      /* 0x0017 */ unsigned char CpuModel;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0018 */ struct _KPROCESSOR_STATE ProcessorState;
  /* 0x0338 */ struct _KNODE* ParentNode;
  /* 0x033c */ char* PriorityState;
  /* 0x0340 */ unsigned long KernelReserved[14];
  /* 0x0378 */ unsigned long HalReserved[16];
  /* 0x03b8 */ unsigned long CFlushSize;
  /* 0x03bc */ unsigned char CoresPerPhysicalProcessor;
  /* 0x03bd */ unsigned char LogicalProcessorsPerCore;
  /* 0x03be */ unsigned char CpuVendor;
  /* 0x03bf */ unsigned char PrcbPad0[1];
  /* 0x03c0 */ unsigned long MHz;
  /* 0x03c4 */ unsigned char GroupIndex;
  /* 0x03c5 */ unsigned char Group;
  /* 0x03c6 */ unsigned char PrcbPad05[2];
  /* 0x03c8 */ unsigned long GroupSetMember;
  /* 0x03cc */ unsigned long Number;
  /* 0x03d0 */ unsigned char ClockOwner;
  union
  {
    /* 0x03d1 */ unsigned char PendingTickFlags;
    struct /* bitfield */
    {
      /* 0x03d1 */ unsigned char PendingTick : 1; /* bit position: 0 */
      /* 0x03d1 */ unsigned char PendingBackupTick : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x03d2 */ unsigned char PrcbPad10[70];
  /* 0x0418 */ struct _KSPIN_LOCK_QUEUE LockQueue[17];
  /* 0x04a0 */ unsigned long InterruptCount;
  /* 0x04a4 */ unsigned long KernelTime;
  /* 0x04a8 */ unsigned long UserTime;
  /* 0x04ac */ unsigned long DpcTime;
  /* 0x04b0 */ unsigned long DpcTimeCount;
  /* 0x04b4 */ unsigned long InterruptTime;
  /* 0x04b8 */ unsigned long AdjustDpcThreshold;
  /* 0x04bc */ unsigned long PageColor;
  /* 0x04c0 */ unsigned char DebuggerSavedIRQL;
  /* 0x04c1 */ unsigned char NodeColor;
  /* 0x04c2 */ unsigned char DeepSleep;
  /* 0x04c3 */ unsigned char PrcbPad20[5];
  /* 0x04c8 */ unsigned long NodeShiftedColor;
  /* 0x04cc */ unsigned long SecondaryColorMask;
  /* 0x04d0 */ unsigned long DpcTimeLimit;
  /* 0x04d4 */ unsigned long PrcbPad21[3];
  /* 0x04e0 */ unsigned long CcFastReadNoWait;
  /* 0x04e4 */ unsigned long CcFastReadWait;
  /* 0x04e8 */ unsigned long CcFastReadNotPossible;
  /* 0x04ec */ unsigned long CcCopyReadNoWait;
  /* 0x04f0 */ unsigned long CcCopyReadWait;
  /* 0x04f4 */ unsigned long CcCopyReadNoWaitMiss;
  /* 0x04f8 */ volatile long MmSpinLockOrdering;
  /* 0x04fc */ volatile long IoReadOperationCount;
  /* 0x0500 */ volatile long IoWriteOperationCount;
  /* 0x0504 */ volatile long IoOtherOperationCount;
  /* 0x0508 */ union _LARGE_INTEGER IoReadTransferCount;
  /* 0x0510 */ union _LARGE_INTEGER IoWriteTransferCount;
  /* 0x0518 */ union _LARGE_INTEGER IoOtherTransferCount;
  /* 0x0520 */ unsigned long CcFastMdlReadNoWait;
  /* 0x0524 */ unsigned long CcFastMdlReadWait;
  /* 0x0528 */ unsigned long CcFastMdlReadNotPossible;
  /* 0x052c */ unsigned long CcMapDataNoWait;
  /* 0x0530 */ unsigned long CcMapDataWait;
  /* 0x0534 */ unsigned long CcPinMappedDataCount;
  /* 0x0538 */ unsigned long CcPinReadNoWait;
  /* 0x053c */ unsigned long CcPinReadWait;
  /* 0x0540 */ unsigned long CcMdlReadNoWait;
  /* 0x0544 */ unsigned long CcMdlReadWait;
  /* 0x0548 */ unsigned long CcLazyWriteHotSpots;
  /* 0x054c */ unsigned long CcLazyWriteIos;
  /* 0x0550 */ unsigned long CcLazyWritePages;
  /* 0x0554 */ unsigned long CcDataFlushes;
  /* 0x0558 */ unsigned long CcDataPages;
  /* 0x055c */ unsigned long CcLostDelayedWrites;
  /* 0x0560 */ unsigned long CcFastReadResourceMiss;
  /* 0x0564 */ unsigned long CcCopyReadWaitMiss;
  /* 0x0568 */ unsigned long CcFastMdlReadResourceMiss;
  /* 0x056c */ unsigned long CcMapDataNoWaitMiss;
  /* 0x0570 */ unsigned long CcMapDataWaitMiss;
  /* 0x0574 */ unsigned long CcPinReadNoWaitMiss;
  /* 0x0578 */ unsigned long CcPinReadWaitMiss;
  /* 0x057c */ unsigned long CcMdlReadNoWaitMiss;
  /* 0x0580 */ unsigned long CcMdlReadWaitMiss;
  /* 0x0584 */ unsigned long CcReadAheadIos;
  /* 0x0588 */ unsigned long KeAlignmentFixupCount;
  /* 0x058c */ unsigned long KeExceptionDispatchCount;
  /* 0x0590 */ unsigned long KeSystemCalls;
  /* 0x0594 */ unsigned long AvailableTime;
  /* 0x0598 */ unsigned long PrcbPad22[2];
  /* 0x05a0 */ struct _PP_LOOKASIDE_LIST PPLookasideList[16];
  /* 0x0620 */ struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
  /* 0x0f20 */ struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
  /* 0x1820 */ struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
  /* 0x2120 */ volatile long PacketBarrier;
  /* 0x2124 */ volatile long ReverseStall;
  /* 0x2128 */ void* IpiFrame;
  /* 0x212c */ unsigned char PrcbPad3[52];
  /* 0x2160 */ void* volatile CurrentPacket[3];
  /* 0x216c */ volatile unsigned long TargetSet;
  /* 0x2170 */ void* volatile WorkerRoutine /* function */;
  /* 0x2174 */ volatile unsigned long IpiFrozen;
  /* 0x2178 */ unsigned char PrcbPad4[40];
  /* 0x21a0 */ volatile unsigned long RequestSummary;
  /* 0x21a4 */ volatile long TargetCount;
  /* 0x21a8 */ unsigned char PrcbPad50[40];
  /* 0x21d0 */ unsigned long InterruptLastCount;
  /* 0x21d4 */ unsigned long InterruptRate;
  /* 0x21d8 */ unsigned long DeviceInterrupts;
  /* 0x21dc */ void* IsrDpcStats;
  /* 0x21e0 */ struct _KDPC_DATA DpcData[2];
  /* 0x2210 */ void* DpcStack;
  /* 0x2214 */ long MaximumDpcQueueDepth;
  /* 0x2218 */ unsigned long DpcRequestRate;
  /* 0x221c */ unsigned long MinimumDpcRate;
  /* 0x2220 */ unsigned long DpcLastCount;
  /* 0x2224 */ unsigned long PrcbLock;
  /* 0x2228 */ struct _KGATE DpcGate;
  /* 0x2238 */ unsigned char IdleState;
  /* 0x2239 */ volatile unsigned char QuantumEnd;
  /* 0x223a */ volatile unsigned char DpcRoutineActive;
  /* 0x223b */ volatile unsigned char IdleSchedule;
  union
  {
    /* 0x223c */ volatile long DpcRequestSummary;
    /* 0x223c */ short DpcRequestSlot[2];
    struct
    {
      /* 0x223c */ short NormalDpcState;
      /* 0x223e */ short ThreadDpcState;
    }; /* size: 0x0004 */
    struct /* bitfield */
    {
      /* 0x223c */ unsigned long DpcNormalProcessingActive : 1; /* bit position: 0 */
      /* 0x223c */ unsigned long DpcNormalProcessingRequested : 1; /* bit position: 1 */
      /* 0x223c */ unsigned long DpcNormalThreadSignal : 1; /* bit position: 2 */
      /* 0x223c */ unsigned long DpcNormalTimerExpiration : 1; /* bit position: 3 */
      /* 0x223c */ unsigned long DpcNormalDpcPresent : 1; /* bit position: 4 */
      /* 0x223c */ unsigned long DpcNormalLocalInterrupt : 1; /* bit position: 5 */
      /* 0x223c */ unsigned long DpcNormalSpare : 10; /* bit position: 6 */
      /* 0x223c */ unsigned long DpcThreadActive : 1; /* bit position: 16 */
      /* 0x223c */ unsigned long DpcThreadRequested : 1; /* bit position: 17 */
      /* 0x223c */ unsigned long DpcThreadSpare : 14; /* bit position: 18 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x2240 */ unsigned long LastTimerHand;
  /* 0x2244 */ unsigned long LastTick;
  /* 0x2248 */ unsigned long PeriodicCount;
  /* 0x224c */ unsigned long PeriodicBias;
  /* 0x2250 */ unsigned long ClockInterrupts;
  /* 0x2254 */ unsigned long ReadyScanTick;
  /* 0x2258 */ unsigned char GroupSchedulingOverQuota;
  /* 0x2259 */ unsigned char ThreadDpcEnable;
  /* 0x225a */ unsigned char PrcbPad41[2];
  /* 0x2260 */ struct _KTIMER_TABLE TimerTable;
  /* 0x3aa0 */ struct _KDPC CallDpc;
  /* 0x3ac0 */ long ClockKeepAlive;
  /* 0x3ac4 */ unsigned char PrcbPad6[4];
  /* 0x3ac8 */ long DpcWatchdogPeriod;
  /* 0x3acc */ long DpcWatchdogCount;
  /* 0x3ad0 */ volatile long KeSpinLockOrdering;
  /* 0x3ad4 */ unsigned long PrcbPad70[1];
  /* 0x3ad8 */ unsigned long QueueIndex;
  /* 0x3adc */ struct _SINGLE_LIST_ENTRY DeferredReadyListHead;
  /* 0x3ae0 */ unsigned long ReadySummary;
  /* 0x3ae4 */ long AffinitizedSelectionMask;
  /* 0x3ae8 */ unsigned long WaitLock;
  /* 0x3aec */ struct _LIST_ENTRY WaitListHead;
  /* 0x3af4 */ unsigned long ScbOffset;
  /* 0x3af8 */ unsigned __int64 StartCycles;
  /* 0x3b00 */ unsigned __int64 TaggedCyclesStart;
  /* 0x3b08 */ unsigned __int64 TaggedCycles[2];
  /* 0x3b18 */ unsigned __int64 GenerationTarget;
  /* 0x3b20 */ volatile unsigned __int64 CycleTime;
  /* 0x3b28 */ unsigned __int64 AffinitizedCycles;
  /* 0x3b30 */ volatile unsigned long HighCycleTime;
  /* 0x3b38 */ unsigned __int64 Cycles[2][4];
  /* 0x3b78 */ unsigned long PrcbPad71[10];
  /* 0x3ba0 */ struct _LIST_ENTRY DispatcherReadyListHead[32];
  /* 0x3ca0 */ void* ChainedInterruptList;
  /* 0x3ca4 */ long LookasideIrpFloat;
  /* 0x3ca8 */ struct _RTL_RB_TREE ScbQueue;
  /* 0x3cb0 */ struct _LIST_ENTRY ScbList;
  /* 0x3cb8 */ volatile long MmPageFaultCount;
  /* 0x3cbc */ volatile long MmCopyOnWriteCount;
  /* 0x3cc0 */ volatile long MmTransitionCount;
  /* 0x3cc4 */ volatile long MmCacheTransitionCount;
  /* 0x3cc8 */ volatile long MmDemandZeroCount;
  /* 0x3ccc */ volatile long MmPageReadCount;
  /* 0x3cd0 */ volatile long MmPageReadIoCount;
  /* 0x3cd4 */ volatile long MmCacheReadCount;
  /* 0x3cd8 */ volatile long MmCacheIoCount;
  /* 0x3cdc */ volatile long MmDirtyPagesWriteCount;
  /* 0x3ce0 */ volatile long MmDirtyWriteIoCount;
  /* 0x3ce4 */ volatile long MmMappedPagesWriteCount;
  /* 0x3ce8 */ volatile long MmMappedWriteIoCount;
  /* 0x3cec */ volatile unsigned long CachedCommit;
  /* 0x3cf0 */ volatile unsigned long CachedResidentAvailable;
  /* 0x3cf4 */ void* HyperPte;
  /* 0x3cf8 */ unsigned char PrcbPad8[4];
  /* 0x3cfc */ unsigned char VendorString[13];
  /* 0x3d09 */ unsigned char InitialApicId;
  /* 0x3d0a */ unsigned char LogicalProcessorsPerPhysicalProcessor;
  /* 0x3d0b */ unsigned char PrcbPad9[1];
  /* 0x3d10 */ unsigned __int64 FeatureBits;
  /* 0x3d18 */ union _LARGE_INTEGER UpdateSignature;
  /* 0x3d20 */ volatile unsigned __int64 IsrTime;
  /* 0x3d28 */ unsigned long PrcbPad90[2];
  /* 0x3d30 */ struct _PROCESSOR_POWER_STATE PowerState;
  /* 0x3eb0 */ unsigned long PrcbPad91[17];
  /* 0x3ef4 */ struct _KDPC DpcWatchdogDpc;
  /* 0x3f18 */ struct _KTIMER DpcWatchdogTimer;
  /* 0x3f40 */ union _SLIST_HEADER HypercallPageList;
  /* 0x3f48 */ void* HypercallCachedPages;
  /* 0x3f4c */ void* VirtualApicAssist;
  /* 0x3f50 */ unsigned __int64* StatisticsPage;
  /* 0x3f54 */ struct _CACHE_DESCRIPTOR Cache[5];
  /* 0x3f90 */ unsigned long CacheCount;
  /* 0x3f94 */ struct _KAFFINITY_EX PackageProcessorSet;
  /* 0x3fa0 */ unsigned long SharedReadyQueueMask;
  /* 0x3fa4 */ struct _KSHARED_READY_QUEUE* SharedReadyQueue;
  /* 0x3fa8 */ unsigned long SharedQueueScanOwner;
  /* 0x3fac */ unsigned long CoreProcessorSet;
  /* 0x3fb0 */ unsigned long ScanSiblingMask;
  /* 0x3fb4 */ unsigned long LLCMask;
  /* 0x3fb8 */ unsigned long CacheProcessorMask[5];
  /* 0x3fcc */ unsigned long ScanSiblingIndex;
  /* 0x3fd0 */ void* WheaInfo;
  /* 0x3fd4 */ void* EtwSupport;
  /* 0x3fd8 */ union _SLIST_HEADER InterruptObjectPool;
  /* 0x3fe0 */ unsigned long PrcbPad92[3];
  /* 0x3fec */ unsigned long PteBitCache;
  /* 0x3ff0 */ unsigned long PteBitOffset;
  /* 0x3ff4 */ unsigned long PrcbPad93;
  /* 0x3ff8 */ struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;
  /* 0x3ffc */ void* ProfileEventIndexAddress;
  /* 0x4000 */ struct _KDPC TimerExpirationDpc;
  /* 0x4020 */ struct _SYNCH_COUNTERS SynchCounters;
  /* 0x40d8 */ struct _FILESYSTEM_DISK_COUNTERS FsCounters;
  /* 0x40e8 */ struct _CONTEXT* Context;
  /* 0x40ec */ unsigned long ContextFlagsInit;
  /* 0x40f0 */ struct _XSAVE_AREA* ExtendedState;
  /* 0x40f4 */ struct _KENTROPY_TIMING_STATE EntropyTimingState;
  /* 0x421c */ void* IsrStack;
  /* 0x4220 */ struct _KINTERRUPT* VectorToInterruptObject[208];
  /* 0x4560 */ struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
  /* 0x4564 */ struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;
  /* 0x4568 */ struct _KDPC AbDpc;
  /* 0x4588 */ struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;
  /* 0x45dc */ struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;
  /* 0x4630 */ struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];
  /* 0x4730 */ unsigned long TimerExpirationTraceCount;
  /* 0x4734 */ void* ExSaPageArray;
  /* 0x4738 */ unsigned long PrcbPad100[10];
  /* 0x4760 */ struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;
  /* 0x4894 */ unsigned char PrcbPad95[12];
  /* 0x48a0 */ struct _REQUEST_MAILBOX* Mailbox;
  /* 0x48a4 */ unsigned char PrcbPad[60];
  /* 0x48e0 */ struct _REQUEST_MAILBOX RequestMailbox[1];
} KPRCB, *PKPRCB; /* size: 0x4900 */

typedef struct _KPRIQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY EntryListHead[32];
  /* 0x0110 */ volatile long CurrentCount[32];
  /* 0x0190 */ unsigned long MaximumCount;
  /* 0x0194 */ struct _LIST_ENTRY ThreadListHead;
} KPRIQUEUE, *PKPRIQUEUE; /* size: 0x019c */

typedef struct _KPROCESS
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY ProfileListHead;
  /* 0x0018 */ unsigned long DirectoryTableBase;
  /* 0x001c */ struct _KGDTENTRY LdtDescriptor;
  /* 0x0024 */ struct _KIDTENTRY Int21Descriptor;
  /* 0x002c */ struct _LIST_ENTRY ThreadListHead;
  /* 0x0034 */ unsigned long ProcessLock;
  /* 0x0038 */ unsigned __int64 DeepFreezeStartTime;
  /* 0x0040 */ struct _KAFFINITY_EX Affinity;
  /* 0x004c */ struct _LIST_ENTRY ReadyListHead;
  /* 0x0054 */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  /* 0x0058 */ volatile struct _KAFFINITY_EX ActiveProcessors;
  union
  {
    struct /* bitfield */
    {
      /* 0x0064 */ long AutoAlignment : 1; /* bit position: 0 */
      /* 0x0064 */ long DisableBoost : 1; /* bit position: 1 */
      /* 0x0064 */ long DisableQuantum : 1; /* bit position: 2 */
      /* 0x0064 */ unsigned long DeepFreeze : 1; /* bit position: 3 */
      /* 0x0064 */ unsigned long TimerVirtualization : 1; /* bit position: 4 */
      /* 0x0064 */ unsigned long CheckStackExtents : 1; /* bit position: 5 */
      /* 0x0064 */ unsigned long SpareFlags0 : 2; /* bit position: 6 */
      /* 0x0064 */ unsigned long ActiveGroupsMask : 1; /* bit position: 8 */
      /* 0x0064 */ long ReservedFlags : 23; /* bit position: 9 */
    }; /* bitfield */
    /* 0x0064 */ volatile long ProcessFlags;
  }; /* size: 0x0004 */
  /* 0x0068 */ char BasePriority;
  /* 0x0069 */ char QuantumReset;
  /* 0x006a */ unsigned char Visited;
  /* 0x006b */ union _KEXECUTE_OPTIONS Flags;
  /* 0x006c */ unsigned long ThreadSeed[1];
  /* 0x0070 */ unsigned short IdealNode[1];
  /* 0x0072 */ unsigned short IdealGlobalNode;
  /* 0x0074 */ unsigned short Spare1;
  /* 0x0076 */ unsigned short IopmOffset;
  /* 0x0078 */ struct _KSCHEDULING_GROUP* SchedulingGroup;
  /* 0x007c */ volatile union _KSTACK_COUNT StackCount;
  /* 0x0080 */ struct _LIST_ENTRY ProcessListEntry;
  /* 0x0088 */ unsigned __int64 CycleTime;
  /* 0x0090 */ unsigned __int64 ContextSwitches;
  /* 0x0098 */ unsigned long FreezeCount;
  /* 0x009c */ unsigned long KernelTime;
  /* 0x00a0 */ unsigned long UserTime;
  /* 0x00a4 */ void* VdmTrapcHandler;
} KPROCESS, *PKPROCESS; /* size: 0x00a8 */

typedef struct _KPROCESSOR_STATE
{
  /* 0x0000 */ struct _CONTEXT ContextFrame;
  /* 0x02cc */ struct _KSPECIAL_REGISTERS SpecialRegisters;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE; /* size: 0x0320 */

typedef enum _KPROCESS_STATE
{
  ProcessInMemory = 0,
  ProcessOutOfMemory = 1,
  ProcessInTransition = 2,
  ProcessOutTransition = 3,
  ProcessInSwap = 4,
  ProcessOutSwap = 5,
  ProcessRetryOutSwap = 6,
  ProcessAllSwapStates = 7,
} KPROCESS_STATE, *PKPROCESS_STATE;

typedef enum _KPROFILE_SOURCE
{
  ProfileTime = 0,
  ProfileAlignmentFixup = 1,
  ProfileTotalIssues = 2,
  ProfilePipelineDry = 3,
  ProfileLoadInstructions = 4,
  ProfilePipelineFrozen = 5,
  ProfileBranchInstructions = 6,
  ProfileTotalNonissues = 7,
  ProfileDcacheMisses = 8,
  ProfileIcacheMisses = 9,
  ProfileCacheMisses = 10,
  ProfileBranchMispredictions = 11,
  ProfileStoreInstructions = 12,
  ProfileFpInstructions = 13,
  ProfileIntegerInstructions = 14,
  Profile2Issue = 15,
  Profile3Issue = 16,
  Profile4Issue = 17,
  ProfileSpecialInstructions = 18,
  ProfileTotalCycles = 19,
  ProfileIcacheIssues = 20,
  ProfileDcacheAccesses = 21,
  ProfileMemoryBarrierCycles = 22,
  ProfileLoadLinkedIssues = 23,
  ProfileMaximum = 24,
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef struct _KQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY EntryListHead;
  /* 0x0018 */ volatile unsigned long CurrentCount;
  /* 0x001c */ unsigned long MaximumCount;
  /* 0x0020 */ struct _LIST_ENTRY ThreadListHead;
} KQUEUE, *PKQUEUE; /* size: 0x0028 */

typedef struct _KREQUEST_PACKET
{
  /* 0x0000 */ void* CurrentPacket[3];
  /* 0x000c */ void* WorkerRoutine /* function */;
} KREQUEST_PACKET, *PKREQUEST_PACKET; /* size: 0x0010 */

typedef struct _KRESOURCEMANAGER
{
  /* 0x0000 */ struct _KEVENT NotificationAvailable;
  /* 0x0010 */ unsigned long cookie;
  /* 0x0014 */ enum _KRESOURCEMANAGER_STATE State;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _KMUTANT Mutex;
  /* 0x003c */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0050 */ struct _GUID RmId;
  /* 0x0060 */ struct _KQUEUE NotificationQueue;
  /* 0x0088 */ struct _KMUTANT NotificationMutex;
  /* 0x00a8 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x00b0 */ unsigned long EnlistmentCount;
  /* 0x00b4 */ void* NotificationRoutine /* function */;
  /* 0x00b8 */ void* Key;
  /* 0x00bc */ struct _LIST_ENTRY ProtocolListHead;
  /* 0x00c4 */ struct _LIST_ENTRY PendingPropReqListHead;
  /* 0x00cc */ struct _LIST_ENTRY CRMListEntry;
  /* 0x00d4 */ struct _KTM* Tm;
  /* 0x00d8 */ struct _UNICODE_STRING Description;
  /* 0x00e0 */ struct _KTMOBJECT_NAMESPACE Enlistments;
  /* 0x0140 */ struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
} KRESOURCEMANAGER, *PKRESOURCEMANAGER; /* size: 0x0154 */

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
  /* 0x0000 */ struct _LIST_ENTRY NotificationListHead;
  /* 0x0008 */ void* Port;
  /* 0x000c */ unsigned long Key;
  /* 0x0010 */ struct _EPROCESS* BindingProcess;
} KRESOURCEMANAGER_COMPLETION_BINDING, *PKRESOURCEMANAGER_COMPLETION_BINDING; /* size: 0x0014 */

typedef enum _KRESOURCEMANAGER_STATE
{
  KResourceManagerUninitialized = 0,
  KResourceManagerOffline = 1,
  KResourceManagerOnline = 2,
} KRESOURCEMANAGER_STATE, *PKRESOURCEMANAGER_STATE;

typedef struct _KSCB
{
  /* 0x0000 */ unsigned __int64 GenerationCycles;
  /* 0x0008 */ unsigned __int64 MinQuotaCycleTarget;
  /* 0x0010 */ unsigned __int64 MaxQuotaCycleTarget;
  /* 0x0018 */ unsigned __int64 RankCycleTarget;
  /* 0x0020 */ unsigned __int64 LongTermCycles;
  /* 0x0028 */ unsigned __int64 LastReportedCycles;
  /* 0x0030 */ volatile unsigned __int64 OverQuotaHistory;
  /* 0x0038 */ unsigned __int64 ReadyTime;
  /* 0x0040 */ unsigned __int64 InsertTime;
  /* 0x0048 */ struct _LIST_ENTRY PerProcessorList;
  /* 0x0050 */ struct _RTL_BALANCED_NODE QueueNode;
  struct /* bitfield */
  {
    /* 0x005c */ unsigned char Inserted : 1; /* bit position: 0 */
    /* 0x005c */ unsigned char MaxOverQuota : 1; /* bit position: 1 */
    /* 0x005c */ unsigned char MinOverQuota : 1; /* bit position: 2 */
    /* 0x005c */ unsigned char RankBias : 1; /* bit position: 3 */
    /* 0x005c */ unsigned char SoftCap : 1; /* bit position: 4 */
    /* 0x005c */ unsigned char Spare1 : 3; /* bit position: 5 */
  }; /* bitfield */
  /* 0x005d */ unsigned char Depth;
  /* 0x005e */ unsigned short ReadySummary;
  /* 0x0060 */ unsigned long Rank;
  /* 0x0064 */ struct _LIST_ENTRY ReadyListHead[16];
  /* 0x00e4 */ struct _RTL_RB_TREE ChildScbQueue;
  /* 0x00ec */ struct _KSCB* Parent;
  /* 0x00f0 */ struct _KSCB* Root;
  /* 0x00f4 */ long __PADDING__[1];
} KSCB, *PKSCB; /* size: 0x00f8 */

typedef struct _KSCHEDULING_GROUP
{
  /* 0x0000 */ struct _KSCHEDULING_GROUP_POLICY Policy;
  /* 0x0008 */ unsigned long RelativeWeight;
  /* 0x000c */ unsigned long ChildMinRate;
  /* 0x0010 */ unsigned long ChildMinWeight;
  /* 0x0014 */ unsigned long ChildTotalWeight;
  /* 0x0018 */ unsigned __int64 QueryHistoryTimeStamp;
  /* 0x0020 */ __int64 NotificationCycles;
  union
  {
    /* 0x0028 */ struct _LIST_ENTRY SchedulingGroupList;
    /* 0x0028 */ struct _LIST_ENTRY Sibling;
  }; /* size: 0x0008 */
  /* 0x0030 */ struct _KDPC* NotificationDpc;
  /* 0x0034 */ struct _LIST_ENTRY ChildList;
  /* 0x003c */ struct _KSCHEDULING_GROUP* Parent;
  /* 0x0040 */ struct _KSCB PerProcessor[1];
  /* 0x0138 */ long __PADDING__[2];
} KSCHEDULING_GROUP, *PKSCHEDULING_GROUP; /* size: 0x0140 */

typedef struct _KSCHEDULING_GROUP_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ unsigned short Weight;
    struct
    {
      /* 0x0000 */ unsigned short MinRate;
      /* 0x0002 */ unsigned short MaxRate;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned long AllFlags;
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long Type : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long Disabled : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long Spare1 : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KSCHEDULING_GROUP_POLICY, *PKSCHEDULING_GROUP_POLICY; /* size: 0x0008 */

typedef struct _KSECONDARY_IDT_ENTRY
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ struct _KEVENT ConnectLock;
  /* 0x0014 */ unsigned char LineMasked;
  /* 0x0018 */ struct _KINTERRUPT* InterruptList;
} KSECONDARY_IDT_ENTRY, *PKSECONDARY_IDT_ENTRY; /* size: 0x001c */

typedef struct _KSEMAPHORE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ long Limit;
} KSEMAPHORE, *PKSEMAPHORE; /* size: 0x0014 */

typedef struct _KSHARED_READY_QUEUE
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned long ReadySummary;
  /* 0x0008 */ struct _LIST_ENTRY ReadyListHead[32];
  /* 0x0108 */ char RunningSummary[32];
  /* 0x0128 */ unsigned char Span;
  /* 0x0129 */ unsigned char LowProcIndex;
  /* 0x012a */ unsigned char QueueIndex;
  /* 0x012b */ unsigned char ProcCount;
  /* 0x012c */ unsigned char ScanOwner;
  /* 0x012d */ unsigned char Spare[3];
  /* 0x0130 */ unsigned long Affinity;
} KSHARED_READY_QUEUE, *PKSHARED_READY_QUEUE; /* size: 0x0134 */

typedef struct _KSPECIAL_REGISTERS
{
  /* 0x0000 */ unsigned long Cr0;
  /* 0x0004 */ unsigned long Cr2;
  /* 0x0008 */ unsigned long Cr3;
  /* 0x000c */ unsigned long Cr4;
  /* 0x0010 */ unsigned long KernelDr0;
  /* 0x0014 */ unsigned long KernelDr1;
  /* 0x0018 */ unsigned long KernelDr2;
  /* 0x001c */ unsigned long KernelDr3;
  /* 0x0020 */ unsigned long KernelDr6;
  /* 0x0024 */ unsigned long KernelDr7;
  /* 0x0028 */ struct _DESCRIPTOR Gdtr;
  /* 0x0030 */ struct _DESCRIPTOR Idtr;
  /* 0x0038 */ unsigned short Tr;
  /* 0x003a */ unsigned short Ldtr;
  /* 0x003c */ unsigned __int64 Xcr0;
  /* 0x0044 */ unsigned long ExceptionList;
  /* 0x0048 */ unsigned long Reserved[3];
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS; /* size: 0x0054 */

typedef struct _KSPIN_LOCK_QUEUE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE* volatile Next;
  /* 0x0004 */ unsigned long* volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE; /* size: 0x0008 */

typedef enum _KSPIN_LOCK_QUEUE_NUMBER
{
  LockQueueUnusedSpare0 = 0,
  LockQueueUnusedSpare1 = 1,
  LockQueueUnusedSpare2 = 2,
  LockQueueUnusedSpare3 = 3,
  LockQueueVacbLock = 4,
  LockQueueMasterLock = 5,
  LockQueueNonPagedPoolLock = 6,
  LockQueueIoCancelLock = 7,
  LockQueueWorkQueueLock = 8,
  LockQueueIoVpbLock = 9,
  LockQueueIoDatabaseLock = 10,
  LockQueueIoCompletionLock = 11,
  LockQueueNtfsStructLock = 12,
  LockQueueAfdWorkQueueLock = 13,
  LockQueueBcbLock = 14,
  LockQueueUnusedSpare15 = 15,
  LockQueueUnusedSpare16 = 16,
  LockQueueMaximumLock = 17,
} KSPIN_LOCK_QUEUE_NUMBER, *PKSPIN_LOCK_QUEUE_NUMBER;

typedef struct _KSTACK_CONTROL
{
  /* 0x0000 */ unsigned long StackBase;
  union
  {
    /* 0x0004 */ unsigned long ActualLimit;
    /* 0x0004 */ unsigned long StackExpansion : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x0008 */ struct _KTRAP_FRAME* PreviousTrapFrame;
  /* 0x000c */ void* PreviousExceptionList;
  /* 0x0010 */ struct _KERNEL_STACK_SEGMENT Previous;
} KSTACK_CONTROL, *PKSTACK_CONTROL; /* size: 0x0020 */

typedef union _KSTACK_COUNT
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long State : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long StackCount : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KSTACK_COUNT, *PKSTACK_COUNT; /* size: 0x0004 */

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

typedef struct _KTHREAD
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ void* SListFaultAddress;
  /* 0x0018 */ unsigned __int64 QuantumTarget;
  /* 0x0020 */ void* InitialStack;
  /* 0x0024 */ void* volatile StackLimit;
  /* 0x0028 */ void* StackBase;
  /* 0x002c */ unsigned long ThreadLock;
  /* 0x0030 */ volatile unsigned __int64 CycleTime;
  /* 0x0038 */ volatile unsigned long HighCycleTime;
  /* 0x003c */ void* ServiceTable;
  /* 0x0040 */ unsigned long CurrentRunTime;
  /* 0x0044 */ unsigned long ExpectedRunTime;
  /* 0x0048 */ void* KernelStack;
  /* 0x004c */ struct _XSAVE_FORMAT* StateSaveArea;
  /* 0x0050 */ struct _KSCHEDULING_GROUP* volatile SchedulingGroup;
  /* 0x0054 */ union _KWAIT_STATUS_REGISTER WaitRegister;
  /* 0x0055 */ volatile unsigned char Running;
  /* 0x0056 */ unsigned char Alerted[2];
  union
  {
    struct /* bitfield */
    {
      /* 0x0058 */ unsigned long AutoBoostActive : 1; /* bit position: 0 */
      /* 0x0058 */ unsigned long ReadyTransition : 1; /* bit position: 1 */
      /* 0x0058 */ unsigned long WaitNext : 1; /* bit position: 2 */
      /* 0x0058 */ unsigned long SystemAffinityActive : 1; /* bit position: 3 */
      /* 0x0058 */ unsigned long Alertable : 1; /* bit position: 4 */
      /* 0x0058 */ unsigned long UserStackWalkActive : 1; /* bit position: 5 */
      /* 0x0058 */ unsigned long ApcInterruptRequest : 1; /* bit position: 6 */
      /* 0x0058 */ unsigned long QuantumEndMigrate : 1; /* bit position: 7 */
      /* 0x0058 */ unsigned long UmsDirectedSwitchEnable : 1; /* bit position: 8 */
      /* 0x0058 */ unsigned long TimerActive : 1; /* bit position: 9 */
      /* 0x0058 */ unsigned long SystemThread : 1; /* bit position: 10 */
      /* 0x0058 */ unsigned long ProcessDetachActive : 1; /* bit position: 11 */
      /* 0x0058 */ unsigned long CalloutActive : 1; /* bit position: 12 */
      /* 0x0058 */ unsigned long ScbReadyQueue : 1; /* bit position: 13 */
      /* 0x0058 */ unsigned long ApcQueueable : 1; /* bit position: 14 */
      /* 0x0058 */ unsigned long ReservedStackInUse : 1; /* bit position: 15 */
      /* 0x0058 */ unsigned long UmsPerformingSyscall : 1; /* bit position: 16 */
      /* 0x0058 */ unsigned long TimerSuspended : 1; /* bit position: 17 */
      /* 0x0058 */ unsigned long SuspendedWaitMode : 1; /* bit position: 18 */
      /* 0x0058 */ unsigned long SuspendSchedulerApcWait : 1; /* bit position: 19 */
      /* 0x0058 */ unsigned long Reserved : 12; /* bit position: 20 */
    }; /* bitfield */
    /* 0x0058 */ long MiscFlags;
  }; /* size: 0x0004 */
  union
  {
    struct /* bitfield */
    {
      /* 0x005c */ unsigned long AutoAlignment : 1; /* bit position: 0 */
      /* 0x005c */ unsigned long DisableBoost : 1; /* bit position: 1 */
      /* 0x005c */ unsigned long ThreadFlagsSpare0 : 1; /* bit position: 2 */
      /* 0x005c */ unsigned long AlertedByThreadId : 1; /* bit position: 3 */
      /* 0x005c */ unsigned long QuantumDonation : 1; /* bit position: 4 */
      /* 0x005c */ unsigned long EnableStackSwap : 1; /* bit position: 5 */
      /* 0x005c */ unsigned long GuiThread : 1; /* bit position: 6 */
      /* 0x005c */ unsigned long DisableQuantum : 1; /* bit position: 7 */
      /* 0x005c */ unsigned long ChargeOnlySchedulingGroup : 1; /* bit position: 8 */
      /* 0x005c */ unsigned long DeferPreemption : 1; /* bit position: 9 */
      /* 0x005c */ unsigned long QueueDeferPreemption : 1; /* bit position: 10 */
      /* 0x005c */ unsigned long ForceDeferSchedule : 1; /* bit position: 11 */
      /* 0x005c */ unsigned long SharedReadyQueueAffinity : 1; /* bit position: 12 */
      /* 0x005c */ unsigned long FreezeCount : 1; /* bit position: 13 */
      /* 0x005c */ unsigned long TerminationApcRequest : 1; /* bit position: 14 */
      /* 0x005c */ unsigned long AutoBoostEntriesExhausted : 1; /* bit position: 15 */
      /* 0x005c */ unsigned long KernelStackResident : 1; /* bit position: 16 */
      /* 0x005c */ unsigned long CommitFailTerminateRequest : 1; /* bit position: 17 */
      /* 0x005c */ unsigned long ProcessStackCountDecremented : 1; /* bit position: 18 */
      /* 0x005c */ unsigned long ThreadFlagsSpare : 5; /* bit position: 19 */
      /* 0x005c */ unsigned long EtwStackTraceApcInserted : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x005c */ volatile long ThreadFlags;
  }; /* size: 0x0004 */
  /* 0x0060 */ volatile unsigned char Tag;
  /* 0x0061 */ unsigned char SystemHeteroCpuPolicy;
  struct /* bitfield */
  {
    /* 0x0062 */ unsigned char UserHeteroCpuPolicy : 7; /* bit position: 0 */
    /* 0x0062 */ unsigned char ExplicitSystemHeteroCpuPolicy : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0063 */ unsigned char Spare0;
  /* 0x0064 */ unsigned long SystemCallNumber;
  /* 0x0068 */ void* FirstArgument;
  /* 0x006c */ struct _KTRAP_FRAME* TrapFrame;
  union
  {
    /* 0x0070 */ struct _KAPC_STATE ApcState;
    struct
    {
      /* 0x0070 */ unsigned char ApcStateFill[23];
      /* 0x0087 */ char Priority;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0088 */ unsigned long UserIdealProcessor;
  /* 0x008c */ unsigned long ContextSwitches;
  /* 0x0090 */ volatile unsigned char State;
  /* 0x0091 */ char Spare12;
  /* 0x0092 */ unsigned char WaitIrql;
  /* 0x0093 */ char WaitMode;
  /* 0x0094 */ volatile long WaitStatus;
  /* 0x0098 */ struct _KWAIT_BLOCK* WaitBlockList;
  union
  {
    /* 0x009c */ struct _LIST_ENTRY WaitListEntry;
    /* 0x009c */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  }; /* size: 0x0008 */
  /* 0x00a4 */ struct _DISPATCHER_HEADER* volatile Queue;
  /* 0x00a8 */ void* Teb;
  /* 0x00b0 */ unsigned __int64 RelativeTimerBias;
  /* 0x00b8 */ struct _KTIMER Timer;
  union
  {
    /* 0x00e0 */ struct _KWAIT_BLOCK WaitBlock[4];
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill8[20];
      /* 0x00f4 */ struct _KTHREAD_COUNTERS* ThreadCounters;
    }; /* size: 0x0018 */
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill9[44];
      /* 0x010c */ struct _XSTATE_SAVE* XStateSave;
    }; /* size: 0x0030 */
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill10[68];
      /* 0x0124 */ void* volatile Win32Thread;
    }; /* size: 0x0048 */
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill11[88];
      /* 0x0138 */ unsigned long WaitTime;
      union
      {
        struct
        {
          /* 0x013c */ short KernelApcDisable;
          /* 0x013e */ short SpecialApcDisable;
        }; /* size: 0x0004 */
        /* 0x013c */ unsigned long CombinedApcDisable;
      }; /* size: 0x0004 */
    }; /* size: 0x0060 */
  }; /* size: 0x0060 */
  /* 0x0140 */ struct _LIST_ENTRY QueueListEntry;
  union
  {
    /* 0x0148 */ volatile unsigned long NextProcessor;
    struct /* bitfield */
    {
      /* 0x0148 */ unsigned long NextProcessorNumber : 31; /* bit position: 0 */
      /* 0x0148 */ unsigned long SharedReadyQueue : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x014c */ long QueuePriority;
  /* 0x0150 */ struct _KPROCESS* Process;
  union
  {
    /* 0x0154 */ struct _GROUP_AFFINITY UserAffinity;
    struct
    {
      /* 0x0154 */ unsigned char UserAffinityFill[6];
      /* 0x015a */ char PreviousMode;
      /* 0x015b */ char BasePriority;
      union
      {
        /* 0x015c */ char PriorityDecrement;
        struct /* bitfield */
        {
          /* 0x015c */ unsigned char ForegroundBoost : 4; /* bit position: 0 */
          /* 0x015c */ unsigned char UnusualBoost : 4; /* bit position: 4 */
        }; /* bitfield */
      }; /* size: 0x0001 */
      /* 0x015d */ unsigned char Preempted;
      /* 0x015e */ unsigned char AdjustReason;
      /* 0x015f */ char AdjustIncrement;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
  /* 0x0160 */ unsigned long AffinityVersion;
  union
  {
    /* 0x0164 */ struct _GROUP_AFFINITY Affinity;
    struct
    {
      /* 0x0164 */ unsigned char AffinityFill[6];
      /* 0x016a */ unsigned char ApcStateIndex;
      /* 0x016b */ unsigned char WaitBlockCount;
      /* 0x016c */ unsigned long IdealProcessor;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
  /* 0x0170 */ unsigned long Spare15[1];
  union
  {
    /* 0x0174 */ struct _KAPC_STATE SavedApcState;
    struct
    {
      /* 0x0174 */ unsigned char SavedApcStateFill[23];
      /* 0x018b */ unsigned char WaitReason;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x018c */ char SuspendCount;
  /* 0x018d */ char Saturation;
  /* 0x018e */ unsigned short SListFaultCount;
  union
  {
    /* 0x0190 */ struct _KAPC SchedulerApc;
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill0[1];
      /* 0x0191 */ unsigned char ResourceIndex;
    }; /* size: 0x0002 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill1[3];
      /* 0x0193 */ unsigned char QuantumReset;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill2[4];
      /* 0x0194 */ unsigned long KernelTime;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill3[36];
      /* 0x01b4 */ struct _KPRCB* volatile WaitPrcb;
    }; /* size: 0x0028 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill4[40];
      /* 0x01b8 */ void* LegoData;
    }; /* size: 0x002c */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill5[47];
      /* 0x01bf */ unsigned char CallbackNestingLevel;
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
  /* 0x01c0 */ unsigned long UserTime;
  /* 0x01c4 */ struct _KEVENT SuspendEvent;
  /* 0x01d4 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x01dc */ struct _LIST_ENTRY MutantListHead;
  /* 0x01e4 */ unsigned char AbEntrySummary;
  /* 0x01e5 */ unsigned char AbWaitEntryCount;
  /* 0x01e6 */ unsigned short Spare20;
  /* 0x01e8 */ struct _KLOCK_ENTRY LockEntries[6];
  /* 0x0308 */ struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;
  /* 0x030c */ struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
  /* 0x0310 */ unsigned char PriorityFloorCounts[16];
  /* 0x0320 */ unsigned long PriorityFloorSummary;
  /* 0x0324 */ volatile long AbCompletedIoBoostCount;
  /* 0x0328 */ volatile short KeReferenceCount;
  /* 0x032a */ unsigned char AbOrphanedEntrySummary;
  /* 0x032b */ unsigned char AbOwnedEntryCount;
  /* 0x032c */ unsigned long ForegroundLossTime;
  union
  {
    /* 0x0330 */ struct _LIST_ENTRY GlobalForegroundListEntry;
    struct
    {
      /* 0x0330 */ struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
      /* 0x0334 */ unsigned long InGlobalForegroundList;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0338 */ struct _KSCB* QueuedScb;
  /* 0x0340 */ unsigned __int64 NpxState;
} KTHREAD, *PKTHREAD; /* size: 0x0348 */

typedef struct _KTHREAD_COUNTERS
{
  /* 0x0000 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0008 */ struct _THREAD_PERFORMANCE_DATA* UserData;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long ContextSwitches;
  /* 0x0018 */ unsigned __int64 CycleTimeBias;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING HwCounter[16];
} KTHREAD_COUNTERS, *PKTHREAD_COUNTERS; /* size: 0x01a8 */

typedef enum _KTHREAD_STATE
{
  Initialized = 0,
  Ready = 1,
  Running = 2,
  Standby = 3,
  Terminated = 4,
  Waiting = 5,
  Transition = 6,
  DeferredReady = 7,
  GateWaitObsolete = 8,
  WaitingForProcessInSwap = 9,
} KTHREAD_STATE, *PKTHREAD_STATE;

typedef enum _KTHREAD_TAG
{
  KThreadTagNone = 0,
  KThreadTagMediaBuffering = 1,
  KThreadTagMax = 2,
} KTHREAD_TAG, *PKTHREAD_TAG;

typedef struct _KTIMER
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ union _ULARGE_INTEGER DueTime;
  /* 0x0018 */ struct _LIST_ENTRY TimerListEntry;
  /* 0x0020 */ struct _KDPC* Dpc;
  /* 0x0024 */ unsigned long Period;
} KTIMER, *PKTIMER; /* size: 0x0028 */

typedef struct _KTIMER2
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  union
  {
    /* 0x0010 */ struct _RTL_BALANCED_NODE RbNodes[2];
    /* 0x0010 */ struct _LIST_ENTRY ListEntry;
  }; /* size: 0x0018 */
  /* 0x0028 */ unsigned __int64 DueTime;
  /* 0x0030 */ unsigned __int64 MaximumDueTime;
  /* 0x0038 */ __int64 Period;
  /* 0x0040 */ void* Callback /* function */;
  /* 0x0044 */ void* CallbackContext;
  /* 0x0048 */ void* DisableCallback /* function */;
  /* 0x004c */ void* DisableContext;
  /* 0x0050 */ unsigned char AbsoluteSystemTime;
  union
  {
    /* 0x0051 */ unsigned char TypeFlags;
    struct /* bitfield */
    {
      /* 0x0051 */ unsigned char Plain : 1; /* bit position: 0 */
      /* 0x0051 */ unsigned char IdleResilient : 1; /* bit position: 1 */
      /* 0x0051 */ unsigned char HighResolution : 1; /* bit position: 2 */
      /* 0x0051 */ unsigned char NoWake : 1; /* bit position: 3 */
      /* 0x0051 */ unsigned char NoWakeFinite : 1; /* bit position: 4 */
      /* 0x0051 */ unsigned char Unused : 3; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0052 */ char __PADDING__[6];
} KTIMER2, *PKTIMER2; /* size: 0x0058 */

typedef struct _KTIMER2_COLLECTION
{
  /* 0x0000 */ struct _RTL_RB_TREE Tree;
  /* 0x0008 */ unsigned __int64 NextDueTime;
} KTIMER2_COLLECTION, *PKTIMER2_COLLECTION; /* size: 0x0010 */

typedef enum _KTIMER2_TYPE
{
  KTimer2TypeMin = 0,
  KTimer2Plain = 0,
  KTimer2IdleResilient = 1,
  KTimer2HighResolution = 2,
  KTimer2NoWake = 3,
  KTimer2NoWakeFinite = 4,
  KTimer2TypeMax = 5,
} KTIMER2_TYPE, *PKTIMER2_TYPE;

typedef struct _KTIMER_EXPIRATION_TRACE
{
  /* 0x0000 */ unsigned __int64 InterruptTime;
  /* 0x0008 */ union _LARGE_INTEGER PerformanceCounter;
} KTIMER_EXPIRATION_TRACE, *PKTIMER_EXPIRATION_TRACE; /* size: 0x0010 */

typedef struct _KTIMER_TABLE
{
  /* 0x0000 */ struct _KTIMER* TimerExpiry[16];
  /* 0x0040 */ struct _KTIMER_TABLE_ENTRY TimerEntries[256];
} KTIMER_TABLE, *PKTIMER_TABLE; /* size: 0x1840 */

typedef struct _KTIMER_TABLE_ENTRY
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ union _ULARGE_INTEGER Time;
} KTIMER_TABLE_ENTRY, *PKTIMER_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _KTM
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ struct _KMUTANT Mutex;
  /* 0x0024 */ enum KTM_STATE State;
  /* 0x0028 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x003c */ struct _GUID TmIdentity;
  /* 0x004c */ unsigned long Flags;
  /* 0x0050 */ unsigned long VolatileFlags;
  /* 0x0054 */ struct _UNICODE_STRING LogFileName;
  /* 0x005c */ struct _FILE_OBJECT* LogFileObject;
  /* 0x0060 */ void* MarshallingContext;
  /* 0x0064 */ void* LogManagementContext;
  /* 0x0068 */ struct _KTMOBJECT_NAMESPACE Transactions;
  /* 0x00c8 */ struct _KTMOBJECT_NAMESPACE ResourceManagers;
  /* 0x0128 */ struct _KMUTANT LsnOrderedMutex;
  /* 0x0148 */ struct _LIST_ENTRY LsnOrderedList;
  /* 0x0150 */ union _LARGE_INTEGER CommitVirtualClock;
  /* 0x0158 */ struct _FAST_MUTEX CommitVirtualClockMutex;
  /* 0x0178 */ union _CLS_LSN BaseLsn;
  /* 0x0180 */ union _CLS_LSN CurrentReadLsn;
  /* 0x0188 */ union _CLS_LSN LastRecoveredLsn;
  /* 0x0190 */ void* TmRmHandle;
  /* 0x0194 */ struct _KRESOURCEMANAGER* TmRm;
  /* 0x0198 */ struct _KEVENT LogFullNotifyEvent;
  /* 0x01a8 */ struct _WORK_QUEUE_ITEM CheckpointWorkItem;
  /* 0x01b8 */ union _CLS_LSN CheckpointTargetLsn;
  /* 0x01c0 */ struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem;
  /* 0x01d0 */ struct _ERESOURCE LogWriteResource;
  /* 0x0208 */ unsigned long LogFlags;
  /* 0x020c */ long LogFullStatus;
  /* 0x0210 */ long RecoveryStatus;
  /* 0x0218 */ union _CLS_LSN LastCheckBaseLsn;
  /* 0x0220 */ struct _LIST_ENTRY RestartOrderedList;
  /* 0x0228 */ struct _WORK_QUEUE_ITEM OfflineWorkItem;
} KTM, *PKTM; /* size: 0x0238 */

struct _KTMNOTIFICATION_PACKET;

typedef struct _KTMOBJECT_NAMESPACE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE Table;
  /* 0x0038 */ struct _KMUTANT Mutex;
  /* 0x0058 */ unsigned short LinksOffset;
  /* 0x005a */ unsigned short GuidOffset;
  /* 0x005c */ unsigned char Expired;
  /* 0x005d */ char __PADDING__[3];
} KTMOBJECT_NAMESPACE, *PKTMOBJECT_NAMESPACE; /* size: 0x0060 */

typedef struct _KTMOBJECT_NAMESPACE_LINK
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS Links;
  /* 0x0010 */ unsigned char Expired;
  /* 0x0011 */ char __PADDING__[3];
} KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK; /* size: 0x0014 */

typedef struct _KTRANSACTION
{
  /* 0x0000 */ struct _KEVENT OutcomeEvent;
  /* 0x0010 */ unsigned long cookie;
  /* 0x0014 */ struct _KMUTANT Mutex;
  /* 0x0034 */ struct _KTRANSACTION* TreeTx;
  /* 0x0038 */ struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
  /* 0x004c */ struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
  /* 0x0060 */ struct _GUID UOW;
  /* 0x0070 */ enum _KTRANSACTION_STATE State;
  /* 0x0074 */ unsigned long Flags;
  /* 0x0078 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x0080 */ unsigned long EnlistmentCount;
  /* 0x0084 */ unsigned long RecoverableEnlistmentCount;
  /* 0x0088 */ unsigned long PrePrepareRequiredEnlistmentCount;
  /* 0x008c */ unsigned long PrepareRequiredEnlistmentCount;
  /* 0x0090 */ unsigned long OutcomeRequiredEnlistmentCount;
  /* 0x0094 */ unsigned long PendingResponses;
  /* 0x0098 */ struct _KENLISTMENT* SuperiorEnlistment;
  /* 0x00a0 */ union _CLS_LSN LastLsn;
  /* 0x00a8 */ struct _LIST_ENTRY PromotedEntry;
  /* 0x00b0 */ struct _KTRANSACTION* PromoterTransaction;
  /* 0x00b4 */ void* PromotePropagation;
  /* 0x00b8 */ unsigned long IsolationLevel;
  /* 0x00bc */ unsigned long IsolationFlags;
  /* 0x00c0 */ union _LARGE_INTEGER Timeout;
  /* 0x00c8 */ struct _UNICODE_STRING Description;
  /* 0x00d0 */ struct _KTHREAD* RollbackThread;
  /* 0x00d4 */ struct _WORK_QUEUE_ITEM RollbackWorkItem;
  /* 0x00e4 */ struct _KDPC RollbackDpc;
  /* 0x0108 */ struct _KTIMER RollbackTimer;
  /* 0x0130 */ struct _LIST_ENTRY LsnOrderedEntry;
  /* 0x0138 */ enum _KTRANSACTION_OUTCOME Outcome;
  /* 0x013c */ struct _KTM* Tm;
  /* 0x0140 */ __int64 CommitReservation;
  /* 0x0148 */ struct _KTRANSACTION_HISTORY TransactionHistory[10];
  /* 0x0198 */ unsigned long TransactionHistoryCount;
  /* 0x019c */ void* DTCPrivateInformation;
  /* 0x01a0 */ unsigned long DTCPrivateInformationLength;
  /* 0x01a4 */ struct _KMUTANT DTCPrivateInformationMutex;
  /* 0x01c4 */ void* PromotedTxSelfHandle;
  /* 0x01c8 */ unsigned long PendingPromotionCount;
  /* 0x01cc */ struct _KEVENT PromotionCompletedEvent;
  /* 0x01dc */ long __PADDING__[1];
} KTRANSACTION, *PKTRANSACTION; /* size: 0x01e0 */

typedef struct _KTRANSACTION_HISTORY
{
  /* 0x0000 */ enum // _TAG_UNNAMED_137
  {
    KTMOH_CommitTransaction_Result = 1,
    KTMOH_RollbackTransaction_Result = 2,
  } RecordType;
  /* 0x0004 */ unsigned long Payload;
} KTRANSACTION_HISTORY, *PKTRANSACTION_HISTORY; /* size: 0x0008 */

typedef enum _KTRANSACTION_OUTCOME
{
  KTxOutcomeUninitialized = 0,
  KTxOutcomeUndetermined = 1,
  KTxOutcomeCommitted = 2,
  KTxOutcomeAborted = 3,
  KTxOutcomeUnavailable = 4,
} KTRANSACTION_OUTCOME, *PKTRANSACTION_OUTCOME;

typedef enum _KTRANSACTION_STATE
{
  KTransactionUninitialized = 0,
  KTransactionActive = 1,
  KTransactionPreparing = 2,
  KTransactionPrepared = 3,
  KTransactionInDoubt = 4,
  KTransactionCommitted = 5,
  KTransactionAborted = 6,
  KTransactionDelegated = 7,
  KTransactionPrePreparing = 8,
  KTransactionForgotten = 9,
  KTransactionRecovering = 10,
  KTransactionPrePrepared = 11,
} KTRANSACTION_STATE, *PKTRANSACTION_STATE;

typedef struct _KTRAP_FRAME
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned short TempSegCs;
  /* 0x000e */ unsigned char Logging;
  /* 0x000f */ unsigned char FrameType;
  /* 0x0010 */ unsigned long TempEsp;
  /* 0x0014 */ unsigned long Dr0;
  /* 0x0018 */ unsigned long Dr1;
  /* 0x001c */ unsigned long Dr2;
  /* 0x0020 */ unsigned long Dr3;
  /* 0x0024 */ unsigned long Dr6;
  /* 0x0028 */ unsigned long Dr7;
  /* 0x002c */ unsigned long SegGs;
  /* 0x0030 */ unsigned long SegEs;
  /* 0x0034 */ unsigned long SegDs;
  /* 0x0038 */ unsigned long Edx;
  /* 0x003c */ unsigned long Ecx;
  /* 0x0040 */ unsigned long Eax;
  /* 0x0044 */ unsigned char PreviousPreviousMode;
  /* 0x0045 */ unsigned char EntropyQueueDpc;
  /* 0x0046 */ unsigned char Reserved[2];
  /* 0x0048 */ unsigned long MxCsr;
  /* 0x004c */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} KTRAP_FRAME, *PKTRAP_FRAME; /* size: 0x008c */

typedef struct _KTSS
{
  /* 0x0000 */ unsigned short Backlink;
  /* 0x0002 */ unsigned short Reserved0;
  /* 0x0004 */ unsigned long Esp0;
  /* 0x0008 */ unsigned short Ss0;
  /* 0x000a */ unsigned short Reserved1;
  /* 0x000c */ unsigned long NotUsed1[4];
  /* 0x001c */ unsigned long CR3;
  /* 0x0020 */ unsigned long Eip;
  /* 0x0024 */ unsigned long EFlags;
  /* 0x0028 */ unsigned long Eax;
  /* 0x002c */ unsigned long Ecx;
  /* 0x0030 */ unsigned long Edx;
  /* 0x0034 */ unsigned long Ebx;
  /* 0x0038 */ unsigned long Esp;
  /* 0x003c */ unsigned long Ebp;
  /* 0x0040 */ unsigned long Esi;
  /* 0x0044 */ unsigned long Edi;
  /* 0x0048 */ unsigned short Es;
  /* 0x004a */ unsigned short Reserved2;
  /* 0x004c */ unsigned short Cs;
  /* 0x004e */ unsigned short Reserved3;
  /* 0x0050 */ unsigned short Ss;
  /* 0x0052 */ unsigned short Reserved4;
  /* 0x0054 */ unsigned short Ds;
  /* 0x0056 */ unsigned short Reserved5;
  /* 0x0058 */ unsigned short Fs;
  /* 0x005a */ unsigned short Reserved6;
  /* 0x005c */ unsigned short Gs;
  /* 0x005e */ unsigned short Reserved7;
  /* 0x0060 */ unsigned short LDT;
  /* 0x0062 */ unsigned short Reserved8;
  /* 0x0064 */ unsigned short Flags;
  /* 0x0066 */ unsigned short IoMapBase;
  /* 0x0068 */ struct _KiIoAccessMap IoMaps[1];
  /* 0x208c */ unsigned char IntDirectionMap[32];
} KTSS, *PKTSS; /* size: 0x20ac */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long AitSamplingValue;
  /* 0x024c */ unsigned long AppCompatFlag;
  /* 0x0250 */ unsigned __int64 RNGSeedVersion;
  /* 0x0258 */ unsigned long GlobalValidationRunlevel;
  /* 0x025c */ volatile long TimeZoneBiasStamp;
  /* 0x0260 */ unsigned long NtBuildNumber;
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ unsigned char Reserved0[1];
  /* 0x026a */ unsigned short NativeProcessorArchitecture;
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ unsigned long BootId;
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  union
  {
    /* 0x02d5 */ unsigned char MitigationPolicies;
    struct /* bitfield */
    {
      /* 0x02d5 */ unsigned char NXSupportPolicy : 2; /* bit position: 0 */
      /* 0x02d5 */ unsigned char SEHValidationPolicy : 2; /* bit position: 2 */
      /* 0x02d5 */ unsigned char CurDirDevicesSkippedForDlls : 2; /* bit position: 4 */
      /* 0x02d5 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x02d6 */ unsigned char Reserved6[2];
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ unsigned char Reserved12[3];
  union
  {
    /* 0x02f0 */ unsigned long SharedDataFlags;
    struct /* bitfield */
    {
      /* 0x02f0 */ unsigned long DbgErrorPortPresent : 1; /* bit position: 0 */
      /* 0x02f0 */ unsigned long DbgElevationEnabled : 1; /* bit position: 1 */
      /* 0x02f0 */ unsigned long DbgVirtEnabled : 1; /* bit position: 2 */
      /* 0x02f0 */ unsigned long DbgInstallerDetectEnabled : 1; /* bit position: 3 */
      /* 0x02f0 */ unsigned long DbgLkgEnabled : 1; /* bit position: 4 */
      /* 0x02f0 */ unsigned long DbgDynProcessorEnabled : 1; /* bit position: 5 */
      /* 0x02f0 */ unsigned long DbgConsoleBrokerEnabled : 1; /* bit position: 6 */
      /* 0x02f0 */ unsigned long DbgSecureBootEnabled : 1; /* bit position: 7 */
      /* 0x02f0 */ unsigned long DbgMultiSessionSku : 1; /* bit position: 8 */
      /* 0x02f0 */ unsigned long SpareBits : 23; /* bit position: 9 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02f4 */ unsigned long DataFlagsPad[1];
  /* 0x02f8 */ unsigned __int64 TestRetInstruction;
  /* 0x0300 */ __int64 QpcFrequency;
  /* 0x0308 */ unsigned __int64 SystemCallPad[3];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
    /* 0x0320 */ unsigned long ReservedTickCountOverlay[3];
  }; /* size: 0x000c */
  /* 0x032c */ unsigned long TickCountPad[1];
  /* 0x0330 */ unsigned long Cookie;
  /* 0x0334 */ unsigned long CookiePad[1];
  /* 0x0338 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0340 */ unsigned __int64 TimeUpdateLock;
  /* 0x0348 */ unsigned __int64 BaselineSystemTimeQpc;
  /* 0x0350 */ unsigned __int64 BaselineInterruptTimeQpc;
  /* 0x0358 */ unsigned __int64 QpcSystemTimeIncrement;
  /* 0x0360 */ unsigned __int64 QpcInterruptTimeIncrement;
  /* 0x0368 */ unsigned char QpcSystemTimeIncrementShift;
  /* 0x0369 */ unsigned char QpcInterruptTimeIncrementShift;
  /* 0x036a */ unsigned short UnparkedProcessorCount;
  /* 0x036c */ unsigned char Reserved8[20];
  /* 0x0380 */ unsigned short UserModeGlobalLogger[16];
  /* 0x03a0 */ unsigned long ImageFileExecutionOptions;
  /* 0x03a4 */ unsigned long LangGenerationCount;
  /* 0x03a8 */ unsigned __int64 Reserved4;
  /* 0x03b0 */ volatile unsigned __int64 InterruptTimeBias;
  /* 0x03b8 */ volatile unsigned __int64 QpcBias;
  /* 0x03c0 */ unsigned long ActiveProcessorCount;
  /* 0x03c4 */ volatile unsigned char ActiveGroupCount;
  /* 0x03c5 */ unsigned char Reserved9;
  union
  {
    /* 0x03c6 */ unsigned short QpcData;
    struct
    {
      /* 0x03c6 */ volatile unsigned char QpcBypassEnabled;
      /* 0x03c7 */ unsigned char QpcShift;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x03c8 */ union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  /* 0x03d0 */ union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  /* 0x03d8 */ struct _XSTATE_CONFIGURATION XState;
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x0708 */

typedef struct _KWAIT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY WaitListEntry;
  /* 0x0008 */ unsigned char WaitType;
  /* 0x0009 */ volatile unsigned char BlockState;
  /* 0x000a */ unsigned short WaitKey;
  union
  {
    /* 0x000c */ struct _KTHREAD* Thread;
    /* 0x000c */ struct _KQUEUE* NotificationQueue;
  }; /* size: 0x0004 */
  /* 0x0010 */ void* Object;
  /* 0x0014 */ void* SparePtr;
} KWAIT_BLOCK, *PKWAIT_BLOCK; /* size: 0x0018 */

typedef enum _KWAIT_BLOCK_STATE
{
  WaitBlockBypassStart = 0,
  WaitBlockBypassComplete = 1,
  WaitBlockSuspendBypassStart = 2,
  WaitBlockSuspendBypassComplete = 3,
  WaitBlockActive = 4,
  WaitBlockInactive = 5,
  WaitBlockSuspended = 6,
  WaitBlockAllStates = 7,
} KWAIT_BLOCK_STATE, *PKWAIT_BLOCK_STATE;

typedef struct _KWAIT_CHAIN
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Head;
} KWAIT_CHAIN, *PKWAIT_CHAIN; /* size: 0x0004 */

typedef enum _KWAIT_REASON
{
  Executive = 0,
  FreePage = 1,
  PageIn = 2,
  PoolAllocation = 3,
  DelayExecution = 4,
  Suspended = 5,
  UserRequest = 6,
  WrExecutive = 7,
  WrFreePage = 8,
  WrPageIn = 9,
  WrPoolAllocation = 10,
  WrDelayExecution = 11,
  WrSuspended = 12,
  WrUserRequest = 13,
  WrSpare0 = 14,
  WrQueue = 15,
  WrLpcReceive = 16,
  WrLpcReply = 17,
  WrVirtualMemory = 18,
  WrPageOut = 19,
  WrRendezvous = 20,
  WrKeyedEvent = 21,
  WrTerminated = 22,
  WrProcessInSwap = 23,
  WrCpuRateControl = 24,
  WrCalloutStack = 25,
  WrKernel = 26,
  WrResource = 27,
  WrPushLock = 28,
  WrMutex = 29,
  WrQuantumEnd = 30,
  WrDispatchInt = 31,
  WrPreempted = 32,
  WrYieldExecution = 33,
  WrFastMutex = 34,
  WrGuardedMutex = 35,
  WrRundown = 36,
  WrAlertByThreadId = 37,
  WrDeferredPreempt = 38,
  MaximumWaitReason = 39,
} KWAIT_REASON, *PKWAIT_REASON;

typedef enum _KWAIT_STATE
{
  WaitInProgress = 0,
  WaitCommitted = 1,
  WaitAborted = 2,
  WaitSuspendInProgress = 3,
  WaitSuspended = 4,
  WaitResumeInProgress = 5,
  WaitResumeAborted = 6,
  WaitFirstSuspendState = 3,
  WaitLastSuspendState = 6,
  MaximumWaitState = 7,
} KWAIT_STATE, *PKWAIT_STATE;

typedef union _KWAIT_STATUS_REGISTER
{
  union
  {
    /* 0x0000 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char State : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char Affinity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Priority : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char Apc : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char UserApc : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Alert : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER; /* size: 0x0001 */

typedef struct _KiIoAccessMap
{
  /* 0x0000 */ unsigned char DirectionMap[32];
  /* 0x0020 */ unsigned char IoMap[8196];
} KiIoAccessMap, *PKiIoAccessMap; /* size: 0x2024 */

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct // _TAG_UNNAMED_138
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

typedef struct _LAZY_WRITER
{
  /* 0x0000 */ struct _KDPC ScanDpc;
  /* 0x0020 */ struct _KTIMER ScanTimer;
  /* 0x0048 */ unsigned char ScanActive;
  /* 0x0049 */ unsigned char OtherWork;
  /* 0x004a */ unsigned char PendingTeardownScan;
  /* 0x004b */ unsigned char PendingPeriodicScan;
  /* 0x004c */ unsigned char PendingLowMemoryScan;
  /* 0x004d */ unsigned char PendingPowerScan;
  /* 0x004e */ unsigned char PendingCoalescingFlushScan;
  /* 0x004f */ char __PADDING__[1];
} LAZY_WRITER, *PLAZY_WRITER; /* size: 0x0050 */

typedef struct _LDRP_CSLIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Tail;
} LDRP_CSLIST, *PLDRP_CSLIST; /* size: 0x0004 */

struct _LDRP_LOAD_CONTEXT;

typedef struct _LDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0008 */ struct _LIST_ENTRY InMemoryOrderLinks;
  /* 0x0010 */ struct _LIST_ENTRY InInitializationOrderLinks;
  /* 0x0018 */ void* DllBase;
  /* 0x001c */ void* EntryPoint;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ struct _UNICODE_STRING FullDllName;
  /* 0x002c */ struct _UNICODE_STRING BaseDllName;
  union
  {
    /* 0x0034 */ unsigned char FlagGroup[4];
    /* 0x0034 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0034 */ unsigned long PackagedBinary : 1; /* bit position: 0 */
      /* 0x0034 */ unsigned long MarkedForRemoval : 1; /* bit position: 1 */
      /* 0x0034 */ unsigned long ImageDll : 1; /* bit position: 2 */
      /* 0x0034 */ unsigned long LoadNotificationsSent : 1; /* bit position: 3 */
      /* 0x0034 */ unsigned long TelemetryEntryProcessed : 1; /* bit position: 4 */
      /* 0x0034 */ unsigned long ProcessStaticImport : 1; /* bit position: 5 */
      /* 0x0034 */ unsigned long InLegacyLists : 1; /* bit position: 6 */
      /* 0x0034 */ unsigned long InIndexes : 1; /* bit position: 7 */
      /* 0x0034 */ unsigned long ShimDll : 1; /* bit position: 8 */
      /* 0x0034 */ unsigned long InExceptionTable : 1; /* bit position: 9 */
      /* 0x0034 */ unsigned long ReservedFlags1 : 2; /* bit position: 10 */
      /* 0x0034 */ unsigned long LoadInProgress : 1; /* bit position: 12 */
      /* 0x0034 */ unsigned long LoadConfigProcessed : 1; /* bit position: 13 */
      /* 0x0034 */ unsigned long EntryProcessed : 1; /* bit position: 14 */
      /* 0x0034 */ unsigned long ProtectDelayLoad : 1; /* bit position: 15 */
      /* 0x0034 */ unsigned long ReservedFlags3 : 2; /* bit position: 16 */
      /* 0x0034 */ unsigned long DontCallForThreads : 1; /* bit position: 18 */
      /* 0x0034 */ unsigned long ProcessAttachCalled : 1; /* bit position: 19 */
      /* 0x0034 */ unsigned long ProcessAttachFailed : 1; /* bit position: 20 */
      /* 0x0034 */ unsigned long CorDeferredValidate : 1; /* bit position: 21 */
      /* 0x0034 */ unsigned long CorImage : 1; /* bit position: 22 */
      /* 0x0034 */ unsigned long DontRelocate : 1; /* bit position: 23 */
      /* 0x0034 */ unsigned long CorILOnly : 1; /* bit position: 24 */
      /* 0x0034 */ unsigned long ReservedFlags5 : 3; /* bit position: 25 */
      /* 0x0034 */ unsigned long Redirected : 1; /* bit position: 28 */
      /* 0x0034 */ unsigned long ReservedFlags6 : 2; /* bit position: 29 */
      /* 0x0034 */ unsigned long CompatDatabaseProcessed : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0038 */ unsigned short ObsoleteLoadCount;
  /* 0x003a */ unsigned short TlsIndex;
  /* 0x003c */ struct _LIST_ENTRY HashLinks;
  /* 0x0044 */ unsigned long TimeDateStamp;
  /* 0x0048 */ struct _ACTIVATION_CONTEXT* EntryPointActivationContext;
  /* 0x004c */ void* Lock;
  /* 0x0050 */ struct _LDR_DDAG_NODE* DdagNode;
  /* 0x0054 */ struct _LIST_ENTRY NodeModuleLink;
  /* 0x005c */ struct _LDRP_LOAD_CONTEXT* LoadContext;
  /* 0x0060 */ void* ParentDllBase;
  /* 0x0064 */ void* SwitchBackContext;
  /* 0x0068 */ struct _RTL_BALANCED_NODE BaseAddressIndexNode;
  /* 0x0074 */ struct _RTL_BALANCED_NODE MappingInfoIndexNode;
  /* 0x0080 */ unsigned long OriginalBase;
  /* 0x0088 */ union _LARGE_INTEGER LoadTime;
  /* 0x0090 */ unsigned long BaseNameHashValue;
  /* 0x0094 */ enum _LDR_DLL_LOAD_REASON LoadReason;
  /* 0x0098 */ unsigned long ImplicitPathOptions;
  /* 0x009c */ unsigned long ReferenceCount;
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY; /* size: 0x00a0 */

typedef struct _LDR_DDAG_NODE
{
  /* 0x0000 */ struct _LIST_ENTRY Modules;
  /* 0x0008 */ struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;
  /* 0x000c */ unsigned long LoadCount;
  /* 0x0010 */ unsigned long LoadWhileUnloadingCount;
  /* 0x0014 */ unsigned long LowestLink;
  /* 0x0018 */ struct _LDRP_CSLIST Dependencies;
  /* 0x001c */ struct _LDRP_CSLIST IncomingDependencies;
  /* 0x0020 */ enum _LDR_DDAG_STATE State;
  /* 0x0024 */ struct _SINGLE_LIST_ENTRY CondenseLink;
  /* 0x0028 */ unsigned long PreorderNumber;
} LDR_DDAG_NODE, *PLDR_DDAG_NODE; /* size: 0x002c */

typedef enum _LDR_DDAG_STATE
{
  LdrModulesMerged = -5,
  LdrModulesInitError = -4,
  LdrModulesSnapError = -3,
  LdrModulesUnloaded = -2,
  LdrModulesUnloading = -1,
  LdrModulesPlaceHolder = 0,
  LdrModulesMapping = 1,
  LdrModulesMapped = 2,
  LdrModulesWaitingForDependencies = 3,
  LdrModulesSnapping = 4,
  LdrModulesSnapped = 5,
  LdrModulesCondensed = 6,
  LdrModulesReadyToInit = 7,
  LdrModulesInitializing = 8,
  LdrModulesReadyToRun = 9,
} LDR_DDAG_STATE, *PLDR_DDAG_STATE;

typedef enum _LDR_DLL_LOAD_REASON
{
  LoadReasonStaticDependency = 0,
  LoadReasonStaticForwarderDependency = 1,
  LoadReasonDynamicForwarderDependency = 2,
  LoadReasonDelayloadDependency = 3,
  LoadReasonDynamicLoad = 4,
  LoadReasonAsImageLoad = 5,
  LoadReasonAsDataLoad = 6,
  LoadReasonUnknown = -1,
} LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef struct _LDR_SERVICE_TAG_RECORD
{
  /* 0x0000 */ struct _LDR_SERVICE_TAG_RECORD* Next;
  /* 0x0004 */ unsigned long ServiceTag;
} LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD; /* size: 0x0008 */

typedef struct _LEARNING_MODE_DATA
{
  /* 0x0000 */ unsigned long Settings;
  /* 0x0004 */ unsigned char Enabled;
  /* 0x0005 */ unsigned char PermissiveModeEnabled;
  /* 0x0006 */ char __PADDING__[2];
} LEARNING_MODE_DATA, *PLEARNING_MODE_DATA; /* size: 0x0008 */

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0004 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0008 */

typedef struct _LOCK_HEADER
{
  /* 0x0000 */ struct _RTL_AVL_TREE LockTree;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ unsigned long Lock;
  /* 0x000c */ unsigned long Valid;
} LOCK_HEADER, *PLOCK_HEADER; /* size: 0x0010 */

typedef enum _LOCK_OPERATION
{
  IoReadAccess = 0,
  IoWriteAccess = 1,
  IoModifyAccess = 2,
} LOCK_OPERATION, *PLOCK_OPERATION;

typedef struct _LOCK_TRACKER
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE LockTrackerNode;
  /* 0x000c */ struct _MDL* Mdl;
  /* 0x0010 */ void* StartVa;
  /* 0x0014 */ unsigned long Count;
  /* 0x0018 */ unsigned long Offset;
  /* 0x001c */ unsigned long Length;
  /* 0x0020 */ unsigned long Page;
  /* 0x0024 */ void* StackTrace[8];
  /* 0x0044 */ unsigned long Who;
  /* 0x0048 */ struct _EPROCESS* Process;
} LOCK_TRACKER, *PLOCK_TRACKER; /* size: 0x004c */

typedef struct _LOGGED_STREAM_CALLBACK_V1
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0004 */ void* FlushToLsnRoutine /* function */;
} LOGGED_STREAM_CALLBACK_V1, *PLOGGED_STREAM_CALLBACK_V1; /* size: 0x0008 */

typedef struct _LOGGED_STREAM_CALLBACK_V2
{
  /* 0x0000 */ struct _LOG_HANDLE_CONTEXT* LogHandleContext;
} LOGGED_STREAM_CALLBACK_V2, *PLOGGED_STREAM_CALLBACK_V2; /* size: 0x0004 */

typedef struct _LOG_HANDLE_CONTEXT
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0004 */ void* FlushToLsnRoutine /* function */;
  /* 0x0008 */ void* QueryLogHandleInfoRoutine /* function */;
  /* 0x000c */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0018 */ struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  /* 0x0040 */ unsigned long AdditionalPagesToWrite;
  /* 0x0044 */ unsigned long CcLWScanDPThreshold;
  /* 0x0048 */ union _LARGE_INTEGER LargestLsnForCurrentLWScan;
  /* 0x0050 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0054 */ unsigned long LargestLsnFileObjectKey;
  /* 0x0058 */ union _LARGE_INTEGER LastLWTimeStamp;
  /* 0x0060 */ unsigned long Flags;
  /* 0x0064 */ long __PADDING__[1];
} LOG_HANDLE_CONTEXT, *PLOG_HANDLE_CONTEXT; /* size: 0x0068 */

typedef struct _LOOKASIDE_LIST_EX
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX; /* size: 0x0048 */

typedef struct _LPCP_MESSAGE
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY Entry;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeEntry;
      /* 0x0004 */ unsigned long Reserved0;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0008 */ void* SenderPort;
  /* 0x000c */ struct _ETHREAD* RepliedToThread;
  /* 0x0010 */ void* PortContext;
  /* 0x0018 */ struct _PORT_MESSAGE Request;
} LPCP_MESSAGE, *PLPCP_MESSAGE; /* size: 0x0030 */

typedef struct _LPCP_NONPAGED_PORT_QUEUE
{
  /* 0x0000 */ struct _KSEMAPHORE Semaphore;
  /* 0x0014 */ struct _LPCP_PORT_OBJECT* BackPointer;
} LPCP_NONPAGED_PORT_QUEUE, *PLPCP_NONPAGED_PORT_QUEUE; /* size: 0x0018 */

typedef struct _LPCP_PORT_OBJECT
{
  /* 0x0000 */ struct _LPCP_PORT_OBJECT* ConnectionPort;
  /* 0x0004 */ struct _LPCP_PORT_OBJECT* ConnectedPort;
  /* 0x0008 */ struct _LPCP_PORT_QUEUE MsgQueue;
  /* 0x0018 */ struct _CLIENT_ID Creator;
  /* 0x0020 */ void* ClientSectionBase;
  /* 0x0024 */ void* ServerSectionBase;
  /* 0x0028 */ void* PortContext;
  /* 0x002c */ struct _ETHREAD* ClientThread;
  /* 0x0030 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x003c */ struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  /* 0x0078 */ struct _LIST_ENTRY LpcReplyChainHead;
  /* 0x0080 */ struct _LIST_ENTRY LpcDataInfoChainHead;
  union
  {
    /* 0x0088 */ struct _EPROCESS* ServerProcess;
    /* 0x0088 */ struct _EPROCESS* MappingProcess;
  }; /* size: 0x0004 */
  /* 0x008c */ unsigned short MaxMessageLength;
  /* 0x008e */ unsigned short MaxConnectionInfoLength;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ struct _KEVENT WaitEvent;
} LPCP_PORT_OBJECT, *PLPCP_PORT_OBJECT; /* size: 0x00a4 */

typedef struct _LPCP_PORT_QUEUE
{
  /* 0x0000 */ struct _LPCP_NONPAGED_PORT_QUEUE* NonPagedPortQueue;
  /* 0x0004 */ struct _KSEMAPHORE* Semaphore;
  /* 0x0008 */ struct _LIST_ENTRY ReceiveHead;
} LPCP_PORT_QUEUE, *PLPCP_PORT_QUEUE; /* size: 0x0010 */

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _M128A
{
  /* 0x0000 */ unsigned __int64 Low;
  /* 0x0008 */ __int64 High;
} M128A, *PM128A; /* size: 0x0010 */

typedef struct _MAILSLOT_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long MailslotQuota;
  /* 0x0004 */ unsigned long MaximumMessageSize;
  /* 0x0008 */ union _LARGE_INTEGER ReadTimeout;
  /* 0x0010 */ unsigned char TimeoutSpecified;
  /* 0x0011 */ char __PADDING__[7];
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS; /* size: 0x0018 */

typedef struct _MAPPED_FILE_SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0004 */ unsigned long TotalNumberOfPtes;
  /* 0x0008 */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x000c */ unsigned long NumberOfCommittedPages;
  /* 0x0010 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0018 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0018 */ void* BasedAddress;
  }; /* size: 0x0004 */
  /* 0x001c */ struct _EX_PUSH_LOCK SegmentLock;
} MAPPED_FILE_SEGMENT, *PMAPPED_FILE_SEGMENT; /* size: 0x0020 */

typedef struct _MBCB
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeIsInZone;
  /* 0x0004 */ unsigned long PagesToWrite;
  /* 0x0008 */ unsigned long DirtyPages;
  /* 0x000c */ unsigned long Reserved;
  /* 0x0010 */ struct _LIST_ENTRY BitmapRanges;
  /* 0x0018 */ __int64 ResumeWritePage;
  /* 0x0020 */ __int64 MostRecentlyDirtiedPage;
  /* 0x0028 */ struct _BITMAP_RANGE BitmapRange1;
  /* 0x0048 */ struct _BITMAP_RANGE BitmapRange2;
  /* 0x0068 */ struct _BITMAP_RANGE BitmapRange3;
} MBCB, *PMBCB; /* size: 0x0088 */

typedef struct _MCGEN_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 RegistrationHandle;
  /* 0x0008 */ unsigned __int64 Logger;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long IsEnabled;
  /* 0x0028 */ unsigned char Level;
  /* 0x0029 */ unsigned char Reserve;
  /* 0x002a */ unsigned short EnableBitsCount;
  /* 0x002c */ unsigned long* EnableBitMask;
  /* 0x0030 */ const unsigned __int64* EnableKeyWords;
  /* 0x0034 */ const unsigned char* EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT; /* size: 0x0038 */

typedef struct _MDL
{
  /* 0x0000 */ struct _MDL* Next;
  /* 0x0004 */ short Size;
  /* 0x0006 */ short MdlFlags;
  /* 0x0008 */ struct _EPROCESS* Process;
  /* 0x000c */ void* MappedSystemVa;
  /* 0x0010 */ void* StartVa;
  /* 0x0014 */ unsigned long ByteCount;
  /* 0x0018 */ unsigned long ByteOffset;
} MDL, *PMDL; /* size: 0x001c */

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ enum _TYPE_OF_MEMORY MemoryType;
  /* 0x000c */ unsigned long BasePage;
  /* 0x0010 */ unsigned long PageCount;
} MEMORY_ALLOCATION_DESCRIPTOR, *PMEMORY_ALLOCATION_DESCRIPTOR; /* size: 0x0014 */

typedef enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
  MmNotMapped = -1,
} MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
} MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef struct _MIPFNBLINK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Blink : 24; /* bit position: 0 */
      /* 0x0000 */ unsigned long TbFlushStamp : 4; /* bit position: 24 */
      /* 0x0000 */ unsigned long Unused : 1; /* bit position: 28 */
      /* 0x0000 */ unsigned long PageBlinkDeleteBit : 1; /* bit position: 29 */
      /* 0x0000 */ unsigned long PageBlinkLockBit : 1; /* bit position: 30 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ShareCount : 30; /* bit position: 0 */
      /* 0x0000 */ unsigned long PageShareCountDeleteBit : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long PageShareCountLockBit : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long EntireField;
    /* 0x0000 */ volatile long Lock;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long LockNotUsed : 30; /* bit position: 0 */
      /* 0x0000 */ unsigned long DeleteBit : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long LockBit : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} MIPFNBLINK, *PMIPFNBLINK; /* size: 0x0004 */

typedef struct _MI_ACCESS_LOG_STATE
{
  /* 0x0000 */ struct _MM_PAGE_ACCESS_INFO_HEADER* volatile CcAccessLog;
  /* 0x0004 */ unsigned long Enabled;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM DisableAccessLogging;
  /* 0x0018 */ unsigned long MinLoggingPriority;
  /* 0x0040 */ unsigned long AccessLoggingLock;
  /* 0x0044 */ long __PADDING__[15];
} MI_ACCESS_LOG_STATE, *PMI_ACCESS_LOG_STATE; /* size: 0x0080 */

typedef struct _MI_ACTIVE_WSLE_LISTHEAD
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
} MI_ACTIVE_WSLE_LISTHEAD, *PMI_ACTIVE_WSLE_LISTHEAD; /* size: 0x0008 */

typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0010 */ unsigned long EventSets;
} MI_AVAILABLE_PAGE_WAIT_STATES, *PMI_AVAILABLE_PAGE_WAIT_STATES; /* size: 0x0014 */

typedef enum _MI_AVAILABLE_PAGE_WAIT_TYPES
{
  AvailablePagesWaitLow = 0,
  AvailablePagesWaitHigh = 1,
  AvailablePagesWaitMaximum = 2,
} MI_AVAILABLE_PAGE_WAIT_TYPES, *PMI_AVAILABLE_PAGE_WAIT_TYPES;

typedef struct _MI_BAD_MEMORY_EVENT_ENTRY
{
  /* 0x0000 */ unsigned long BugCheckCode;
  /* 0x0004 */ long Active;
  /* 0x0008 */ unsigned long Data;
  /* 0x0010 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0018 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_BAD_MEMORY_EVENT_ENTRY, *PMI_BAD_MEMORY_EVENT_ENTRY; /* size: 0x0028 */

typedef struct _MI_CACHED_PTE
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long GlobalTimeStamp;
      /* 0x0004 */ unsigned long PteIndex;
    }; /* size: 0x0008 */
    /* 0x0000 */ __int64 Long;
  }; /* size: 0x0008 */
} MI_CACHED_PTE, *PMI_CACHED_PTE; /* size: 0x0008 */

typedef struct _MI_CACHED_PTES
{
  /* 0x0000 */ struct _MI_CACHED_PTE Bins[8];
  /* 0x0040 */ long CachedPteCount;
  /* 0x0044 */ long __PADDING__[1];
} MI_CACHED_PTES, *PMI_CACHED_PTES; /* size: 0x0048 */

typedef struct _MI_CFG_BITMAP_INFO
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0004 */ unsigned long RegionSize;
  /* 0x0008 */ struct _MMVAD* BitmapVad;
} MI_CFG_BITMAP_INFO, *PMI_CFG_BITMAP_INFO; /* size: 0x000c */

typedef enum _MI_CFG_BITMAP_TYPE
{
  CfgBitMapNative = 0,
  CfgBitMapMax = 1,
} MI_CFG_BITMAP_TYPE, *PMI_CFG_BITMAP_TYPE;

typedef struct _MI_CLONE_BLOCK_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ActualCloneCommit : 27; /* bit position: 0 */
    /* 0x0000 */ unsigned long CloneProtection : 5; /* bit position: 27 */
  }; /* bitfield */
} MI_CLONE_BLOCK_FLAGS, *PMI_CLONE_BLOCK_FLAGS; /* size: 0x0004 */

typedef struct _MI_COMBINE_PAGE_LISTHEAD
{
  /* 0x0000 */ struct _RTL_AVL_TREE Table;
  /* 0x0004 */ volatile long Lock;
} MI_COMBINE_PAGE_LISTHEAD, *PMI_COMBINE_PAGE_LISTHEAD; /* size: 0x0008 */

typedef struct _MI_COMBINE_STATE
{
  /* 0x0000 */ volatile long ActiveSpinLock;
  /* 0x0004 */ unsigned long CombiningThreadCount;
  /* 0x0008 */ struct _RTL_AVL_TREE ActiveThreadTree;
  /* 0x0010 */ unsigned __int64 ZeroPageHashValue;
} MI_COMBINE_STATE, *PMI_COMBINE_STATE; /* size: 0x0018 */

typedef struct _MI_COMBINE_WORKITEM
{
  /* 0x0000 */ void* NextEntry;
  /* 0x0004 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_COMBINE_WORKITEM, *PMI_COMBINE_WORKITEM; /* size: 0x0014 */

typedef struct _MI_COMMON_PAGE_STATE
{
  /* 0x0000 */ struct _MMPFN* PageOfOnesPfn;
  /* 0x0004 */ unsigned long PageOfOnes;
  /* 0x0008 */ struct _MMPFN* DummyPagePfn;
  /* 0x000c */ unsigned long DummyPage;
  /* 0x0010 */ unsigned long PageOfZeroes;
  /* 0x0014 */ void* ZeroMapping;
  /* 0x0018 */ void* OnesMapping;
  /* 0x001c */ unsigned long BitmapGapFrames[2];
  /* 0x0024 */ unsigned long PfnGapFrames[2];
} MI_COMMON_PAGE_STATE, *PMI_COMMON_PAGE_STATE; /* size: 0x002c */

typedef struct _MI_CONTROL_AREA_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_CONTROL_AREA_WAIT_BLOCK* Next;
  /* 0x0004 */ unsigned long WaitReason;
  /* 0x0008 */ unsigned long WaitResponse;
  /* 0x000c */ struct _KGATE Gate;
} MI_CONTROL_AREA_WAIT_BLOCK, *PMI_CONTROL_AREA_WAIT_BLOCK; /* size: 0x001c */

typedef struct _MI_DEBUGGER_STATE
{
  /* 0x0000 */ unsigned char TransientWrite;
  /* 0x0001 */ unsigned char CodePageEdited;
  /* 0x0004 */ struct _MMPTE* DebugPte;
  /* 0x0008 */ unsigned long PoisonedTb;
  /* 0x000c */ volatile long InDebugger;
  /* 0x0010 */ void* volatile Pfns[32];
} MI_DEBUGGER_STATE, *PMI_DEBUGGER_STATE; /* size: 0x0090 */

typedef struct _MI_DECAY_TIMER_LINK
{
  union // _TAG_UNNAMED_139
  {
    union
    {
      /* 0x0000 */ unsigned long Long;
      /* 0x0000 */ struct _MI_DECAY_TIMER_LINKAGE e1;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} MI_DECAY_TIMER_LINK, *PMI_DECAY_TIMER_LINK; /* size: 0x0004 */

typedef struct _MI_DECAY_TIMER_LINKAGE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long PreviousDecayPfn : 15; /* bit position: 1 */
    /* 0x0000 */ unsigned long Spare1 : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long NextDecayPfn : 15; /* bit position: 17 */
  }; /* bitfield */
} MI_DECAY_TIMER_LINKAGE, *PMI_DECAY_TIMER_LINKAGE; /* size: 0x0004 */

typedef struct _MI_DRIVER_VA
{
  /* 0x0000 */ struct _MI_DRIVER_VA* Next;
  /* 0x0004 */ struct _MMPTE* PointerPte;
  /* 0x0008 */ struct _RTL_BITMAP BitMap;
  /* 0x0010 */ unsigned long Hint;
} MI_DRIVER_VA, *PMI_DRIVER_VA; /* size: 0x0014 */

typedef enum _MI_DYNAMICBASE_BITMAP
{
  DynamicBaseBitMap32 = 0,
  LastDynamicBaseBitMap = 1,
} MI_DYNAMICBASE_BITMAP, *PMI_DYNAMICBASE_BITMAP;

typedef struct _MI_ERROR_STATE
{
  /* 0x0000 */ struct _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry;
  /* 0x0028 */ struct _MI_PROBE_RAISE_TRACKER ProbeRaises;
  /* 0x0064 */ struct _MI_FORCED_COMMITS ForcedCommits;
  /* 0x006c */ unsigned long WsleFailures[2];
  /* 0x0074 */ unsigned long WsLinear;
  /* 0x0078 */ unsigned long PageHashErrors;
  /* 0x007c */ unsigned long CheckZeroCount;
  /* 0x0080 */ volatile long ZeroedPageSingleBitErrorsDetected;
  /* 0x0084 */ volatile long BadPagesDetected;
  /* 0x0088 */ long ScrubPasses;
  /* 0x008c */ long ScrubBadPagesFound;
  /* 0x0090 */ unsigned char PendingBadPages;
  /* 0x0091 */ unsigned char InitFailure;
  /* 0x0092 */ unsigned char StopBadMaps;
  /* 0x0093 */ char __PADDING__[5];
} MI_ERROR_STATE, *PMI_ERROR_STATE; /* size: 0x0098 */

typedef struct _MI_EXTRA_IMAGE_INFORMATION
{
  /* 0x0000 */ unsigned long SizeOfHeaders;
  /* 0x0004 */ unsigned long SizeOfImage;
} MI_EXTRA_IMAGE_INFORMATION, *PMI_EXTRA_IMAGE_INFORMATION; /* size: 0x0008 */

typedef struct _MI_FILE_EXTENTS
{
  /* 0x0000 */ struct _MI_FILE_EXTENTS_WAIT_BLOCK* WaitList;
} MI_FILE_EXTENTS, *PMI_FILE_EXTENTS; /* size: 0x0004 */

typedef struct _MI_FILE_EXTENTS_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_FILE_EXTENTS_WAIT_BLOCK* Next;
  /* 0x0004 */ struct _KGATE Gate;
} MI_FILE_EXTENTS_WAIT_BLOCK, *PMI_FILE_EXTENTS_WAIT_BLOCK; /* size: 0x0014 */

typedef struct _MI_FORCED_COMMITS
{
  /* 0x0000 */ unsigned long Regular;
  /* 0x0004 */ unsigned long Wrap;
} MI_FORCED_COMMITS, *PMI_FORCED_COMMITS; /* size: 0x0008 */

typedef struct _MI_HARDWARE_STATE
{
  /* 0x0000 */ unsigned long NodeMask;
  /* 0x0004 */ unsigned short* NodeGraph;
  /* 0x0008 */ struct _MI_SYSTEM_NODE_INFORMATION* SystemNodeInformation;
  /* 0x000c */ unsigned long NumaLastRangeIndex;
  /* 0x0010 */ struct _HAL_NODE_RANGE* NumaMemoryRanges;
  /* 0x0014 */ unsigned char NumaTableCaptured;
  /* 0x0015 */ unsigned char NodeShift;
  /* 0x0018 */ struct _HAL_CHANNEL_MEMORY_RANGES* ChannelMemoryRanges;
  /* 0x001c */ unsigned char ChannelShift;
  /* 0x0020 */ unsigned long SecondLevelCacheSize;
  /* 0x0024 */ unsigned long FirstLevelCacheSize;
  /* 0x0028 */ unsigned long PhysicalAddressBits;
  /* 0x002c */ unsigned char WriteCombiningPtes;
  /* 0x002d */ unsigned char AllMainMemoryMustBeCached;
  /* 0x0030 */ unsigned long TotalPagesAllowed;
  /* 0x0034 */ unsigned long SecondaryColorMask;
  /* 0x0038 */ unsigned long SecondaryColors;
  /* 0x003c */ unsigned long FlushTbForAttributeChange;
  /* 0x0040 */ unsigned long FlushCacheForAttributeChange;
  /* 0x0044 */ unsigned long FlushCacheForPageAttributeChange;
  /* 0x0048 */ unsigned long CacheFlushPromoteThreshold;
  /* 0x004c */ unsigned long FlushTbThreshold;
  /* 0x0050 */ struct _MI_ZERO_COST_COUNTS ZeroCostCounts[2];
  /* 0x0070 */ unsigned long HighestPossiblePhysicalPage;
  /* 0x0074 */ long __PADDING__[1];
} MI_HARDWARE_STATE, *PMI_HARDWARE_STATE; /* size: 0x0078 */

typedef struct _MI_IMAGE_SECURITY_REFERENCE
{
  /* 0x0000 */ void* DynamicRelocations;
  /* 0x0004 */ struct _IMAGE_SECURITY_CONTEXT SecurityContext;
  /* 0x0008 */ unsigned long StrongImageReference;
} MI_IMAGE_SECURITY_REFERENCE, *PMI_IMAGE_SECURITY_REFERENCE; /* size: 0x000c */

typedef struct _MI_IO_CACHE_STATS
{
  /* 0x0000 */ unsigned long UnusedBlocks;
  /* 0x0004 */ unsigned long ActiveCacheMatch;
  /* 0x0008 */ unsigned long ActiveCacheOverride;
  /* 0x000c */ unsigned long UnmappedCacheFlush;
  /* 0x0010 */ unsigned long UnmappedCacheMatch;
  /* 0x0014 */ unsigned long UnmappedCacheConflict;
} MI_IO_CACHE_STATS, *PMI_IO_CACHE_STATS; /* size: 0x0018 */

typedef struct _MI_IO_PAGE_STATE
{
  /* 0x0000 */ unsigned long IoPfnLock;
  /* 0x0004 */ struct _RTL_AVL_TREE IoPfnRoot[3];
  /* 0x0010 */ struct _LIST_ENTRY UnusedCachedMaps;
  /* 0x0018 */ unsigned long OldestCacheFlushTimeStamp;
  /* 0x001c */ struct _MI_IO_CACHE_STATS IoCacheStats;
} MI_IO_PAGE_STATE, *PMI_IO_PAGE_STATE; /* size: 0x0034 */

typedef enum _MI_IO_PFN_TYPE
{
  MiIoPfnProbes = 0,
  MiIoPfnMaps = 1,
  MiIoPfnUnmapped = 2,
  MiMaximumIoPfnType = 3,
} MI_IO_PFN_TYPE, *PMI_IO_PFN_TYPE;

typedef enum _MI_KSTACK_TYPE
{
  MiRegularKstack = 0,
  MiShortLivedKstack = 1,
  MiMaximumKstack = 2,
} MI_KSTACK_TYPE, *PMI_KSTACK_TYPE;

typedef struct _MI_LARGEPAGE_MEMORY_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ struct _COLORED_PAGE_INFO* ColoredPageInfoBase;
  /* 0x000c */ unsigned long PagesNeedZeroing;
} MI_LARGEPAGE_MEMORY_INFO, *PMI_LARGEPAGE_MEMORY_INFO; /* size: 0x0010 */

typedef struct _MI_LDW_WORK_CONTEXT
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ struct _FILE_OBJECT* FileObject;
  /* 0x0014 */ long ErrorStatus;
  /* 0x0018 */ volatile long Active;
  /* 0x001c */ unsigned char FreeWhenDone;
  /* 0x001d */ char __PADDING__[3];
} MI_LDW_WORK_CONTEXT, *PMI_LDW_WORK_CONTEXT; /* size: 0x0020 */

typedef enum _MI_LOCK_ACQUIRE_TYPE
{
  MiAcquireExclusive = 0,
  MiAcquireExclusiveAutoExpand = 1,
  MiAcquireShared = 2,
  MiAcquireSharedAutoExpand = 3,
} MI_LOCK_ACQUIRE_TYPE, *PMI_LOCK_ACQUIRE_TYPE;

typedef enum _MI_MEMORY_EVENT_TYPES
{
  LowAvailablePagesEvent = 0,
  HighAvailablePagesEvent = 1,
  LowPagedPoolEvent = 2,
  HighPagedPoolEvent = 3,
  LowNonPagedPoolEvent = 4,
  HighNonPagedPoolEvent = 5,
  LowCommitEvent = 6,
  HighCommitEvent = 7,
  MaximumCommitEvent = 8,
  BadMemoryDetectedEvent = 9,
  PhysicalMemoryChangeEvent = 10,
  TotalNumberOfMemoryEvents = 11,
} MI_MEMORY_EVENT_TYPES, *PMI_MEMORY_EVENT_TYPES;

typedef enum _MI_MEMORY_HIGHLOW
{
  MiMemoryHigh = 0,
  MiMemoryLow = 1,
  MiMemoryHighLow = 2,
} MI_MEMORY_HIGHLOW, *PMI_MEMORY_HIGHLOW;

typedef struct _MI_MODWRITE_DATA
{
  /* 0x0000 */ long PagesLoad;
  /* 0x0004 */ unsigned long PagesAverage;
  /* 0x0008 */ unsigned long AverageAvailablePages;
  /* 0x000c */ unsigned long PagesWritten;
  /* 0x0010 */ unsigned long WritesIssued;
  /* 0x0014 */ unsigned long IgnoredReservationsCount;
  /* 0x0018 */ unsigned long FreedReservationsCount;
  /* 0x001c */ unsigned long WriteBurstCount;
  /* 0x0020 */ unsigned __int64 IgnoreReservationsStartTime;
  /* 0x0028 */ volatile union _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo;
  struct /* bitfield */
  {
    /* 0x002c */ unsigned short IgnoreReservations : 1; /* bit position: 0 */
    /* 0x002c */ unsigned short Spare : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x002e */ unsigned short Spare1;
} MI_MODWRITE_DATA, *PMI_MODWRITE_DATA; /* size: 0x0030 */

typedef struct _MI_NODE_INFORMATION
{
  /* 0x0000 */ unsigned long LargePageFreeCount[2];
  /* 0x0008 */ struct _LIST_ENTRY LargePages[1][2][2];
  /* 0x0028 */ unsigned long LargePagesCount[1][2][2];
  /* 0x0038 */ volatile unsigned long FreeCount[2];
  /* 0x0040 */ unsigned long TotalPages[1];
  /* 0x0044 */ unsigned long TotalPagesEntireNode;
  /* 0x0048 */ unsigned long MmShiftedColor;
  /* 0x004c */ unsigned long Color;
  /* 0x0050 */ volatile unsigned long ChannelFreeCount[2][1];
  struct // _TAG_UNNAMED_140
  {
    struct /* bitfield */
    {
      /* 0x0058 */ unsigned long ChannelsHotCold : 1; /* bit position: 0 */
      /* 0x0058 */ unsigned long Spare : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0004 */ Flags;
  /* 0x005c */ struct _EX_PUSH_LOCK NodeLock;
  /* 0x0060 */ unsigned char ChannelStatus;
  /* 0x0061 */ unsigned char ChannelOrdering[1];
  /* 0x0062 */ unsigned char LockedChannelOrdering[1];
  /* 0x0063 */ unsigned char PowerAttribute[1];
  /* 0x0064 */ unsigned long LargePageLock;
} MI_NODE_INFORMATION, *PMI_NODE_INFORMATION; /* size: 0x0068 */

typedef enum _MI_NODE_NONPAGED_POOL_BITMAP
{
  NonPagedPoolLargePdeNx = 0,
  NonPagedPoolSmallPde = 1,
  NonPagedPoolPerPage = 2,
} MI_NODE_NONPAGED_POOL_BITMAP, *PMI_NODE_NONPAGED_POOL_BITMAP;

typedef struct _MI_PAGEFILE_TRACES
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned short PartitionId;
  /* 0x0006 */ unsigned char Priority;
  /* 0x0007 */ unsigned char IrpPriority;
  /* 0x0008 */ unsigned char ReservationWrite;
  /* 0x0010 */ union _LARGE_INTEGER CurrentTime;
  /* 0x0018 */ unsigned long AvailablePages;
  /* 0x001c */ unsigned long ModifiedPagesTotal;
  /* 0x0020 */ unsigned long ModifiedPagefilePages;
  /* 0x0024 */ unsigned long ModifiedNoWritePages;
  /* 0x0028 */ unsigned long ModifiedPagefileNoReservationPages;
  struct // _TAG_UNNAMED_141
  {
    /* 0x002c */ struct _MDL Mdl;
    /* 0x0048 */ unsigned long Page[1];
  } /* size: 0x0020 */ MdlHack;
  /* 0x004c */ long __PADDING__[1];
} MI_PAGEFILE_TRACES, *PMI_PAGEFILE_TRACES; /* size: 0x0050 */

typedef struct _MI_PAGE_COMBINE_STATISTICS
{
  /* 0x0000 */ unsigned __int64 PagesScannedActive;
  /* 0x0008 */ unsigned __int64 PagesScannedStandby;
  /* 0x0010 */ unsigned __int64 PagesCombined;
  /* 0x0018 */ unsigned long CombineScanCount;
  /* 0x001c */ long CombinedBlocksInUse;
  /* 0x0020 */ long SumCombinedBlocksReferenceCount;
  /* 0x0024 */ long __PADDING__[1];
} MI_PAGE_COMBINE_STATISTICS, *PMI_PAGE_COMBINE_STATISTICS; /* size: 0x0028 */

typedef struct _MI_PAGE_COMBINING_SUPPORT
{
  /* 0x0000 */ struct _MI_PARTITION* Partition;
  /* 0x0004 */ struct _LIST_ENTRY ArbitraryPfnMapList;
  /* 0x000c */ struct _MI_COMBINE_WORKITEM FreeCombinePoolItem;
  /* 0x0020 */ unsigned long CombiningThreadCount;
  /* 0x0024 */ struct _LIST_ENTRY CombinePageFreeList;
  /* 0x002c */ unsigned long CombineFreeListLock;
  /* 0x0030 */ struct _MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];
  /* 0x00b0 */ struct _MI_PAGE_COMBINE_STATISTICS PageCombineStats;
} MI_PAGE_COMBINING_SUPPORT, *PMI_PAGE_COMBINING_SUPPORT; /* size: 0x00d8 */

typedef struct _MI_PAGING_FILE_SPACE_BITMAPS
{
  union
  {
    /* 0x0000 */ unsigned long RefCount;
    /* 0x0000 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Anchor;
  }; /* size: 0x0004 */
  /* 0x0004 */ struct _RTL_BITMAP AllocationBitmap;
  union
  {
    /* 0x000c */ struct _RTL_BITMAP ReservationBitmap;
    /* 0x000c */ struct _RTL_BITMAP EvictedBitmap;
  }; /* size: 0x0008 */
} MI_PAGING_FILE_SPACE_BITMAPS, *PMI_PAGING_FILE_SPACE_BITMAPS; /* size: 0x0014 */

typedef struct _MI_PAGING_IO_STATE
{
  /* 0x0000 */ struct _RTL_AVL_TREE PageFileHead;
  /* 0x0004 */ volatile long PageFileHeadSpinLock;
  /* 0x0008 */ long PrefetchSeekThreshold;
  /* 0x0010 */ union _SLIST_HEADER InPageSupportSListHead[2];
  /* 0x0020 */ unsigned char InPageSupportSListMinimum[2];
  /* 0x0024 */ unsigned long InPageSinglePages;
  /* 0x0028 */ volatile long DelayPageFaults;
  /* 0x002c */ unsigned long FileCompressionBoundary;
  /* 0x0030 */ unsigned char MdlsAdjusted;
  /* 0x0031 */ char __PADDING__[7];
} MI_PAGING_IO_STATE, *PMI_PAGING_IO_STATE; /* size: 0x0038 */

typedef struct _MI_PARTITION
{
  /* 0x0000 */ struct _MI_PARTITION_CORE Core;
  /* 0x00e8 */ struct _MI_PARTITION_MODWRITES Modwriter;
  /* 0x0298 */ struct _MI_PARTITION_STORES Store;
  /* 0x02e8 */ struct _MI_PARTITION_SEGMENTS Segments;
  /* 0x03c0 */ struct _MI_PARTITION_PAGE_LISTS PageLists;
  /* 0x0a80 */ struct _MI_PARTITION_COMMIT Commit;
  /* 0x0aa0 */ struct _MI_PARTITION_ZEROING Zeroing;
  /* 0x0ad0 */ struct _MI_PAGE_COMBINING_SUPPORT PageCombine;
  /* 0x0ba8 */ void* WorkingSetControl;
  /* 0x0bac */ struct _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead;
  /* 0x0bc0 */ struct _MI_VISIBLE_PARTITION Vp;
} MI_PARTITION, *PMI_PARTITION; /* size: 0x1740 */

typedef struct _MI_PARTITION_COMMIT
{
  /* 0x0000 */ unsigned long PeakCommitment;
  /* 0x0004 */ unsigned long TotalCommitLimitMaximum;
  /* 0x0008 */ volatile long Popups[2];
  /* 0x0010 */ unsigned long LowCommitThreshold;
  /* 0x0014 */ unsigned long HighCommitThreshold;
  /* 0x0018 */ unsigned long EventLock;
  /* 0x001c */ unsigned long SystemCommitReserve;
} MI_PARTITION_COMMIT, *PMI_PARTITION_COMMIT; /* size: 0x0020 */

typedef struct _MI_PARTITION_CORE
{
  /* 0x0000 */ unsigned short PartitionId;
  union // _TAG_UNNAMED_142
  {
    union
    {
      /* 0x0004 */ unsigned long LongFlags;
      /* 0x0004 */ struct _MI_PARTITION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0008 */ unsigned long ReferenceCount;
  /* 0x000c */ struct _MI_PARTITION* ParentPartition;
  /* 0x0010 */ struct _LIST_ENTRY ListEntry;
  /* 0x0018 */ struct _MI_NODE_INFORMATION* NodeInformation;
  /* 0x001c */ struct _MDL* MdlPhysicalMemoryBlock;
  /* 0x0020 */ struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryNodeRuns;
  /* 0x0024 */ struct _MI_PARTITION_STATISTICS Stats;
  /* 0x0074 */ struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryRuns;
  /* 0x0078 */ struct _KEVENT ExitEvent;
  /* 0x0088 */ void* SystemThreadHandles[5];
  /* 0x009c */ void* PartitionObject;
  /* 0x00a0 */ void* PartitionObjectHandle;
  /* 0x00a4 */ struct _EX_PUSH_LOCK DynamicMemoryPushLock;
  /* 0x00a8 */ volatile long DynamicMemoryLock;
  /* 0x00ac */ struct _KEVENT TemporaryMemoryEvent;
  /* 0x00bc */ struct _KEVENT* MemoryEvents[11];
} MI_PARTITION_CORE, *PMI_PARTITION_CORE; /* size: 0x00e8 */

typedef struct _MI_PARTITION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long BeingDeleted : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ObjectInitialized : 1; /* bit position: 1 */
  }; /* bitfield */
} MI_PARTITION_FLAGS, *PMI_PARTITION_FLAGS; /* size: 0x0004 */

typedef struct _MI_PARTITION_MODWRITES
{
  /* 0x0000 */ struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
  /* 0x0038 */ struct _MMPAGE_FILE_EXPANSION PageFileContract;
  /* 0x0070 */ unsigned long NumberOfMappedMdls;
  /* 0x0074 */ volatile long NumberOfMappedMdlsInUse;
  /* 0x0078 */ unsigned long NumberOfMappedMdlsInUsePeak;
  /* 0x007c */ struct _MMMOD_WRITER_LISTHEAD MappedFileHeader;
  /* 0x0094 */ unsigned char NeedMappedMdl;
  /* 0x0095 */ unsigned char NeedPageFileMdl;
  /* 0x0096 */ unsigned char TransitionInserted;
  /* 0x0098 */ long LastModifiedWriteError;
  /* 0x009c */ long LastMappedWriteError;
  /* 0x00a0 */ volatile unsigned long MappedFileWriteSucceeded;
  /* 0x00a4 */ unsigned long MappedWriteBurstCount;
  /* 0x00a8 */ unsigned long LowPriorityModWritesOutstanding;
  /* 0x00ac */ struct _KEVENT BoostModWriteIoPriorityEvent;
  /* 0x00bc */ long ModifiedWriterThreadPriority;
  /* 0x00c0 */ unsigned long ModifiedPagesLowPriorityGoal;
  /* 0x00c4 */ struct _KEVENT ModifiedPageWriterEvent;
  /* 0x00d4 */ volatile long WriteAllPagefilePages;
  /* 0x00d8 */ volatile long WriteAllMappedPages;
  /* 0x00dc */ struct _KEVENT MappedPageWriterEvent;
  /* 0x00f0 */ struct _MI_MODWRITE_DATA ModWriteData;
  /* 0x0120 */ struct _KEVENT RescanPageFilesEvent;
  /* 0x0130 */ struct _MMMOD_WRITER_LISTHEAD PagingFileHeader;
  /* 0x0148 */ struct _ETHREAD* ModifiedPageWriterThread;
  /* 0x014c */ struct _EX_RUNDOWN_REF ModifiedPageWriterRundown;
  /* 0x0150 */ struct _WORK_QUEUE_ITEM PagefileScanWorkItem;
  /* 0x0160 */ unsigned long PagefileScanCount;
  /* 0x0164 */ volatile long ClusterWritesDisabled[2];
  /* 0x016c */ volatile unsigned char DelayMappedWrite;
  /* 0x0170 */ volatile unsigned long PagefileReservationsEnabled;
  /* 0x0174 */ struct _EX_PUSH_LOCK PageFileCreationLock;
  /* 0x0178 */ struct _WORK_QUEUE_ITEM TrimPagefileWorkItem;
  /* 0x0188 */ unsigned __int64 LastTrimPagefileTime;
  /* 0x0190 */ struct _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem;
  /* 0x01a0 */ volatile long WsSwapPageFileContractionInProgress;
  /* 0x01a4 */ struct _EX_PUSH_LOCK WorkingSetSwapLock;
  /* 0x01a8 */ volatile long WorkingSetInswapLock;
  /* 0x01ac */ long __PADDING__[1];
} MI_PARTITION_MODWRITES, *PMI_PARTITION_MODWRITES; /* size: 0x01b0 */

typedef struct _MI_PARTITION_PAGE_LISTS
{
  /* 0x0000 */ struct _MMPFNLIST* FreePagesByColor[2];
  /* 0x0008 */ union _SLIST_HEADER* FreePageSlist[2];
  /* 0x0040 */ struct _MMPFNLIST ZeroedPageListHead;
  /* 0x0080 */ struct _MMPFNLIST FreePageListHead;
  /* 0x00c0 */ struct _MMPFNLIST StandbyPageListHead;
  /* 0x0100 */ struct _MMPFNLIST StandbyPageListByPriority[8];
  /* 0x01c0 */ struct _MMPFNLIST ModifiedPageListNoReservation;
  /* 0x0200 */ struct _MMPFNLIST ModifiedPageListByReservation[16];
  /* 0x0340 */ struct _MMPFNLIST MappedPageListHead[16];
  /* 0x0480 */ struct _MMPFNLIST BadPageListHead;
  /* 0x0494 */ struct _MMPFNLIST* PageLocationList[8];
  /* 0x04b4 */ volatile unsigned long StandbyRepurposedByPriority[8];
  /* 0x04d4 */ struct _KEVENT MappedPageListHeadEvent[16];
  /* 0x05d4 */ struct _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];
  /* 0x05e4 */ unsigned long DecayHand;
  /* 0x05e8 */ unsigned __int64 LastDecayHandUpdateTime;
  /* 0x05f0 */ struct _MI_LDW_WORK_CONTEXT LastChanceLdwContext;
  /* 0x0640 */ unsigned long AvailableEventsLock;
  /* 0x0644 */ struct _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[2];
  /* 0x066c */ unsigned long LowMemoryThreshold;
  /* 0x0670 */ unsigned long HighMemoryThreshold;
  /* 0x0680 */ volatile unsigned long TransitionPrivatePages;
  /* 0x0684 */ unsigned char RebuildLargePagesInitialized;
  /* 0x0688 */ struct _MI_REBUILD_LARGE_PAGES RebuildLargePagesItem;
  /* 0x06bc */ long __PADDING__[1];
} MI_PARTITION_PAGE_LISTS, *PMI_PARTITION_PAGE_LISTS; /* size: 0x06c0 */

typedef struct _MI_PARTITION_SEGMENTS
{
  /* 0x0000 */ struct _KEVENT DeleteSubsectionCleanup;
  /* 0x0010 */ struct _KEVENT UnusedSegmentCleanup;
  /* 0x0020 */ unsigned long SubsectionDeletePtes;
  /* 0x0024 */ struct _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader;
  /* 0x0040 */ struct _LIST_ENTRY DeleteOnCloseList;
  /* 0x0048 */ struct _KTIMER DeleteOnCloseTimer;
  /* 0x0070 */ unsigned char DeleteOnCloseTimerActive;
  /* 0x0074 */ unsigned long DeleteOnCloseCount;
  /* 0x0078 */ struct _LIST_ENTRY UnusedSegmentList;
  /* 0x0080 */ struct _LIST_ENTRY UnusedSubsectionList;
  /* 0x0088 */ struct _LIST_ENTRY DeleteSubsectionList;
  /* 0x0090 */ struct _KEVENT ControlAreaDeleteEvent;
  /* 0x00a0 */ struct _SINGLE_LIST_ENTRY ControlAreaDeleteList;
  /* 0x00a4 */ long __PADDING__[1];
} MI_PARTITION_SEGMENTS, *PMI_PARTITION_SEGMENTS; /* size: 0x00a8 */

typedef struct _MI_PARTITION_STATE
{
  /* 0x0000 */ unsigned long PartitionLock;
  /* 0x0004 */ struct _EX_PUSH_LOCK PartitionIdLock;
  /* 0x0008 */ unsigned __int64 InitialPartitionIdBits;
  /* 0x0010 */ struct _LIST_ENTRY PartitionList;
  /* 0x0018 */ struct _RTL_BITMAP* PartitionIdBitmap;
  /* 0x001c */ struct _RTL_BITMAP InitialPartitionIdBitmap;
  /* 0x0024 */ struct _MI_PARTITION* TempPartitionPointers[1];
  /* 0x0028 */ struct _MI_PARTITION** Partition;
  /* 0x002c */ unsigned long TotalPagesInChildPartitions;
} MI_PARTITION_STATE, *PMI_PARTITION_STATE; /* size: 0x0030 */

typedef struct _MI_PARTITION_STATISTICS
{
  /* 0x0000 */ unsigned long DeleteYield;
  /* 0x0004 */ unsigned long DeleteBad;
  /* 0x0008 */ unsigned long DeleteTrulyBad;
  /* 0x000c */ unsigned long DeleteLargePage;
  /* 0x0010 */ unsigned long DeleteLargePageRetry;
  /* 0x0014 */ unsigned long DeleteZeroFree;
  /* 0x0018 */ unsigned long DeleteTransition;
  /* 0x001c */ unsigned long DeleteStandbyReferenced;
  /* 0x0020 */ unsigned long DeleteStandbyRelinkFailed;
  /* 0x0024 */ unsigned long DeleteStandbySharedPagefile;
  /* 0x0028 */ unsigned long DeleteStandbySharedFile;
  /* 0x002c */ unsigned long DeleteModifiedReferenced;
  /* 0x0030 */ unsigned long DeleteModified;
  /* 0x0034 */ unsigned long DeleteModifiedNoWrite;
  /* 0x0038 */ unsigned long DeleteModifiedSharedPagefile;
  /* 0x003c */ unsigned long DeleteModifiedSharedFile;
  /* 0x0040 */ unsigned long DeleteActiveSharedPagefile1;
  /* 0x0044 */ unsigned long DeleteActiveSharedPagefile2;
  /* 0x0048 */ unsigned long DeleteActiveSharedFile;
  /* 0x004c */ unsigned long DeleteWriteDelay;
} MI_PARTITION_STATISTICS, *PMI_PARTITION_STATISTICS; /* size: 0x0050 */

typedef struct _MI_PARTITION_STORES
{
  union // _TAG_UNNAMED_143
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0000 */ long FlushCompleting : 1; /* bit position: 0 */
        /* 0x0000 */ long FlushInProgress : 31; /* bit position: 1 */
      }; /* bitfield */
      /* 0x0000 */ volatile long Long;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ WriteAllStoreHintedPages;
  /* 0x0004 */ unsigned long VirtualPageFileNumber;
  /* 0x0008 */ unsigned long Registered;
  /* 0x000c */ unsigned long ReadClusterSizeMax;
  /* 0x0010 */ unsigned long EvictFlushRequestCount;
  /* 0x0014 */ unsigned long ModifiedWriteDisableCount;
  /* 0x0018 */ unsigned long WriteIssueFailures;
  /* 0x001c */ struct _ETHREAD* EvictionThread;
  /* 0x0020 */ struct _KEVENT EvictEvent;
  /* 0x0030 */ struct _KEVENT EvictFlushCompleteEvent;
  /* 0x0040 */ union _SLIST_HEADER WriteSupportSListHead;
  /* 0x0048 */ volatile long EvictFlushLock;
  /* 0x004c */ struct _RTL_BITMAP* ModifiedWriteFailedBitmap;
} MI_PARTITION_STORES, *PMI_PARTITION_STORES; /* size: 0x0050 */

typedef struct _MI_PARTITION_ZEROING
{
  /* 0x0000 */ struct _KEVENT PageEvent;
  /* 0x0010 */ unsigned char ThreadActive;
  /* 0x0014 */ long ZeroFreePageSlistMinimum;
  /* 0x0018 */ struct _MMPTE* FirstReservedZeroingPte;
  /* 0x001c */ struct _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem;
} MI_PARTITION_ZEROING, *PMI_PARTITION_ZEROING; /* size: 0x002c */

typedef struct _MI_PER_SESSION_PROTOS
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE SessionProtoNode;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeList;
    /* 0x0000 */ void* DriverAddress;
  }; /* size: 0x000c */
  union
  {
    /* 0x000c */ unsigned long SessionId;
    /* 0x000c */ struct _SUBSECTION* Subsection;
  }; /* size: 0x0004 */
  /* 0x0010 */ struct _MMPTE* SubsectionBase;
  union // _TAG_UNNAMED_144
  {
    union
    {
      /* 0x0014 */ unsigned long ReferenceCount;
      /* 0x0014 */ unsigned long NumberOfPtesToFree;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
} MI_PER_SESSION_PROTOS, *PMI_PER_SESSION_PROTOS; /* size: 0x0018 */

typedef enum _MI_PFN_CACHE_ATTRIBUTE
{
  MiNonCached = 0,
  MiCached = 1,
  MiWriteCombined = 2,
  MiNotMapped = 3,
} MI_PFN_CACHE_ATTRIBUTE, *PMI_PFN_CACHE_ATTRIBUTE;

typedef struct _MI_POOL_STATE
{
  /* 0x0000 */ unsigned long MaximumNonPagedPoolThreshold;
  /* 0x0004 */ unsigned long NonPagedPoolSListMaximum[3];
  /* 0x0010 */ volatile unsigned long AllocatedNonPagedPool;
  /* 0x0014 */ struct _SINGLE_LIST_ENTRY BadPoolHead;
  /* 0x0018 */ unsigned long PoolFailures[3][3];
  /* 0x003c */ unsigned long PoolFailureReasons[11];
  /* 0x0068 */ unsigned long LowPagedPoolThreshold;
  /* 0x006c */ unsigned long HighPagedPoolThreshold;
  /* 0x0070 */ long SpecialPoolPdesMax;
  /* 0x0074 */ unsigned char NonPagedPoolNodes[1024];
  /* 0x0474 */ struct _MM_PAGED_POOL_INFO PagedProtoPoolInfo;
  /* 0x0490 */ unsigned long PagedPoolSListMaximum;
  /* 0x0494 */ unsigned long PreemptiveTrims[4];
  /* 0x04a4 */ unsigned long SpecialPagesInUsePeak;
  /* 0x04a8 */ unsigned long SpecialPoolRejected[9];
  /* 0x04cc */ volatile unsigned long SpecialPagesNonPaged;
  /* 0x04d0 */ volatile long SpecialPoolPdes;
  /* 0x04d4 */ unsigned long SessionSpecialPoolPdesMax;
  /* 0x04d8 */ unsigned long TotalPagedPoolQuota;
  /* 0x04dc */ unsigned long TotalNonPagedPoolQuota;
} MI_POOL_STATE, *PMI_POOL_STATE; /* size: 0x04e0 */

typedef struct _MI_PROBE_RAISE_TRACKER
{
  /* 0x0000 */ unsigned long UserRangeInKernel;
  /* 0x0004 */ unsigned long FaultFailed;
  /* 0x0008 */ unsigned long WriteFaultFailed;
  /* 0x000c */ unsigned long LargePageFailed;
  /* 0x0010 */ unsigned long UserAccessToKernelPte;
  /* 0x0014 */ unsigned long BadPageLocation;
  /* 0x0018 */ unsigned long InsufficientCharge;
  /* 0x001c */ unsigned long PageTableCharge;
  /* 0x0020 */ unsigned long NoPhysicalMapping;
  /* 0x0024 */ unsigned long NoIoReference;
  /* 0x0028 */ unsigned long ProbeFailed;
  /* 0x002c */ unsigned long PteIsZero;
  /* 0x0030 */ unsigned long StrongCodeWrite;
  /* 0x0034 */ unsigned long ReducedCloneCommitChargeFailed;
  /* 0x0038 */ unsigned long CopyOnWriteAtDispatchNoPages;
} MI_PROBE_RAISE_TRACKER, *PMI_PROBE_RAISE_TRACKER; /* size: 0x003c */

typedef struct _MI_PROCESS_STATE
{
  /* 0x0000 */ unsigned long ColorSeed;
  /* 0x0004 */ struct _KEVENT CloneDereferenceEvent;
  /* 0x0018 */ union _SLIST_HEADER CloneProtosSListHead;
  /* 0x0020 */ void* SystemDllBase;
  /* 0x0024 */ long RotatingUniprocessorNumber;
  /* 0x0028 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0030 */ struct _LIST_ENTRY ProcessList;
  /* 0x0038 */ struct _MMPTE* SharedUserDataPte;
  /* 0x003c */ unsigned long FreePaeEntries;
  /* 0x0040 */ struct _PAE_ENTRY FirstFreePae;
  /* 0x0060 */ volatile long AllocatedPaePages;
  /* 0x0064 */ unsigned long PaeLock;
  /* 0x0068 */ union _SLIST_HEADER PaeEntrySList;
} MI_PROCESS_STATE, *PMI_PROCESS_STATE; /* size: 0x0070 */

typedef struct _MI_PTE_CHAIN_HEAD
{
  /* 0x0000 */ struct _MMPTE Flink;
  /* 0x0008 */ struct _MMPTE Blink;
  /* 0x0010 */ struct _MMPTE* PteBase;
  /* 0x0014 */ long __PADDING__[1];
} MI_PTE_CHAIN_HEAD, *PMI_PTE_CHAIN_HEAD; /* size: 0x0018 */

typedef struct _MI_QUEUED_DEADSTACK_WORKITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ volatile long Active;
} MI_QUEUED_DEADSTACK_WORKITEM, *PMI_QUEUED_DEADSTACK_WORKITEM; /* size: 0x0014 */

typedef struct _MI_REBUILD_LARGE_PAGES
{
  /* 0x0000 */ long Active;
  /* 0x0004 */ struct _MI_REBUILD_LARGE_PAGE_COUNTDOWN Timer[1][16];
  /* 0x0024 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_REBUILD_LARGE_PAGES, *PMI_REBUILD_LARGE_PAGES; /* size: 0x0034 */

typedef struct _MI_REBUILD_LARGE_PAGE_COUNTDOWN
{
  /* 0x0000 */ unsigned char SecondsLeft;
  /* 0x0001 */ unsigned char SecondsAssigned;
} MI_REBUILD_LARGE_PAGE_COUNTDOWN, *PMI_REBUILD_LARGE_PAGE_COUNTDOWN; /* size: 0x0002 */

typedef struct _MI_RESAVAIL_TRACKER
{
  /* 0x0000 */ unsigned long AllocateKernelStack;
  /* 0x0004 */ unsigned long AllocateGrowKernelStack;
  /* 0x0008 */ unsigned long FreeKernelStack;
  /* 0x000c */ unsigned long FreeKernelStackError;
  /* 0x0010 */ unsigned long FreeGrowKernelStackError;
  /* 0x0014 */ unsigned long AllocateCreateProcess;
  /* 0x0018 */ unsigned long FreeCreateProcessError;
  /* 0x001c */ unsigned long FreeDeleteProcess;
  /* 0x0020 */ unsigned long FreeCleanProcess;
  /* 0x0024 */ unsigned long FreeCleanProcessError;
  /* 0x0028 */ unsigned long AllocateAddProcessWsMetaPage;
  /* 0x002c */ unsigned long AllocateWsIncrease;
  /* 0x0030 */ unsigned long FreeWsIncreaseError;
  /* 0x0034 */ unsigned long FreeWsIncreaseErrorMax;
  /* 0x0038 */ unsigned long FreeWsDecrease;
  /* 0x003c */ unsigned long AllocateWorkingSetPage;
  /* 0x0040 */ unsigned long FreeWorkingSetPageError;
  /* 0x0044 */ unsigned long FreeDeletePteRange;
  /* 0x0048 */ unsigned long AllocatePageTablesForProcessMetadata;
  /* 0x004c */ unsigned long FreePageTablesForProcessMetadataError2;
  /* 0x0050 */ unsigned long AllocatePageTablesForSystem;
  /* 0x0054 */ unsigned long FreePageTablesExcess;
  /* 0x0058 */ unsigned long FreeSystemVaPageTables;
  /* 0x005c */ unsigned long FreeSessionVaPageTables;
  /* 0x0060 */ unsigned long AllocateCreateSession;
  /* 0x0064 */ unsigned long FreeSessionWsDereference;
  /* 0x0068 */ unsigned long FreeSessionDereference;
  /* 0x006c */ unsigned long AllocateLockedSessionImage;
  /* 0x0070 */ unsigned long FreeLockedSessionImage;
  /* 0x0074 */ unsigned long FreeSessionImageConversion;
  /* 0x0078 */ unsigned long AllocateWsAdjustPageTable;
  /* 0x007c */ unsigned long FreeWsAdjustPageTable;
  /* 0x0080 */ unsigned long FreeWsAdjustPageTableError;
  /* 0x0084 */ unsigned long AllocateNoLowMemory;
  /* 0x0088 */ unsigned long AllocatePagedPoolLockedDown;
  /* 0x008c */ unsigned long FreePagedPoolLockedDown;
  /* 0x0090 */ unsigned long AllocateSystemBitmaps;
  /* 0x0094 */ unsigned long FreeSystemBitmapsError;
  /* 0x0098 */ unsigned long AllocateForMdl;
  /* 0x009c */ unsigned long FreeFromMdl;
  /* 0x00a0 */ unsigned long AllocateForMdlPartition;
  /* 0x00a4 */ unsigned long FreeFromMdlPartition;
  /* 0x00a8 */ unsigned long FreeMdlExcess;
  /* 0x00ac */ unsigned long AllocateExpansionNonPagedPool;
  /* 0x00b0 */ unsigned long FreeExpansionNonPagedPool;
  /* 0x00b4 */ unsigned long AllocateVad;
  /* 0x00b8 */ unsigned long RemoveVad;
  /* 0x00bc */ unsigned long FreeVad;
  /* 0x00c0 */ unsigned long AllocateContiguous;
  /* 0x00c4 */ unsigned long FreeContiguousPages;
  /* 0x00c8 */ unsigned long FreeContiguousError;
  /* 0x00cc */ unsigned long FreeLargePageMemory;
  /* 0x00d0 */ unsigned long AllocateSystemWsles;
  /* 0x00d4 */ unsigned long FreeSystemWsles;
  /* 0x00d8 */ unsigned long AllocateSystemInitWs;
  /* 0x00dc */ unsigned long AllocateSessionInitWs;
  /* 0x00e0 */ unsigned long FreeSessionInitWsError;
  /* 0x00e4 */ unsigned long AllocateSystemImage;
  /* 0x00e8 */ unsigned long AllocateSystemImageLoad;
  /* 0x00ec */ unsigned long AllocateSessionSharedImage;
  /* 0x00f0 */ unsigned long FreeSystemImageInitCode;
  /* 0x00f4 */ unsigned long FreeSystemImageLargePageConversion;
  /* 0x00f8 */ unsigned long FreeSystemImageError;
  /* 0x00fc */ unsigned long FreeSystemImageLoadExcess;
  /* 0x0100 */ unsigned long FreeUnloadSystemImage;
  /* 0x0104 */ unsigned long FreeReloadBootImageLarge;
  /* 0x0108 */ unsigned long FreeIndependent;
  /* 0x010c */ unsigned long AllocateHotAdd;
  /* 0x0110 */ unsigned long AllocateHotRemove;
  /* 0x0114 */ unsigned long FreeHotAdd;
  /* 0x0118 */ unsigned long FreeHotAddEcc;
  /* 0x011c */ unsigned long FreeHotAddError;
  /* 0x0120 */ unsigned long FreeHotAddUnmap;
  /* 0x0124 */ unsigned long AllocateBoot;
  /* 0x0128 */ unsigned long FreeLoaderBlock;
  /* 0x012c */ unsigned long AllocateNonPagedSpecialPool;
  /* 0x0130 */ unsigned long FreeNonPagedSpecialPoolError;
  /* 0x0134 */ unsigned long FreeNonPagedSpecialPool;
  /* 0x0138 */ unsigned long AllocateSharedSegmentPage;
  /* 0x013c */ unsigned long FreeSharedSegmentPage;
  /* 0x0140 */ unsigned long AllocateZeroPage;
  /* 0x0144 */ unsigned long FreeZeroPage;
  /* 0x0148 */ unsigned long AllocateForPo;
  /* 0x014c */ unsigned long AllocateForPoForce;
  /* 0x0150 */ unsigned long FreeForPo;
  /* 0x0154 */ unsigned long AllocateThreadHardFaultBehavior;
  /* 0x0158 */ unsigned long FreeThreadHardFaultBehavior;
  /* 0x015c */ unsigned long ObtainFaultCharges;
  /* 0x0160 */ unsigned long FreeFaultCharges;
  /* 0x0164 */ unsigned long AllocateStoreCharges;
  /* 0x0168 */ unsigned long FreeStoreCharges;
  /* 0x0180 */ unsigned long ObtainLockedPageCharge;
  /* 0x01c0 */ unsigned long FreeLockedPageCharge;
  /* 0x01c4 */ unsigned long AllocateStore;
  /* 0x01c8 */ unsigned long FreeStore;
  /* 0x01cc */ unsigned long AllocateSystemImageProtos;
  /* 0x01d0 */ unsigned long FreeSystemImageProtos;
  /* 0x01d4 */ unsigned long AllocateModWriterCharge;
  /* 0x01d8 */ unsigned long FreeModWriterCharge;
  /* 0x01dc */ unsigned long AllocateMappedWriterCharge;
  /* 0x01e0 */ unsigned long FreeMappedWriterCharge;
  /* 0x01e4 */ unsigned long AllocateRegistryCharges;
  /* 0x01e8 */ unsigned long FreeRegistryCharges;
  /* 0x01ec */ long __PADDING__[5];
} MI_RESAVAIL_TRACKER, *PMI_RESAVAIL_TRACKER; /* size: 0x0200 */

typedef union _MI_RESERVATION_CLUSTER_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ClusterSize : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned long SequenceNumber : 22; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0000 */ long EntireInfo;
  }; /* size: 0x0004 */
} MI_RESERVATION_CLUSTER_INFO, *PMI_RESERVATION_CLUSTER_INFO; /* size: 0x0004 */

typedef struct _MI_RESUME_WORKITEM
{
  /* 0x0000 */ struct _KEVENT ResumeCompleteEvent;
  /* 0x0010 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_RESUME_WORKITEM, *PMI_RESUME_WORKITEM; /* size: 0x0020 */

typedef struct _MI_REVERSE_VIEW_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ViewLinks;
  union
  {
    /* 0x0008 */ void* SystemCacheVa;
    /* 0x0008 */ void* SessionViewVa;
    /* 0x0008 */ struct _EPROCESS* VadsProcess;
    /* 0x0008 */ unsigned long Type : 2; /* bit position: 0 */
  }; /* size: 0x0004 */
  union
  {
    /* 0x000c */ struct _SUBSECTION* Subsection;
    /* 0x000c */ unsigned long SubsectionType : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x0010 */ unsigned __int64 SectionOffset;
} MI_REVERSE_VIEW_MAP, *PMI_REVERSE_VIEW_MAP; /* size: 0x0018 */

typedef struct _MI_SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;
  /* 0x0030 */ struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;
} MI_SECTION_IMAGE_INFORMATION, *PMI_SECTION_IMAGE_INFORMATION; /* size: 0x0038 */

typedef struct _MI_SECTION_STATE
{
  /* 0x0000 */ volatile long SegmentListLock;
  /* 0x0040 */ volatile long SectionObjectPointersLock;
  /* 0x0044 */ struct _EX_PUSH_LOCK SectionExtendLock;
  /* 0x0048 */ struct _EX_PUSH_LOCK SectionExtendSetLock;
  /* 0x004c */ struct _RTL_AVL_TREE SectionBasedRoot;
  /* 0x0050 */ struct _EX_PUSH_LOCK SectionBasedLock;
  /* 0x0054 */ unsigned long UnusedSubsectionPagedPool;
  /* 0x0058 */ unsigned long UnusedSegmentForceFree;
  /* 0x005c */ unsigned long DataSectionProtectionMask;
  /* 0x0060 */ void* HighSectionBase;
  /* 0x0064 */ struct _MSUBSECTION PhysicalSubsection;
  /* 0x00a8 */ struct _CONTROL_AREA PhysicalControlArea;
  /* 0x00f8 */ struct _RTL_AVL_TREE PageFileSectionHead;
  /* 0x00fc */ volatile long PageFileSectionListSpinLock;
  /* 0x0100 */ unsigned long ImageBias;
  /* 0x0104 */ struct _EX_PUSH_LOCK RelocateBitmapsLock;
  /* 0x0108 */ struct _RTL_BITMAP ImageBitMap;
  /* 0x0110 */ void* ApiSetSection;
  /* 0x0114 */ void* ApiSetSchema;
  /* 0x0118 */ unsigned long ApiSetSchemaSize;
  /* 0x011c */ unsigned long LostDataFiles;
  /* 0x0120 */ unsigned long LostDataPages;
  /* 0x0124 */ unsigned long ImageFailureReason;
  /* 0x0128 */ struct _SECTION* CfgBitMapSection32;
  /* 0x012c */ struct _CONTROL_AREA* CfgBitMapControlArea32;
  /* 0x0130 */ unsigned long ImageCfgFailure;
  /* 0x0134 */ volatile long ImageValidationFailed;
  /* 0x0138 */ long __PADDING__[2];
} MI_SECTION_STATE, *PMI_SECTION_STATE; /* size: 0x0140 */

typedef struct _MI_SESSION_DRIVER_UNLOAD
{
  union
  {
    /* 0x0000 */ void* Function /* function */;
    /* 0x0000 */ unsigned long FunctionValue;
  }; /* size: 0x0004 */
} MI_SESSION_DRIVER_UNLOAD, *PMI_SESSION_DRIVER_UNLOAD; /* size: 0x0004 */

typedef struct _MI_SESSION_STATE
{
  /* 0x0000 */ struct _MMSESSION SystemSession;
  /* 0x0014 */ unsigned char CodePageEdited;
  /* 0x0018 */ long VaReferenceCount[1024];
  /* 0x1018 */ unsigned long* DynamicPtesBitBuffer;
  /* 0x101c */ struct _EX_PUSH_LOCK IdLock;
  /* 0x1020 */ unsigned long DetachTimeStamp;
  /* 0x1024 */ struct _EPROCESS* LeaderProcess;
  /* 0x1028 */ struct _EX_PUSH_LOCK InitializeLock;
  /* 0x102c */ struct _MMWSL* WorkingSetList;
  /* 0x1030 */ struct _MMWSLE_HASH* WsHashStart;
  /* 0x1034 */ struct _MMWSLE_HASH* WsHashEnd;
} MI_SESSION_STATE, *PMI_SESSION_STATE; /* size: 0x1038 */

typedef struct _MI_SHUTDOWN_STATE
{
  /* 0x0000 */ unsigned long StandbyListDiscard;
  /* 0x0004 */ unsigned char CrashDumpInitialized;
  /* 0x0005 */ unsigned char ConnectedStandbyActive;
  /* 0x0008 */ unsigned long SystemShutdown;
  /* 0x000c */ long ShutdownFlushInProgress;
  /* 0x0010 */ struct _MI_RESUME_WORKITEM ResumeItem;
  /* 0x0030 */ unsigned char FreeListDiscard;
  /* 0x0034 */ struct _ETHREAD* MirrorHoldsPfn;
  /* 0x0038 */ unsigned long MirroringActive;
  /* 0x003c */ struct _RTL_BITMAP* MirrorBitMap;
  /* 0x0040 */ struct _RTL_BITMAP* MirrorBitMapInterlocked;
  /* 0x0044 */ void* MirrorListLocks;
  /* 0x0048 */ struct _MMPTE* CrashDumpPte;
} MI_SHUTDOWN_STATE, *PMI_SHUTDOWN_STATE; /* size: 0x004c */

typedef struct _MI_SPECIAL_POOL
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0008 */ struct _MI_PTE_CHAIN_HEAD Paged;
  /* 0x0020 */ struct _MI_PTE_CHAIN_HEAD NonPaged;
  /* 0x0038 */ volatile unsigned long PagesInUse;
  /* 0x003c */ struct _RTL_BITMAP SpecialPoolPdes;
  /* 0x0044 */ long __PADDING__[1];
} MI_SPECIAL_POOL, *PMI_SPECIAL_POOL; /* size: 0x0048 */

typedef struct _MI_STANDBY_STATE
{
  /* 0x0000 */ volatile unsigned long TransitionSharedPages;
  /* 0x0004 */ unsigned long TransitionSharedPagesPeak[3];
  /* 0x0010 */ unsigned long FirstDecayPage;
  /* 0x0018 */ union _SLIST_HEADER PfnDecayFreeSList;
  /* 0x0020 */ struct _MM_PAGE_ACCESS_INFO_HEADER* PfnRepurposeLog;
  /* 0x0024 */ struct _KDPC AllocatePfnRepurposeDpc;
  /* 0x0044 */ long __PADDING__[15];
} MI_STANDBY_STATE, *PMI_STANDBY_STATE; /* size: 0x0080 */

typedef struct _MI_SYSTEM_IMAGE_STATE
{
  /* 0x0000 */ volatile long FixupLock;
  /* 0x0004 */ struct _LIST_ENTRY FixupList;
  /* 0x000c */ struct _KMUTANT LoadLock;
  /* 0x002c */ unsigned char FirstLoadEver;
  /* 0x002d */ unsigned char LargePageAll;
  /* 0x0030 */ unsigned long LastPage;
  /* 0x0034 */ struct _LIST_ENTRY LargePageList;
  /* 0x003c */ struct _KLDR_DATA_TABLE_ENTRY* BeingDeleted;
  /* 0x0040 */ struct _EX_PUSH_LOCK MappingRangesPushLock;
  /* 0x0044 */ struct _MI_DRIVER_VA* MappingRanges[2];
  /* 0x004c */ unsigned long PageCount;
  /* 0x0050 */ struct _MM_SYSTEM_PAGE_COUNTS PageCounts;
  /* 0x0060 */ struct _EX_PUSH_LOCK CollidedLock;
} MI_SYSTEM_IMAGE_STATE, *PMI_SYSTEM_IMAGE_STATE; /* size: 0x0064 */

typedef struct _MI_SYSTEM_INFORMATION
{
  /* 0x0000 */ struct _MI_POOL_STATE Pools;
  /* 0x0500 */ struct _MI_SECTION_STATE Sections;
  /* 0x0640 */ struct _MI_SYSTEM_IMAGE_STATE SystemImages;
  /* 0x06a4 */ struct _MI_SESSION_STATE Sessions;
  /* 0x16e0 */ struct _MI_PROCESS_STATE Processes;
  /* 0x1750 */ struct _MI_HARDWARE_STATE Hardware;
  /* 0x1800 */ struct _MI_SYSTEM_VA_STATE SystemVa;
  /* 0x2cc0 */ struct _MI_COMBINE_STATE PageCombines;
  /* 0x2cd8 */ struct _MI_PARTITION_STATE Partitions;
  /* 0x2d08 */ struct _MI_SHUTDOWN_STATE Shutdowns;
  /* 0x2d58 */ struct _MI_ERROR_STATE Errors;
  /* 0x2e00 */ struct _MI_ACCESS_LOG_STATE AccessLog;
  /* 0x2e80 */ struct _MI_DEBUGGER_STATE Debugger;
  /* 0x2f40 */ struct _MI_STANDBY_STATE Standby;
  /* 0x2fc0 */ struct _MI_SYSTEM_PTE_STATE SystemPtes;
  /* 0x3140 */ struct _MI_IO_PAGE_STATE IoPages;
  /* 0x3178 */ struct _MI_PAGING_IO_STATE PagingIo;
  /* 0x31b0 */ struct _MI_COMMON_PAGE_STATE CommonPages;
  /* 0x3200 */ struct _MI_SYSTEM_TRIM_STATE Trims;
  /* 0x3240 */ struct _MI_RESAVAIL_TRACKER ResTrack;
  /* 0x3440 */ unsigned long Cookie;
  /* 0x3444 */ volatile long ZeroingDisabled;
  /* 0x3448 */ void* volatile* BootRegistryRuns;
  /* 0x344c */ unsigned char FullyInitialized;
  /* 0x344d */ unsigned char SafeBooted;
  /* 0x3450 */ struct _RTL_BITMAP LargePfnBitMap;
  /* 0x3458 */ struct _RTL_BITMAP PfnBitMap;
  /* 0x3460 */ const struct _TlgProvider_t* TraceLogging;
  /* 0x3480 */ struct _MI_VISIBLE_STATE Vs;
} MI_SYSTEM_INFORMATION, *PMI_SYSTEM_INFORMATION; /* size: 0x3cc0 */

typedef struct _MI_SYSTEM_NODE_INFORMATION
{
  /* 0x0000 */ union _SLIST_HEADER PagedPoolSListHead;
  /* 0x0008 */ union _SLIST_HEADER NonPagedPoolSListHead[3];
  /* 0x0020 */ union _SLIST_HEADER NonPagedPoolSListHeadNx[3];
  /* 0x0038 */ struct _CACHED_KSTACK_LIST CachedKernelStacks[2];
  /* 0x0068 */ unsigned long NonPagedPoolLowestPage;
  /* 0x006c */ unsigned long NonPagedPoolHighestPage;
  /* 0x0070 */ unsigned long AllocatedNonPagedPool;
  /* 0x0074 */ unsigned long PartialLargePoolRegions;
  /* 0x0078 */ unsigned long PagesInPartialLargePoolRegions;
  /* 0x007c */ unsigned long CachedNonPagedPoolCount;
  /* 0x0080 */ unsigned long NonPagedPoolSpinLock;
  /* 0x0084 */ struct _MMPFN* CachedNonPagedPool;
  /* 0x0088 */ void* NonPagedPoolFirstVa;
  /* 0x008c */ void* NonPagedPoolLastVa;
  /* 0x0090 */ struct _RTL_BITMAP NonPagedBitMap[3];
  /* 0x00a8 */ unsigned long NonPagedHint[2];
} MI_SYSTEM_NODE_INFORMATION, *PMI_SYSTEM_NODE_INFORMATION; /* size: 0x00b0 */

typedef struct _MI_SYSTEM_PTE_STATE
{
  /* 0x0000 */ union _SLIST_HEADER DeadPteTrackerSListHead;
  /* 0x0008 */ unsigned long PteTrackerLock;
  /* 0x0040 */ struct _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside;
  /* 0x0100 */ struct _RTL_BITMAP PteTrackingBitmap;
  /* 0x0108 */ volatile struct _MI_CACHED_PTES* CachedPteHeads;
  /* 0x010c */ struct _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;
  /* 0x0140 */ unsigned char KernelStackPages;
  /* 0x0148 */ union _SLIST_HEADER QueuedStacks;
  /* 0x0150 */ unsigned long StackGrowthFailures;
  /* 0x0154 */ unsigned char TrackPtesAborted;
  /* 0x0155 */ unsigned char AdjustCounter;
  /* 0x0158 */ struct _MI_QUEUED_DEADSTACK_WORKITEM QueuedStacksWorkItem;
  /* 0x016c */ long __PADDING__[5];
} MI_SYSTEM_PTE_STATE, *PMI_SYSTEM_PTE_STATE; /* size: 0x0180 */

typedef struct _MI_SYSTEM_PTE_TYPE
{
  /* 0x0000 */ struct _RTL_BITMAP Bitmap;
  /* 0x0008 */ struct _MMPTE* BasePte;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ enum _MI_SYSTEM_VA_TYPE VaType;
  /* 0x0014 */ unsigned long* FailureCount;
  /* 0x0018 */ unsigned long PteFailures;
  union
  {
    /* 0x001c */ unsigned long SpinLock;
    /* 0x001c */ struct _EX_PUSH_LOCK* GlobalPushLock;
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _MMSUPPORT* Vm;
  /* 0x0024 */ volatile unsigned long TotalSystemPtes;
  /* 0x0028 */ unsigned long Hint;
  /* 0x002c */ volatile struct _MI_CACHED_PTES* CachedPtes;
  /* 0x0030 */ volatile unsigned long TotalFreeSystemPtes;
} MI_SYSTEM_PTE_TYPE, *PMI_SYSTEM_PTE_TYPE; /* size: 0x0034 */

typedef struct _MI_SYSTEM_TRIM_STATE
{
  /* 0x0000 */ unsigned long ExpansionLock;
  /* 0x0004 */ volatile long TrimInProgressCount;
  /* 0x0008 */ struct _KEVENT PeriodicWorkingSetEvent;
  /* 0x0018 */ unsigned long TrimAllPageFaultCount[3];
  /* 0x0024 */ long __PADDING__[7];
} MI_SYSTEM_TRIM_STATE, *PMI_SYSTEM_TRIM_STATE; /* size: 0x0040 */

typedef struct _MI_SYSTEM_VA_STATE
{
  /* 0x0000 */ unsigned long SystemTablesLock;
  /* 0x0004 */ unsigned long SystemVaBias;
  /* 0x0008 */ unsigned long SystemAvailableVaLow;
  /* 0x000c */ unsigned long VirtualBias;
  /* 0x0010 */ void* HyperSpaceEnd;
  /* 0x0014 */ struct _MMPTE* HyperSpaceEndPte;
  /* 0x0018 */ void* SystemRangeStart;
  /* 0x001c */ unsigned char SystemCachePdeCount[1024];
  /* 0x041c */ void* SystemCacheReverseMaps[1024];
  /* 0x141c */ struct _MMWSLE_HASH* WorkingSetListHashStart;
  /* 0x1420 */ struct _MMWSLE_HASH* WorkingSetListHashEnd;
  /* 0x1424 */ struct _MMWSLE_NONDIRECT_HASH* WorkingSetListIndirectHashStart;
  /* 0x1428 */ struct _KEVENT FreeSystemCacheVa;
  /* 0x1438 */ unsigned long SystemVaLock;
  /* 0x143c */ volatile long DeleteKvaLock;
  /* 0x1440 */ struct _MI_PTE_CHAIN_HEAD FreeSystemCache;
  /* 0x1458 */ unsigned long SystemCacheViewLock;
  /* 0x145c */ unsigned long UnusableWsles[5];
  /* 0x1470 */ unsigned long PossibleWsles[5];
  /* 0x1484 */ long __PADDING__[15];
} MI_SYSTEM_VA_STATE, *PMI_SYSTEM_VA_STATE; /* size: 0x14c0 */

typedef enum _MI_SYSTEM_VA_TYPE
{
  MiVaUnused = 0,
  MiVaSessionSpace = 1,
  MiVaProcessSpace = 2,
  MiVaBootLoaded = 3,
  MiVaPfnDatabase = 4,
  MiVaNonPagedPool = 5,
  MiVaPagedPool = 6,
  MiVaSpecialPoolPaged = 7,
  MiVaSystemCache = 8,
  MiVaSystemPtes = 9,
  MiVaHal = 10,
  MiVaSessionGlobalSpace = 11,
  MiVaDriverImages = 12,
  MiVaSpecialPoolNonPaged = 13,
  MiVaPagedProtoPool = 14,
  MiVaMaximumType = 15,
  MiVaSystemPtesLarge = 16,
} MI_SYSTEM_VA_TYPE, *PMI_SYSTEM_VA_TYPE;

typedef struct _MI_TRIAGE_DUMP_DATA
{
  /* 0x0000 */ unsigned long BadPageCount;
  /* 0x0004 */ long BadPagesDetected;
  /* 0x0008 */ long ZeroedPageSingleBitErrorsDetected;
  /* 0x000c */ long ScrubPasses;
  /* 0x0010 */ long ScrubBadPagesFound;
  /* 0x0014 */ unsigned long PageHashErrors;
  /* 0x0018 */ unsigned __int64 FeatureBits;
  /* 0x0020 */ unsigned long TimeZoneId;
  /* 0x0024 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionChainTerminator;
  /* 0x0028 */ struct _EXCEPTION_REGISTRATION_RECORD ExceptionChainTerminatorRecord;
} MI_TRIAGE_DUMP_DATA, *PMI_TRIAGE_DUMP_DATA; /* size: 0x0030 */

typedef struct _MI_USER_VA_INFO
{
  /* 0x0000 */ unsigned long NumberOfCommittedPageTables;
  /* 0x0004 */ unsigned long VadBitMapHint;
  /* 0x0008 */ unsigned long LastAllocationSizeHint;
  /* 0x000c */ unsigned long LastAllocationSize;
  /* 0x0010 */ unsigned long LowestBottomUpVadBit;
  /* 0x0014 */ unsigned long VadBitMapSize;
  /* 0x0018 */ unsigned long VadBitMapCommitment;
  /* 0x001c */ unsigned long MaximumLastVadBit;
  /* 0x0020 */ long VadsBeingDeleted;
  /* 0x0024 */ unsigned long PhysicalMappingCount;
  /* 0x0028 */ struct _KEVENT* LastVadDeletionEvent;
  /* 0x002c */ unsigned long* VadBitBuffer;
  /* 0x0030 */ void* LowestBottomUpAllocationAddress;
  /* 0x0034 */ void* HighestTopDownAllocationAddress;
  /* 0x0038 */ void* FreeTebHint;
  /* 0x003c */ unsigned char NumaAware;
  /* 0x0040 */ unsigned __int64 CloneNestingLevel;
  /* 0x0048 */ unsigned long PrivateFixupVadCount;
  /* 0x004c */ struct _MI_CFG_BITMAP_INFO CfgBitMap[1];
  /* 0x0058 */ unsigned long CommittedPageTableBufferForTopLevel[48];
  /* 0x0118 */ struct _RTL_BITMAP CommittedPageTableBitmaps[1];
  /* 0x0120 */ unsigned short UsedPageTableEntries[1536];
} MI_USER_VA_INFO, *PMI_USER_VA_INFO; /* size: 0x0d20 */

typedef struct _MI_VAD_EVENT_BLOCK
{
  /* 0x0000 */ struct _MI_VAD_EVENT_BLOCK* Next;
  /* 0x0004 */ unsigned long WaitReason;
  union
  {
    /* 0x0008 */ struct _KGATE Gate;
    /* 0x0008 */ struct _MMADDRESS_LIST SecureInfo;
    /* 0x0008 */ struct _RTL_BITMAP BitMap;
    /* 0x0008 */ struct _MMINPAGE_SUPPORT* InPageSupport;
    /* 0x0008 */ struct _MI_LARGEPAGE_MEMORY_INFO* LargePage;
    struct
    {
      /* 0x0008 */ struct _ETHREAD* CreatingThread;
      /* 0x000c */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} MI_VAD_EVENT_BLOCK, *PMI_VAD_EVENT_BLOCK; /* size: 0x0018 */

typedef struct _MI_VAD_SEQUENTIAL_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Length : 11; /* bit position: 0 */
    /* 0x0000 */ unsigned long Vpn : 21; /* bit position: 11 */
  }; /* bitfield */
} MI_VAD_SEQUENTIAL_INFO, *PMI_VAD_SEQUENTIAL_INFO; /* size: 0x0004 */

typedef struct _MI_VERIFIER_POOL_HEADER
{
  /* 0x0000 */ struct _VI_POOL_ENTRY* VerifierPoolEntry;
} MI_VERIFIER_POOL_HEADER, *PMI_VERIFIER_POOL_HEADER; /* size: 0x0004 */

typedef struct _MI_VISIBLE_PARTITION
{
  /* 0x0000 */ unsigned long LowestPhysicalPage;
  /* 0x0004 */ unsigned long HighestPhysicalPage;
  /* 0x0008 */ unsigned long NumberOfPhysicalPages;
  /* 0x000c */ volatile unsigned long NumberOfPagingFiles;
  /* 0x0010 */ struct _MMPAGING_FILE* PagingFile[16];
  /* 0x0080 */ volatile unsigned long AvailablePages;
  /* 0x00c0 */ volatile unsigned long ResidentAvailablePages;
  /* 0x00c4 */ volatile unsigned long TotalCommittedPages;
  /* 0x0100 */ struct _MMPFNLIST ModifiedPageListHead;
  /* 0x0140 */ struct _MMPFNLIST ModifiedNoWritePageListHead;
  /* 0x0154 */ unsigned long TotalCommitLimit;
  /* 0x0158 */ unsigned long TotalPagesForPagingFile;
  /* 0x015c */ unsigned long VadPhysicalPages;
  /* 0x0160 */ unsigned long ProcessLockedFilePages;
  /* 0x0164 */ unsigned long ChargeCommitmentFailures[4];
  /* 0x0174 */ volatile long PageFileTraceIndex;
  /* 0x0178 */ struct _MI_PAGEFILE_TRACES PageFileTraces[32];
  /* 0x0b78 */ long __PADDING__[2];
} MI_VISIBLE_PARTITION, *PMI_VISIBLE_PARTITION; /* size: 0x0b80 */

typedef struct _MI_VISIBLE_STATE
{
  /* 0x0000 */ struct _MI_SPECIAL_POOL SpecialPool;
  /* 0x0048 */ struct _LIST_ENTRY SessionWsList;
  /* 0x0050 */ struct _RTL_BITMAP* SessionIdBitmap;
  /* 0x0054 */ struct _MM_PAGED_POOL_INFO PagedPoolInfo;
  /* 0x0070 */ unsigned long MaximumNonPagedPoolInPages;
  /* 0x0074 */ unsigned long SizeOfPagedPoolInPages;
  /* 0x0078 */ struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  /* 0x00ac */ volatile unsigned long NonPagedPoolCommit;
  /* 0x00b0 */ volatile unsigned long BootCommit;
  /* 0x00b4 */ volatile unsigned long MdlPagesAllocated;
  /* 0x00b8 */ volatile unsigned long SystemPageTableCommit;
  /* 0x00bc */ volatile unsigned long SpecialPagesInUse;
  /* 0x00c0 */ volatile unsigned long WsOverheadPages;
  /* 0x00c4 */ volatile unsigned long VadBitmapPages;
  /* 0x00c8 */ volatile unsigned long ProcessCommit;
  /* 0x00cc */ volatile unsigned long SharedCommit;
  /* 0x00d0 */ volatile long DriverCommit;
  /* 0x0100 */ struct _MMSUPPORT SystemWs[3];
  /* 0x0280 */ unsigned long MapCacheFailures;
  /* 0x0284 */ unsigned long LastUnloadedDriver;
  /* 0x0288 */ struct _UNLOADED_DRIVERS* UnloadedDrivers;
  /* 0x028c */ unsigned long PagefileHashPages;
  /* 0x0290 */ struct _SYSPTES_HEADER PteHeader;
  /* 0x031c */ struct _MI_SPECIAL_POOL* SessionSpecialPool;
  /* 0x0320 */ unsigned long SystemVaTypeCount[15];
  /* 0x035c */ unsigned char SystemVaType[1024];
  /* 0x075c */ unsigned long SystemVaTypeCountFailures[15];
  /* 0x0798 */ unsigned long SystemVaTypeCountLimit[15];
  /* 0x07d4 */ unsigned long SystemVaTypeCountPeak[15];
  /* 0x0810 */ unsigned long SystemAvailableVa;
  /* 0x0814 */ long __PADDING__[11];
} MI_VISIBLE_STATE, *PMI_VISIBLE_STATE; /* size: 0x0840 */

typedef enum _MI_WORKING_SET_TYPE
{
  MiWorkingSetTypeSystemCache = 0,
  MiWorkingSetTypePagedPool = 1,
  MiWorkingSetTypeSystemPtes = 2,
  MiWorkingSetTypeMaximum = 3,
} MI_WORKING_SET_TYPE, *PMI_WORKING_SET_TYPE;

typedef struct _MI_ZERO_COST_COUNTS
{
  /* 0x0000 */ unsigned __int64 NativeSum;
  /* 0x0008 */ unsigned __int64 CachedSum;
} MI_ZERO_COST_COUNTS, *PMI_ZERO_COST_COUNTS; /* size: 0x0010 */

typedef struct _MMADDRESS_LIST
{
  union // _TAG_UNNAMED_145
  {
    union
    {
      /* 0x0000 */ struct _MMSECURE_FLAGS Flags;
      /* 0x0000 */ unsigned long FlagsLong;
      /* 0x0000 */ void* StartVa;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0004 */ void* EndVa;
} MMADDRESS_LIST, *PMMADDRESS_LIST; /* size: 0x0008 */

typedef struct _MMCLONE_BLOCK
{
  /* 0x0000 */ struct _MMPTE ProtoPte;
  union
  {
    /* 0x0008 */ volatile unsigned long CloneCommitCount;
    /* 0x0008 */ struct _MI_CLONE_BLOCK_FLAGS u1;
  }; /* size: 0x0004 */
  /* 0x000c */ volatile unsigned long CloneRefCount;
} MMCLONE_BLOCK, *PMMCLONE_BLOCK; /* size: 0x0010 */

typedef struct _MMCLONE_DESCRIPTOR
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE CloneNode;
    /* 0x0000 */ struct _MMCLONE_DESCRIPTOR* Next;
  }; /* size: 0x000c */
  /* 0x000c */ struct _MMCLONE_BLOCK* StartingCloneBlock;
  /* 0x0010 */ struct _MMCLONE_BLOCK* EndingCloneBlock;
  /* 0x0014 */ unsigned long NumberOfPtes;
  /* 0x0018 */ volatile unsigned long NumberOfReferences;
  /* 0x001c */ struct _MMCLONE_HEADER* CloneHeader;
  /* 0x0020 */ unsigned long NonPagedPoolQuotaCharge;
  /* 0x0028 */ unsigned __int64 NestingLevel;
} MMCLONE_DESCRIPTOR, *PMMCLONE_DESCRIPTOR; /* size: 0x0030 */

typedef struct _MMCLONE_HEADER
{
  /* 0x0000 */ unsigned long NumberOfPtes;
  /* 0x0004 */ volatile unsigned long NumberOfProcessReferences;
  /* 0x0008 */ struct _MMCLONE_BLOCK* ClonePtes;
} MMCLONE_HEADER, *PMMCLONE_HEADER; /* size: 0x000c */

typedef struct _MMDEREFERENCE_SEGMENT_HEADER
{
  /* 0x0000 */ struct _KSEMAPHORE Semaphore;
  /* 0x0014 */ struct _LIST_ENTRY ListHead;
} MMDEREFERENCE_SEGMENT_HEADER, *PMMDEREFERENCE_SEGMENT_HEADER; /* size: 0x001c */

typedef struct _MMEXTEND_INFO
{
  /* 0x0000 */ unsigned __int64 CommittedSize;
  /* 0x0008 */ unsigned long ReferenceCount;
  /* 0x000c */ long __PADDING__[1];
} MMEXTEND_INFO, *PMMEXTEND_INFO; /* size: 0x0010 */

typedef struct _MMINPAGE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char InjectRetry : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char CrossThreadPadding : 7; /* bit position: 1 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char PrefetchSystemVmType : 2; /* bit position: 0 */
    /* 0x0001 */ unsigned char VaPrefetchReadBlock : 1; /* bit position: 2 */
    /* 0x0001 */ unsigned char CollidedFlowThrough : 1; /* bit position: 3 */
    /* 0x0001 */ unsigned char ForceCollisions : 1; /* bit position: 4 */
    /* 0x0001 */ unsigned char InPageExpanded : 1; /* bit position: 5 */
    /* 0x0001 */ unsigned char IssuedAtLowPriority : 1; /* bit position: 6 */
    /* 0x0001 */ unsigned char FaultFromStore : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char PagePriority : 3; /* bit position: 0 */
    /* 0x0002 */ unsigned char PerformRelocations : 1; /* bit position: 3 */
    /* 0x0002 */ unsigned char ClusteredPagePriority : 3; /* bit position: 4 */
    /* 0x0002 */ unsigned char MakeClusterValid : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char ZeroLastPage : 1; /* bit position: 0 */
    /* 0x0003 */ unsigned char UserFault : 1; /* bit position: 1 */
    /* 0x0003 */ unsigned char StandbyProtectionNeeded : 1; /* bit position: 2 */
    /* 0x0003 */ unsigned char PteChanged : 1; /* bit position: 3 */
    /* 0x0003 */ unsigned char PageFileFault : 1; /* bit position: 4 */
    /* 0x0003 */ unsigned char PageFilePageHashActive : 1; /* bit position: 5 */
    /* 0x0003 */ unsigned char CoalescedIo : 1; /* bit position: 6 */
    /* 0x0003 */ unsigned char VmLockNotNeeded : 1; /* bit position: 7 */
  }; /* bitfield */
} MMINPAGE_FLAGS, *PMMINPAGE_FLAGS; /* size: 0x0004 */

typedef struct _MMINPAGE_SUPPORT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ struct _KEVENT Event;
  /* 0x0020 */ struct _KEVENT CollidedEvent;
  /* 0x0030 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0038 */ union _LARGE_INTEGER ReadOffset;
  /* 0x0040 */ struct _KAPC_STATE ApcState;
  /* 0x0058 */ struct _ETHREAD* Thread;
  /* 0x005c */ struct _MMPFN* LockedProtoPfn;
  /* 0x0060 */ struct _MMPTE PteContents;
  /* 0x0068 */ volatile long WaitCount;
  /* 0x006c */ unsigned long ByteCount;
  union // _TAG_UNNAMED_146
  {
    union
    {
      /* 0x0070 */ unsigned long ImagePteOffset;
      /* 0x0070 */ unsigned long TossPage;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u3;
  union // _TAG_UNNAMED_147
  {
    union
    {
      /* 0x0074 */ struct _MMINPAGE_FLAGS e1;
      /* 0x0074 */ unsigned long LongFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0078 */ struct _FILE_OBJECT* FilePointer;
  union
  {
    /* 0x007c */ struct _CONTROL_AREA* ControlArea;
    /* 0x007c */ struct _SUBSECTION* Subsection;
  }; /* size: 0x0004 */
  /* 0x0080 */ void* Autoboost;
  /* 0x0084 */ void* FaultingAddress;
  /* 0x0088 */ struct _MMPTE* PointerPte;
  /* 0x008c */ struct _MMPTE* BasePte;
  /* 0x0090 */ struct _MMPFN* Pfn;
  /* 0x0094 */ struct _MDL* PrefetchMdl;
  /* 0x0098 */ struct _MDL Mdl;
  union
  {
    /* 0x00b4 */ unsigned long Page[16];
    struct
    {
      /* 0x00b4 */ struct _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough;
      /* 0x00d0 */ long __PADDING__[10];
    }; /* size: 0x0044 */
  }; /* size: 0x0044 */
} MMINPAGE_SUPPORT, *PMMINPAGE_SUPPORT; /* size: 0x00f8 */

typedef struct _MMINPAGE_SUPPORT_FLOW_THROUGH
{
  /* 0x0000 */ unsigned long Page[1];
  /* 0x0004 */ struct _MMINPAGE_SUPPORT* InitialInPageSupport;
  /* 0x0008 */ struct _MMPAGING_FILE* PagingFile;
  /* 0x000c */ unsigned long PageFileOffset;
  /* 0x0010 */ struct _RTL_BALANCED_NODE Node;
} MMINPAGE_SUPPORT_FLOW_THROUGH, *PMMINPAGE_SUPPORT_FLOW_THROUGH; /* size: 0x001c */

typedef enum _MMLISTS
{
  ZeroedPageList = 0,
  FreePageList = 1,
  StandbyPageList = 2,
  ModifiedPageList = 3,
  ModifiedNoWritePageList = 4,
  BadPageList = 5,
  ActiveAndValid = 6,
  TransitionPage = 7,
} MMLISTS, *PMMLISTS;

typedef struct _MMMOD_WRITER_LISTHEAD
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  union
  {
    /* 0x0008 */ struct _KGATE Gate;
    /* 0x0008 */ struct _KEVENT Event;
  }; /* size: 0x0010 */
} MMMOD_WRITER_LISTHEAD, *PMMMOD_WRITER_LISTHEAD; /* size: 0x0018 */

typedef struct _MMMOD_WRITER_MDL_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  union // _TAG_UNNAMED_148
  {
    /* 0x0008 */ struct _IO_STATUS_BLOCK IoStatus;
  } /* size: 0x0008 */ u;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0014 */ struct _MODWRITER_FLAGS u1;
  /* 0x0018 */ unsigned long StoreWriteRefCount;
  /* 0x001c */ struct _KAPC StoreWriteCompletionApc;
  /* 0x004c */ unsigned long ByteCount;
  /* 0x0050 */ unsigned long ChargedPages;
  /* 0x0054 */ struct _MMPAGING_FILE* PagingFile;
  /* 0x0058 */ struct _FILE_OBJECT* File;
  /* 0x005c */ struct _CONTROL_AREA* ControlArea;
  /* 0x0060 */ struct _ERESOURCE* FileResource;
  /* 0x0068 */ union _LARGE_INTEGER WriteOffset;
  /* 0x0070 */ union _LARGE_INTEGER IssueTime;
  /* 0x0078 */ struct _MI_PARTITION* Partition;
  /* 0x007c */ struct _MDL* PointerMdl;
  /* 0x0080 */ struct _MDL Mdl;
  /* 0x009c */ unsigned long Page[1];
} MMMOD_WRITER_MDL_ENTRY, *PMMMOD_WRITER_MDL_ENTRY; /* size: 0x00a0 */

typedef struct _MMPAGE_FILE_EXPANSION
{
  /* 0x0000 */ struct _SEGMENT* Segment;
  /* 0x0004 */ struct _LIST_ENTRY DereferenceList;
  /* 0x000c */ struct _MI_PARTITION* Partition;
  /* 0x0010 */ unsigned long RequestedExpansionSize;
  /* 0x0014 */ unsigned long ActualExpansion;
  /* 0x0018 */ struct _KEVENT Event;
  /* 0x0028 */ volatile long InProgress;
  /* 0x002c */ struct _MMPAGE_FILE_EXPANSION_FLAGS u;
  /* 0x0030 */ void** volatile ActiveEntry;
  /* 0x0034 */ unsigned char AttemptForCantExtend;
  /* 0x0035 */ unsigned char PageFileContract;
  /* 0x0036 */ char __PADDING__[2];
} MMPAGE_FILE_EXPANSION, *PMMPAGE_FILE_EXPANSION; /* size: 0x0038 */

typedef struct _MMPAGE_FILE_EXPANSION_FLAGS
{
  /* 0x0000 */ unsigned char PageFileNumber : 8; /* bit position: 0 */
  /* 0x0001 */ unsigned char Spare1 : 8; /* bit position: 0 */
  /* 0x0002 */ unsigned char Spare2 : 8; /* bit position: 0 */
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char IgnoreCurrentCommit : 1; /* bit position: 0 */
    /* 0x0003 */ unsigned char IncreaseMinimumSize : 1; /* bit position: 1 */
    /* 0x0003 */ unsigned char Spare3 : 6; /* bit position: 2 */
  }; /* bitfield */
} MMPAGE_FILE_EXPANSION_FLAGS, *PMMPAGE_FILE_EXPANSION_FLAGS; /* size: 0x0004 */

typedef struct _MMPAGING_FILE
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long MaximumSize;
  /* 0x0008 */ unsigned long MinimumSize;
  /* 0x000c */ unsigned long FreeSpace;
  /* 0x0010 */ unsigned long PeakUsage;
  /* 0x0014 */ unsigned long HighestPage;
  /* 0x0018 */ unsigned long FreeReservationSpace;
  /* 0x001c */ unsigned long LargestReserveCluster;
  /* 0x0020 */ struct _FILE_OBJECT* File;
  /* 0x0024 */ struct _MMMOD_WRITER_MDL_ENTRY* Entry[2];
  /* 0x0030 */ union _SLIST_HEADER PfnsToFree;
  /* 0x0038 */ struct _UNICODE_STRING PageFileName;
  /* 0x0040 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Bitmaps;
  /* 0x0044 */ unsigned long AllocationBitmapHint;
  /* 0x0048 */ unsigned long ReservationBitmapHint;
  /* 0x004c */ unsigned long LargestNonReservedClusterSize;
  /* 0x0050 */ unsigned long RefreshClusterSize;
  /* 0x0054 */ unsigned long LastRefreshClusterSize;
  /* 0x0058 */ unsigned long ReservedClusterSizeAggregate;
  union
  {
    /* 0x005c */ unsigned long ToBeEvictedCount;
    /* 0x005c */ unsigned long HybridPriority;
  }; /* size: 0x0004 */
  struct /* bitfield */
  {
    /* 0x0060 */ unsigned short PageFileNumber : 4; /* bit position: 0 */
    /* 0x0060 */ unsigned short WsSwapPagefile : 1; /* bit position: 4 */
    /* 0x0060 */ unsigned short NoReservations : 1; /* bit position: 5 */
    /* 0x0060 */ unsigned short VirtualStorePagefile : 1; /* bit position: 6 */
    /* 0x0060 */ unsigned short SwapSupported : 1; /* bit position: 7 */
    /* 0x0060 */ unsigned short NodeInserted : 1; /* bit position: 8 */
    /* 0x0060 */ unsigned short StackNotified : 1; /* bit position: 9 */
    /* 0x0060 */ unsigned short Spare0 : 5; /* bit position: 10 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0062 */ unsigned char AdriftMdls : 1; /* bit position: 0 */
    /* 0x0062 */ unsigned char Spare1 : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0063 */ unsigned char Spare2 : 8; /* bit position: 0 */
  /* 0x0064 */ unsigned long PageHashPages;
  /* 0x0068 */ unsigned long PageHashPagesPeak;
  /* 0x006c */ unsigned long* PageHash;
  /* 0x0070 */ void* FileHandle;
  /* 0x0074 */ unsigned long Lock;
  /* 0x0078 */ struct _ETHREAD* LockOwner;
  /* 0x007c */ struct _RTL_AVL_TREE FlowThroughReadRoot;
  /* 0x0080 */ struct _MI_PARTITION* Partition;
  /* 0x0084 */ struct _RTL_BALANCED_NODE FileObjectNode;
} MMPAGING_FILE, *PMMPAGING_FILE; /* size: 0x0090 */

typedef struct _MMPFN
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ListEntry;
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    struct
    {
      union // _TAG_UNNAMED_149
      {
        union
        {
          /* 0x0000 */ unsigned long Flink;
          /* 0x0000 */ unsigned long WsIndex;
          /* 0x0000 */ struct _KEVENT* Event;
          /* 0x0000 */ void* Next;
          /* 0x0000 */ void* volatile VolatileNext;
          /* 0x0000 */ struct _KTHREAD* KernelStackOwner;
          /* 0x0000 */ struct _SINGLE_LIST_ENTRY NextStackPfn;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u1;
      union
      {
        /* 0x0004 */ struct _MMPTE* PteAddress;
        /* 0x0004 */ void* volatile VolatilePteAddress;
        /* 0x0004 */ unsigned long PteLong;
      }; /* size: 0x0004 */
      /* 0x0008 */ struct _MMPTE OriginalPte;
      /* 0x0010 */ struct _MIPFNBLINK u2;
      union // _TAG_UNNAMED_150
      {
        union
        {
          struct
          {
            /* 0x0014 */ unsigned short ReferenceCount;
            /* 0x0016 */ struct _MMPFNENTRY e1;
          }; /* size: 0x0004 */
          struct // _TAG_UNNAMED_151
          {
            /* 0x0014 */ unsigned short ReferenceCount;
            union
            {
              /* 0x0016 */ unsigned short ShortFlags;
              /* 0x0016 */ volatile unsigned short VolatileShortFlags;
            }; /* size: 0x0002 */
          } /* size: 0x0004 */ e2;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u3;
      union // _TAG_UNNAMED_152
      {
        union
        {
          struct /* bitfield */
          {
            /* 0x0018 */ unsigned long PteFrame : 24; /* bit position: 0 */
            /* 0x0018 */ unsigned long PageIdentity : 3; /* bit position: 24 */
            /* 0x0018 */ unsigned long PrototypePte : 1; /* bit position: 27 */
            /* 0x0018 */ unsigned long PageColor : 4; /* bit position: 28 */
          }; /* bitfield */
          /* 0x0018 */ unsigned long EntireField;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u4;
    }; /* size: 0x001c */
  }; /* size: 0x001c */
} MMPFN, *PMMPFN; /* size: 0x001c */

typedef struct _MMPFNENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char PageLocation : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char WriteInProgress : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char Modified : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char ReadInProgress : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char CacheAttribute : 2; /* bit position: 6 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char Priority : 3; /* bit position: 0 */
    /* 0x0001 */ unsigned char OnProtectedStandby : 1; /* bit position: 3 */
    /* 0x0001 */ unsigned char InPageError : 1; /* bit position: 4 */
    /* 0x0001 */ unsigned char SystemChargedPage : 1; /* bit position: 5 */
    /* 0x0001 */ unsigned char RemovalRequested : 1; /* bit position: 6 */
    /* 0x0001 */ unsigned char ParityError : 1; /* bit position: 7 */
  }; /* bitfield */
} MMPFNENTRY, *PMMPFNENTRY; /* size: 0x0002 */

typedef struct _MMPFNLIST
{
  /* 0x0000 */ unsigned long Total;
  /* 0x0004 */ enum _MMLISTS ListName;
  /* 0x0008 */ unsigned long Flink;
  /* 0x000c */ unsigned long Blink;
  /* 0x0010 */ unsigned long Lock;
} MMPFNLIST, *PMMPFNLIST; /* size: 0x0014 */

typedef struct _MMPTE
{
  union // _TAG_UNNAMED_153
  {
    union
    {
      /* 0x0000 */ unsigned __int64 Long;
      /* 0x0000 */ volatile unsigned __int64 VolatileLong;
      /* 0x0000 */ struct _MMPTE_HIGHLOW HighLow;
      /* 0x0000 */ struct _HARDWARE_PTE Flush;
      /* 0x0000 */ struct _MMPTE_HARDWARE Hard;
      /* 0x0000 */ struct _MMPTE_PROTOTYPE Proto;
      /* 0x0000 */ struct _MMPTE_SOFTWARE Soft;
      /* 0x0000 */ struct _MMPTE_TIMESTAMP TimeStamp;
      /* 0x0000 */ struct _MMPTE_TRANSITION Trans;
      /* 0x0000 */ struct _MMPTE_SUBSECTION Subsect;
      /* 0x0000 */ struct _MMPTE_LIST List;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} MMPTE, *PMMPTE; /* size: 0x0008 */

typedef struct _MMPTE_HARDWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Dirty1 : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Unused : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 26; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 reserved1 : 26; /* bit position: 38 */
  }; /* bitfield */
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; /* size: 0x0008 */

typedef struct _MMPTE_HIGHLOW
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ unsigned long HighPart;
} MMPTE_HIGHLOW, *PMMPTE_HIGHLOW; /* size: 0x0008 */

typedef struct _MMPTE_LIST
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 OneEntry : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 filler0 : 8; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 filler1 : 21; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 NextEntry : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_LIST, *PMMPTE_LIST; /* size: 0x0008 */

typedef struct _MMPTE_PROTOTYPE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 DemandFillProto : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 HiberVerifyConverted : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 Unused1 : 5; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 ReadOnly : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 Combined : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 Unused : 16; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 ProtoAddress : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; /* size: 0x0008 */

typedef struct _MMPTE_SOFTWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFileReserved : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 PageFileAllocated : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned __int64 Unused : 18; /* bit position: 14 */
    /* 0x0000 */ unsigned __int64 PageFileHigh : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; /* size: 0x0008 */

typedef struct _MMPTE_SUBSECTION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Unused0 : 4; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Unused1 : 21; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 SubsectionAddress : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; /* size: 0x0008 */

typedef struct _MMPTE_TIMESTAMP
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 MustBeZero : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 Unused : 20; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 GlobalTimeStamp : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP; /* size: 0x0008 */

typedef struct _MMPTE_TRANSITION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Spare : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 26; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 Unused : 26; /* bit position: 38 */
  }; /* bitfield */
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; /* size: 0x0008 */

typedef struct _MMSECTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int BeingDeleted : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int BeingCreated : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int BeingPurged : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int NoModifiedWriting : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int FailAllIo : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned int Image : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned int Based : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned int File : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned int AttemptingDelete : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned int PrefetchCreated : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned int PhysicalMemory : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned int CopyOnWrite : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned int Reserve : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned int Commit : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned int NoChange : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned int WasPurged : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned int UserReference : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned int GlobalMemory : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned int DeleteOnClose : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned int FilePointerNull : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned int PreferredNode : 6; /* bit position: 20 */
    /* 0x0000 */ unsigned int GlobalOnlyPerSession : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned int UserWritable : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned int SystemVaAllocated : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned int PreferredFsCompressionBoundary : 1; /* bit position: 29 */
    /* 0x0000 */ unsigned int UsingFileExtents : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned int Spare : 1; /* bit position: 31 */
  }; /* bitfield */
} MMSECTION_FLAGS, *PMMSECTION_FLAGS; /* size: 0x0004 */

typedef struct _MMSECURE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ReadOnly : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadWrite : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long SecNoChange : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoDelete : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long RequiresPteReversal : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long ExclusiveSecure : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long Spare : 6; /* bit position: 6 */
  }; /* bitfield */
} MMSECURE_FLAGS, *PMMSECURE_FLAGS; /* size: 0x0004 */

typedef struct _MMSESSION
{
  /* 0x0000 */ struct _EX_PUSH_LOCK SystemSpaceViewLock;
  /* 0x0004 */ struct _EX_PUSH_LOCK* SystemSpaceViewLockPointer;
  /* 0x0008 */ struct _RTL_AVL_TREE ViewRoot;
  /* 0x000c */ unsigned long ViewCount;
  /* 0x0010 */ unsigned long BitmapFailures;
} MMSESSION, *PMMSESSION; /* size: 0x0014 */

typedef struct _MMSUBSECTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short SubsectionAccessed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned short Protection : 5; /* bit position: 1 */
    /* 0x0000 */ unsigned short StartingSector4132 : 10; /* bit position: 6 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned short SubsectionStatic : 1; /* bit position: 0 */
    /* 0x0002 */ unsigned short GlobalMemory : 1; /* bit position: 1 */
    /* 0x0002 */ unsigned short DirtyPages : 1; /* bit position: 2 */
    /* 0x0002 */ unsigned short OnDereferenceList : 1; /* bit position: 3 */
    /* 0x0002 */ unsigned short SectorEndOffset : 12; /* bit position: 4 */
  }; /* bitfield */
} MMSUBSECTION_FLAGS, *PMMSUBSECTION_FLAGS; /* size: 0x0004 */

typedef struct _MMSUPPORT
{
  /* 0x0000 */ volatile long WorkingSetLock;
  /* 0x0004 */ struct _KGATE* ExitOutswapGate;
  /* 0x0008 */ void* AccessLog;
  /* 0x000c */ struct _LIST_ENTRY WorkingSetExpansionLinks;
  /* 0x0014 */ unsigned long AgeDistribution[7];
  /* 0x0030 */ unsigned long MinimumWorkingSetSize;
  /* 0x0034 */ unsigned long WorkingSetLeafSize;
  /* 0x0038 */ unsigned long WorkingSetLeafPrivateSize;
  /* 0x003c */ unsigned long WorkingSetSize;
  /* 0x0040 */ unsigned long WorkingSetPrivateSize;
  /* 0x0044 */ unsigned long MaximumWorkingSetSize;
  /* 0x0048 */ unsigned long ChargedWslePages;
  /* 0x004c */ unsigned long ActualWslePages;
  /* 0x0050 */ unsigned long WorkingSetSizeOverhead;
  /* 0x0054 */ unsigned long PeakWorkingSetSize;
  /* 0x0058 */ unsigned long HardFaultCount;
  /* 0x005c */ struct _MMWSL* VmWorkingSetList;
  /* 0x0060 */ unsigned short NextPageColor;
  /* 0x0062 */ unsigned short LastTrimStamp;
  /* 0x0064 */ unsigned long PageFaultCount;
  /* 0x0068 */ unsigned long TrimmedPageCount;
  /* 0x006c */ unsigned long ForceTrimPages;
  /* 0x0070 */ struct _MMSUPPORT_FLAGS Flags;
  /* 0x0074 */ unsigned long ReleasedCommitDebt;
  /* 0x0078 */ void* WsSwapSupport;
  /* 0x007c */ void* CommitReAcquireFailSupport;
} MMSUPPORT, *PMMSUPPORT; /* size: 0x0080 */

typedef struct _MMSUPPORT_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char WorkingSetType : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char ForceCredits : 3; /* bit position: 3 */
    /* 0x0000 */ unsigned char MaximumWorkingSetHard : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char MinimumWorkingSetHard : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char SessionMaster : 1; /* bit position: 0 */
    /* 0x0001 */ unsigned char TrimmerState : 2; /* bit position: 1 */
    /* 0x0001 */ unsigned char Reserved : 1; /* bit position: 3 */
    /* 0x0001 */ unsigned char PageStealers : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0002 */ unsigned char MemoryPriority;
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char WsleDeleted : 1; /* bit position: 0 */
    /* 0x0003 */ unsigned char VmExiting : 1; /* bit position: 1 */
    /* 0x0003 */ unsigned char ExpansionFailed : 1; /* bit position: 2 */
    /* 0x0003 */ unsigned char SvmEnabled : 1; /* bit position: 3 */
    /* 0x0003 */ unsigned char ForceAge : 1; /* bit position: 4 */
    /* 0x0003 */ unsigned char NewMaximum : 1; /* bit position: 5 */
    /* 0x0003 */ unsigned char CommitReleaseState : 2; /* bit position: 6 */
  }; /* bitfield */
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS; /* size: 0x0004 */

typedef struct _MMVAD
{
  /* 0x0000 */ struct _MMVAD_SHORT Core;
  union // _TAG_UNNAMED_154
  {
    union
    {
      /* 0x0028 */ unsigned long LongFlags2;
      /* 0x0028 */ struct _MMVAD_FLAGS2 VadFlags2;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  /* 0x002c */ struct _SUBSECTION* Subsection;
  /* 0x0030 */ struct _MMPTE* FirstPrototypePte;
  /* 0x0034 */ struct _MMPTE* LastContiguousPte;
  /* 0x0038 */ struct _LIST_ENTRY ViewLinks;
  /* 0x0040 */ struct _EPROCESS* VadsProcess;
  union // _TAG_UNNAMED_155
  {
    union
    {
      /* 0x0044 */ struct _MI_VAD_SEQUENTIAL_INFO SequentialVa;
      /* 0x0044 */ struct _MMEXTEND_INFO* ExtendedInfo;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u4;
  /* 0x0048 */ struct _FILE_OBJECT* FileObject;
} MMVAD, *PMMVAD; /* size: 0x004c */

typedef struct _MMVAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 3 */
    /* 0x0000 */ unsigned long PreferredNode : 6; /* bit position: 8 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned long PrivateMemory : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned long Teb : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long PrivateFixup : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long ManySubsections : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned long Spare : 12; /* bit position: 19 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 31 */
  }; /* bitfield */
} MMVAD_FLAGS, *PMMVAD_FLAGS; /* size: 0x0004 */

typedef struct _MMVAD_FLAGS1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long CommitCharge : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long MemCommit : 1; /* bit position: 31 */
  }; /* bitfield */
} MMVAD_FLAGS1, *PMMVAD_FLAGS1; /* size: 0x0004 */

typedef struct _MMVAD_FLAGS2
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long FileOffset : 24; /* bit position: 0 */
    /* 0x0000 */ unsigned long Large : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long TrimBehind : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long Inherit : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long CopyOnWrite : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long NoValidationNeeded : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned long PrivateDemandZero : 1; /* bit position: 29 */
    /* 0x0000 */ unsigned long Spare : 2; /* bit position: 30 */
  }; /* bitfield */
} MMVAD_FLAGS2, *PMMVAD_FLAGS2; /* size: 0x0004 */

typedef struct _MMVAD_SHORT
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE VadNode;
    /* 0x0000 */ struct _MMVAD_SHORT* NextVad;
  }; /* size: 0x000c */
  /* 0x000c */ unsigned long StartingVpn;
  /* 0x0010 */ unsigned long EndingVpn;
  /* 0x0014 */ long ReferenceCount;
  /* 0x0018 */ struct _EX_PUSH_LOCK PushLock;
  union // _TAG_UNNAMED_156
  {
    union
    {
      /* 0x001c */ unsigned long LongFlags;
      /* 0x001c */ struct _MMVAD_FLAGS VadFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  union // _TAG_UNNAMED_157
  {
    union
    {
      /* 0x0020 */ unsigned long LongFlags1;
      /* 0x0020 */ struct _MMVAD_FLAGS1 VadFlags1;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0024 */ struct _MI_VAD_EVENT_BLOCK* EventList;
} MMVAD_SHORT, *PMMVAD_SHORT; /* size: 0x0028 */

typedef struct _MMWORKING_SET_EXPANSION_HEAD
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
} MMWORKING_SET_EXPANSION_HEAD, *PMMWORKING_SET_EXPANSION_HEAD; /* size: 0x0008 */

typedef struct _MMWSL
{
  /* 0x0000 */ unsigned long FirstFree;
  /* 0x0004 */ unsigned long FirstDynamic;
  /* 0x0008 */ unsigned long LastEntry;
  /* 0x000c */ unsigned long NextSlot;
  /* 0x0010 */ unsigned long LastInitializedWsle;
  /* 0x0014 */ unsigned long NextAgingSlot;
  /* 0x0018 */ unsigned long NextAccessClearingSlot;
  /* 0x001c */ unsigned long LastAccessClearingRemainder;
  /* 0x0020 */ unsigned long LastAgingRemainder;
  /* 0x0024 */ unsigned long WsleSize;
  /* 0x0028 */ unsigned long NonDirectCount;
  /* 0x002c */ void* LowestPagableAddress;
  /* 0x0030 */ struct _MMWSLE_NONDIRECT_HASH* NonDirectHash;
  /* 0x0034 */ struct _MMWSLE_HASH* HashTableStart;
  /* 0x0038 */ struct _MMWSLE_HASH* HighestPermittedHashAddress;
  /* 0x003c */ unsigned long ActiveWsleCounts[16];
  /* 0x007c */ struct _MI_ACTIVE_WSLE_LISTHEAD ActiveWsles[16];
  /* 0x00fc */ struct _MMWSLE* Wsle;
  /* 0x0100 */ struct _MI_USER_VA_INFO UserVaInfo;
} MMWSL, *PMMWSL; /* size: 0x0e20 */

typedef struct _MMWSLE
{
  union // _TAG_UNNAMED_158
  {
    union
    {
      /* 0x0000 */ void* VirtualAddress;
      /* 0x0000 */ unsigned long Long;
      /* 0x0000 */ struct _MMWSLENTRY e1;
      /* 0x0000 */ struct _MMWSLE_FREE_ENTRY e2;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} MMWSLE, *PMMWSLE; /* size: 0x0004 */

typedef struct _MMWSLENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Spare : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long Hashed : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long Direct : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 4 */
    /* 0x0000 */ unsigned long Age : 3; /* bit position: 9 */
    /* 0x0000 */ unsigned long VirtualPageNumber : 20; /* bit position: 12 */
  }; /* bitfield */
} MMWSLENTRY, *PMMWSLENTRY; /* size: 0x0004 */

typedef struct _MMWSLE_FREE_ENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long MustBeZero : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long PreviousFree : 11; /* bit position: 1 */
    /* 0x0000 */ unsigned long NextFree : 20; /* bit position: 12 */
  }; /* bitfield */
} MMWSLE_FREE_ENTRY, *PMMWSLE_FREE_ENTRY; /* size: 0x0004 */

typedef struct _MMWSLE_HASH
{
  /* 0x0000 */ unsigned long Index;
} MMWSLE_HASH, *PMMWSLE_HASH; /* size: 0x0004 */

typedef struct _MMWSLE_NONDIRECT_HASH
{
  /* 0x0000 */ void* Key;
  /* 0x0004 */ unsigned long Index;
} MMWSLE_NONDIRECT_HASH, *PMMWSLE_NONDIRECT_HASH; /* size: 0x0008 */

typedef struct _MM_DRIVER_VERIFIER_DATA
{
  /* 0x0000 */ unsigned long Level;
  /* 0x0004 */ volatile unsigned long RaiseIrqls;
  /* 0x0008 */ volatile unsigned long AcquireSpinLocks;
  /* 0x000c */ volatile unsigned long SynchronizeExecutions;
  /* 0x0010 */ volatile unsigned long AllocationsAttempted;
  /* 0x0014 */ volatile unsigned long AllocationsSucceeded;
  /* 0x0018 */ volatile unsigned long AllocationsSucceededSpecialPool;
  /* 0x001c */ unsigned long AllocationsWithNoTag;
  /* 0x0020 */ unsigned long TrimRequests;
  /* 0x0024 */ unsigned long Trims;
  /* 0x0028 */ unsigned long AllocationsFailed;
  /* 0x002c */ volatile unsigned long AllocationsFailedDeliberately;
  /* 0x0030 */ volatile unsigned long Loads;
  /* 0x0034 */ volatile unsigned long Unloads;
  /* 0x0038 */ unsigned long UnTrackedPool;
  /* 0x003c */ unsigned long UserTrims;
  /* 0x0040 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x0044 */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0048 */ unsigned long PeakPagedPoolAllocations;
  /* 0x004c */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0050 */ volatile unsigned long PagedBytes;
  /* 0x0054 */ volatile unsigned long NonPagedBytes;
  /* 0x0058 */ unsigned long PeakPagedBytes;
  /* 0x005c */ unsigned long PeakNonPagedBytes;
  /* 0x0060 */ volatile unsigned long BurstAllocationsFailedDeliberately;
  /* 0x0064 */ unsigned long SessionTrims;
  /* 0x0068 */ volatile unsigned long OptionChanges;
  /* 0x006c */ volatile unsigned long VerifyMode;
  /* 0x0070 */ struct _UNICODE_STRING PreviousBucketName;
  /* 0x0078 */ volatile unsigned long ExecutePoolTypes;
  /* 0x007c */ volatile unsigned long ExecutePageProtections;
  /* 0x0080 */ volatile unsigned long ExecutePageMappings;
  /* 0x0084 */ volatile unsigned long ExecuteWriteSections;
  /* 0x0088 */ volatile unsigned long SectionAlignmentFailures;
} MM_DRIVER_VERIFIER_DATA, *PMM_DRIVER_VERIFIER_DATA; /* size: 0x008c */

typedef struct _MM_PAGED_POOL_INFO
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _RTL_BITMAP PagedPoolAllocationMap;
  /* 0x000c */ struct _MMPTE* FirstPteForPagedPool;
  /* 0x0010 */ unsigned long MaximumSize;
  /* 0x0014 */ unsigned long PagedPoolHint;
  /* 0x0018 */ unsigned long AllocatedPagedPool;
} MM_PAGED_POOL_INFO, *PMM_PAGED_POOL_INFO; /* size: 0x001c */

typedef struct _MM_PAGE_ACCESS_INFO
{
  union
  {
    /* 0x0000 */ union _MM_PAGE_ACCESS_INFO_FLAGS Flags;
    /* 0x0000 */ unsigned __int64 FileOffset;
    /* 0x0000 */ void* VirtualAddress;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long DontUse0 : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned long Spare0 : 29; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0004 */ void* PointerProtoPte;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} MM_PAGE_ACCESS_INFO, *PMM_PAGE_ACCESS_INFO; /* size: 0x0008 */

typedef union _MM_PAGE_ACCESS_INFO_FLAGS
{
  union
  {
    struct // _TAG_UNNAMED_159
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Image : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 11 */
      }; /* bitfield */
    } /* size: 0x0004 */ File;
    struct // _TAG_UNNAMED_160
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Spare1 : 2; /* bit position: 10 */
      }; /* bitfield */
    } /* size: 0x0004 */ Private;
  }; /* size: 0x0004 */
} MM_PAGE_ACCESS_INFO_FLAGS, *PMM_PAGE_ACCESS_INFO_FLAGS; /* size: 0x0004 */

typedef struct _MM_PAGE_ACCESS_INFO_HEADER
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0004 */ enum _MM_PAGE_ACCESS_TYPE Type;
  union
  {
    /* 0x0008 */ unsigned long EmptySequenceNumber;
    /* 0x0008 */ unsigned long CurrentFileIndex;
  }; /* size: 0x0004 */
  /* 0x0010 */ unsigned __int64 CreateTime;
  union
  {
    /* 0x0018 */ unsigned __int64 EmptyTime;
    /* 0x0018 */ struct _MM_PAGE_ACCESS_INFO* TempEntry;
  }; /* size: 0x0008 */
  union
  {
    struct
    {
      /* 0x0020 */ struct _MM_PAGE_ACCESS_INFO* PageEntry;
      /* 0x0024 */ unsigned long* FileEntry;
      /* 0x0028 */ unsigned long* FirstFileEntry;
      /* 0x002c */ struct _EPROCESS* Process;
      /* 0x0030 */ unsigned long SessionId;
    }; /* size: 0x0014 */
    struct
    {
      /* 0x0020 */ unsigned long* PageFrameEntry;
      /* 0x0024 */ unsigned long* LastPageFrameEntry;
      /* 0x0028 */ long __PADDING__[4];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
} MM_PAGE_ACCESS_INFO_HEADER, *PMM_PAGE_ACCESS_INFO_HEADER; /* size: 0x0038 */

typedef enum _MM_PAGE_ACCESS_TYPE
{
  MmPteAccessType = 0,
  MmCcReadAheadType = 1,
  MmPfnRepurposeType = 2,
  MmMaximumPageAccessType = 3,
} MM_PAGE_ACCESS_TYPE, *PMM_PAGE_ACCESS_TYPE;

typedef enum _MM_POOL_FAILURE_REASONS
{
  MmNonPagedNoPtes = 0,
  MmPriorityTooLow = 1,
  MmNonPagedNoPagesAvailable = 2,
  MmPagedNoPtes = 3,
  MmSessionPagedNoPtes = 4,
  MmPagedNoPagesAvailable = 5,
  MmSessionPagedNoPagesAvailable = 6,
  MmPagedNoCommit = 7,
  MmSessionPagedNoCommit = 8,
  MmNonPagedNoResidentAvailable = 9,
  MmNonPagedNoCommit = 10,
  MmMaximumFailureReason = 11,
} MM_POOL_FAILURE_REASONS, *PMM_POOL_FAILURE_REASONS;

typedef enum _MM_POOL_PRIORITIES
{
  MmHighPriority = 0,
  MmNormalPriority = 1,
  MmLowPriority = 2,
  MmMaximumPoolPriority = 3,
} MM_POOL_PRIORITIES, *PMM_POOL_PRIORITIES;

typedef enum _MM_POOL_TYPES
{
  MmNonPagedPool = 0,
  MmPagedPool = 1,
  MmSessionPagedPool = 2,
  MmMaximumPoolType = 3,
} MM_POOL_TYPES, *PMM_POOL_TYPES;

typedef enum _MM_PREEMPTIVE_TRIMS
{
  MmPreemptForNonPaged = 0,
  MmPreemptForPaged = 1,
  MmPreemptForNonPagedPriority = 2,
  MmPreemptForPagedPriority = 3,
  MmMaximumPreempt = 4,
} MM_PREEMPTIVE_TRIMS, *PMM_PREEMPTIVE_TRIMS;

typedef struct _MM_SESSION_SPACE
{
  /* 0x0000 */ volatile long ReferenceCount;
  union // _TAG_UNNAMED_161
  {
    union
    {
      /* 0x0004 */ unsigned long LongFlags;
      /* 0x0004 */ struct _MM_SESSION_SPACE_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ volatile long ProcessReferenceToSession;
  /* 0x0010 */ struct _LIST_ENTRY ProcessList;
  /* 0x0018 */ unsigned long SessionPageDirectoryIndex;
  /* 0x001c */ volatile unsigned long NonPagablePages;
  /* 0x0020 */ volatile unsigned long CommittedPages;
  /* 0x0024 */ void* PagedPoolStart;
  /* 0x0028 */ void* PagedPoolEnd;
  /* 0x002c */ void* SessionObject;
  /* 0x0030 */ void* SessionObjectHandle;
  /* 0x0034 */ unsigned long SessionPoolAllocationFailures[4];
  /* 0x0044 */ struct _RTL_AVL_TREE ImageTree;
  /* 0x0048 */ unsigned long LocaleId;
  /* 0x004c */ unsigned long AttachCount;
  /* 0x0050 */ struct _KGATE AttachGate;
  /* 0x0060 */ struct _LIST_ENTRY WsListEntry;
  /* 0x0080 */ struct _GENERAL_LOOKASIDE Lookaside[24];
  /* 0x0c80 */ struct _MMSESSION Session;
  /* 0x0c94 */ struct _MM_PAGED_POOL_INFO PagedPoolInfo;
  /* 0x0cb0 */ struct _MMSUPPORT Vm;
  /* 0x0d30 */ struct _MMWSLE* Wsle;
  /* 0x0d34 */ struct _MI_SESSION_DRIVER_UNLOAD DriverUnload;
  /* 0x0d40 */ struct _POOL_DESCRIPTOR PagedPool;
  /* 0x1e80 */ struct _MMPTE* PageTables;
  /* 0x1e84 */ unsigned long PagedPoolBitBuffer[32];
  /* 0x1f08 */ struct _MI_SPECIAL_POOL SpecialPool;
  /* 0x1f50 */ struct _EX_PUSH_LOCK SessionPteLock;
  /* 0x1f54 */ long PoolBigEntriesInUse;
  /* 0x1f58 */ unsigned long PagedPoolPdeCount;
  /* 0x1f5c */ unsigned long SpecialPoolPdeCount;
  /* 0x1f60 */ unsigned long DynamicSessionPdeCount;
  /* 0x1f64 */ struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  /* 0x1f98 */ void* PoolTrackTableExpansion;
  /* 0x1f9c */ unsigned long PoolTrackTableExpansionSize;
  /* 0x1fa0 */ void* PoolTrackBigPages;
  /* 0x1fa4 */ unsigned long PoolTrackBigPagesSize;
  /* 0x1fa8 */ enum _IO_SESSION_STATE IoState;
  /* 0x1fac */ unsigned long IoStateSequence;
  /* 0x1fb0 */ struct _KEVENT IoNotificationEvent;
  /* 0x1fc0 */ struct _ESILO* ServerSilo;
  /* 0x1fc8 */ unsigned __int64 CreateTime;
  /* 0x1fd0 */ long __PADDING__[12];
} MM_SESSION_SPACE, *PMM_SESSION_SPACE; /* size: 0x2000 */

typedef struct _MM_SESSION_SPACE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Initialized : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long DeletePending : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long PoolInitialized : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long DynamicVaInitialized : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long WsInitialized : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long PoolDestroyed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long ObjectInitialized : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long LeakedPoolDeliberately : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long Filler : 24; /* bit position: 8 */
  }; /* bitfield */
} MM_SESSION_SPACE_FLAGS, *PMM_SESSION_SPACE_FLAGS; /* size: 0x0004 */

typedef union _MM_STORE_KEY
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long KeyLow : 28; /* bit position: 0 */
      /* 0x0000 */ unsigned long KeyHigh : 4; /* bit position: 28 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long EntireKey;
  }; /* size: 0x0004 */
} MM_STORE_KEY, *PMM_STORE_KEY; /* size: 0x0004 */

typedef struct _MM_SYSTEM_PAGE_COUNTS
{
  /* 0x0000 */ unsigned long SystemCodePage;
  /* 0x0004 */ unsigned long SystemDriverPage;
  /* 0x0008 */ long TotalSystemCodePages;
  /* 0x000c */ long TotalSystemDriverPages;
} MM_SYSTEM_PAGE_COUNTS, *PMM_SYSTEM_PAGE_COUNTS; /* size: 0x0010 */

typedef enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
} MODE, *PMODE;

typedef struct _MODWRITER_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long KeepForever : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Networked : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long IoPriority : 3; /* bit position: 2 */
    /* 0x0000 */ unsigned long ModifiedStoreWrite : 1; /* bit position: 5 */
  }; /* bitfield */
} MODWRITER_FLAGS, *PMODWRITER_FLAGS; /* size: 0x0004 */

typedef struct _MSUBSECTION
{
  /* 0x0000 */ struct _SUBSECTION Core;
  /* 0x0028 */ struct _RTL_BALANCED_NODE SubsectionNode;
  /* 0x0034 */ struct _LIST_ENTRY DereferenceList;
  /* 0x003c */ unsigned long NumberOfMappedViews;
  /* 0x0040 */ unsigned long NumberOfPfnReferences;
} MSUBSECTION, *PMSUBSECTION; /* size: 0x0044 */

typedef struct _NAMED_PIPE_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long NamedPipeType;
  /* 0x0004 */ unsigned long ReadMode;
  /* 0x0008 */ unsigned long CompletionMode;
  /* 0x000c */ unsigned long MaximumInstances;
  /* 0x0010 */ unsigned long InboundQuota;
  /* 0x0014 */ unsigned long OutboundQuota;
  /* 0x0018 */ union _LARGE_INTEGER DefaultTimeout;
  /* 0x0020 */ unsigned char TimeoutSpecified;
  /* 0x0021 */ char __PADDING__[7];
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS; /* size: 0x0028 */

typedef struct _NB10
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Offset;
  /* 0x0008 */ unsigned long TimeStamp;
  /* 0x000c */ unsigned long Age;
  /* 0x0010 */ char PdbName[1];
  /* 0x0011 */ char __PADDING__[3];
} NB10, *PNB10; /* size: 0x0014 */

typedef struct _NONOPAQUE_OPLOCK
{
  /* 0x0000 */ struct _IRP* IrpExclusiveOplock;
  /* 0x0004 */ struct _FILE_OBJECT* FileObject;
  /* 0x0008 */ struct _EPROCESS* ExclusiveOplockOwner;
  /* 0x000c */ struct _ETHREAD* ExclusiveOplockOwnerThread;
  /* 0x0010 */ unsigned char WaiterPriority;
  /* 0x0014 */ struct _LIST_ENTRY IrpOplocksR;
  /* 0x001c */ struct _LIST_ENTRY IrpOplocksRH;
  /* 0x0024 */ struct _LIST_ENTRY RHBreakQueue;
  /* 0x002c */ struct _LIST_ENTRY WaitingIrps;
  /* 0x0034 */ struct _LIST_ENTRY DelayAckFileObjectQueue;
  /* 0x003c */ struct _LIST_ENTRY AtomicQueue;
  /* 0x0044 */ struct _GUID* DeleterParentKey;
  /* 0x0048 */ unsigned long OplockState;
  /* 0x004c */ struct _FAST_MUTEX* FastMutex;
} NONOPAQUE_OPLOCK, *PNONOPAQUE_OPLOCK; /* size: 0x0050 */

typedef struct _NON_PAGED_DEBUG_INFO
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned short Machine;
  /* 0x000a */ unsigned short Characteristics;
  /* 0x000c */ unsigned long TimeDateStamp;
  /* 0x0010 */ unsigned long CheckSum;
  /* 0x0014 */ unsigned long SizeOfImage;
  /* 0x0018 */ unsigned __int64 ImageBase;
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO; /* size: 0x0020 */

typedef struct _NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
  /* 0x0080 */ unsigned long Lock__ObsoleteButDoNotDelete;
  /* 0x0084 */ long __PADDING__[15];
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST; /* size: 0x00c0 */

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0004 */ void* StackBase;
  /* 0x0008 */ void* StackLimit;
  /* 0x000c */ void* SubSystemTib;
  union
  {
    /* 0x0010 */ void* FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ void* ArbitraryUserPointer;
  /* 0x0018 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x001c */

typedef struct _NT_TIB32
{
  /* 0x0000 */ unsigned long ExceptionList;
  /* 0x0004 */ unsigned long StackBase;
  /* 0x0008 */ unsigned long StackLimit;
  /* 0x000c */ unsigned long SubSystemTib;
  union
  {
    /* 0x0010 */ unsigned long FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long ArbitraryUserPointer;
  /* 0x0018 */ unsigned long Self;
} NT_TIB32, *PNT_TIB32; /* size: 0x001c */

typedef struct _NT_TIB64
{
  /* 0x0000 */ unsigned __int64 ExceptionList;
  /* 0x0008 */ unsigned __int64 StackBase;
  /* 0x0010 */ unsigned __int64 StackLimit;
  /* 0x0018 */ unsigned __int64 SubSystemTib;
  union
  {
    /* 0x0020 */ unsigned __int64 FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ unsigned __int64 ArbitraryUserPointer;
  /* 0x0030 */ unsigned __int64 Self;
} NT_TIB64, *PNT_TIB64; /* size: 0x0038 */

typedef struct _OBJECT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ void* RootDirectory;
  /* 0x0008 */ struct _UNICODE_STRING* ObjectName;
  /* 0x000c */ unsigned long Attributes;
  /* 0x0010 */ void* SecurityDescriptor;
  /* 0x0014 */ void* SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES; /* size: 0x0018 */

typedef struct _OBJECT_CREATE_INFORMATION
{
  /* 0x0000 */ unsigned long Attributes;
  /* 0x0004 */ void* RootDirectory;
  /* 0x0008 */ char ProbeMode;
  /* 0x000c */ unsigned long PagedPoolCharge;
  /* 0x0010 */ unsigned long NonPagedPoolCharge;
  /* 0x0014 */ unsigned long SecurityDescriptorCharge;
  /* 0x0018 */ void* SecurityDescriptor;
  /* 0x001c */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0020 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
} OBJECT_CREATE_INFORMATION, *POBJECT_CREATE_INFORMATION; /* size: 0x002c */

typedef struct _OBJECT_DIRECTORY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* HashBuckets[37];
  /* 0x0094 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0098 */ struct _DEVICE_MAP* DeviceMap;
  /* 0x009c */ struct _OBJECT_DIRECTORY* ShadowDirectory;
  /* 0x00a0 */ unsigned long SessionId;
  /* 0x00a4 */ void* NamespaceEntry;
  /* 0x00a8 */ unsigned long Flags;
} OBJECT_DIRECTORY, *POBJECT_DIRECTORY; /* size: 0x00ac */

typedef struct _OBJECT_DIRECTORY_ENTRY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* ChainLink;
  /* 0x0004 */ void* Object;
  /* 0x0008 */ unsigned long HashValue;
} OBJECT_DIRECTORY_ENTRY, *POBJECT_DIRECTORY_ENTRY; /* size: 0x000c */

typedef struct _OBJECT_DUMP_CONTROL
{
  /* 0x0000 */ void* Stream;
  /* 0x0004 */ unsigned long Detail;
} OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL; /* size: 0x0008 */

typedef struct _OBJECT_HANDLE_COUNT_DATABASE
{
  /* 0x0000 */ unsigned long CountEntries;
  /* 0x0004 */ struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];
} OBJECT_HANDLE_COUNT_DATABASE, *POBJECT_HANDLE_COUNT_DATABASE; /* size: 0x000c */

typedef struct _OBJECT_HANDLE_COUNT_ENTRY
{
  /* 0x0000 */ struct _EPROCESS* Process;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long HandleCount : 24; /* bit position: 0 */
    /* 0x0004 */ unsigned long LockCount : 8; /* bit position: 24 */
  }; /* bitfield */
} OBJECT_HANDLE_COUNT_ENTRY, *POBJECT_HANDLE_COUNT_ENTRY; /* size: 0x0008 */

typedef struct _OBJECT_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long HandleAttributes;
  /* 0x0004 */ unsigned long GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION; /* size: 0x0008 */

typedef struct _OBJECT_HEADER
{
  /* 0x0000 */ long PointerCount;
  union
  {
    /* 0x0004 */ long HandleCount;
    /* 0x0004 */ void* NextToFree;
  }; /* size: 0x0004 */
  /* 0x0008 */ struct _EX_PUSH_LOCK Lock;
  /* 0x000c */ unsigned char TypeIndex;
  union
  {
    /* 0x000d */ unsigned char TraceFlags;
    struct /* bitfield */
    {
      /* 0x000d */ unsigned char DbgRefTrace : 1; /* bit position: 0 */
      /* 0x000d */ unsigned char DbgTracePermanent : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x000e */ unsigned char InfoMask;
  union
  {
    /* 0x000f */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x000f */ unsigned char NewObject : 1; /* bit position: 0 */
      /* 0x000f */ unsigned char KernelObject : 1; /* bit position: 1 */
      /* 0x000f */ unsigned char KernelOnlyAccess : 1; /* bit position: 2 */
      /* 0x000f */ unsigned char ExclusiveObject : 1; /* bit position: 3 */
      /* 0x000f */ unsigned char PermanentObject : 1; /* bit position: 4 */
      /* 0x000f */ unsigned char DefaultSecurityQuota : 1; /* bit position: 5 */
      /* 0x000f */ unsigned char SingleHandleEntry : 1; /* bit position: 6 */
      /* 0x000f */ unsigned char DeletedInline : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  union
  {
    /* 0x0010 */ struct _OBJECT_CREATE_INFORMATION* ObjectCreateInfo;
    /* 0x0010 */ void* QuotaBlockCharged;
  }; /* size: 0x0004 */
  /* 0x0014 */ void* SecurityDescriptor;
  /* 0x0018 */ struct _QUAD Body;
} OBJECT_HEADER, *POBJECT_HEADER; /* size: 0x0020 */

typedef struct _OBJECT_HEADER_AUDIT_INFO
{
  /* 0x0000 */ void* SecurityDescriptor;
  /* 0x0004 */ unsigned long Reserved;
} OBJECT_HEADER_AUDIT_INFO, *POBJECT_HEADER_AUDIT_INFO; /* size: 0x0008 */

typedef struct _OBJECT_HEADER_CREATOR_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0008 */ void* CreatorUniqueProcess;
  /* 0x000c */ unsigned short CreatorBackTraceIndex;
  /* 0x000e */ unsigned short Reserved;
} OBJECT_HEADER_CREATOR_INFO, *POBJECT_HEADER_CREATOR_INFO; /* size: 0x0010 */

typedef struct _OBJECT_HEADER_HANDLE_INFO
{
  union
  {
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_DATABASE* HandleCountDataBase;
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
  }; /* size: 0x0008 */
} OBJECT_HEADER_HANDLE_INFO, *POBJECT_HEADER_HANDLE_INFO; /* size: 0x0008 */

typedef struct _OBJECT_HEADER_HANDLE_REVOCATION_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _OB_HANDLE_REVOCATION_BLOCK* RevocationBlock;
  /* 0x000c */ unsigned char Padding1[4];
} OBJECT_HEADER_HANDLE_REVOCATION_INFO, *POBJECT_HEADER_HANDLE_REVOCATION_INFO; /* size: 0x0010 */

typedef struct _OBJECT_HEADER_NAME_INFO
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0004 */ struct _UNICODE_STRING Name;
  /* 0x000c */ long ReferenceCount;
} OBJECT_HEADER_NAME_INFO, *POBJECT_HEADER_NAME_INFO; /* size: 0x0010 */

typedef struct _OBJECT_HEADER_PADDING_INFO
{
  /* 0x0000 */ unsigned long PaddingAmount;
} OBJECT_HEADER_PADDING_INFO, *POBJECT_HEADER_PADDING_INFO; /* size: 0x0004 */

typedef struct _OBJECT_HEADER_PROCESS_INFO
{
  /* 0x0000 */ struct _EPROCESS* ExclusiveProcess;
  /* 0x0004 */ unsigned long Reserved;
} OBJECT_HEADER_PROCESS_INFO, *POBJECT_HEADER_PROCESS_INFO; /* size: 0x0008 */

typedef struct _OBJECT_HEADER_QUOTA_INFO
{
  /* 0x0000 */ unsigned long PagedPoolCharge;
  /* 0x0004 */ unsigned long NonPagedPoolCharge;
  /* 0x0008 */ unsigned long SecurityDescriptorCharge;
  /* 0x000c */ void* SecurityDescriptorQuotaBlock;
} OBJECT_HEADER_QUOTA_INFO, *POBJECT_HEADER_QUOTA_INFO; /* size: 0x0010 */

typedef enum _OBJECT_INFORMATION_CLASS
{
  ObjectBasicInformation = 0,
  ObjectNameInformation = 1,
  ObjectTypeInformation = 2,
  ObjectTypesInformation = 3,
  ObjectHandleFlagInformation = 4,
  ObjectSessionInformation = 5,
  MaxObjectInfoClass = 6,
} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

typedef struct _OBJECT_NAME_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION; /* size: 0x0008 */

typedef struct _OBJECT_REF_INFO
{
  /* 0x0000 */ struct _OBJECT_HEADER* ObjectHeader;
  /* 0x0004 */ void* NextRef;
  /* 0x0008 */ unsigned char ImageFileName[16];
  /* 0x0018 */ unsigned short NextPos;
  /* 0x001a */ unsigned short MaxStacks;
  /* 0x001c */ struct _OBJECT_REF_STACK_INFO* StackInfo /* zero-length array */;
} OBJECT_REF_INFO, *POBJECT_REF_INFO; /* size: 0x001c */

typedef struct _OBJECT_REF_STACK_INFO
{
  /* 0x0000 */ unsigned long Sequence;
  /* 0x0004 */ unsigned short Index;
  /* 0x0006 */ unsigned short NumTraces;
  /* 0x0008 */ unsigned long Tag;
} OBJECT_REF_STACK_INFO, *POBJECT_REF_STACK_INFO; /* size: 0x000c */

typedef struct _OBJECT_REF_TRACE
{
  /* 0x0000 */ void* StackTrace[16];
} OBJECT_REF_TRACE, *POBJECT_REF_TRACE; /* size: 0x0040 */

typedef struct _OBJECT_SYMBOLIC_LINK
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ struct _UNICODE_STRING LinkTarget;
  /* 0x0010 */ unsigned long DosDeviceDriveIndex;
  /* 0x0014 */ unsigned long Flags;
} OBJECT_SYMBOLIC_LINK, *POBJECT_SYMBOLIC_LINK; /* size: 0x0018 */

typedef struct _OBJECT_TYPE
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0008 */ struct _UNICODE_STRING Name;
  /* 0x0010 */ void* DefaultObject;
  /* 0x0014 */ unsigned char Index;
  /* 0x0018 */ unsigned long TotalNumberOfObjects;
  /* 0x001c */ unsigned long TotalNumberOfHandles;
  /* 0x0020 */ unsigned long HighWaterNumberOfObjects;
  /* 0x0024 */ unsigned long HighWaterNumberOfHandles;
  /* 0x0028 */ struct _OBJECT_TYPE_INITIALIZER TypeInfo;
  /* 0x0080 */ struct _EX_PUSH_LOCK TypeLock;
  /* 0x0084 */ unsigned long Key;
  /* 0x0088 */ struct _LIST_ENTRY CallbackList;
} OBJECT_TYPE, *POBJECT_TYPE; /* size: 0x0090 */

typedef struct _OBJECT_TYPE_INITIALIZER
{
  /* 0x0000 */ unsigned short Length;
  union
  {
    /* 0x0002 */ unsigned char ObjectTypeFlags;
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned char CaseInsensitive : 1; /* bit position: 0 */
      /* 0x0002 */ unsigned char UnnamedObjectsOnly : 1; /* bit position: 1 */
      /* 0x0002 */ unsigned char UseDefaultObject : 1; /* bit position: 2 */
      /* 0x0002 */ unsigned char SecurityRequired : 1; /* bit position: 3 */
      /* 0x0002 */ unsigned char MaintainHandleCount : 1; /* bit position: 4 */
      /* 0x0002 */ unsigned char MaintainTypeList : 1; /* bit position: 5 */
      /* 0x0002 */ unsigned char SupportsObjectCallbacks : 1; /* bit position: 6 */
      /* 0x0002 */ unsigned char CacheAligned : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned long ObjectTypeCode;
  /* 0x0008 */ unsigned long InvalidAttributes;
  /* 0x000c */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x001c */ unsigned long ValidAccessMask;
  /* 0x0020 */ unsigned long RetainAccess;
  /* 0x0024 */ enum _POOL_TYPE PoolType;
  /* 0x0028 */ unsigned long DefaultPagedPoolCharge;
  /* 0x002c */ unsigned long DefaultNonPagedPoolCharge;
  /* 0x0030 */ void* DumpProcedure /* function */;
  /* 0x0034 */ void* OpenProcedure /* function */;
  /* 0x0038 */ void* CloseProcedure /* function */;
  /* 0x003c */ void* DeleteProcedure /* function */;
  /* 0x0040 */ void* ParseProcedure /* function */;
  /* 0x0044 */ void* SecurityProcedure /* function */;
  /* 0x0048 */ void* QueryNameProcedure /* function */;
  /* 0x004c */ void* OkayToCloseProcedure /* function */;
  /* 0x0050 */ unsigned long WaitObjectFlagMask;
  /* 0x0054 */ unsigned short WaitObjectFlagOffset;
  /* 0x0056 */ unsigned short WaitObjectPointerOffset;
} OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER; /* size: 0x0058 */

typedef struct _OBP_LOOKUP_CONTEXT
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0004 */ void* Object;
  /* 0x0008 */ struct _OBJECT_DIRECTORY_ENTRY** EntryLink;
  /* 0x000c */ unsigned long HashValue;
  /* 0x0010 */ unsigned short HashIndex;
  /* 0x0012 */ unsigned char DirectoryLocked;
  /* 0x0013 */ unsigned char LockedExclusive;
  /* 0x0014 */ unsigned long LockStateSignature;
} OBP_LOOKUP_CONTEXT, *POBP_LOOKUP_CONTEXT; /* size: 0x0018 */

typedef struct _OBP_SILODRIVERSTATE
{
  /* 0x0000 */ struct _DEVICE_MAP* SystemDeviceMap;
  /* 0x0004 */ struct _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;
  /* 0x0070 */ struct _EX_PUSH_LOCK DeviceMapLock;
} OBP_SILODRIVERSTATE, *POBP_SILODRIVERSTATE; /* size: 0x0074 */

typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE
{
  /* 0x0000 */ unsigned long GlobalDeviceMap;
  /* 0x0004 */ unsigned long LocalDeviceCount[26];
} OBP_SYSTEM_DOS_DEVICE_STATE, *POBP_SYSTEM_DOS_DEVICE_STATE; /* size: 0x006c */

typedef struct _OB_DUPLICATE_OBJECT_STATE
{
  /* 0x0000 */ struct _EPROCESS* SourceProcess;
  /* 0x0004 */ void* SourceHandle;
  /* 0x0008 */ void* Object;
  /* 0x000c */ unsigned long TargetAccess;
  /* 0x0010 */ struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo;
  /* 0x0014 */ unsigned long HandleAttributes;
} OB_DUPLICATE_OBJECT_STATE, *POB_DUPLICATE_OBJECT_STATE; /* size: 0x0018 */

typedef struct _OB_HANDLE_REVOCATION_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY RevocationInfos;
  /* 0x0008 */ struct _EX_PUSH_LOCK Lock;
  /* 0x000c */ struct _EX_RUNDOWN_REF Rundown;
} OB_HANDLE_REVOCATION_BLOCK, *POB_HANDLE_REVOCATION_BLOCK; /* size: 0x0010 */

typedef enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
} OB_OPEN_REASON, *POB_OPEN_REASON;

typedef struct _OPEN_PACKET
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _FILE_OBJECT* FileObject;
  /* 0x0008 */ long FinalStatus;
  /* 0x000c */ unsigned long Information;
  /* 0x0010 */ unsigned long ParseCheck;
  union
  {
    /* 0x0014 */ struct _FILE_OBJECT* RelatedFileObject;
    /* 0x0014 */ struct _DEVICE_OBJECT* ReferencedDeviceObject;
  }; /* size: 0x0004 */
  /* 0x0018 */ struct _OBJECT_ATTRIBUTES* OriginalAttributes;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ unsigned long CreateOptions;
  /* 0x002c */ unsigned short FileAttributes;
  /* 0x002e */ unsigned short ShareAccess;
  /* 0x0030 */ void* EaBuffer;
  /* 0x0034 */ unsigned long EaLength;
  /* 0x0038 */ unsigned long Options;
  /* 0x003c */ unsigned long Disposition;
  /* 0x0040 */ struct _FILE_BASIC_INFORMATION* BasicInformation;
  /* 0x0044 */ struct _FILE_NETWORK_OPEN_INFORMATION* NetworkInformation;
  /* 0x0048 */ enum _CREATE_FILE_TYPE CreateFileType;
  /* 0x004c */ void* MailslotOrPipeParameters;
  /* 0x0050 */ unsigned char Override;
  /* 0x0051 */ unsigned char QueryOnly;
  /* 0x0052 */ unsigned char DeleteOnly;
  /* 0x0053 */ unsigned char FullAttributes;
  /* 0x0054 */ struct _DUMMY_FILE_OBJECT* LocalFileObject;
  /* 0x0058 */ unsigned long InternalFlags;
  /* 0x005c */ char AccessMode;
  /* 0x0060 */ struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;
} OPEN_PACKET, *POPEN_PACKET; /* size: 0x0070 */

typedef struct _OWNER_ENTRY
{
  /* 0x0000 */ unsigned long OwnerThread;
  union
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long IoPriorityBoosted : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long OwnerReferenced : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long OwnerCount : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0004 */ unsigned long TableSize;
  }; /* size: 0x0004 */
} OWNER_ENTRY, *POWNER_ENTRY; /* size: 0x0008 */

typedef struct _PAE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _MMPTE PteEntry[4];
    /* 0x0000 */ struct _PAE_PAGEINFO PaeEntry;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY NextPae;
      /* 0x0004 */ long __PADDING__[7];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} PAE_ENTRY, *PPAE_ENTRY; /* size: 0x0020 */

typedef struct _PAE_PAGEINFO
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long PageFrameNumber;
  /* 0x000c */ unsigned long EntriesInUse;
} PAE_PAGEINFO, *PPAE_PAGEINFO; /* size: 0x0010 */

typedef struct _PAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
  /* 0x0080 */ struct _FAST_MUTEX Lock__ObsoleteButDoNotDelete;
  /* 0x00a0 */ long __PADDING__[8];
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST; /* size: 0x00c0 */

struct _PAGEFAULT_HISTORY;

typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK
{
  /* 0x0000 */ struct _KEVENT DesiredReferenceNoEvent;
  /* 0x0010 */ long DesiredReferenceNo;
} PALPC_PORT_REFERENCE_WAIT_BLOCK, *PPALPC_PORT_REFERENCE_WAIT_BLOCK; /* size: 0x0014 */

struct _PCW_BUFFER;

typedef union _PCW_CALLBACK_INFORMATION
{
  union
  {
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION AddCounter;
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION RemoveCounter;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION EnumerateInstances;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION CollectData;
  }; /* size: 0x0020 */
} PCW_CALLBACK_INFORMATION, *PPCW_CALLBACK_INFORMATION; /* size: 0x0020 */

typedef enum _PCW_CALLBACK_TYPE
{
  PcwCallbackAddCounter = 0,
  PcwCallbackRemoveCounter = 1,
  PcwCallbackEnumerateInstances = 2,
  PcwCallbackCollectData = 3,
} PCW_CALLBACK_TYPE, *PPCW_CALLBACK_TYPE;

typedef struct _PCW_COUNTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned short StructIndex;
  /* 0x0004 */ unsigned short Offset;
  /* 0x0006 */ unsigned short Size;
} PCW_COUNTER_DESCRIPTOR, *PPCW_COUNTER_DESCRIPTOR; /* size: 0x0008 */

typedef struct _PCW_COUNTER_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
  /* 0x000c */ long __PADDING__[1];
} PCW_COUNTER_INFORMATION, *PPCW_COUNTER_INFORMATION; /* size: 0x0010 */

typedef struct _PCW_DATA
{
  /* 0x0000 */ const void* Data;
  /* 0x0004 */ unsigned long Size;
} PCW_DATA, *PPCW_DATA; /* size: 0x0008 */

struct _PCW_INSTANCE;

typedef struct _PCW_MASK_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
  /* 0x000c */ unsigned long InstanceId;
  /* 0x0010 */ unsigned char CollectMultiple;
  /* 0x0014 */ struct _PCW_BUFFER* Buffer;
  /* 0x0018 */ struct _KEVENT* CancelEvent;
  /* 0x001c */ long __PADDING__[1];
} PCW_MASK_INFORMATION, *PPCW_MASK_INFORMATION; /* size: 0x0020 */

typedef struct _PCW_PROCESSOR_INFO
{
  /* 0x0000 */ unsigned __int64 IdleTime;
  /* 0x0008 */ unsigned __int64 AvailableTime;
  /* 0x0010 */ unsigned __int64 UserTime;
  /* 0x0018 */ unsigned __int64 KernelTime;
  /* 0x0020 */ unsigned long Interrupts;
  /* 0x0028 */ unsigned __int64 DpcTime;
  /* 0x0030 */ unsigned __int64 InterruptTime;
  /* 0x0038 */ unsigned long ClockInterrupts;
  /* 0x003c */ unsigned long DpcCount;
  /* 0x0040 */ unsigned long DpcRate;
  /* 0x0048 */ unsigned __int64 C1Time;
  /* 0x0050 */ unsigned __int64 C2Time;
  /* 0x0058 */ unsigned __int64 C3Time;
  /* 0x0060 */ unsigned __int64 C1Transitions;
  /* 0x0068 */ unsigned __int64 C2Transitions;
  /* 0x0070 */ unsigned __int64 C3Transitions;
  /* 0x0078 */ unsigned __int64 StallTime;
  /* 0x0080 */ unsigned long ParkingStatus;
  /* 0x0084 */ unsigned long CurrentFrequency;
  /* 0x0088 */ unsigned long PercentMaxFrequency;
  /* 0x008c */ unsigned long StateFlags;
  /* 0x0090 */ unsigned long NominalThroughput;
  /* 0x0094 */ unsigned long ActiveThroughput;
  /* 0x0098 */ unsigned __int64 ScaledThroughput;
  /* 0x00a0 */ unsigned __int64 ScaledKernelThroughput;
  /* 0x00a8 */ unsigned __int64 AverageIdleTime;
  /* 0x00b0 */ unsigned __int64 IdleBreakEvents;
  /* 0x00b8 */ unsigned long PerformanceLimit;
  /* 0x00bc */ unsigned long PerformanceLimitFlags;
} PCW_PROCESSOR_INFO, *PPCW_PROCESSOR_INFO; /* size: 0x00c0 */

struct _PCW_REGISTRATION;

typedef struct _PCW_REGISTRATION_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ const struct _UNICODE_STRING* Name;
  /* 0x0008 */ unsigned long CounterCount;
  /* 0x000c */ struct _PCW_COUNTER_DESCRIPTOR* Counters;
  /* 0x0010 */ void* Callback /* function */;
  /* 0x0014 */ void* CallbackContext;
} PCW_REGISTRATION_INFORMATION, *PPCW_REGISTRATION_INFORMATION; /* size: 0x0018 */

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char SpareBits : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ void* Mutant;
  /* 0x0008 */ void* ImageBaseAddress;
  /* 0x000c */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0010 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0014 */ void* SubSystemData;
  /* 0x0018 */ void* ProcessHeap;
  /* 0x001c */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0020 */ void* AtlThunkSListPtr;
  /* 0x0024 */ void* IFEOKey;
  union
  {
    /* 0x0028 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0028 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0028 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0028 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0028 */ unsigned long ReservedBits0 : 27; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* KernelCallbackTable;
    /* 0x002c */ void* UserSharedInfoPtr;
  }; /* size: 0x0004 */
  /* 0x0030 */ unsigned long SystemReserved[1];
  /* 0x0034 */ unsigned long AtlThunkSListPtr32;
  /* 0x0038 */ void* ApiSetMap;
  /* 0x003c */ unsigned long TlsExpansionCounter;
  /* 0x0040 */ void* TlsBitmap;
  /* 0x0044 */ unsigned long TlsBitmapBits[2];
  /* 0x004c */ void* ReadOnlySharedMemoryBase;
  /* 0x0050 */ void* SparePvoid0;
  /* 0x0054 */ void** ReadOnlyStaticServerData;
  /* 0x0058 */ void* AnsiCodePageData;
  /* 0x005c */ void* OemCodePageData;
  /* 0x0060 */ void* UnicodeCaseTableData;
  /* 0x0064 */ unsigned long NumberOfProcessors;
  /* 0x0068 */ unsigned long NtGlobalFlag;
  /* 0x0070 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0078 */ unsigned long HeapSegmentReserve;
  /* 0x007c */ unsigned long HeapSegmentCommit;
  /* 0x0080 */ unsigned long HeapDeCommitTotalFreeThreshold;
  /* 0x0084 */ unsigned long HeapDeCommitFreeBlockThreshold;
  /* 0x0088 */ unsigned long NumberOfHeaps;
  /* 0x008c */ unsigned long MaximumNumberOfHeaps;
  /* 0x0090 */ void** ProcessHeaps;
  /* 0x0094 */ void* GdiSharedHandleTable;
  /* 0x0098 */ void* ProcessStarterHelper;
  /* 0x009c */ unsigned long GdiDCAttributeList;
  /* 0x00a0 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x00a4 */ unsigned long OSMajorVersion;
  /* 0x00a8 */ unsigned long OSMinorVersion;
  /* 0x00ac */ unsigned short OSBuildNumber;
  /* 0x00ae */ unsigned short OSCSDVersion;
  /* 0x00b0 */ unsigned long OSPlatformId;
  /* 0x00b4 */ unsigned long ImageSubsystem;
  /* 0x00b8 */ unsigned long ImageSubsystemMajorVersion;
  /* 0x00bc */ unsigned long ImageSubsystemMinorVersion;
  /* 0x00c0 */ unsigned long ActiveProcessAffinityMask;
  /* 0x00c4 */ unsigned long GdiHandleBuffer[34];
  /* 0x014c */ void* PostProcessInitRoutine /* function */;
  /* 0x0150 */ void* TlsExpansionBitmap;
  /* 0x0154 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x01d4 */ unsigned long SessionId;
  /* 0x01d8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x01e0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x01e8 */ void* pShimData;
  /* 0x01ec */ void* AppCompatInfo;
  /* 0x01f0 */ struct _UNICODE_STRING CSDVersion;
  /* 0x01f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x01fc */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0200 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0204 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0208 */ unsigned long MinimumStackCommit;
  /* 0x020c */ struct _FLS_CALLBACK_INFO* FlsCallback;
  /* 0x0210 */ struct _LIST_ENTRY FlsListHead;
  /* 0x0218 */ void* FlsBitmap;
  /* 0x021c */ unsigned long FlsBitmapBits[4];
  /* 0x022c */ unsigned long FlsHighIndex;
  /* 0x0230 */ void* WerRegistrationData;
  /* 0x0234 */ void* WerShipAssertPtr;
  /* 0x0238 */ void* pUnused;
  /* 0x023c */ void* pImageHeaderHash;
  union
  {
    /* 0x0240 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0240 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0240 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0240 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0240 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0248 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
} PEB, *PPEB; /* size: 0x0250 */

typedef struct _PEBS_DS_SAVE_AREA
{
  /* 0x0000 */ unsigned __int64 BtsBufferBase;
  /* 0x0008 */ unsigned __int64 BtsIndex;
  /* 0x0010 */ unsigned __int64 BtsAbsoluteMaximum;
  /* 0x0018 */ unsigned __int64 BtsInterruptThreshold;
  /* 0x0020 */ unsigned __int64 PebsBufferBase;
  /* 0x0028 */ unsigned __int64 PebsIndex;
  /* 0x0030 */ unsigned __int64 PebsAbsoluteMaximum;
  /* 0x0038 */ unsigned __int64 PebsInterruptThreshold;
  /* 0x0040 */ unsigned __int64 PebsCounterReset0;
  /* 0x0048 */ unsigned __int64 PebsCounterReset1;
  /* 0x0050 */ unsigned __int64 PebsCounterReset2;
  /* 0x0058 */ unsigned __int64 PebsCounterReset3;
} PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA; /* size: 0x0060 */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0008 */ void* SsHandle;
  /* 0x000c */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0014 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x001c */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0024 */ void* EntryInProgress;
  /* 0x0028 */ unsigned char ShutdownInProgress;
  /* 0x002c */ void* ShutdownThreadId;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0030 */

typedef struct _PENDING_RELATIONS_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0018 */ struct _PNP_DEVICE_EVENT_ENTRY* DeviceEvent;
  /* 0x001c */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0020 */ struct _RELATION_LIST* RelationsList;
  /* 0x0024 */ struct _IRP* EjectIrp;
  /* 0x0028 */ enum IRPLOCK Lock;
  /* 0x002c */ unsigned long Problem;
  /* 0x0030 */ unsigned char ProfileChangingEject;
  /* 0x0031 */ unsigned char DisplaySafeRemovalDialog;
  /* 0x0034 */ enum _SYSTEM_POWER_STATE LightestSleepState;
  /* 0x0038 */ struct DOCK_INTERFACE* DockInterface;
  /* 0x003c */ unsigned char DequeuePending;
  /* 0x0040 */ enum _PNP_DEVICE_DELETE_TYPE DeleteType;
} PENDING_RELATIONS_LIST_ENTRY, *PPENDING_RELATIONS_LIST_ENTRY; /* size: 0x0044 */

typedef struct _PEP_ACPI_EXTENDED_ADDRESS
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ unsigned char ResourceFlags;
  /* 0x0009 */ unsigned char GeneralFlags;
  /* 0x000a */ unsigned char TypeSpecificFlags;
  /* 0x000b */ unsigned char RevisionId;
  /* 0x000c */ unsigned char Reserved;
  /* 0x0010 */ unsigned __int64 Granularity;
  /* 0x0018 */ unsigned __int64 MinimumAddress;
  /* 0x0020 */ unsigned __int64 MaximumAddress;
  /* 0x0028 */ unsigned __int64 TranslationAddress;
  /* 0x0030 */ unsigned __int64 AddressLength;
  /* 0x0038 */ unsigned __int64 TypeAttribute;
  /* 0x0040 */ struct _UNICODE_STRING* DescriptorName;
  /* 0x0044 */ long __PADDING__[1];
} PEP_ACPI_EXTENDED_ADDRESS, *PPEP_ACPI_EXTENDED_ADDRESS; /* size: 0x0048 */

typedef struct _PEP_ACPI_GPIO_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ enum _KINTERRUPT_MODE InterruptType;
  /* 0x000c */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x0010 */ enum _GPIO_PIN_CONFIG_TYPE PinConfig;
  /* 0x0014 */ enum _GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType;
  /* 0x0018 */ unsigned short DriveStrength;
  /* 0x001a */ unsigned short DebounceTimeout;
  /* 0x001c */ unsigned short* PinTable;
  /* 0x0020 */ unsigned short PinCount;
  /* 0x0022 */ unsigned char ResourceSourceIndex;
  /* 0x0024 */ struct _UNICODE_STRING* ResourceSourceName;
  /* 0x0028 */ unsigned char* VendorData;
  /* 0x002c */ unsigned short VendorDataLength;
  /* 0x002e */ char __PADDING__[2];
} PEP_ACPI_GPIO_RESOURCE, *PPEP_ACPI_GPIO_RESOURCE; /* size: 0x0030 */

typedef struct _PEP_ACPI_INTERRUPT_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ enum _KINTERRUPT_MODE InterruptType;
  /* 0x0008 */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x000c */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0010 */ unsigned char Count;
  /* 0x0014 */ unsigned long* Pins;
} PEP_ACPI_INTERRUPT_RESOURCE, *PPEP_ACPI_INTERRUPT_RESOURCE; /* size: 0x0018 */

typedef struct _PEP_ACPI_IO_MEMORY_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ unsigned char Information;
  /* 0x0008 */ union _LARGE_INTEGER MinimumAddress;
  /* 0x0010 */ union _LARGE_INTEGER MaximumAddress;
  /* 0x0018 */ unsigned long Alignment;
  /* 0x001c */ unsigned long Length;
} PEP_ACPI_IO_MEMORY_RESOURCE, *PPEP_ACPI_IO_MEMORY_RESOURCE; /* size: 0x0020 */

typedef union _PEP_ACPI_RESOURCE
{
  union
  {
    /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
    /* 0x0000 */ struct _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;
    /* 0x0000 */ struct _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;
    /* 0x0000 */ struct _PEP_ACPI_GPIO_RESOURCE Gpio;
    /* 0x0000 */ struct _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;
    /* 0x0000 */ struct _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;
    /* 0x0000 */ struct _PEP_ACPI_SPB_UART_RESOURCE SpbUart;
    /* 0x0000 */ struct _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress;
  }; /* size: 0x0048 */
} PEP_ACPI_RESOURCE, *PPEP_ACPI_RESOURCE; /* size: 0x0048 */

typedef union _PEP_ACPI_RESOURCE_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned long AsULong;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Shared : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Wake : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ResourceUsage : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long SlaveMode : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long AddressingMode : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long SharedMode : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PEP_ACPI_RESOURCE_FLAGS, *PPEP_ACPI_RESOURCE_FLAGS; /* size: 0x0004 */

typedef enum _PEP_ACPI_RESOURCE_TYPE
{
  PepAcpiMemory = 0,
  PepAcpiIoPort = 1,
  PepAcpiInterrupt = 2,
  PepAcpiGpioIo = 3,
  PepAcpiGpioInt = 4,
  PepAcpiSpbI2c = 5,
  PepAcpiSpbSpi = 6,
  PepAcpiSpbUart = 7,
  PepAcpiExtendedMemory = 8,
  PepAcpiExtendedIo = 9,
} PEP_ACPI_RESOURCE_TYPE, *PPEP_ACPI_RESOURCE_TYPE;

typedef struct _PEP_ACPI_SPB_I2C_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0018 */ unsigned long ConnectionSpeed;
  /* 0x001c */ unsigned short SlaveAddress;
  /* 0x001e */ char __PADDING__[2];
} PEP_ACPI_SPB_I2C_RESOURCE, *PPEP_ACPI_SPB_I2C_RESOURCE; /* size: 0x0020 */

typedef struct _PEP_ACPI_SPB_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ unsigned short TypeSpecificFlags;
  /* 0x000a */ unsigned char ResourceSourceIndex;
  /* 0x000c */ struct _UNICODE_STRING* ResourceSourceName;
  /* 0x0010 */ char* VendorData;
  /* 0x0014 */ unsigned short VendorDataLength;
  /* 0x0016 */ char __PADDING__[2];
} PEP_ACPI_SPB_RESOURCE, *PPEP_ACPI_SPB_RESOURCE; /* size: 0x0018 */

typedef struct _PEP_ACPI_SPB_SPI_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0018 */ unsigned long ConnectionSpeed;
  /* 0x001c */ unsigned char DataBitLength;
  /* 0x001d */ unsigned char Phase;
  /* 0x001e */ unsigned char Polarity;
  /* 0x0020 */ unsigned short DeviceSelection;
  /* 0x0022 */ char __PADDING__[2];
} PEP_ACPI_SPB_SPI_RESOURCE, *PPEP_ACPI_SPB_SPI_RESOURCE; /* size: 0x0024 */

typedef struct _PEP_ACPI_SPB_UART_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0018 */ unsigned long BaudRate;
  /* 0x001c */ unsigned short RxBufferSize;
  /* 0x001e */ unsigned short TxBufferSize;
  /* 0x0020 */ unsigned char Parity;
  /* 0x0021 */ unsigned char LinesInUse;
  /* 0x0022 */ char __PADDING__[2];
} PEP_ACPI_SPB_UART_RESOURCE, *PPEP_ACPI_SPB_UART_RESOURCE; /* size: 0x0024 */

typedef struct _PEP_CRASHDUMP_INFORMATION
{
  /* 0x0000 */ struct PEPHANDLE__* DeviceHandle;
  /* 0x0004 */ void* DeviceContext;
} PEP_CRASHDUMP_INFORMATION, *PPEP_CRASHDUMP_INFORMATION; /* size: 0x0008 */

typedef struct _PERFINFO_GROUPMASK
{
  /* 0x0000 */ unsigned long Masks[8];
} PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK; /* size: 0x0020 */

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
} PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
} PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef struct _PERFINFO_PPM_STATE_SELECTION
{
  /* 0x0000 */ unsigned long SelectedState;
  /* 0x0004 */ unsigned long VetoedStates;
  /* 0x0008 */ unsigned long VetoReason[1];
} PERFINFO_PPM_STATE_SELECTION, *PPERFINFO_PPM_STATE_SELECTION; /* size: 0x000c */

typedef enum _PF_FILE_ACCESS_TYPE
{
  PfFileAccessTypeRead = 0,
  PfFileAccessTypeWrite = 1,
  PfFileAccessTypeMax = 2,
} PF_FILE_ACCESS_TYPE, *PPF_FILE_ACCESS_TYPE;

typedef struct _PF_KERNEL_GLOBALS
{
  /* 0x0000 */ unsigned __int64 AccessBufferAgeThreshold;
  /* 0x0008 */ struct _EX_RUNDOWN_REF AccessBufferRef;
  /* 0x000c */ struct _KEVENT AccessBufferExistsEvent;
  /* 0x001c */ unsigned long AccessBufferMax;
  /* 0x0020 */ union _SLIST_HEADER AccessBufferList;
  /* 0x0028 */ long StreamSequenceNumber;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ long ScenarioPrefetchCount;
  /* 0x0034 */ long __PADDING__[3];
} PF_KERNEL_GLOBALS, *PPF_KERNEL_GLOBALS; /* size: 0x0040 */

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR
{
  /* 0x0000 */ unsigned long NumberOfRuns;
  /* 0x0004 */ unsigned long NumberOfPages;
  /* 0x0008 */ struct _PHYSICAL_MEMORY_RUN Run[1];
} PHYSICAL_MEMORY_DESCRIPTOR, *PPHYSICAL_MEMORY_DESCRIPTOR; /* size: 0x0010 */

typedef struct _PHYSICAL_MEMORY_RUN
{
  /* 0x0000 */ unsigned long BasePage;
  /* 0x0004 */ unsigned long PageCount;
} PHYSICAL_MEMORY_RUN, *PPHYSICAL_MEMORY_RUN; /* size: 0x0008 */

typedef struct _PI_BUS_EXTENSION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char NumberCSNs;
  /* 0x0008 */ unsigned char* ReadDataPort;
  /* 0x000c */ unsigned char DataPortMapped;
  /* 0x0010 */ unsigned char* AddressPort;
  /* 0x0014 */ unsigned char AddrPortMapped;
  /* 0x0018 */ unsigned char* CommandPort;
  /* 0x001c */ unsigned char CmdPortMapped;
  /* 0x0020 */ unsigned long NextSlotNumber;
  /* 0x0024 */ struct _SINGLE_LIST_ENTRY DeviceList;
  /* 0x0028 */ struct _SINGLE_LIST_ENTRY CardList;
  /* 0x002c */ struct _DEVICE_OBJECT* PhysicalBusDevice;
  /* 0x0030 */ struct _DEVICE_OBJECT* FunctionalBusDevice;
  /* 0x0034 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0038 */ unsigned long BusNumber;
  /* 0x003c */ enum _SYSTEM_POWER_STATE SystemPowerState;
  /* 0x0040 */ enum _DEVICE_POWER_STATE DevicePowerState;
} PI_BUS_EXTENSION, *PPI_BUS_EXTENSION; /* size: 0x0044 */

typedef struct _PI_RESOURCE_ARBITER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x0008 */ unsigned char ResourceType;
  /* 0x000c */ struct _ARBITER_INTERFACE* ArbiterInterface;
  /* 0x0010 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x0014 */ struct _LIST_ENTRY ResourceList;
  /* 0x001c */ struct _LIST_ENTRY BestResourceList;
  /* 0x0024 */ struct _LIST_ENTRY BestConfig;
  /* 0x002c */ struct _LIST_ENTRY ActiveArbiterList;
  /* 0x0034 */ unsigned char State;
  /* 0x0035 */ unsigned char ResourcesChanged;
  /* 0x0036 */ char __PADDING__[2];
} PI_RESOURCE_ARBITER_ENTRY, *PPI_RESOURCE_ARBITER_ENTRY; /* size: 0x0038 */

typedef struct _PLATFORM_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long ResetCount;
  /* 0x0004 */ unsigned long StateCount;
  /* 0x0008 */ enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ struct _PLATFORM_IDLE_STATE_ACCOUNTING State[1];
} PLATFORM_IDLE_ACCOUNTING, *PPLATFORM_IDLE_ACCOUNTING; /* size: 0x03f8 */

typedef struct _PLATFORM_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned long CancelCount;
  /* 0x0004 */ unsigned long FailureCount;
  /* 0x0008 */ unsigned long SuccessCount;
  /* 0x0010 */ unsigned __int64 MaxTime;
  /* 0x0018 */ unsigned __int64 MinTime;
  /* 0x0020 */ unsigned __int64 TotalTime;
  /* 0x0028 */ unsigned long InvalidBucketIndex;
  /* 0x0030 */ struct _PPM_SELECTION_STATISTICS SelectionStatistics;
  /* 0x00a0 */ struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
} PLATFORM_IDLE_STATE_ACCOUNTING, *PPLATFORM_IDLE_STATE_ACCOUNTING; /* size: 0x03e0 */

typedef struct _PLUGPLAY_EVENT_BLOCK
{
  /* 0x0000 */ struct _GUID EventGuid;
  /* 0x0010 */ enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
  /* 0x0014 */ unsigned long* Result;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long TotalSize;
  /* 0x0020 */ void* DeviceObject;
  union // _TAG_UNNAMED_162
  {
    union
    {
      struct // _TAG_UNNAMED_163
      {
        /* 0x0024 */ struct _GUID ClassGuid;
        /* 0x0034 */ wchar_t SymbolicLinkName[1];
        /* 0x0036 */ char __PADDING__[2];
      } /* size: 0x0014 */ DeviceClass;
      struct // _TAG_UNNAMED_164
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ TargetDevice;
      struct // _TAG_UNNAMED_164
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ InstallDevice;
      struct // _TAG_UNNAMED_165
      {
        /* 0x0024 */ void* NotificationStructure;
        /* 0x0028 */ wchar_t DeviceId[1];
        /* 0x002a */ char __PADDING__[2];
      } /* size: 0x0008 */ CustomNotification;
      struct // _TAG_UNNAMED_166
      {
        /* 0x0024 */ void* Notification;
      } /* size: 0x0004 */ ProfileNotification;
      struct // _TAG_UNNAMED_167
      {
        /* 0x0024 */ unsigned long NotificationCode;
        /* 0x0028 */ unsigned long NotificationData;
      } /* size: 0x0008 */ PowerNotification;
      struct // _TAG_UNNAMED_168
      {
        /* 0x0024 */ enum _PNP_VETO_TYPE VetoType;
        /* 0x0028 */ wchar_t DeviceIdVetoNameBuffer[1];
        /* 0x002a */ char __PADDING__[2];
      } /* size: 0x0008 */ VetoNotification;
      struct // _TAG_UNNAMED_169
      {
        /* 0x0024 */ struct _GUID BlockedDriverGuid;
      } /* size: 0x0010 */ BlockedDriverNotification;
      struct // _TAG_UNNAMED_170
      {
        /* 0x0024 */ wchar_t ParentId[1];
      } /* size: 0x0002 */ InvalidIDNotification;
      struct // _TAG_UNNAMED_171
      {
        /* 0x0024 */ struct _GUID PowerSettingGuid;
        /* 0x0034 */ unsigned long Flags;
        /* 0x0038 */ unsigned long SessionId;
        /* 0x003c */ unsigned long DataLength;
        /* 0x0040 */ unsigned char Data[1];
        /* 0x0041 */ char __PADDING__[3];
      } /* size: 0x0020 */ PowerSettingNotification;
      struct // _TAG_UNNAMED_164
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ PropertyChangeNotification;
      struct // _TAG_UNNAMED_164
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ DeviceInstanceNotification;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ u;
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK; /* size: 0x0044 */

typedef enum _PLUGPLAY_EVENT_CATEGORY
{
  HardwareProfileChangeEvent = 0,
  TargetDeviceChangeEvent = 1,
  DeviceClassChangeEvent = 2,
  CustomDeviceEvent = 3,
  DeviceInstallEvent = 4,
  DeviceArrivalEvent = 5,
  VetoEvent = 6,
  BlockedDriverEvent = 7,
  InvalidIDEvent = 8,
  DevicePropertyChangeEvent = 9,
  DeviceInstanceRemovalEvent = 10,
  DeviceInstanceStartedEvent = 11,
  MaxPlugEventCategory = 12,
} PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT
{
  /* 0x0000 */ unsigned long IncludeFailedDevices;
  /* 0x0004 */ unsigned long DeviceCount;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceList[1];
} PNP_ASSIGN_RESOURCES_CONTEXT, *PPNP_ASSIGN_RESOURCES_CONTEXT; /* size: 0x000c */

typedef struct _PNP_DEVICE_ACTION_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ enum _PNP_DEVICE_ACTION_REQUEST RequestType;
  /* 0x0010 */ unsigned char ReorderingBarrier;
  /* 0x0014 */ unsigned long RequestArgument;
  /* 0x0018 */ struct _KEVENT* CompletionEvent;
  /* 0x001c */ long* CompletionStatus;
  /* 0x0020 */ struct _GUID ActivityId;
} PNP_DEVICE_ACTION_ENTRY, *PPNP_DEVICE_ACTION_ENTRY; /* size: 0x0030 */

typedef enum _PNP_DEVICE_ACTION_REQUEST
{
  AssignResources = 0,
  ClearDeviceProblem = 1,
  ClearProblem = 2,
  ClearEjectProblem = 3,
  HaltDevice = 4,
  QueryPowerRelations = 5,
  Rebalance = 6,
  ReenumerateBootDevices = 7,
  ReenumerateDeviceOnly = 8,
  ReenumerateDeviceTree = 9,
  ReenumerateRootDevices = 10,
  RequeryDeviceState = 11,
  ResetDevice = 12,
  ResourceRequirementsChanged = 13,
  RestartEnumeration = 14,
  SetDeviceProblem = 15,
  StartDevice = 16,
  StartSystemDevicesPass0 = 17,
  StartSystemDevicesPass1 = 18,
  NotifyTransportRelationsChange = 19,
  NotifyEjectionRelationsChange = 20,
  ConfigureDevice = 21,
  ConfigureDeviceClass = 22,
  ConfigureDeviceExtensions = 23,
  ConfigureDeviceReset = 24,
} PNP_DEVICE_ACTION_REQUEST, *PPNP_DEVICE_ACTION_REQUEST;

typedef struct _PNP_DEVICE_COMPLETION_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY DispatchedList;
  /* 0x0008 */ unsigned long DispatchedCount;
  /* 0x000c */ struct _LIST_ENTRY CompletedList;
  /* 0x0014 */ struct _KSEMAPHORE CompletedSemaphore;
  /* 0x0028 */ unsigned long SpinLock;
} PNP_DEVICE_COMPLETION_QUEUE, *PPNP_DEVICE_COMPLETION_QUEUE; /* size: 0x002c */

typedef struct _PNP_DEVICE_COMPLETION_REQUEST
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x000c */ void* Context;
  /* 0x0010 */ enum _PNP_DEVNODE_STATE CompletionState;
  /* 0x0014 */ unsigned long IrpPended;
  /* 0x0018 */ long Status;
  /* 0x001c */ void* Information;
  /* 0x0020 */ long ReferenceCount;
} PNP_DEVICE_COMPLETION_REQUEST, *PPNP_DEVICE_COMPLETION_REQUEST; /* size: 0x0024 */

typedef enum _PNP_DEVICE_DELETE_TYPE
{
  QueryRemoveDevice = 0,
  CancelRemoveDevice = 1,
  RemoveDevice = 2,
  SurpriseRemoveDevice = 3,
  EjectDevice = 4,
  RemoveFailedDevice = 5,
  RemoveUnstartedFailedDevice = 6,
  MaxDeviceDeleteType = 7,
} PNP_DEVICE_DELETE_TYPE, *PPNP_DEVICE_DELETE_TYPE;

typedef struct _PNP_DEVICE_EVENT_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long Argument;
  /* 0x000c */ struct _KEVENT* CallerEvent;
  /* 0x0010 */ void* Callback /* function */;
  /* 0x0014 */ void* Context;
  /* 0x0018 */ enum _PNP_VETO_TYPE* VetoType;
  /* 0x001c */ struct _UNICODE_STRING* VetoName;
  /* 0x0020 */ unsigned long RefCount;
  /* 0x0024 */ unsigned long Lock;
  /* 0x0028 */ unsigned char Cancel;
  /* 0x002c */ struct _PNP_DEVICE_EVENT_ENTRY* Parent;
  /* 0x0030 */ struct _GUID ActivityId;
  /* 0x0040 */ struct _PLUGPLAY_EVENT_BLOCK Data;
} PNP_DEVICE_EVENT_ENTRY, *PPNP_DEVICE_EVENT_ENTRY; /* size: 0x0084 */

typedef struct _PNP_DEVICE_EVENT_LIST
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ struct _KMUTANT EventQueueMutex;
  /* 0x0024 */ struct _FAST_MUTEX Lock;
  /* 0x0044 */ struct _LIST_ENTRY List;
} PNP_DEVICE_EVENT_LIST, *PPNP_DEVICE_EVENT_LIST; /* size: 0x004c */

typedef enum _PNP_DEVNODE_STATE
{
  DeviceNodeUnspecified = 768,
  DeviceNodeUninitialized = 769,
  DeviceNodeInitialized = 770,
  DeviceNodeDriversAdded = 771,
  DeviceNodeResourcesAssigned = 772,
  DeviceNodeStartPending = 773,
  DeviceNodeStartCompletion = 774,
  DeviceNodeStartPostWork = 775,
  DeviceNodeStarted = 776,
  DeviceNodeQueryStopped = 777,
  DeviceNodeStopped = 778,
  DeviceNodeRestartCompletion = 779,
  DeviceNodeEnumeratePending = 780,
  DeviceNodeEnumerateCompletion = 781,
  DeviceNodeAwaitingQueuedDeletion = 782,
  DeviceNodeAwaitingQueuedRemoval = 783,
  DeviceNodeQueryRemoved = 784,
  DeviceNodeRemovePendingCloses = 785,
  DeviceNodeRemoved = 786,
  DeviceNodeDeletePendingCloses = 787,
  DeviceNodeDeleted = 788,
  MaxDeviceNodeState = 789,
} PNP_DEVNODE_STATE, *PPNP_DEVNODE_STATE;

typedef struct _PNP_RESOURCE_REQUEST
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDevice;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _ARBITER_REQUEST_SOURCE AllocationType;
  /* 0x000c */ unsigned long Priority;
  /* 0x0010 */ unsigned long Position;
  /* 0x0014 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x0018 */ void* ReqList;
  /* 0x001c */ struct _CM_RESOURCE_LIST* ResourceAssignment;
  /* 0x0020 */ struct _CM_RESOURCE_LIST* TranslatedResourceAssignment;
  /* 0x0024 */ long Status;
} PNP_RESOURCE_REQUEST, *PPNP_RESOURCE_REQUEST; /* size: 0x0028 */

typedef enum _PNP_VETO_TYPE
{
  PNP_VetoTypeUnknown = 0,
  PNP_VetoLegacyDevice = 1,
  PNP_VetoPendingClose = 2,
  PNP_VetoWindowsApp = 3,
  PNP_VetoWindowsService = 4,
  PNP_VetoOutstandingOpen = 5,
  PNP_VetoDevice = 6,
  PNP_VetoDriver = 7,
  PNP_VetoIllegalDeviceRequest = 8,
  PNP_VetoInsufficientPower = 9,
  PNP_VetoNonDisableable = 10,
  PNP_VetoLegacyDriver = 11,
  PNP_VetoInsufficientRights = 12,
} PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef enum _POLICY_AUDIT_EVENT_TYPE
{
  AuditCategorySystem = 0,
  AuditCategoryLogon = 1,
  AuditCategoryObjectAccess = 2,
  AuditCategoryPrivilegeUse = 3,
  AuditCategoryDetailedTracking = 4,
  AuditCategoryPolicyChange = 5,
  AuditCategoryAccountManagement = 6,
  AuditCategoryDirectoryServiceAccess = 7,
  AuditCategoryAccountLogon = 8,
} POLICY_AUDIT_EVENT_TYPE, *PPOLICY_AUDIT_EVENT_TYPE;

typedef struct _POOL_BLOCK_HEAD
{
  /* 0x0000 */ struct _POOL_HEADER Header;
  /* 0x0008 */ struct _LIST_ENTRY List;
} POOL_BLOCK_HEAD, *PPOOL_BLOCK_HEAD; /* size: 0x0010 */

typedef struct _POOL_DESCRIPTOR
{
  /* 0x0000 */ enum _POOL_TYPE PoolType;
  union
  {
    /* 0x0004 */ struct _FAST_MUTEX PagedLock;
    /* 0x0004 */ unsigned long NonPagedLock;
  }; /* size: 0x0020 */
  /* 0x0040 */ volatile long RunningAllocs;
  /* 0x0044 */ volatile long RunningDeAllocs;
  /* 0x0048 */ volatile long TotalBigPages;
  /* 0x004c */ volatile long ThreadsProcessingDeferrals;
  /* 0x0050 */ volatile unsigned long TotalBytes;
  /* 0x0080 */ unsigned long PoolIndex;
  /* 0x00c0 */ volatile long TotalPages;
  /* 0x0100 */ volatile struct _SINGLE_LIST_ENTRY PendingFrees;
  /* 0x0104 */ volatile long PendingFreeDepth;
  /* 0x0140 */ struct _LIST_ENTRY ListHeads[512];
} POOL_DESCRIPTOR, *PPOOL_DESCRIPTOR; /* size: 0x1140 */

typedef struct _POOL_HACKER
{
  /* 0x0000 */ struct _POOL_HEADER Header;
  /* 0x0008 */ unsigned long Contents[8];
} POOL_HACKER, *PPOOL_HACKER; /* size: 0x0028 */

typedef struct _POOL_HEADER
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short PreviousSize : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned short PoolIndex : 7; /* bit position: 9 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short BlockSize : 9; /* bit position: 0 */
        /* 0x0002 */ unsigned short PoolType : 7; /* bit position: 9 */
      }; /* bitfield */
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long Ulong1;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned long PoolTag;
    struct
    {
      /* 0x0004 */ unsigned short AllocatorBackTraceIndex;
      /* 0x0006 */ unsigned short PoolTagHash;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} POOL_HEADER, *PPOOL_HEADER; /* size: 0x0008 */

typedef struct _POOL_TRACKER_BIG_PAGES
{
  /* 0x0000 */ volatile unsigned long Va;
  /* 0x0004 */ unsigned long Key;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long Pattern : 8; /* bit position: 0 */
    /* 0x0008 */ unsigned long PoolType : 12; /* bit position: 8 */
    /* 0x0008 */ unsigned long SlushSize : 12; /* bit position: 20 */
  }; /* bitfield */
  /* 0x000c */ unsigned long NumberOfBytes;
} POOL_TRACKER_BIG_PAGES, *PPOOL_TRACKER_BIG_PAGES; /* size: 0x0010 */

typedef struct _POOL_TRACKER_TABLE
{
  /* 0x0000 */ volatile long Key;
  /* 0x0004 */ unsigned long NonPagedAllocs;
  /* 0x0008 */ unsigned long NonPagedFrees;
  /* 0x000c */ unsigned long NonPagedBytes;
  /* 0x0010 */ unsigned long PagedAllocs;
  /* 0x0014 */ unsigned long PagedFrees;
  /* 0x0018 */ unsigned long PagedBytes;
} POOL_TRACKER_TABLE, *PPOOL_TRACKER_TABLE; /* size: 0x001c */

typedef enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolBase = 0,
  NonPagedPoolBaseMustSucceed = 2,
  NonPagedPoolBaseCacheAligned = 4,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
} POOL_TYPE, *PPOOL_TYPE;

typedef struct _POP_ACTION_TRIGGER
{
  /* 0x0000 */ enum POWER_POLICY_DEVICE_TYPE Type;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _POP_TRIGGER_WAIT* Wait;
  union
  {
    struct // _TAG_UNNAMED_172
    {
      /* 0x000c */ unsigned long PercentLevel;
    } /* size: 0x0004 */ Battery;
    struct // _TAG_UNNAMED_173
    {
      /* 0x000c */ unsigned long Type;
    } /* size: 0x0004 */ Button;
  }; /* size: 0x0004 */
} POP_ACTION_TRIGGER, *PPOP_ACTION_TRIGGER; /* size: 0x0010 */

typedef struct _POP_COOLING_EXTENSION
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _LIST_ENTRY RequestListHead;
  /* 0x0010 */ struct _POP_RW_LOCK Lock;
  /* 0x0018 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x001c */ void* NotificationEntry;
  /* 0x0020 */ unsigned char Enabled;
  /* 0x0021 */ unsigned char ActiveEngaged;
  /* 0x0022 */ unsigned char ThrottleLimit;
  /* 0x0023 */ unsigned char UpdatingToCurrent;
  /* 0x0024 */ struct _KEVENT* RemovalFlushEvent;
  /* 0x0028 */ struct _KEVENT* PnpFlushEvent;
  /* 0x002c */ struct _THERMAL_COOLING_INTERFACE Interface;
} POP_COOLING_EXTENSION, *PPOP_COOLING_EXTENSION; /* size: 0x0048 */

typedef struct _POP_CPU_INFO
{
  /* 0x0000 */ unsigned long Eax;
  /* 0x0004 */ unsigned long Ebx;
  /* 0x0008 */ unsigned long Ecx;
  /* 0x000c */ unsigned long Edx;
} POP_CPU_INFO, *PPOP_CPU_INFO; /* size: 0x0010 */

typedef struct _POP_CURRENT_BROADCAST
{
  /* 0x0000 */ unsigned char InProgress;
  /* 0x0004 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemContext;
  /* 0x0008 */ enum POWER_ACTION PowerAction;
  /* 0x000c */ struct _POP_DEVICE_SYS_STATE* DeviceState;
} POP_CURRENT_BROADCAST, *PPOP_CURRENT_BROADCAST; /* size: 0x0010 */

typedef enum _POP_DEVICE_IDLE_TYPE
{
  DeviceIdleNormal = 0,
  DeviceIdleDisk = 1,
} POP_DEVICE_IDLE_TYPE, *PPOP_DEVICE_IDLE_TYPE;

typedef struct _POP_DEVICE_SYS_STATE
{
  /* 0x0000 */ unsigned char IrpMinor;
  /* 0x0004 */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0008 */ unsigned long SpinLock;
  /* 0x000c */ struct _KTHREAD* Thread;
  /* 0x0010 */ struct _KEVENT* AbortEvent;
  /* 0x0014 */ struct _KSEMAPHORE* ReadySemaphore;
  /* 0x0018 */ struct _KSEMAPHORE* FinishedSemaphore;
  /* 0x001c */ struct _PO_DEVICE_NOTIFY_ORDER Order;
  /* 0x00ec */ struct _LIST_ENTRY Pending;
  /* 0x00f4 */ long Status;
  /* 0x00f8 */ struct _DEVICE_OBJECT* FailedDevice;
  /* 0x00fc */ unsigned char Waking;
  /* 0x00fd */ unsigned char Cancelled;
  /* 0x00fe */ unsigned char IgnoreErrors;
  /* 0x00ff */ unsigned char IgnoreNotImplemented;
  /* 0x0100 */ unsigned char TimeRefreshLockAcquired;
  /* 0x0101 */ char __PADDING__[3];
} POP_DEVICE_SYS_STATE, *PPOP_DEVICE_SYS_STATE; /* size: 0x0104 */

typedef struct _POP_FX_ACCOUNTING
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned char Active;
  /* 0x0008 */ unsigned long DripsRequiredState;
  /* 0x000c */ long Level;
  /* 0x0010 */ __int64 ActiveStamp;
  /* 0x0018 */ unsigned __int64 CsActiveTime;
  /* 0x0020 */ __int64 CriticalActiveTime;
} POP_FX_ACCOUNTING, *PPOP_FX_ACCOUNTING; /* size: 0x0028 */

typedef struct _POP_FX_COMPONENT
{
  /* 0x0000 */ struct _GUID Id;
  /* 0x0010 */ unsigned long Index;
  /* 0x0014 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0030 */ struct _POP_FX_DEVICE* Device;
  /* 0x0034 */ volatile union _POP_FX_COMPONENT_FLAGS Flags;
  /* 0x003c */ volatile long Resident;
  /* 0x0040 */ struct _KEVENT ActiveEvent;
  /* 0x0050 */ unsigned long IdleLock;
  /* 0x0054 */ volatile long IdleConditionComplete;
  /* 0x0058 */ volatile long IdleStateComplete;
  /* 0x0060 */ unsigned __int64 IdleStamp;
  /* 0x0068 */ volatile unsigned long CurrentIdleState;
  /* 0x006c */ unsigned long IdleStateCount;
  /* 0x0070 */ struct _POP_FX_IDLE_STATE* IdleStates;
  /* 0x0074 */ unsigned long DeepestWakeableIdleState;
  /* 0x0078 */ unsigned long ProviderCount;
  /* 0x007c */ struct _POP_FX_PROVIDER* Providers;
  /* 0x0080 */ unsigned long IdleProviderCount;
  /* 0x0084 */ unsigned long DependentCount;
  /* 0x0088 */ struct _POP_FX_DEPENDENT* Dependents;
  /* 0x0090 */ struct _POP_FX_ACCOUNTING Accounting;
  /* 0x00b8 */ struct _POP_FX_PERF_INFO* Performance;
  /* 0x00bc */ long __PADDING__[1];
} POP_FX_COMPONENT, *PPOP_FX_COMPONENT; /* size: 0x00c0 */

typedef union _POP_FX_COMPONENT_FLAGS
{
  union
  {
    struct
    {
      /* 0x0000 */ long Value;
      /* 0x0004 */ long Value2;
    }; /* size: 0x0008 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long RefCount : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Idling : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Active : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long CriticalIdleOverride : 1; /* bit position: 0 */
        /* 0x0004 */ unsigned long ResidentOverride : 1; /* bit position: 1 */
        /* 0x0004 */ unsigned long Reserved : 30; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} POP_FX_COMPONENT_FLAGS, *PPOP_FX_COMPONENT_FLAGS; /* size: 0x0008 */

typedef struct _POP_FX_DEPENDENT
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned long ProviderIndex;
} POP_FX_DEPENDENT, *PPOP_FX_DEPENDENT; /* size: 0x0008 */

typedef struct _POP_FX_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _POP_IRP_DATA* IrpData;
  /* 0x0010 */ volatile union _POP_FX_DEVICE_STATUS Status;
  /* 0x0014 */ volatile long PowerReqCall;
  /* 0x0018 */ volatile long PowerNotReqCall;
  /* 0x001c */ struct _DEVICE_NODE* DevNode;
  /* 0x0020 */ struct PEPHANDLE__* DpmContext;
  /* 0x0024 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0028 */ struct PEPHANDLE__* PluginHandle;
  /* 0x002c */ struct _POP_FX_PLUGIN* AcpiPlugin;
  /* 0x0030 */ struct PEPHANDLE__* AcpiPluginHandle;
  /* 0x0034 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0038 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x003c */ struct _POP_FX_DRIVER_CALLBACKS Callbacks;
  /* 0x0058 */ void* DriverContext;
  /* 0x005c */ struct _LIST_ENTRY AcpiLink;
  /* 0x0064 */ struct _UNICODE_STRING DeviceId;
  /* 0x006c */ struct _IO_REMOVE_LOCK RemoveLock;
  /* 0x0084 */ struct _IO_REMOVE_LOCK AcpiRemoveLock;
  /* 0x009c */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x00b8 */ unsigned long IdleLock;
  /* 0x00c0 */ struct _KTIMER IdleTimer;
  /* 0x00e8 */ struct _KDPC IdleDpc;
  /* 0x0108 */ unsigned __int64 IdleTimeout;
  /* 0x0110 */ unsigned __int64 IdleStamp;
  /* 0x0118 */ struct _DEVICE_OBJECT* NextIrpDeviceObject[2];
  /* 0x0120 */ union _POWER_STATE NextIrpPowerState[2];
  /* 0x0128 */ void* NextIrpCallerCompletion[2] /* function */;
  /* 0x0130 */ void* NextIrpCallerContext[2];
  /* 0x0138 */ struct _KEVENT IrpCompleteEvent;
  /* 0x0148 */ void* PowerOnDumpDeviceCallback /* function */;
  /* 0x0150 */ struct _POP_FX_ACCOUNTING Accounting;
  /* 0x0178 */ volatile unsigned long Flags;
  /* 0x017c */ unsigned long ComponentCount;
  /* 0x0180 */ struct _POP_FX_COMPONENT** Components;
  /* 0x0184 */ long __PADDING__[1];
} POP_FX_DEVICE, *PPOP_FX_DEVICE; /* size: 0x0188 */

typedef union _POP_FX_DEVICE_STATUS
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SystemTransition : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PepD0Notify : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long IdleTimerOn : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long IgnoreIdleTimeout : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long IrpInUse : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long IrpPending : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long DPNRDeviceNotified : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long DPNRReceivedFromPep : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long IrpFirstPendingIndex : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long IrpLastPendingIndex : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long Reserved : 22; /* bit position: 10 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} POP_FX_DEVICE_STATUS, *PPOP_FX_DEVICE_STATUS; /* size: 0x0004 */

typedef struct _POP_FX_DRIVER_CALLBACKS
{
  /* 0x0000 */ void* ComponentActive /* function */;
  /* 0x0004 */ void* ComponentIdle /* function */;
  /* 0x0008 */ void* ComponentIdleState /* function */;
  /* 0x000c */ void* DevicePowerRequired /* function */;
  /* 0x0010 */ void* DevicePowerNotRequired /* function */;
  /* 0x0014 */ void* PowerControl /* function */;
  /* 0x0018 */ void* ComponentCriticalTransition /* function */;
} POP_FX_DRIVER_CALLBACKS, *PPOP_FX_DRIVER_CALLBACKS; /* size: 0x001c */

typedef struct _POP_FX_IDLE_STATE
{
  /* 0x0000 */ unsigned __int64 TransitionLatency;
  /* 0x0008 */ unsigned __int64 ResidencyRequirement;
  /* 0x0010 */ unsigned long NominalPower;
  /* 0x0014 */ long __PADDING__[1];
} POP_FX_IDLE_STATE, *PPOP_FX_IDLE_STATE; /* size: 0x0018 */

typedef union _POP_FX_PERF_FLAGS
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Progress : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 3 */
      /* 0x0000 */ unsigned long Synchronicity : 2; /* bit position: 27 */
      /* 0x0000 */ unsigned long RequestPepCompleted : 1; /* bit position: 29 */
      /* 0x0000 */ unsigned long RequestSucceeded : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long NestedCallback : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} POP_FX_PERF_FLAGS, *PPOP_FX_PERF_FLAGS; /* size: 0x0004 */

typedef struct _POP_FX_PERF_INFO
{
  /* 0x0000 */ struct _POP_FX_COMPONENT* Component;
  /* 0x0004 */ struct _KEVENT CompletedEvent;
  /* 0x0014 */ void* ComponentPerfState /* function */;
  /* 0x0018 */ volatile union _POP_FX_PERF_FLAGS Flags;
  /* 0x001c */ struct _PO_FX_PERF_STATE_CHANGE* LastChange;
  /* 0x0020 */ unsigned long LastChangeCount;
  /* 0x0028 */ unsigned __int64 LastChangeStamp;
  /* 0x0030 */ unsigned char LastChangeNominal;
  /* 0x0031 */ unsigned char PepRegistered;
  /* 0x0032 */ unsigned char QueryOnIdleStates;
  /* 0x0034 */ void* volatile RequestDriverContext;
  /* 0x0038 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0054 */ unsigned long SetsCount;
  /* 0x0058 */ struct _POP_FX_PERF_SET* Sets;
  /* 0x005c */ long __PADDING__[1];
} POP_FX_PERF_INFO, *PPOP_FX_PERF_INFO; /* size: 0x0060 */

typedef struct _POP_FX_PERF_SET
{
  /* 0x0000 */ struct _PO_FX_COMPONENT_PERF_SET* PerfSet;
  /* 0x0008 */ unsigned __int64 CurrentPerf;
  /* 0x0010 */ unsigned __int64 CurrentPerfStamp;
  /* 0x0018 */ unsigned char CurrentPerfNominal;
  /* 0x0019 */ char __PADDING__[7];
} POP_FX_PERF_SET, *PPOP_FX_PERF_SET; /* size: 0x0020 */

typedef struct _POP_FX_PLUGIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ unsigned long Version;
  /* 0x0010 */ unsigned __int64 Flags;
  /* 0x0018 */ struct _KQUEUE WorkQueue;
  /* 0x0040 */ void* AcceptDeviceNotification /* function */;
  /* 0x0044 */ void* AcceptProcessorNotification /* function */;
  /* 0x0048 */ void* AcceptAcpiNotification /* function */;
  /* 0x004c */ unsigned long WorkOrderCount;
  /* 0x0050 */ struct _POP_FX_WORK_ORDER WorkOrders[1];
  /* 0x006c */ long __PADDING__[1];
} POP_FX_PLUGIN, *PPOP_FX_PLUGIN; /* size: 0x0070 */

typedef struct _POP_FX_PROVIDER
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned char Activating;
  /* 0x0005 */ char __PADDING__[3];
} POP_FX_PROVIDER, *PPOP_FX_PROVIDER; /* size: 0x0008 */

typedef struct _POP_FX_WORK_ORDER
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ long WorkCount;
  /* 0x0014 */ void* Context;
  /* 0x0018 */ struct _POP_FX_WORK_ORDER_WATCHDOG_INFO* WatchdogTimerInfo;
} POP_FX_WORK_ORDER, *PPOP_FX_WORK_ORDER; /* size: 0x001c */

typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
{
  /* 0x0000 */ struct _KTIMER Timer;
  /* 0x0028 */ struct _KDPC Dpc;
  /* 0x0048 */ struct _POP_FX_WORK_ORDER* WorkOrder;
  /* 0x004c */ long __PADDING__[1];
} POP_FX_WORK_ORDER_WATCHDOG_INFO, *PPOP_FX_WORK_ORDER_WATCHDOG_INFO; /* size: 0x0050 */

typedef struct _POP_HIBER_CONTEXT
{
  /* 0x0000 */ unsigned char Reset;
  /* 0x0001 */ unsigned char HiberFlags;
  /* 0x0002 */ unsigned char WroteHiberFile;
  /* 0x0003 */ unsigned char VerifyKernelPhaseOnResume;
  /* 0x0004 */ unsigned char KernelPhaseVerificationActive;
  /* 0x0005 */ volatile unsigned char InitializationFinished;
  /* 0x0008 */ volatile long NextTableLockHeld;
  /* 0x000c */ volatile long BootPhaseFinishedBarrier;
  /* 0x0010 */ volatile long KernelResumeFinishedBarrier;
  /* 0x0014 */ volatile long HvCaptureReadyBarrier;
  /* 0x0018 */ volatile long HvCaptureCompletedBarrier;
  /* 0x001c */ unsigned char MapFrozen;
  union
  {
    /* 0x0020 */ struct _RTL_BITMAP DiscardMap;
    /* 0x0020 */ struct _RTL_BITMAP KernelPhaseMap;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _RTL_BITMAP BootPhaseMap;
  /* 0x0030 */ struct _LIST_ENTRY ClonedRanges;
  /* 0x0038 */ unsigned long ClonedRangeCount;
  /* 0x0040 */ unsigned __int64 ClonedPageCount;
  /* 0x0048 */ struct _RTL_BITMAP* CurrentMap;
  /* 0x004c */ struct _LIST_ENTRY* NextCloneRange;
  /* 0x0050 */ unsigned long NextPreserve;
  /* 0x0054 */ struct _MDL* LoaderMdl;
  /* 0x0058 */ struct _MDL* AllocatedMdl;
  /* 0x0060 */ unsigned __int64 PagesOut;
  /* 0x0068 */ void* IoPages;
  /* 0x006c */ unsigned long IoPagesCount;
  /* 0x0070 */ void* CurrentMcb;
  /* 0x0074 */ struct _DUMP_STACK_CONTEXT* DumpStack;
  /* 0x0078 */ struct _KPROCESSOR_STATE* WakeState;
  /* 0x007c */ unsigned long IoProgress;
  /* 0x0080 */ long Status;
  /* 0x0084 */ unsigned long GraphicsProc;
  /* 0x0088 */ struct PO_MEMORY_IMAGE* MemoryImage;
  /* 0x008c */ unsigned long* PerformanceStats;
  /* 0x0090 */ struct _MDL* BootLoaderLogMdl;
  /* 0x0094 */ unsigned long SiLogOffset;
  /* 0x0098 */ struct _MDL* FirmwareRuntimeInformationMdl;
  /* 0x009c */ void* FirmwareRuntimeInformationVa;
  /* 0x00a0 */ void* ResumeContext;
  /* 0x00a4 */ unsigned long ResumeContextPages;
  /* 0x00a8 */ unsigned long ProcessorCount;
  /* 0x00ac */ struct _POP_PER_PROCESSOR_CONTEXT* ProcessorContext;
  /* 0x00b0 */ char* ProdConsBuffer;
  /* 0x00b4 */ unsigned long ProdConsSize;
  /* 0x00b8 */ unsigned long MaxDataPages;
  /* 0x00bc */ void* ExtraBuffer;
  /* 0x00c0 */ unsigned long ExtraBufferSize;
  /* 0x00c4 */ void* ExtraMapVa;
  /* 0x00c8 */ unsigned long BitlockerKeyPFN;
  /* 0x00d0 */ struct _POP_IO_INFO IoInfo;
  /* 0x0130 */ unsigned short* IoChecksums;
  /* 0x0134 */ unsigned long IoChecksumsSize;
  /* 0x0138 */ unsigned long HardwareConfigurationSignature;
  /* 0x013c */ long __PADDING__[1];
} POP_HIBER_CONTEXT, *PPOP_HIBER_CONTEXT; /* size: 0x0140 */

typedef struct _POP_IO_INFO
{
  /* 0x0000 */ struct _MDL* DumpMdl;
  /* 0x0004 */ enum _POP_IO_STATUS IoStatus;
  /* 0x0008 */ unsigned __int64 IoStartCount;
  /* 0x0010 */ unsigned __int64 IoBytesCompleted;
  /* 0x0018 */ unsigned __int64 IoBytesInProgress;
  /* 0x0020 */ unsigned __int64 RequestSize;
  /* 0x0028 */ union _LARGE_INTEGER IoLocation;
  /* 0x0030 */ unsigned __int64 FileOffset;
  /* 0x0038 */ void* Buffer;
  /* 0x003c */ unsigned char AsyncCapable;
  /* 0x0040 */ unsigned __int64 BytesToRead;
  /* 0x0048 */ unsigned long Pages;
  /* 0x0050 */ unsigned __int64 HighestChecksumIndex;
  /* 0x0058 */ unsigned short PreviousChecksum;
  /* 0x005a */ char __PADDING__[6];
} POP_IO_INFO, *PPOP_IO_INFO; /* size: 0x0060 */

typedef enum _POP_IO_STATUS
{
  IoReady = 0,
  IoPending = 1,
  IoDone = 2,
} POP_IO_STATUS, *PPOP_IO_STATUS;

typedef struct _POP_IRP_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _DEVICE_OBJECT* Pdo;
  /* 0x0010 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0014 */ struct _DEVICE_OBJECT* CurrentDevice;
  /* 0x0018 */ unsigned __int64 WatchdogStart;
  /* 0x0020 */ struct _KTIMER WatchdogTimer;
  /* 0x0048 */ struct _KDPC WatchdogDpc;
  /* 0x0068 */ unsigned char MinorFunction;
  /* 0x006c */ enum _POWER_STATE_TYPE PowerStateType;
  /* 0x0070 */ union _POWER_STATE PowerState;
  /* 0x0074 */ unsigned char WatchdogEnabled;
  /* 0x0078 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x007c */ unsigned char SystemTransition;
  /* 0x007d */ unsigned char NotifyPEP;
  union
  {
    struct // _TAG_UNNAMED_174
    {
      /* 0x0080 */ void* CallerCompletion /* function */;
      /* 0x0084 */ void* CallerContext;
      /* 0x0088 */ struct _DEVICE_OBJECT* CallerDevice;
      /* 0x008c */ unsigned char SystemWake;
      /* 0x008d */ char __PADDING__[3];
    } /* size: 0x0010 */ Device;
    struct
    {
      struct // _TAG_UNNAMED_175
      {
        /* 0x0080 */ struct _PO_DEVICE_NOTIFY* NotifyDevice;
        /* 0x0084 */ unsigned char FxDeviceActivated;
        /* 0x0085 */ char __PADDING__[3];
      } /* size: 0x0008 */ System;
      /* 0x0088 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} POP_IRP_DATA, *PPOP_IRP_DATA; /* size: 0x0090 */

typedef struct _POP_IRP_WORKER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _ETHREAD* Thread;
  /* 0x000c */ struct _IRP* Irp;
  /* 0x0010 */ struct _DEVICE_OBJECT* Device;
  /* 0x0014 */ unsigned char Static;
  /* 0x0015 */ char __PADDING__[3];
} POP_IRP_WORKER_ENTRY, *PPOP_IRP_WORKER_ENTRY; /* size: 0x0018 */

typedef struct _POP_PER_PROCESSOR_CONTEXT
{
  /* 0x0000 */ unsigned char* UncompressedData;
  /* 0x0004 */ void* MappingVa;
  /* 0x0008 */ void* XpressEncodeWorkspace;
  /* 0x000c */ unsigned char* CompressedDataBuffer;
  /* 0x0010 */ unsigned __int64 CopyTicks;
  /* 0x0018 */ unsigned __int64 CompressTicks;
  /* 0x0020 */ unsigned __int64 BytesCopied;
  /* 0x0028 */ unsigned __int64 PagesProcessed;
  /* 0x0030 */ unsigned __int64 DecompressTicks;
  /* 0x0038 */ unsigned __int64 ResumeCopyTicks;
  /* 0x0040 */ unsigned __int64 SharedBufferTicks;
  /* 0x0048 */ unsigned __int64 DecompressTicksByMethod[2];
  /* 0x0058 */ unsigned __int64 DecompressSizeByMethod[2];
  /* 0x0068 */ unsigned long CompressCount;
  /* 0x006c */ unsigned long HuffCompressCount;
} POP_PER_PROCESSOR_CONTEXT, *PPOP_PER_PROCESSOR_CONTEXT; /* size: 0x0070 */

typedef struct _POP_POLICY_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x000c */ void* Notification;
  /* 0x0010 */ struct _UNICODE_STRING Name;
  /* 0x0018 */ struct _DEVICE_OBJECT* Device;
  /* 0x001c */ struct _IRP* Irp;
} POP_POLICY_DEVICE, *PPOP_POLICY_DEVICE; /* size: 0x0020 */

typedef struct _POP_POWER_ACTION
{
  /* 0x0000 */ unsigned char Updates;
  /* 0x0001 */ unsigned char State;
  /* 0x0002 */ unsigned char Shutdown;
  /* 0x0004 */ enum POWER_ACTION Action;
  /* 0x0008 */ enum _SYSTEM_POWER_STATE LightestState;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ long Status;
  /* 0x0014 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x0018 */ unsigned long DeviceTypeFlags;
  /* 0x001c */ unsigned char IrpMinor;
  /* 0x001d */ unsigned char Waking;
  /* 0x0020 */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0024 */ enum _SYSTEM_POWER_STATE NextSystemState;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE EffectiveSystemState;
  /* 0x002c */ enum _SYSTEM_POWER_STATE CurrentSystemState;
  /* 0x0030 */ struct _POP_SHUTDOWN_BUG_CHECK* ShutdownBugCode;
  /* 0x0034 */ struct _POP_DEVICE_SYS_STATE* DevState;
  /* 0x0038 */ struct _POP_HIBER_CONTEXT* HiberContext;
  /* 0x0040 */ unsigned __int64 WakeTime;
  /* 0x0048 */ unsigned __int64 SleepTime;
  /* 0x0050 */ enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;
  /* 0x0058 */ struct // _TAG_UNNAMED_176
  {
    /* 0x0058 */ unsigned __int64 RequestedTime;
    /* 0x0060 */ unsigned __int64 ProgrammedTime;
    /* 0x0068 */ struct _DIAGNOSTIC_BUFFER* TimerInfo;
    /* 0x006c */ long __PADDING__[1];
  } /* size: 0x0018 */ WakeAlarm[3];
  /* 0x00a0 */ unsigned char WakeAlarmPaused;
  /* 0x00a8 */ unsigned __int64 WakeAlarmLastTime;
  /* 0x00b0 */ struct SYSTEM_POWER_CAPABILITIES FilteredCapabilities;
  /* 0x00fc */ long __PADDING__[1];
} POP_POWER_ACTION, *PPOP_POWER_ACTION; /* size: 0x0100 */

typedef struct _POP_POWER_SETTING_VALUES
{
  /* 0x0000 */ unsigned long StructureSize;
  /* 0x0004 */ struct _SYSTEM_POWER_POLICY PopPolicy;
  /* 0x00ec */ enum SYSTEM_POWER_CONDITION CurrentAcDcPowerState;
  /* 0x00f0 */ unsigned char AwayModeEnabled;
  /* 0x00f1 */ unsigned char AwayModeEngaged;
  /* 0x00f2 */ unsigned char AwayModePolicyAllowed;
  /* 0x00f4 */ volatile long AwayModeIgnoreUserPresent;
  /* 0x00f8 */ volatile long AwayModeIgnoreAction;
  /* 0x00fc */ unsigned char DisableFastS4;
  /* 0x00fd */ unsigned char DisableStandbyStates;
  /* 0x0100 */ unsigned long UnattendSleepTimeout;
  /* 0x0104 */ volatile unsigned long DiskIgnoreTime;
  /* 0x0108 */ volatile unsigned long DeviceIdlePolicy;
  /* 0x010c */ unsigned long VideoDimTimeout;
  /* 0x0110 */ unsigned long VideoNormalBrightness;
  /* 0x0114 */ unsigned long VideoDimBrightness;
  /* 0x0118 */ unsigned long AlsOffset;
  /* 0x011c */ unsigned long AlsEnabled;
  /* 0x0120 */ unsigned long EsBrightness;
  /* 0x0124 */ unsigned char SwitchShutdownForced;
  /* 0x0128 */ unsigned long SystemCoolingPolicy;
  /* 0x012c */ unsigned char MediaBufferingEngaged;
  /* 0x012d */ unsigned char OffloadedAudio;
  /* 0x012e */ unsigned char NonOffloadedAudio;
  /* 0x012f */ unsigned char FullscreenVideoPlayback;
  /* 0x0130 */ unsigned long EsBatteryThreshold;
  /* 0x0134 */ unsigned char EsUserAwaySetting;
  /* 0x0138 */ unsigned long WiFiInStandby;
} POP_POWER_SETTING_VALUES, *PPOP_POWER_SETTING_VALUES; /* size: 0x013c */

typedef struct _POP_PPM_PROFILE
{
  /* 0x0000 */ unsigned short* Name;
  /* 0x0004 */ unsigned char Id;
  /* 0x0008 */ struct _GUID Guid;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned char Priority;
  /* 0x0020 */ struct _PPM_ENGINE_SETTINGS Settings[2];
  /* 0x0180 */ unsigned __int64 StartTime;
  /* 0x0188 */ unsigned __int64 Count;
  /* 0x0190 */ unsigned __int64 MaxDuration;
  /* 0x0198 */ unsigned __int64 MinDuration;
  /* 0x01a0 */ unsigned __int64 TotalDuration;
} POP_PPM_PROFILE, *PPOP_PPM_PROFILE; /* size: 0x01a8 */

typedef struct _POP_RW_LOCK
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _KTHREAD* Thread;
} POP_RW_LOCK, *PPOP_RW_LOCK; /* size: 0x0008 */

typedef struct _POP_SHUTDOWN_BUG_CHECK
{
  /* 0x0000 */ struct _ETHREAD* InitiatingThread;
  /* 0x0004 */ struct _EPROCESS* InitiatingProcess;
  /* 0x0008 */ void* ThreadId;
  /* 0x000c */ void* ProcessId;
  /* 0x0010 */ unsigned long Code;
  /* 0x0014 */ unsigned long Parameter1;
  /* 0x0018 */ unsigned long Parameter2;
  /* 0x001c */ unsigned long Parameter3;
  /* 0x0020 */ unsigned long Parameter4;
} POP_SHUTDOWN_BUG_CHECK, *PPOP_SHUTDOWN_BUG_CHECK; /* size: 0x0024 */

typedef struct _POP_THERMAL_TELEMETRY_TRACKER
{
  /* 0x0000 */ unsigned char AccountingDisabled;
  /* 0x0008 */ unsigned __int64 LastPassiveUpdateTime;
  /* 0x0010 */ unsigned __int64 TotalPassiveTime[20];
  /* 0x00b0 */ unsigned __int64 PassiveTimeSnap[20];
} POP_THERMAL_TELEMETRY_TRACKER, *PPOP_THERMAL_TELEMETRY_TRACKER; /* size: 0x0150 */

typedef struct _POP_THERMAL_ZONE
{
  union
  {
    /* 0x0000 */ struct _POP_POLICY_DEVICE PolicyDevice;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY Link;
      /* 0x0008 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
      /* 0x000c */ void* Notification;
      /* 0x0010 */ struct _UNICODE_STRING Name;
      /* 0x0018 */ struct _DEVICE_OBJECT* Device;
      /* 0x001c */ struct _IRP* Irp;
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
  /* 0x0020 */ unsigned char State;
  /* 0x0021 */ unsigned char Flags;
  /* 0x0022 */ unsigned char Removing;
  /* 0x0023 */ unsigned char Mode;
  /* 0x0024 */ unsigned char PendingMode;
  /* 0x0025 */ unsigned char ActivePoint;
  /* 0x0026 */ unsigned char PendingActivePoint;
  /* 0x0027 */ unsigned char Critical;
  /* 0x0028 */ unsigned char ThermalStandby;
  /* 0x0029 */ unsigned char OverThrottled;
  /* 0x002c */ long HighPrecisionThrottle;
  /* 0x0030 */ long Throttle;
  /* 0x0034 */ long PendingThrottle;
  /* 0x0038 */ unsigned long ThrottleReasons;
  /* 0x0040 */ unsigned __int64 LastTime;
  /* 0x0048 */ unsigned long SampleRate;
  /* 0x004c */ unsigned long LastTemp;
  /* 0x0050 */ struct _KTIMER PassiveTimer;
  /* 0x0078 */ struct _KDPC PassiveDpc;
  /* 0x0098 */ struct _THERMAL_INFORMATION_EX Info;
  /* 0x00f0 */ union _LARGE_INTEGER InfoLastUpdateTime;
  /* 0x00f8 */ struct _THERMAL_POLICY Policy;
  /* 0x0110 */ unsigned char PolicyDriver;
  /* 0x0118 */ unsigned __int64 LastActiveStartTime;
  /* 0x0120 */ unsigned __int64 LastPassiveStartTime;
  /* 0x0128 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0138 */ struct _POP_RW_LOCK Lock;
  /* 0x0140 */ struct _KEVENT ZoneStopped;
  /* 0x0150 */ struct _KEVENT TemperatureUpdated;
  /* 0x0160 */ unsigned long InstanceId;
  /* 0x0168 */ struct _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker;
} POP_THERMAL_ZONE, *PPOP_THERMAL_ZONE; /* size: 0x02b8 */

typedef struct _POP_TRIGGER_WAIT
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0010 */ long Status;
  /* 0x0014 */ struct _LIST_ENTRY Link;
  /* 0x001c */ struct _POP_ACTION_TRIGGER* Trigger;
} POP_TRIGGER_WAIT, *PPOP_TRIGGER_WAIT; /* size: 0x0020 */

typedef struct _PORT_MESSAGE
{
  union // _TAG_UNNAMED_177
  {
    union
    {
      struct // _TAG_UNNAMED_178
      {
        /* 0x0000 */ short DataLength;
        /* 0x0002 */ short TotalLength;
      } /* size: 0x0004 */ s1;
      /* 0x0000 */ unsigned long Length;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union // _TAG_UNNAMED_179
  {
    union
    {
      struct // _TAG_UNNAMED_180
      {
        /* 0x0004 */ short Type;
        /* 0x0006 */ short DataInfoOffset;
      } /* size: 0x0004 */ s2;
      /* 0x0004 */ unsigned long ZeroInit;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  union
  {
    /* 0x0008 */ struct _CLIENT_ID ClientId;
    /* 0x0008 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
  /* 0x0010 */ unsigned long MessageId;
  union
  {
    /* 0x0014 */ unsigned long ClientViewSize;
    /* 0x0014 */ unsigned long CallbackId;
  }; /* size: 0x0004 */
} PORT_MESSAGE, *PPORT_MESSAGE; /* size: 0x0018 */

typedef enum _POWER_REQUEST_TYPE
{
  PowerRequestDisplayRequired = 0,
  PowerRequestSystemRequired = 1,
  PowerRequestAwayModeRequired = 2,
  PowerRequestExecutionRequired = 3,
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;

typedef enum _POWER_REQUEST_TYPE_INTERNAL
{
  PowerRequestDisplayRequiredInternal = 0,
  PowerRequestSystemRequiredInternal = 1,
  PowerRequestAwayModeRequiredInternal = 2,
  PowerRequestExecutionRequiredInternal = 3,
  PowerRequestPerfBoostRequiredInternal = 4,
  PowerRequestInternalInvalid = 5,
} POWER_REQUEST_TYPE_INTERNAL, *PPOWER_REQUEST_TYPE_INTERNAL;

typedef struct _POWER_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceD1;
  /* 0x0004 */ unsigned long SequenceD2;
  /* 0x0008 */ unsigned long SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE; /* size: 0x000c */

typedef union _POWER_STATE
{
  union
  {
    /* 0x0000 */ enum _SYSTEM_POWER_STATE SystemState;
    /* 0x0000 */ enum _DEVICE_POWER_STATE DeviceState;
  }; /* size: 0x0004 */
} POWER_STATE, *PPOWER_STATE; /* size: 0x0004 */

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef struct _PO_DEVICE_NOTIFY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _LIST_ENTRY PowerChildren;
  /* 0x0010 */ struct _LIST_ENTRY PowerParents;
  /* 0x0018 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x001c */ unsigned char OrderLevel;
  /* 0x0020 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0024 */ unsigned short* DeviceName;
  /* 0x0028 */ unsigned short* DriverName;
  /* 0x002c */ unsigned long ChildCount;
  /* 0x0030 */ unsigned long ActiveChild;
  /* 0x0034 */ unsigned long ParentCount;
  /* 0x0038 */ unsigned long ActiveParent;
} PO_DEVICE_NOTIFY, *PPO_DEVICE_NOTIFY; /* size: 0x003c */

typedef struct _PO_DEVICE_NOTIFY_ORDER
{
  /* 0x0000 */ unsigned char Locked;
  /* 0x0004 */ struct _DEVICE_OBJECT** WarmEjectPdoPointer;
  /* 0x0008 */ struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];
} PO_DEVICE_NOTIFY_ORDER, *PPO_DEVICE_NOTIFY_ORDER; /* size: 0x00d0 */

typedef struct _PO_DIAG_STACK_RECORD
{
  /* 0x0000 */ unsigned long StackDepth;
  /* 0x0004 */ void* Stack[1];
} PO_DIAG_STACK_RECORD, *PPO_DIAG_STACK_RECORD; /* size: 0x0008 */

typedef struct _PO_FX_COMPONENT_PERF_SET
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
  /* 0x0008 */ unsigned __int64 Flags;
  /* 0x0010 */ enum _PO_FX_PERF_STATE_UNIT Unit;
  /* 0x0014 */ enum _PO_FX_PERF_STATE_TYPE Type;
  union
  {
    struct // _TAG_UNNAMED_181
    {
      /* 0x0018 */ unsigned long Count;
      /* 0x001c */ struct _PO_FX_PERF_STATE* States;
    } /* size: 0x0008 */ Discrete;
    struct // _TAG_UNNAMED_182
    {
      /* 0x0018 */ unsigned __int64 Minimum;
      /* 0x0020 */ unsigned __int64 Maximum;
    } /* size: 0x0010 */ Range;
  }; /* size: 0x0010 */
} PO_FX_COMPONENT_PERF_SET, *PPO_FX_COMPONENT_PERF_SET; /* size: 0x0028 */

typedef struct _PO_FX_PERF_STATE
{
  /* 0x0000 */ unsigned __int64 Value;
  /* 0x0008 */ void* Context;
  /* 0x000c */ long __PADDING__[1];
} PO_FX_PERF_STATE, *PPO_FX_PERF_STATE; /* size: 0x0010 */

typedef struct _PO_FX_PERF_STATE_CHANGE
{
  /* 0x0000 */ unsigned long Set;
  union
  {
    /* 0x0008 */ unsigned long StateIndex;
    /* 0x0008 */ unsigned __int64 StateValue;
  }; /* size: 0x0008 */
} PO_FX_PERF_STATE_CHANGE, *PPO_FX_PERF_STATE_CHANGE; /* size: 0x0010 */

typedef enum _PO_FX_PERF_STATE_TYPE
{
  PoFxPerfStateTypeDiscrete = 0,
  PoFxPerfStateTypeRange = 1,
  PoFxPerfStateTypeMaximum = 2,
} PO_FX_PERF_STATE_TYPE, *PPO_FX_PERF_STATE_TYPE;

typedef enum _PO_FX_PERF_STATE_UNIT
{
  PoFxPerfStateUnitOther = 0,
  PoFxPerfStateUnitFrequency = 1,
  PoFxPerfStateUnitBandwidth = 2,
  PoFxPerfStateUnitMaximum = 3,
} PO_FX_PERF_STATE_UNIT, *PPO_FX_PERF_STATE_UNIT;

typedef struct _PO_HIBER_PERF
{
  /* 0x0000 */ unsigned __int64 HiberIoTicks;
  /* 0x0008 */ unsigned __int64 HiberIoCpuTicks;
  /* 0x0010 */ unsigned __int64 HiberInitTicks;
  /* 0x0018 */ unsigned __int64 HiberHiberFileTicks;
  /* 0x0020 */ unsigned __int64 HiberCompressTicks;
  /* 0x0028 */ unsigned __int64 HiberSharedBufferTicks;
  /* 0x0030 */ unsigned __int64 HiberChecksumTicks;
  /* 0x0038 */ unsigned __int64 HiberChecksumIoTicks;
  /* 0x0040 */ union _LARGE_INTEGER TotalHibernateTime;
  /* 0x0048 */ unsigned long POSTTime;
  /* 0x004c */ unsigned long ResumeBootMgrTime;
  /* 0x0050 */ unsigned long BootmgrUserInputTime;
  /* 0x0058 */ unsigned __int64 ResumeAppTicks;
  /* 0x0060 */ unsigned __int64 ResumeAppStartTimestamp;
  /* 0x0068 */ unsigned __int64 ResumeLibraryInitTicks;
  /* 0x0070 */ unsigned __int64 ResumeInitTicks;
  /* 0x0078 */ unsigned __int64 ResumeRestoreImageStartTimestamp;
  /* 0x0080 */ unsigned __int64 ResumeHiberFileTicks;
  /* 0x0088 */ unsigned __int64 ResumeIoTicks;
  /* 0x0090 */ unsigned __int64 ResumeDecompressTicks;
  /* 0x0098 */ unsigned __int64 ResumeAllocateTicks;
  /* 0x00a0 */ unsigned __int64 ResumeUserInOutTicks;
  /* 0x00a8 */ unsigned __int64 ResumeMapTicks;
  /* 0x00b0 */ unsigned __int64 ResumeUnmapTicks;
  /* 0x00b8 */ unsigned __int64 ResumeChecksumTicks;
  /* 0x00c0 */ unsigned __int64 ResumeChecksumIoTicks;
  /* 0x00c8 */ unsigned __int64 ResumeKernelSwitchTimestamp;
  /* 0x00d0 */ unsigned __int64 WriteLogDataTimestamp;
  /* 0x00d8 */ unsigned __int64 KernelReturnFromHandler;
  /* 0x00e0 */ unsigned __int64 TimeStampCounterAtSwitchTime;
  /* 0x00e8 */ unsigned __int64 HalTscOffset;
  /* 0x00f0 */ unsigned __int64 HvlTscOffset;
  /* 0x00f8 */ unsigned __int64 SleeperThreadEnd;
  /* 0x0100 */ unsigned __int64 KernelReturnSystemPowerStateTimestamp;
  /* 0x0108 */ unsigned __int64 IoBoundedness;
  /* 0x0110 */ unsigned __int64 KernelDecompressTicks;
  /* 0x0118 */ unsigned __int64 KernelIoTicks;
  /* 0x0120 */ unsigned __int64 KernelCopyTicks;
  /* 0x0128 */ unsigned __int64 ReadCheckCount;
  /* 0x0130 */ unsigned __int64 KernelInitTicks;
  /* 0x0138 */ unsigned __int64 KernelResumeHiberFileTicks;
  /* 0x0140 */ unsigned __int64 KernelIoCpuTicks;
  /* 0x0148 */ unsigned __int64 KernelSharedBufferTicks;
  /* 0x0150 */ unsigned __int64 KernelAnimationTicks;
  /* 0x0158 */ unsigned __int64 KernelChecksumTicks;
  /* 0x0160 */ unsigned __int64 KernelChecksumIoTicks;
  /* 0x0168 */ union _LARGE_INTEGER AnimationStart;
  /* 0x0170 */ union _LARGE_INTEGER AnimationStop;
  /* 0x0178 */ unsigned long DeviceResumeTime;
  /* 0x0180 */ unsigned __int64 SecurePagesProcessed;
  /* 0x0188 */ unsigned __int64 BootPagesProcessed;
  /* 0x0190 */ unsigned __int64 KernelPagesProcessed;
  /* 0x0198 */ unsigned __int64 BootBytesWritten;
  /* 0x01a0 */ unsigned __int64 KernelBytesWritten;
  /* 0x01a8 */ unsigned __int64 BootPagesWritten;
  /* 0x01b0 */ unsigned __int64 KernelPagesWritten;
  /* 0x01b8 */ unsigned __int64 BytesWritten;
  /* 0x01c0 */ unsigned long PagesWritten;
  /* 0x01c4 */ unsigned long FileRuns;
  /* 0x01c8 */ unsigned long NoMultiStageResumeReason;
  /* 0x01cc */ unsigned long MaxHuffRatio;
  /* 0x01d0 */ unsigned __int64 AdjustedTotalResumeTime;
  /* 0x01d8 */ unsigned __int64 ResumeCompleteTimestamp;
} PO_HIBER_PERF, *PPO_HIBER_PERF; /* size: 0x01e0 */

typedef struct _PO_IRP_MANAGER
{
  /* 0x0000 */ struct _PO_IRP_QUEUE DeviceIrpQueue;
  /* 0x0008 */ struct _PO_IRP_QUEUE SystemIrpQueue;
} PO_IRP_MANAGER, *PPO_IRP_MANAGER; /* size: 0x0010 */

typedef struct _PO_IRP_QUEUE
{
  /* 0x0000 */ struct _IRP* CurrentIrp;
  /* 0x0004 */ struct _IRP* PendingIrpList;
} PO_IRP_QUEUE, *PPO_IRP_QUEUE; /* size: 0x0008 */

typedef struct _PO_NOTIFY_ORDER_LEVEL
{
  /* 0x0000 */ unsigned long DeviceCount;
  /* 0x0004 */ unsigned long ActiveCount;
  /* 0x0008 */ struct _LIST_ENTRY WaitSleep;
  /* 0x0010 */ struct _LIST_ENTRY ReadySleep;
  /* 0x0018 */ struct _LIST_ENTRY ReadyS0;
  /* 0x0020 */ struct _LIST_ENTRY WaitS0;
} PO_NOTIFY_ORDER_LEVEL, *PPO_NOTIFY_ORDER_LEVEL; /* size: 0x0028 */

typedef struct _PPC_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} PPC_DBGKD_CONTROL_SET, *PPPC_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _PPM_CONCURRENCY_ACCOUNTING
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned long Processors;
  /* 0x0008 */ unsigned long ActiveProcessors;
  /* 0x0010 */ unsigned __int64 LastUpdateTime;
  /* 0x0018 */ unsigned __int64 TotalTime;
  /* 0x0020 */ unsigned __int64 AccumulatedTime[1];
} PPM_CONCURRENCY_ACCOUNTING, *PPPM_CONCURRENCY_ACCOUNTING; /* size: 0x0028 */

typedef struct _PPM_COORDINATED_SELECTION
{
  /* 0x0000 */ unsigned long MaximumStates;
  /* 0x0004 */ unsigned long SelectedStates;
  /* 0x0008 */ unsigned long DefaultSelection;
  /* 0x000c */ unsigned long* Selection;
} PPM_COORDINATED_SELECTION, *PPPM_COORDINATED_SELECTION; /* size: 0x0010 */

typedef union _PPM_COORDINATED_SYNCHRONIZATION
{
  union
  {
    /* 0x0000 */ long AsLong;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long EnterProcessor : 14; /* bit position: 0 */
      /* 0x0000 */ unsigned long ExitProcessor : 14; /* bit position: 14 */
      /* 0x0000 */ unsigned long Transition : 2; /* bit position: 28 */
      /* 0x0000 */ unsigned long Entered : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long Reserved : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PPM_COORDINATED_SYNCHRONIZATION, *PPPM_COORDINATED_SYNCHRONIZATION; /* size: 0x0004 */

typedef struct _PPM_ENGINE_SETTINGS
{
  /* 0x0000 */ union _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];
  /* 0x0010 */ unsigned char ThrottlingPolicy;
  /* 0x0014 */ unsigned long PerfTimeCheck;
  /* 0x0018 */ unsigned char PerfHistoryCount[2];
  /* 0x001a */ unsigned char PerfMinPolicy[2];
  /* 0x001c */ unsigned char PerfMaxPolicy[2];
  /* 0x001e */ unsigned char PerfDecreaseTime[2];
  /* 0x0020 */ unsigned char PerfIncreaseTime[2];
  /* 0x0022 */ unsigned char PerfDecreasePolicy[2];
  /* 0x0024 */ unsigned char PerfIncreasePolicy[2];
  /* 0x0026 */ unsigned char PerfDecreaseThreshold[2];
  /* 0x0028 */ unsigned char PerfIncreaseThreshold[2];
  /* 0x002c */ unsigned long PerfBoostPolicy;
  /* 0x0030 */ unsigned long PerfBoostMode;
  /* 0x0034 */ unsigned long PerfReductionTolerance;
  /* 0x0038 */ unsigned long EnergyPerfPreference;
  /* 0x003c */ unsigned long AutonomousActivityWindow;
  /* 0x0040 */ unsigned char AutonomousPreference;
  /* 0x0041 */ unsigned char LatencyHintPerf[2];
  /* 0x0043 */ unsigned char LatencyHintUnpark[2];
  /* 0x0045 */ unsigned char DutyCycling;
  /* 0x0046 */ unsigned char ParkingPerfState[2];
  /* 0x0048 */ unsigned char DistributeUtility;
  /* 0x0049 */ unsigned char CoreParkingOverUtilizationThreshold;
  /* 0x004a */ unsigned char CoreParkingConcurrencyThreshold;
  /* 0x004b */ unsigned char CoreParkingHeadroomThreshold;
  /* 0x004c */ unsigned char CoreParkingDistributionThreshold;
  /* 0x004d */ unsigned char CoreParkingDecreasePolicy;
  /* 0x004e */ unsigned char CoreParkingIncreasePolicy;
  /* 0x0050 */ unsigned long CoreParkingDecreaseTime;
  /* 0x0054 */ unsigned long CoreParkingIncreaseTime;
  /* 0x0058 */ unsigned char CoreParkingMinCores[2];
  /* 0x005a */ unsigned char CoreParkingMaxCores[2];
  /* 0x005c */ unsigned char AllowScaling;
  /* 0x005d */ unsigned char IdleDisabled;
  /* 0x0060 */ unsigned long IdleTimeCheck;
  /* 0x0064 */ unsigned char IdleDemotePercent;
  /* 0x0065 */ unsigned char IdlePromotePercent;
  /* 0x0066 */ unsigned char HeteroDecreaseTime;
  /* 0x0067 */ unsigned char HeteroIncreaseTime;
  /* 0x0068 */ unsigned char HeteroDecreaseThreshold[32];
  /* 0x0088 */ unsigned char HeteroIncreaseThreshold[32];
  /* 0x00a8 */ unsigned char Class0FloorPerformance;
  /* 0x00a9 */ unsigned char Class1InitialPerformance;
  /* 0x00aa */ char __PADDING__[6];
} PPM_ENGINE_SETTINGS, *PPPM_ENGINE_SETTINGS; /* size: 0x00b0 */

typedef struct _PPM_FFH_THROTTLE_STATE_INFO
{
  /* 0x0000 */ unsigned char EnableLogging;
  /* 0x0004 */ unsigned long MismatchCount;
  /* 0x0008 */ unsigned char Initialized;
  /* 0x0010 */ unsigned __int64 LastValue;
  /* 0x0018 */ union _LARGE_INTEGER LastLogTickCount;
} PPM_FFH_THROTTLE_STATE_INFO, *PPPM_FFH_THROTTLE_STATE_INFO; /* size: 0x0020 */

typedef struct _PPM_IDLE_STATE
{
  /* 0x0000 */ struct _KAFFINITY_EX DomainMembers;
  /* 0x000c */ struct _UNICODE_STRING Name;
  /* 0x0014 */ unsigned long Latency;
  /* 0x0018 */ unsigned long BreakEvenDuration;
  /* 0x001c */ unsigned long Power;
  /* 0x0020 */ unsigned long StateFlags;
  /* 0x0024 */ struct _PPM_VETO_ACCOUNTING VetoAccounting;
  /* 0x0038 */ unsigned char StateType;
  /* 0x0039 */ unsigned char InterruptsEnabled;
  /* 0x003a */ unsigned char Interruptible;
  /* 0x003b */ unsigned char ContextRetained;
  /* 0x003c */ unsigned char CacheCoherent;
  /* 0x003d */ unsigned char WakesSpuriously;
  /* 0x003e */ unsigned char PlatformOnly;
  /* 0x003f */ unsigned char NoCState;
} PPM_IDLE_STATE, *PPPM_IDLE_STATE; /* size: 0x0040 */

typedef struct _PPM_IDLE_STATES
{
  /* 0x0000 */ unsigned char InterfaceVersion;
  /* 0x0001 */ unsigned char ForceIdle;
  /* 0x0002 */ unsigned char EstimateIdleDuration;
  /* 0x0003 */ unsigned char ExitLatencyTraceEnabled;
  /* 0x0004 */ unsigned char NonInterruptibleTransition;
  /* 0x0005 */ unsigned char UnaccountedTransition;
  /* 0x0006 */ unsigned char IdleDurationLimited;
  /* 0x0008 */ unsigned long ExitLatencyCountdown;
  /* 0x000c */ unsigned long TargetState;
  /* 0x0010 */ unsigned long ActualState;
  /* 0x0014 */ unsigned long OldState;
  /* 0x0018 */ unsigned long OverrideIndex;
  /* 0x001c */ unsigned long ProcessorIdleCount;
  /* 0x0020 */ unsigned long Type;
  /* 0x0024 */ unsigned short ReasonFlags;
  /* 0x0028 */ volatile unsigned __int64 InitiateWakeStamp;
  /* 0x0030 */ long PreviousStatus;
  /* 0x0034 */ unsigned long PreviousCancelReason;
  /* 0x0038 */ struct _KAFFINITY_EX PrimaryProcessorMask;
  /* 0x0044 */ struct _KAFFINITY_EX SecondaryProcessorMask;
  /* 0x0050 */ void* IdlePrepare /* function */;
  /* 0x0054 */ void* IdlePreExecute /* function */;
  /* 0x0058 */ void* IdleExecute /* function */;
  /* 0x005c */ void* IdlePreselect /* function */;
  /* 0x0060 */ void* IdleTest /* function */;
  /* 0x0064 */ void* IdleAvailabilityCheck /* function */;
  /* 0x0068 */ void* IdleComplete /* function */;
  /* 0x006c */ void* IdleCancel /* function */;
  /* 0x0070 */ void* IdleIsHalted /* function */;
  /* 0x0074 */ void* IdleInitiateWake /* function */;
  /* 0x0078 */ struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;
  /* 0x00c8 */ struct _KAFFINITY_EX DeepIdleSnapshot;
  /* 0x00d4 */ struct _PERFINFO_PPM_STATE_SELECTION* Tracing;
  /* 0x00d8 */ struct _PERFINFO_PPM_STATE_SELECTION* CoordinatedTracing;
  /* 0x00dc */ struct _PPM_SELECTION_MENU ProcessorMenu;
  /* 0x00e4 */ struct _PPM_SELECTION_MENU CoordinatedMenu;
  /* 0x00ec */ struct _PPM_COORDINATED_SELECTION CoordinatedSelection;
  /* 0x00fc */ struct _PPM_IDLE_STATE State[1];
  /* 0x013c */ long __PADDING__[1];
} PPM_IDLE_STATES, *PPPM_IDLE_STATES; /* size: 0x0140 */

typedef union _PPM_IDLE_SYNCHRONIZATION_STATE
{
  union
  {
    /* 0x0000 */ long AsLong;
    struct /* bitfield */
    {
      /* 0x0000 */ long RefCount : 24; /* bit position: 0 */
      /* 0x0000 */ unsigned long State : 8; /* bit position: 24 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PPM_IDLE_SYNCHRONIZATION_STATE, *PPPM_IDLE_SYNCHRONIZATION_STATE; /* size: 0x0004 */

typedef struct _PPM_PLATFORM_STATE
{
  /* 0x0000 */ unsigned long Latency;
  /* 0x0004 */ unsigned long BreakEvenDuration;
  /* 0x0008 */ struct _PPM_VETO_ACCOUNTING VetoAccounting;
  /* 0x001c */ unsigned char TransitionDebugger;
  /* 0x001d */ unsigned char Platform;
  /* 0x0020 */ unsigned long DependencyListCount;
  /* 0x0024 */ struct _KAFFINITY_EX Processors;
  /* 0x0030 */ struct _UNICODE_STRING Name;
  /* 0x0038 */ struct _PPM_SELECTION_DEPENDENCY* DependencyLists;
  /* 0x003c */ volatile union _PPM_COORDINATED_SYNCHRONIZATION Synchronization;
  /* 0x0040 */ volatile unsigned __int64 EnterTime;
  union
  {
    /* 0x0080 */ volatile long RefCount;
    /* 0x0080 */ unsigned char CacheAlign0[64];
  }; /* size: 0x0040 */
} PPM_PLATFORM_STATE, *PPPM_PLATFORM_STATE; /* size: 0x00c0 */

typedef struct _PPM_PLATFORM_STATES
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long InterfaceVersion;
  /* 0x0008 */ unsigned long ProcessorCount;
  /* 0x000c */ unsigned char CoordinatedInterface;
  /* 0x0010 */ void* IdleTest /* function */;
  /* 0x0014 */ void* IdlePreExecute /* function */;
  /* 0x0018 */ void* IdleComplete /* function */;
  /* 0x001c */ void* QueryPlatformStateResidency /* function */;
  /* 0x0020 */ struct _PLATFORM_IDLE_ACCOUNTING* Accounting;
  /* 0x0040 */ struct _PPM_PLATFORM_STATE State[1];
} PPM_PLATFORM_STATES, *PPPM_PLATFORM_STATES; /* size: 0x0100 */

typedef union _PPM_POLICY_SETTINGS_MASK
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long PerfDecreaseTime : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long PerfIncreaseTime : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long PerfDecreasePolicy : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long PerfIncreasePolicy : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long PerfDecreaseThreshold : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long PerfIncreaseThreshold : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned long PerfMinPolicy : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned long PerfMaxPolicy : 1; /* bit position: 7 */
        /* 0x0000 */ unsigned long PerfTimeCheck : 1; /* bit position: 8 */
        /* 0x0000 */ unsigned long PerfBoostPolicy : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long PerfBoostMode : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned long AllowThrottling : 1; /* bit position: 11 */
        /* 0x0000 */ unsigned long PerfHistoryCount : 1; /* bit position: 12 */
        /* 0x0000 */ unsigned long ParkingPerfState : 1; /* bit position: 13 */
        /* 0x0000 */ unsigned long LatencyHintPerf : 1; /* bit position: 14 */
        /* 0x0000 */ unsigned long LatencyHintUnpark : 1; /* bit position: 15 */
        /* 0x0000 */ unsigned long CoreParkingMinCores : 1; /* bit position: 16 */
        /* 0x0000 */ unsigned long CoreParkingMaxCores : 1; /* bit position: 17 */
        /* 0x0000 */ unsigned long CoreParkingDecreasePolicy : 1; /* bit position: 18 */
        /* 0x0000 */ unsigned long CoreParkingIncreasePolicy : 1; /* bit position: 19 */
        /* 0x0000 */ unsigned long CoreParkingDecreaseTime : 1; /* bit position: 20 */
        /* 0x0000 */ unsigned long CoreParkingIncreaseTime : 1; /* bit position: 21 */
        /* 0x0000 */ unsigned long CoreParkingOverUtilizationThreshold : 1; /* bit position: 22 */
        /* 0x0000 */ unsigned long CoreParkingDistributeUtility : 1; /* bit position: 23 */
        /* 0x0000 */ unsigned long CoreParkingConcurrencyThreshold : 1; /* bit position: 24 */
        /* 0x0000 */ unsigned long CoreParkingHeadroomThreshold : 1; /* bit position: 25 */
        /* 0x0000 */ unsigned long CoreParkingDistributionThreshold : 1; /* bit position: 26 */
        /* 0x0000 */ unsigned long IdleAllowScaling : 1; /* bit position: 27 */
        /* 0x0000 */ unsigned long IdleDisable : 1; /* bit position: 28 */
        /* 0x0000 */ unsigned long IdleTimeCheck : 1; /* bit position: 29 */
        /* 0x0000 */ unsigned long IdleDemoteThreshold : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long IdlePromoteThreshold : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long HeteroDecreaseTime : 1; /* bit position: 0 */
        /* 0x0004 */ unsigned long HeteroIncreaseTime : 1; /* bit position: 1 */
        /* 0x0004 */ unsigned long HeteroDecreaseThreshold : 1; /* bit position: 2 */
        /* 0x0004 */ unsigned long HeteroIncreaseThreshold : 1; /* bit position: 3 */
        /* 0x0004 */ unsigned long Class0FloorPerformance : 1; /* bit position: 4 */
        /* 0x0004 */ unsigned long Class1InitialPerformance : 1; /* bit position: 5 */
        /* 0x0004 */ unsigned long EnergyPerfPreference : 1; /* bit position: 6 */
        /* 0x0004 */ unsigned long AutonomousActivityWindow : 1; /* bit position: 7 */
        /* 0x0004 */ unsigned long AutonomousMode : 1; /* bit position: 8 */
        /* 0x0004 */ unsigned long DutyCycling : 1; /* bit position: 9 */
        /* 0x0004 */ unsigned long Spare : 22; /* bit position: 10 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} PPM_POLICY_SETTINGS_MASK, *PPPM_POLICY_SETTINGS_MASK; /* size: 0x0008 */

typedef struct _PPM_SELECTION_DEPENDENCY
{
  /* 0x0000 */ unsigned long Processor;
  /* 0x0004 */ struct _PPM_SELECTION_MENU Menu;
} PPM_SELECTION_DEPENDENCY, *PPPM_SELECTION_DEPENDENCY; /* size: 0x000c */

typedef struct _PPM_SELECTION_MENU
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _PPM_SELECTION_MENU_ENTRY* Entries;
} PPM_SELECTION_MENU, *PPPM_SELECTION_MENU; /* size: 0x0008 */

typedef struct _PPM_SELECTION_MENU_ENTRY
{
  /* 0x0000 */ unsigned char StrictDependency;
  /* 0x0001 */ unsigned char InitiatingState;
  /* 0x0002 */ unsigned char DependentState;
  /* 0x0004 */ unsigned long StateIndex;
  /* 0x0008 */ unsigned long Dependencies;
  /* 0x000c */ struct _PPM_SELECTION_DEPENDENCY* DependencyList;
} PPM_SELECTION_MENU_ENTRY, *PPPM_SELECTION_MENU_ENTRY; /* size: 0x0010 */

typedef struct _PPM_SELECTION_STATISTICS
{
  /* 0x0000 */ unsigned __int64 SelectedCount;
  /* 0x0008 */ unsigned __int64 VetoCount;
  /* 0x0010 */ unsigned __int64 PreVetoCount;
  /* 0x0018 */ unsigned __int64 WrongProcessorCount;
  /* 0x0020 */ unsigned __int64 LatencyCount;
  /* 0x0028 */ unsigned __int64 IdleDurationCount;
  /* 0x0030 */ unsigned __int64 DeviceDependencyCount;
  /* 0x0038 */ unsigned __int64 ProcessorDependencyCount;
  /* 0x0040 */ unsigned __int64 PlatformOnlyCount;
  /* 0x0048 */ unsigned __int64 InterruptibleCount;
  /* 0x0050 */ unsigned __int64 LegacyOverrideCount;
  /* 0x0058 */ unsigned __int64 CstateCheckCount;
  /* 0x0060 */ unsigned __int64 NoCStateCount;
  /* 0x0068 */ unsigned __int64 CoordinatedDependencyCount;
} PPM_SELECTION_STATISTICS, *PPPM_SELECTION_STATISTICS; /* size: 0x0070 */

typedef struct _PPM_VETO_ACCOUNTING
{
  /* 0x0000 */ volatile long VetoPresent;
  /* 0x0004 */ struct _LIST_ENTRY VetoListHead;
  /* 0x000c */ unsigned long PreallocatedVetoCount;
  /* 0x0010 */ struct _PPM_VETO_ENTRY* PreallocatedVetoList;
} PPM_VETO_ACCOUNTING, *PPPM_VETO_ACCOUNTING; /* size: 0x0014 */

typedef struct _PPM_VETO_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ unsigned long VetoReason;
  /* 0x000c */ unsigned long ReferenceCount;
} PPM_VETO_ENTRY, *PPPM_VETO_ENTRY; /* size: 0x0010 */

typedef struct _PP_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE* P;
  /* 0x0004 */ struct _GENERAL_LOOKASIDE* L;
} PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST; /* size: 0x0008 */

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER
{
  LookasideSmallIrpList = 0,
  LookasideMediumIrpList = 1,
  LookasideLargeIrpList = 2,
  LookasideMdlList = 3,
  LookasideCreateInfoList = 4,
  LookasideNameBufferList = 5,
  LookasideTwilightList = 6,
  LookasideCompletionList = 7,
  LookasideScratchBufferList = 8,
  LookasideMaximumList = 9,
} PP_NPAGED_LOOKASIDE_NUMBER, *PPP_NPAGED_LOOKASIDE_NUMBER;

typedef struct _PRIVATE_CACHE_MAP
{
  union
  {
    /* 0x0000 */ short NodeTypeCode;
    /* 0x0000 */ struct _PRIVATE_CACHE_MAP_FLAGS Flags;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long ReadAheadMask;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ union _LARGE_INTEGER FileOffset1;
  /* 0x0018 */ union _LARGE_INTEGER BeyondLastByte1;
  /* 0x0020 */ union _LARGE_INTEGER FileOffset2;
  /* 0x0028 */ union _LARGE_INTEGER BeyondLastByte2;
  /* 0x0030 */ unsigned long SequentialReadCount;
  /* 0x0034 */ unsigned long ReadAheadLength;
  /* 0x0038 */ union _LARGE_INTEGER ReadAheadOffset;
  /* 0x0040 */ union _LARGE_INTEGER ReadAheadBeyondLastByte;
  /* 0x0048 */ unsigned __int64 PrevReadAheadBeyondLastByte;
  /* 0x0050 */ unsigned long ReadAheadSpinLock;
  /* 0x0054 */ unsigned long PipelinedReadAheadRequestSize;
  /* 0x0058 */ unsigned long ReadAheadGrowth;
  /* 0x005c */ struct _LIST_ENTRY PrivateLinks;
  /* 0x0064 */ void* ReadAheadWorkItem;
} PRIVATE_CACHE_MAP, *PPRIVATE_CACHE_MAP; /* size: 0x0068 */

typedef struct _PRIVATE_CACHE_MAP_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long DontUse : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadAheadActive : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long ReadAheadEnabled : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long PagePriority : 3; /* bit position: 18 */
    /* 0x0000 */ unsigned long PipelineReadAheads : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long Available : 10; /* bit position: 22 */
  }; /* bitfield */
} PRIVATE_CACHE_MAP_FLAGS, *PPRIVATE_CACHE_MAP_FLAGS; /* size: 0x0004 */

typedef struct _PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET; /* size: 0x0014 */

typedef enum _PROCESSOR_CACHE_TYPE
{
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3,
} PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef struct _PROCESSOR_IDLE_CONSTRAINTS
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 IdleTime;
  /* 0x0010 */ unsigned __int64 ExpectedIdleDuration;
  /* 0x0018 */ unsigned __int64 MaxIdleDuration;
  /* 0x0020 */ unsigned long OverrideState;
  /* 0x0024 */ unsigned long TimeCheck;
  /* 0x0028 */ unsigned char PromotePercent;
  /* 0x0029 */ unsigned char DemotePercent;
  /* 0x002a */ unsigned char Parked;
  /* 0x002b */ unsigned char Interruptible;
  /* 0x002c */ unsigned char PlatformIdle;
  /* 0x002d */ unsigned char ExpectedWakeReason;
  /* 0x002e */ char __PADDING__[2];
} PROCESSOR_IDLE_CONSTRAINTS, *PPROCESSOR_IDLE_CONSTRAINTS; /* size: 0x0030 */

typedef struct _PROCESSOR_IDLE_DEPENDENCY
{
  /* 0x0000 */ unsigned long ProcessorIndex;
  /* 0x0004 */ unsigned char ExpectedState;
  /* 0x0005 */ unsigned char AllowDeeperStates;
  /* 0x0006 */ unsigned char LooseDependency;
  /* 0x0007 */ char __PADDING__[1];
} PROCESSOR_IDLE_DEPENDENCY, *PPROCESSOR_IDLE_DEPENDENCY; /* size: 0x0008 */

typedef struct _PROCESSOR_IDLE_PREPARE_INFO
{
  /* 0x0000 */ void* Context;
  /* 0x0008 */ struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;
  /* 0x0038 */ unsigned long DependencyCount;
  /* 0x003c */ unsigned long DependencyUsed;
  /* 0x0040 */ struct _PROCESSOR_IDLE_DEPENDENCY* DependencyArray;
  /* 0x0044 */ unsigned long PlatformIdleStateIndex;
  /* 0x0048 */ unsigned long ProcessorIdleStateIndex;
  /* 0x004c */ unsigned long IdleSelectFailureMask;
} PROCESSOR_IDLE_PREPARE_INFO, *PPROCESSOR_IDLE_PREPARE_INFO; /* size: 0x0050 */

typedef struct _PROCESSOR_NUMBER
{
  /* 0x0000 */ unsigned short Group;
  /* 0x0002 */ unsigned char Number;
  /* 0x0003 */ unsigned char Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; /* size: 0x0004 */

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0008 */ struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];
} PROCESSOR_PLATFORM_STATE_RESIDENCIES, *PPROCESSOR_PLATFORM_STATE_RESIDENCIES; /* size: 0x0018 */

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY
{
  /* 0x0000 */ unsigned __int64 Residency;
  /* 0x0008 */ unsigned __int64 TransitionCount;
} PROCESSOR_PLATFORM_STATE_RESIDENCY, *PPROCESSOR_PLATFORM_STATE_RESIDENCY; /* size: 0x0010 */

typedef struct _PROCESSOR_POWER_STATE
{
  /* 0x0000 */ struct _PPM_IDLE_STATES* IdleStates;
  /* 0x0004 */ struct _PROC_IDLE_ACCOUNTING* IdleAccounting;
  /* 0x0008 */ unsigned __int64 IdleTimeLast;
  /* 0x0010 */ unsigned __int64 IdleTimeTotal;
  /* 0x0018 */ volatile unsigned __int64 IdleTimeEntry;
  /* 0x0020 */ unsigned __int64 IdleTimeExpiration;
  /* 0x0028 */ unsigned char NonInterruptibleTransition;
  /* 0x0029 */ unsigned char PepWokenTransition;
  /* 0x002a */ unsigned char Class;
  /* 0x002c */ unsigned long TargetIdleState;
  /* 0x0030 */ struct _PROC_IDLE_POLICY IdlePolicy;
  /* 0x0038 */ volatile union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
  /* 0x0040 */ struct _PROC_FEEDBACK PerfFeedback;
  /* 0x00c8 */ enum _PROC_HYPERVISOR_STATE Hypervisor;
  /* 0x00cc */ unsigned long LastSysTime;
  /* 0x00d0 */ unsigned long WmiDispatchPtr;
  /* 0x00d4 */ long WmiInterfaceEnabled;
  /* 0x00d8 */ struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
  /* 0x00f8 */ struct _KDPC PerfActionDpc;
  /* 0x0118 */ volatile long PerfActionMask;
  /* 0x0120 */ struct _PROC_IDLE_SNAP HvIdleCheck;
  /* 0x0130 */ struct _PROC_PERF_CHECK* PerfCheck;
  /* 0x0134 */ struct _PROC_PERF_DOMAIN* Domain;
  /* 0x0138 */ struct _PROC_PERF_CONSTRAINT* PerfConstraint;
  /* 0x013c */ struct _PPM_CONCURRENCY_ACCOUNTING* Concurrency;
  /* 0x0140 */ struct _PROC_PERF_LOAD* Load;
  /* 0x0144 */ struct _PROC_PERF_HISTORY* PerfHistory;
  /* 0x0148 */ unsigned char GuaranteedPerformancePercent;
  /* 0x0149 */ unsigned char HvTargetState;
  /* 0x014a */ unsigned char Parked;
  /* 0x014c */ unsigned long LatestPerformancePercent;
  /* 0x0150 */ unsigned long AveragePerformancePercent;
  /* 0x0154 */ unsigned long LatestAffinitizedPercent;
  /* 0x0158 */ unsigned long RelativePerformance;
  /* 0x015c */ unsigned long Utility;
  /* 0x0160 */ unsigned long AffinitizedUtility;
  union
  {
    /* 0x0168 */ unsigned __int64 SnapTimeLast;
    /* 0x0168 */ unsigned __int64 EnergyConsumed;
  }; /* size: 0x0008 */
  /* 0x0170 */ unsigned __int64 ActiveTime;
  /* 0x0178 */ unsigned __int64 TotalTime;
} PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE; /* size: 0x0180 */

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA
{
  /* 0x0000 */ struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
} PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA; /* size: 0x0060 */

typedef struct _PROCESS_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 BytesRead;
  /* 0x0008 */ unsigned __int64 BytesWritten;
  /* 0x0010 */ unsigned __int64 ReadOperationCount;
  /* 0x0018 */ unsigned __int64 WriteOperationCount;
  /* 0x0020 */ unsigned __int64 FlushOperationCount;
} PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS; /* size: 0x0028 */

typedef struct _PROCESS_ENERGY_VALUES
{
  /* 0x0000 */ unsigned __int64 Cycles[2][4];
  /* 0x0040 */ unsigned __int64 DiskEnergy;
  /* 0x0048 */ unsigned __int64 NetworkTailEnergy;
  /* 0x0050 */ unsigned __int64 MBBTailEnergy;
  /* 0x0058 */ unsigned __int64 NetworkTxRxBytes;
  /* 0x0060 */ unsigned __int64 MBBTxRxBytes;
  union
  {
    /* 0x0068 */ unsigned long Foreground : 1; /* bit position: 0 */
    /* 0x0068 */ unsigned long WindowInformation;
  }; /* size: 0x0004 */
  /* 0x006c */ unsigned long PixelArea;
  /* 0x0070 */ __int64 PixelReportTimestamp;
  /* 0x0078 */ unsigned __int64 PixelTime;
  /* 0x0080 */ __int64 ForegroundReportTimestamp;
  /* 0x0088 */ unsigned __int64 ForegroundTime;
} PROCESS_ENERGY_VALUES, *PPROCESS_ENERGY_VALUES; /* size: 0x0090 */

typedef enum _PROCESS_SECTION_TYPE
{
  ProcessSectionData = 0,
  ProcessSectionImage = 1,
  ProcessSectionImageNx = 2,
  ProcessSectionPagefileBacked = 3,
  ProcessSectionMax = 4,
} PROCESS_SECTION_TYPE, *PPROCESS_SECTION_TYPE;

typedef enum _PROCESS_VA_TYPE
{
  ProcessVAImage = 0,
  ProcessVASection = 1,
  ProcessVAPrivate = 2,
  ProcessVAMax = 3,
} PROCESS_VA_TYPE, *PPROCESS_VA_TYPE;

typedef struct _PROC_FEEDBACK
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0008 */ unsigned __int64 CyclesLast;
  /* 0x0010 */ unsigned __int64 CyclesActive;
  /* 0x0018 */ struct _PROC_FEEDBACK_COUNTER* Counters[2];
  /* 0x0020 */ unsigned __int64 LastUpdateTime;
  /* 0x0028 */ unsigned __int64 UnscaledTime;
  /* 0x0030 */ volatile __int64 UnaccountedTime;
  /* 0x0038 */ unsigned __int64 ScaledTime[2];
  /* 0x0048 */ unsigned __int64 UnaccountedKernelTime;
  /* 0x0050 */ unsigned __int64 PerformanceScaledKernelTime;
  /* 0x0058 */ unsigned long UserTimeLast;
  /* 0x005c */ unsigned long KernelTimeLast;
  /* 0x0060 */ unsigned __int64 IdleGenerationNumberLast;
  /* 0x0068 */ unsigned __int64 HvActiveTimeLast;
  /* 0x0070 */ unsigned __int64 StallCyclesLast;
  /* 0x0078 */ unsigned __int64 StallTime;
  /* 0x0080 */ unsigned char KernelTimesIndex;
  /* 0x0081 */ char __PADDING__[7];
} PROC_FEEDBACK, *PPROC_FEEDBACK; /* size: 0x0088 */

typedef struct _PROC_FEEDBACK_COUNTER
{
  union
  {
    /* 0x0000 */ void* InstantaneousRead /* function */;
    /* 0x0000 */ void* DifferentialRead /* function */;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned __int64 LastActualCount;
  /* 0x0010 */ unsigned __int64 LastReferenceCount;
  /* 0x0018 */ unsigned long CachedValue;
  /* 0x0020 */ unsigned char Affinitized;
  /* 0x0021 */ unsigned char Differential;
  /* 0x0022 */ unsigned char Scaling;
  /* 0x0024 */ unsigned long Context;
} PROC_FEEDBACK_COUNTER, *PPROC_FEEDBACK_COUNTER; /* size: 0x0028 */

typedef enum _PROC_HYPERVISOR_STATE
{
  ProcHypervisorNone = 0,
  ProcHypervisorPresent = 1,
  ProcHypervisorPower = 2,
  ProcHypervisorHvCounters = 3,
} PROC_HYPERVISOR_STATE, *PPROC_HYPERVISOR_STATE;

typedef struct _PROC_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long TotalTransitions;
  /* 0x0008 */ unsigned long ResetCount;
  /* 0x000c */ unsigned long AbortCount;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ unsigned __int64 PriorIdleTime;
  /* 0x0020 */ enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
  /* 0x0028 */ struct _PROC_IDLE_STATE_ACCOUNTING State[1];
} PROC_IDLE_ACCOUNTING, *PPROC_IDLE_ACCOUNTING; /* size: 0x0400 */

typedef struct _PROC_IDLE_POLICY
{
  /* 0x0000 */ unsigned char PromotePercent;
  /* 0x0001 */ unsigned char DemotePercent;
  /* 0x0002 */ unsigned char PromotePercentBase;
  /* 0x0003 */ unsigned char DemotePercentBase;
  /* 0x0004 */ unsigned char AllowScaling;
} PROC_IDLE_POLICY, *PPROC_IDLE_POLICY; /* size: 0x0005 */

typedef struct _PROC_IDLE_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 Idle;
} PROC_IDLE_SNAP, *PPROC_IDLE_SNAP; /* size: 0x0010 */

typedef struct _PROC_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned long CancelCount;
  /* 0x000c */ unsigned long FailureCount;
  /* 0x0010 */ unsigned long SuccessCount;
  /* 0x0014 */ unsigned long InvalidBucketIndex;
  /* 0x0018 */ unsigned __int64 MinTime;
  /* 0x0020 */ unsigned __int64 MaxTime;
  /* 0x0028 */ struct _PPM_SELECTION_STATISTICS SelectionStatistics;
  /* 0x0098 */ struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
} PROC_IDLE_STATE_ACCOUNTING, *PPROC_IDLE_STATE_ACCOUNTING; /* size: 0x03d8 */

typedef struct _PROC_IDLE_STATE_BUCKET
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 MinTime;
  /* 0x0010 */ unsigned __int64 MaxTime;
  /* 0x0018 */ unsigned long Count;
  /* 0x001c */ long __PADDING__[1];
} PROC_IDLE_STATE_BUCKET, *PPROC_IDLE_STATE_BUCKET; /* size: 0x0020 */

typedef struct _PROC_PERF_CHECK
{
  /* 0x0000 */ unsigned __int64 LastActive;
  /* 0x0008 */ unsigned __int64 LastTime;
  /* 0x0010 */ unsigned __int64 LastStall;
  /* 0x0018 */ struct _PROC_PERF_CHECK_SNAP Snap;
  /* 0x0068 */ struct _PROC_PERF_CHECK_SNAP TempSnap;
  /* 0x00b8 */ unsigned char TaggedThreadPercent[2];
  /* 0x00ba */ unsigned char Class0FloorPerfSelection;
  /* 0x00bb */ unsigned char Class1MinimumPerfSelection;
  /* 0x00bc */ long __PADDING__[1];
} PROC_PERF_CHECK, *PPROC_PERF_CHECK; /* size: 0x00c0 */

typedef struct _PROC_PERF_CHECK_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 Active;
  /* 0x0010 */ unsigned __int64 Stall;
  /* 0x0018 */ unsigned __int64 FrequencyScaledActive;
  /* 0x0020 */ unsigned __int64 PerformanceScaledActive;
  /* 0x0028 */ unsigned __int64 PerformanceScaledKernelActive;
  /* 0x0030 */ unsigned __int64 CyclesActive;
  /* 0x0038 */ unsigned __int64 CyclesAffinitized;
  /* 0x0040 */ unsigned __int64 TaggedThreadCycles[2];
} PROC_PERF_CHECK_SNAP, *PPROC_PERF_CHECK_SNAP; /* size: 0x0050 */

typedef struct _PROC_PERF_CONSTRAINT
{
  /* 0x0000 */ struct _KPRCB* Prcb;
  /* 0x0004 */ unsigned long PerfContext;
  /* 0x0008 */ unsigned long ProcCap;
  /* 0x000c */ unsigned long ProcFloor;
  /* 0x0010 */ unsigned long PlatformCap;
  /* 0x0014 */ unsigned long ThermalCap;
  /* 0x0018 */ unsigned long LimitReasons;
  /* 0x0020 */ unsigned __int64 PlatformCapStartTime;
  /* 0x0028 */ unsigned long TargetPercent;
  /* 0x002c */ unsigned long SelectedPercent;
  /* 0x0030 */ unsigned long SelectedFrequency;
  /* 0x0034 */ unsigned long PreviousFrequency;
  /* 0x0038 */ unsigned long PreviousPercent;
  /* 0x003c */ unsigned long LatestFrequencyPercent;
  /* 0x0040 */ unsigned __int64 SelectedState;
  /* 0x0048 */ unsigned char Force;
  /* 0x0049 */ char __PADDING__[7];
} PROC_PERF_CONSTRAINT, *PPROC_PERF_CONSTRAINT; /* size: 0x0050 */

typedef struct _PROC_PERF_DOMAIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _KPRCB* Master;
  /* 0x000c */ struct _KAFFINITY_EX Members;
  /* 0x0018 */ unsigned long ProcessorCount;
  /* 0x001c */ unsigned char Class;
  /* 0x001d */ unsigned char Spare[3];
  /* 0x0020 */ struct _PROC_PERF_CONSTRAINT* Processors;
  /* 0x0024 */ void* GetFFHThrottleState /* function */;
  /* 0x0028 */ void* TimeWindowHandler /* function */;
  /* 0x002c */ void* BoostPolicyHandler /* function */;
  /* 0x0030 */ void* BoostModeHandler /* function */;
  /* 0x0034 */ void* EnergyPerfPreferenceHandler /* function */;
  /* 0x0038 */ void* AutonomousActivityWindowHandler /* function */;
  /* 0x003c */ void* AutonomousModeHandler /* function */;
  /* 0x0040 */ void* ReinitializeHandler /* function */;
  /* 0x0044 */ void* PerfSelectionHandler /* function */;
  /* 0x0048 */ void* PerfControlHandler /* function */;
  /* 0x004c */ unsigned long MaxFrequency;
  /* 0x0050 */ unsigned long NominalFrequency;
  /* 0x0054 */ unsigned long MaxPercent;
  /* 0x0058 */ unsigned long MinPerfPercent;
  /* 0x005c */ unsigned long MinThrottlePercent;
  /* 0x0060 */ unsigned __int64 MinimumRelativePerformance;
  /* 0x0068 */ unsigned __int64 NominalRelativePerformance;
  /* 0x0070 */ unsigned char Coordination;
  /* 0x0071 */ unsigned char HardPlatformCap;
  /* 0x0072 */ unsigned char AffinitizeControl;
  /* 0x0073 */ unsigned char EfficientThrottle;
  /* 0x0074 */ unsigned char AutonomousMode;
  /* 0x0078 */ unsigned long SelectedPercent;
  /* 0x007c */ unsigned long SelectedFrequency;
  /* 0x0080 */ unsigned long DesiredPercent;
  /* 0x0084 */ unsigned long MaxPolicyPercent;
  /* 0x0088 */ unsigned long MinPolicyPercent;
  /* 0x008c */ unsigned long ConstrainedMaxPercent;
  /* 0x0090 */ unsigned long ConstrainedMinPercent;
  /* 0x0094 */ unsigned long GuaranteedPercent;
  /* 0x0098 */ unsigned long TolerancePercent;
  /* 0x00a0 */ unsigned __int64 SelectedState;
  /* 0x00a8 */ unsigned __int64 PerfChangeTime;
  /* 0x00b0 */ unsigned long PerfChangeIntervalCount;
  /* 0x00b4 */ unsigned char Force;
  /* 0x00b5 */ unsigned char ProvideGuidance;
  /* 0x00b6 */ char __PADDING__[2];
} PROC_PERF_DOMAIN, *PPROC_PERF_DOMAIN; /* size: 0x00b8 */

typedef struct _PROC_PERF_HISTORY
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Slot;
  /* 0x0008 */ unsigned long UtilityTotal;
  /* 0x000c */ unsigned long AffinitizedUtilityTotal;
  /* 0x0010 */ unsigned long FrequencyTotal;
  /* 0x0014 */ unsigned long TaggedPercentTotal[2];
  /* 0x001c */ struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];
} PROC_PERF_HISTORY, *PPROC_PERF_HISTORY; /* size: 0x0024 */

typedef struct _PROC_PERF_HISTORY_ENTRY
{
  /* 0x0000 */ unsigned short Utility;
  /* 0x0002 */ unsigned short AffinitizedUtility;
  /* 0x0004 */ unsigned char Frequency;
  /* 0x0005 */ unsigned char TaggedPercent[2];
  /* 0x0007 */ char __PADDING__[1];
} PROC_PERF_HISTORY_ENTRY, *PPROC_PERF_HISTORY_ENTRY; /* size: 0x0008 */

typedef struct _PROC_PERF_LOAD
{
  /* 0x0000 */ unsigned char BusyPercentage;
  /* 0x0001 */ unsigned char FrequencyPercentage;
} PROC_PERF_LOAD, *PPROC_PERF_LOAD; /* size: 0x0002 */

typedef struct _PROVIDER_BINARY_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned char ConsumersNotified;
  /* 0x0009 */ unsigned char Spare[3];
  /* 0x000c */ unsigned long DebugIdSize;
  /* 0x0010 */ union _CVDD DebugId;
} PROVIDER_BINARY_ENTRY, *PPROVIDER_BINARY_ENTRY; /* size: 0x002c */

typedef union _PS_CLIENT_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ unsigned long ImpersonationData;
    /* 0x0000 */ void* ImpersonationToken;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ImpersonationLevel : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long EffectiveOnly : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT; /* size: 0x0004 */

typedef struct _PS_PROPERTY_SET
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long Lock;
} PS_PROPERTY_SET, *PPS_PROPERTY_SET; /* size: 0x000c */

typedef enum _PS_PROTECTED_SIGNER
{
  PsProtectedSignerNone = 0,
  PsProtectedSignerAuthenticode = 1,
  PsProtectedSignerCodeGen = 2,
  PsProtectedSignerAntimalware = 3,
  PsProtectedSignerLsa = 4,
  PsProtectedSignerWindows = 5,
  PsProtectedSignerWinTcb = 6,
  PsProtectedSignerMax = 7,
} PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER;

typedef struct _PS_PROTECTION
{
  union
  {
    /* 0x0000 */ unsigned char Level;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Type : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char Audit : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Signer : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} PS_PROTECTION, *PPS_PROTECTION; /* size: 0x0001 */

typedef enum _PS_RESOURCE_TYPE
{
  PsResourceNonPagedPool = 0,
  PsResourcePagedPool = 1,
  PsResourcePageFile = 2,
  PsResourceWorkingSet = 3,
  PsResourceMax = 4,
} PS_RESOURCE_TYPE, *PPS_RESOURCE_TYPE;

typedef struct _PS_WAKE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NotificationChannel;
  /* 0x0008 */ unsigned __int64 WakeCounters[5];
  /* 0x0030 */ unsigned __int64 NoWakeCounter;
} PS_WAKE_INFORMATION, *PPS_WAKE_INFORMATION; /* size: 0x0038 */

typedef enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsWakeReasonPreserveProcess = 4,
  PsMaxWakeReasons = 5,
} PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef struct _PTE_TRACKER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _MDL* Mdl;
  /* 0x000c */ unsigned long Count;
  /* 0x0010 */ void* SystemVa;
  /* 0x0014 */ void* StartVa;
  /* 0x0018 */ unsigned long Offset;
  /* 0x001c */ unsigned long Length;
  /* 0x0020 */ unsigned long Page;
  struct /* bitfield */
  {
    /* 0x0024 */ unsigned long IoMapping : 1; /* bit position: 0 */
    /* 0x0024 */ unsigned long Matched : 1; /* bit position: 1 */
    /* 0x0024 */ unsigned long CacheAttribute : 2; /* bit position: 2 */
    /* 0x0024 */ unsigned long GuardPte : 1; /* bit position: 4 */
    /* 0x0024 */ unsigned long Spare : 27; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0028 */ void* StackTrace[7];
} PTE_TRACKER, *PPTE_TRACKER; /* size: 0x0044 */

typedef struct _QUAD
{
  union
  {
    /* 0x0000 */ __int64 UseThisFieldToCopy;
    /* 0x0000 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
} QUAD, *PQUAD; /* size: 0x0008 */

typedef enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  RegNtPreQueryKeyName = 47,
  RegNtPostQueryKeyName = 48,
  MaxRegNtNotifyClass = 49,
} REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef struct _RELATION_LIST
{
  /* 0x0000 */ struct _DEVICE_OBJECT_LIST* DeviceObjectList;
  /* 0x0004 */ unsigned char Sorted;
  /* 0x0005 */ char __PADDING__[3];
} RELATION_LIST, *PRELATION_LIST; /* size: 0x0008 */

typedef struct _RELATIVE_SYMLINK_INFO
{
  /* 0x0000 */ unsigned short ExposedNamespaceLength;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned short DeviceNameLength;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ struct _RELATIVE_SYMLINK_INFO* InteriorMountPoint;
  /* 0x000c */ struct _UNICODE_STRING OpenedName;
} RELATIVE_SYMLINK_INFO, *PRELATIVE_SYMLINK_INFO; /* size: 0x0014 */

typedef struct _REMOTE_PORT_VIEW
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long ViewSize;
  /* 0x0008 */ void* ViewBase;
} REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW; /* size: 0x000c */

typedef enum _REQUESTER_TYPE
{
  KernelRequester = 0,
  UserProcessRequester = 1,
  UserSharedServiceRequester = 2,
} REQUESTER_TYPE, *PREQUESTER_TYPE;

typedef struct _REQUEST_MAILBOX
{
  /* 0x0000 */ struct _REQUEST_MAILBOX* Next;
  /* 0x0004 */ unsigned long RequestSummary;
  /* 0x0008 */ struct _KREQUEST_PACKET RequestPacket;
  /* 0x0018 */ volatile long* NodeTargetCountAddr;
  /* 0x001c */ volatile long NodeTargetCount;
} REQUEST_MAILBOX, *PREQUEST_MAILBOX; /* size: 0x0020 */

typedef struct _RH_OP_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ struct _IRP* OplockRequestIrp;
  /* 0x000c */ struct _FILE_OBJECT* OplockRequestFileObject;
  /* 0x0010 */ struct _EPROCESS* OplockRequestProcess;
  /* 0x0014 */ struct _ETHREAD* OplockOwnerThread;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _LIST_ENTRY AtomicLinks;
} RH_OP_CONTEXT, *PRH_OP_CONTEXT; /* size: 0x0024 */

typedef struct _RSDS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _GUID Guid;
  /* 0x0014 */ unsigned long Age;
  /* 0x0018 */ char PdbName[1];
  /* 0x0019 */ char __PADDING__[3];
} RSDS, *PRSDS; /* size: 0x001c */

typedef struct _RTLP_RANGE_LIST_ENTRY
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  union
  {
    struct // _TAG_UNNAMED_183
    {
      /* 0x0010 */ void* UserData;
      /* 0x0014 */ void* Owner;
    } /* size: 0x0008 */ Allocated;
    struct // _TAG_UNNAMED_184
    {
      /* 0x0010 */ struct _LIST_ENTRY ListHead;
    } /* size: 0x0008 */ Merged;
  }; /* size: 0x0008 */
  /* 0x0018 */ unsigned char Attributes;
  /* 0x0019 */ unsigned char PublicFlags;
  /* 0x001a */ unsigned short PrivateFlags;
  /* 0x001c */ struct _LIST_ENTRY ListEntry;
  /* 0x0024 */ long __PADDING__[1];
} RTLP_RANGE_LIST_ENTRY, *PRTLP_RANGE_LIST_ENTRY; /* size: 0x0028 */

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;
  /* 0x0004 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0008 */ unsigned long Flags;
} RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME; /* size: 0x000c */

typedef struct _RTL_ATOM_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ volatile long ReferenceCount;
  /* 0x0008 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x000c */ struct _HANDLE_TABLE* ExHandleTable;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long NumberOfBuckets;
  /* 0x0018 */ struct _RTL_ATOM_TABLE_ENTRY* Buckets[1];
} RTL_ATOM_TABLE, *PRTL_ATOM_TABLE; /* size: 0x001c */

typedef struct _RTL_ATOM_TABLE_ENTRY
{
  /* 0x0000 */ struct _RTL_ATOM_TABLE_ENTRY* HashLink;
  /* 0x0004 */ unsigned short HandleIndex;
  /* 0x0006 */ unsigned short Atom;
  /* 0x0008 */ struct _RTL_ATOM_TABLE_REFERENCE Reference;
  /* 0x0018 */ unsigned char NameLength;
  /* 0x001a */ wchar_t Name[1];
} RTL_ATOM_TABLE_ENTRY, *PRTL_ATOM_TABLE_ENTRY; /* size: 0x001c */

typedef struct _RTL_ATOM_TABLE_REFERENCE
{
  /* 0x0000 */ struct _LIST_ENTRY LowBoxList;
  /* 0x0008 */ unsigned long LowBoxID;
  /* 0x000c */ unsigned short ReferenceCount;
  /* 0x000e */ unsigned short Flags;
} RTL_ATOM_TABLE_REFERENCE, *PRTL_ATOM_TABLE_REFERENCE; /* size: 0x0010 */

typedef struct _RTL_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS BalancedRoot;
  /* 0x0010 */ void* OrderedPointer;
  /* 0x0014 */ unsigned long WhichOrderedElement;
  /* 0x0018 */ unsigned long NumberGenericTableElements;
  /* 0x001c */ unsigned long DepthOfTree;
  /* 0x0020 */ struct _RTL_BALANCED_LINKS* RestartKey;
  /* 0x0024 */ unsigned long DeleteCount;
  /* 0x0028 */ void* CompareRoutine /* function */;
  /* 0x002c */ void* AllocateRoutine /* function */;
  /* 0x0030 */ void* FreeRoutine /* function */;
  /* 0x0034 */ void* TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE; /* size: 0x0038 */

typedef struct _RTL_AVL_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; /* size: 0x0004 */

typedef struct _RTL_BALANCED_LINKS
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS* Parent;
  /* 0x0004 */ struct _RTL_BALANCED_LINKS* LeftChild;
  /* 0x0008 */ struct _RTL_BALANCED_LINKS* RightChild;
  /* 0x000c */ char Balance;
  /* 0x000d */ unsigned char Reserved[3];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS; /* size: 0x0010 */

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE* Left;
      /* 0x0004 */ struct _RTL_BALANCED_NODE* Right;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0008 */ unsigned char Red : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned char Balance : 2; /* bit position: 0 */
    /* 0x0008 */ unsigned long ParentValue;
  }; /* size: 0x0004 */
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; /* size: 0x000c */

typedef struct _RTL_BITMAP
{
  /* 0x0000 */ unsigned long SizeOfBitMap;
  /* 0x0004 */ unsigned long* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; /* size: 0x0008 */

typedef struct _RTL_CRITICAL_SECTION
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
  /* 0x0004 */ long LockCount;
  /* 0x0008 */ long RecursionCount;
  /* 0x000c */ void* OwningThread;
  /* 0x0010 */ void* LockSemaphore;
  /* 0x0014 */ unsigned long SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; /* size: 0x0018 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ struct _RTL_CRITICAL_SECTION* CriticalSection;
  /* 0x0008 */ struct _LIST_ENTRY ProcessLocksList;
  /* 0x0010 */ unsigned long EntryCount;
  /* 0x0014 */ unsigned long ContentionCount;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned short CreatorBackTraceIndexHigh;
  /* 0x001e */ unsigned short SpareUSHORT;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG; /* size: 0x0020 */

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Length;
  /* 0x0004 */ unsigned long TimeStamp;
  /* 0x0008 */ struct _STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR; /* size: 0x0010 */

typedef struct _RTL_DYNAMIC_HASH_TABLE
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Shift;
  /* 0x0008 */ unsigned long TableSize;
  /* 0x000c */ unsigned long Pivot;
  /* 0x0010 */ unsigned long DivisorMask;
  /* 0x0014 */ unsigned long NumEntries;
  /* 0x0018 */ unsigned long NonEmptyBuckets;
  /* 0x001c */ unsigned long NumEnumerators;
  /* 0x0020 */ void* Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE; /* size: 0x0024 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0004 */ struct _LIST_ENTRY* PrevLinkage;
  /* 0x0008 */ unsigned long Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT; /* size: 0x000c */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  /* 0x0008 */ unsigned long Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY; /* size: 0x000c */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  union
  {
    /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    /* 0x0000 */ struct _LIST_ENTRY* CurEntry;
  }; /* size: 0x000c */
  /* 0x000c */ struct _LIST_ENTRY* ChainHead;
  /* 0x0010 */ unsigned long BucketIndex;
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR; /* size: 0x0014 */

typedef enum _RTL_GENERIC_COMPARE_RESULTS
{
  GenericLessThan = 0,
  GenericGreaterThan = 1,
  GenericEqual = 2,
} RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef struct _RTL_RANGE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ void* UserData;
  /* 0x0014 */ void* Owner;
  /* 0x0018 */ unsigned char Attributes;
  /* 0x0019 */ unsigned char Flags;
  /* 0x001a */ char __PADDING__[6];
} RTL_RANGE, *PRTL_RANGE; /* size: 0x0020 */

typedef struct _RTL_RANGE_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long Count;
  /* 0x0010 */ unsigned long Stamp;
} RTL_RANGE_LIST, *PRTL_RANGE_LIST; /* size: 0x0014 */

typedef struct _RTL_RB_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
  /* 0x0004 */ struct _RTL_BALANCED_NODE* Min;
} RTL_RB_TREE, *PRTL_RB_TREE; /* size: 0x0008 */

typedef struct _RTL_SPLAY_LINKS
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* Parent;
  /* 0x0004 */ struct _RTL_SPLAY_LINKS* LeftChild;
  /* 0x0008 */ struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS; /* size: 0x000c */

typedef struct _RTL_SRWLOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Shared : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} RTL_SRWLOCK, *PRTL_SRWLOCK; /* size: 0x0004 */

typedef struct _RTL_TIME_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _TIME_FIELDS StandardStart;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _TIME_FIELDS DaylightStart;
  /* 0x00a8 */ long DaylightBias;
} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION; /* size: 0x00ac */

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  /* 0x0000 */ unsigned long MaximumLength;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DebugFlags;
  /* 0x0010 */ void* ConsoleHandle;
  /* 0x0014 */ unsigned long ConsoleFlags;
  /* 0x0018 */ void* StandardInput;
  /* 0x001c */ void* StandardOutput;
  /* 0x0020 */ void* StandardError;
  /* 0x0024 */ struct _CURDIR CurrentDirectory;
  /* 0x0030 */ struct _UNICODE_STRING DllPath;
  /* 0x0038 */ struct _UNICODE_STRING ImagePathName;
  /* 0x0040 */ struct _UNICODE_STRING CommandLine;
  /* 0x0048 */ void* Environment;
  /* 0x004c */ unsigned long StartingX;
  /* 0x0050 */ unsigned long StartingY;
  /* 0x0054 */ unsigned long CountX;
  /* 0x0058 */ unsigned long CountY;
  /* 0x005c */ unsigned long CountCharsX;
  /* 0x0060 */ unsigned long CountCharsY;
  /* 0x0064 */ unsigned long FillAttribute;
  /* 0x0068 */ unsigned long WindowFlags;
  /* 0x006c */ unsigned long ShowWindowFlags;
  /* 0x0070 */ struct _UNICODE_STRING WindowTitle;
  /* 0x0078 */ struct _UNICODE_STRING DesktopInfo;
  /* 0x0080 */ struct _UNICODE_STRING ShellInfo;
  /* 0x0088 */ struct _UNICODE_STRING RuntimeData;
  /* 0x0090 */ struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  /* 0x0290 */ unsigned long EnvironmentSize;
  /* 0x0294 */ unsigned long EnvironmentVersion;
  /* 0x0298 */ void* PackageDependencyData;
  /* 0x029c */ unsigned long ProcessGroupId;
  /* 0x02a0 */ unsigned long LoaderThreads;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS; /* size: 0x02a4 */

struct _SCSI_REQUEST_BLOCK;

typedef struct _SECTION
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE SectionNode;
  /* 0x000c */ unsigned long StartingVpn;
  /* 0x0010 */ unsigned long EndingVpn;
  union // _TAG_UNNAMED_185
  {
    union
    {
      /* 0x0014 */ struct _CONTROL_AREA* ControlArea;
      /* 0x0014 */ struct _FILE_OBJECT* FileObject;
      struct /* bitfield */
      {
        /* 0x0014 */ unsigned long RemoteImageFileObject : 1; /* bit position: 0 */
        /* 0x0014 */ unsigned long RemoteDataFileObject : 1; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0018 */ unsigned __int64 SizeOfSection;
  union // _TAG_UNNAMED_31
  {
    union
    {
      /* 0x0020 */ unsigned long LongFlags;
      /* 0x0020 */ struct _MMSECTION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  struct /* bitfield */
  {
    /* 0x0024 */ unsigned long InitialPageProtection : 12; /* bit position: 0 */
    /* 0x0024 */ unsigned long SessionId : 19; /* bit position: 12 */
    /* 0x0024 */ unsigned long NoValidationNeeded : 1; /* bit position: 31 */
  }; /* bitfield */
} SECTION, *PSECTION; /* size: 0x0028 */

typedef struct _SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ void* TransferAddress;
  /* 0x0004 */ unsigned long ZeroBits;
  /* 0x0008 */ unsigned long MaximumStackSize;
  /* 0x000c */ unsigned long CommittedStackSize;
  /* 0x0010 */ unsigned long SubSystemType;
  union
  {
    struct
    {
      /* 0x0014 */ unsigned short SubSystemMinorVersion;
      /* 0x0016 */ unsigned short SubSystemMajorVersion;
    }; /* size: 0x0004 */
    /* 0x0014 */ unsigned long SubSystemVersion;
  }; /* size: 0x0004 */
  union
  {
    struct
    {
      /* 0x0018 */ unsigned short MajorOperatingSystemVersion;
      /* 0x001a */ unsigned short MinorOperatingSystemVersion;
    }; /* size: 0x0004 */
    /* 0x0018 */ unsigned long OperatingSystemVersion;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned short ImageCharacteristics;
  /* 0x001e */ unsigned short DllCharacteristics;
  /* 0x0020 */ unsigned short Machine;
  /* 0x0022 */ unsigned char ImageContainsCode;
  union
  {
    /* 0x0023 */ unsigned char ImageFlags;
    struct /* bitfield */
    {
      /* 0x0023 */ unsigned char ComPlusNativeReady : 1; /* bit position: 0 */
      /* 0x0023 */ unsigned char ComPlusILOnly : 1; /* bit position: 1 */
      /* 0x0023 */ unsigned char ImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0023 */ unsigned char ImageMappedFlat : 1; /* bit position: 3 */
      /* 0x0023 */ unsigned char BaseBelow4gb : 1; /* bit position: 4 */
      /* 0x0023 */ unsigned char ComPlusPrefer32bit : 1; /* bit position: 5 */
      /* 0x0023 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0024 */ unsigned long LoaderFlags;
  /* 0x0028 */ unsigned long ImageFileSize;
  /* 0x002c */ unsigned long CheckSum;
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION; /* size: 0x0030 */

typedef struct _SECTION_OBJECT
{
  /* 0x0000 */ void* StartingVa;
  /* 0x0004 */ void* EndingVa;
  /* 0x0008 */ void* Parent;
  /* 0x000c */ void* LeftChild;
  /* 0x0010 */ void* RightChild;
  /* 0x0014 */ struct _SEGMENT_OBJECT* Segment;
} SECTION_OBJECT, *PSECTION_OBJECT; /* size: 0x0018 */

typedef struct _SECTION_OBJECT_POINTERS
{
  /* 0x0000 */ void* DataSectionObject;
  /* 0x0004 */ void* SharedCacheMap;
  /* 0x0008 */ void* ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS; /* size: 0x000c */

typedef struct _SECURITY_CLIENT_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x000c */ void* ClientToken;
  /* 0x0010 */ unsigned char DirectlyAccessClientToken;
  /* 0x0011 */ unsigned char DirectAccessEffectiveOnly;
  /* 0x0012 */ unsigned char ServerIsRemote;
  /* 0x0014 */ struct _TOKEN_CONTROL ClientTokenControl;
} SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT; /* size: 0x003c */

typedef struct _SECURITY_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ void* Owner;
  /* 0x0008 */ void* Group;
  /* 0x000c */ struct _ACL* Sacl;
  /* 0x0010 */ struct _ACL* Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR; /* size: 0x0014 */

typedef struct _SECURITY_DESCRIPTOR_RELATIVE
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ unsigned long Owner;
  /* 0x0008 */ unsigned long Group;
  /* 0x000c */ unsigned long Sacl;
  /* 0x0010 */ unsigned long Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PSECURITY_DESCRIPTOR_RELATIVE; /* size: 0x0014 */

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ unsigned char ContextTrackingMode;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; /* size: 0x000c */

typedef struct _SECURITY_SUBJECT_CONTEXT
{
  /* 0x0000 */ void* ClientToken;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ void* PrimaryToken;
  /* 0x000c */ void* ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT; /* size: 0x0010 */

typedef struct _SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0004 */ unsigned long TotalNumberOfPtes;
  /* 0x0008 */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x000c */ unsigned long NumberOfCommittedPages;
  /* 0x0010 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0018 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0018 */ void* BasedAddress;
  }; /* size: 0x0004 */
  /* 0x001c */ struct _EX_PUSH_LOCK SegmentLock;
  union // _TAG_UNNAMED_186
  {
    union
    {
      /* 0x0020 */ unsigned long ImageCommitment;
      /* 0x0020 */ struct _EPROCESS* CreatingProcess;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union // _TAG_UNNAMED_187
  {
    union
    {
      /* 0x0024 */ struct _MI_SECTION_IMAGE_INFORMATION* ImageInformation;
      /* 0x0024 */ void* FirstMappedVa;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  /* 0x0028 */ struct _MMPTE* PrototypePte;
  /* 0x002c */ long __PADDING__[1];
} SEGMENT, *PSEGMENT; /* size: 0x0030 */

typedef struct _SEGMENT_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short TotalNumberOfPtes4132 : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned short Spare0 : 2; /* bit position: 10 */
      /* 0x0000 */ unsigned short LargePages : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned short DebugSymbolsLoaded : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned short WriteCombined : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short NoCache : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short Short0;
  }; /* size: 0x0002 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned char FloppyMedia : 1; /* bit position: 0 */
      /* 0x0002 */ unsigned char DefaultProtectionMask : 5; /* bit position: 1 */
      /* 0x0002 */ unsigned char Binary32 : 1; /* bit position: 6 */
      /* 0x0002 */ unsigned char ContainsDebug : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0002 */ unsigned char UChar1;
  }; /* size: 0x0001 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ForceCollision : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char ImageSigningType : 3; /* bit position: 1 */
      /* 0x0003 */ unsigned char ImageSigningLevel : 4; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0003 */ unsigned char UChar2;
  }; /* size: 0x0001 */
} SEGMENT_FLAGS, *PSEGMENT_FLAGS; /* size: 0x0004 */

typedef struct _SEGMENT_OBJECT
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0004 */ unsigned long TotalNumberOfPtes;
  /* 0x0008 */ union _LARGE_INTEGER SizeOfSegment;
  /* 0x0010 */ unsigned long NonExtendedPtes;
  /* 0x0014 */ unsigned long ImageCommitment;
  /* 0x0018 */ struct _CONTROL_AREA* ControlArea;
  /* 0x001c */ struct _SUBSECTION* Subsection;
  /* 0x0020 */ struct _MMSECTION_FLAGS* MmSectionFlags;
  /* 0x0024 */ struct _MMSUBSECTION_FLAGS* MmSubSectionFlags;
} SEGMENT_OBJECT, *PSEGMENT_OBJECT; /* size: 0x0028 */

typedef struct _SEP_AUDIT_POLICY
{
  /* 0x0000 */ struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;
  /* 0x001e */ unsigned char PolicySetStatus;
} SEP_AUDIT_POLICY, *PSEP_AUDIT_POLICY; /* size: 0x001f */

typedef struct _SEP_LOGON_SESSION_REFERENCES
{
  /* 0x0000 */ struct _SEP_LOGON_SESSION_REFERENCES* Next;
  /* 0x0004 */ struct _LUID LogonId;
  /* 0x000c */ struct _LUID BuddyLogonId;
  /* 0x0014 */ long ReferenceCount;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _DEVICE_MAP* pDeviceMap;
  /* 0x0020 */ void* Token;
  /* 0x0024 */ struct _UNICODE_STRING AccountName;
  /* 0x002c */ struct _UNICODE_STRING AuthorityName;
  /* 0x0034 */ struct _SEP_LOWBOX_HANDLES_TABLE LowBoxHandlesTable;
  /* 0x003c */ struct _EX_PUSH_LOCK SharedDataLock;
  /* 0x0040 */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* SharedClaimAttributes;
  /* 0x0044 */ struct _SEP_SID_VALUES_BLOCK* SharedSidValues;
  /* 0x0048 */ struct _OB_HANDLE_REVOCATION_BLOCK RevocationBlock;
  /* 0x0058 */ struct _ESILO* ServerSilo;
} SEP_LOGON_SESSION_REFERENCES, *PSEP_LOGON_SESSION_REFERENCES; /* size: 0x005c */

typedef struct _SEP_LOWBOX_HANDLES_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x000c */ long ReferenceCount;
  /* 0x0010 */ void* PackageSid;
  /* 0x0014 */ unsigned long HandleCount;
  /* 0x0018 */ void** Handles;
} SEP_LOWBOX_HANDLES_ENTRY, *PSEP_LOWBOX_HANDLES_ENTRY; /* size: 0x001c */

typedef struct _SEP_LOWBOX_HANDLES_TABLE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
} SEP_LOWBOX_HANDLES_TABLE, *PSEP_LOWBOX_HANDLES_TABLE; /* size: 0x0008 */

typedef struct _SEP_LOWBOX_NUMBER_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x000c */ long ReferenceCount;
  /* 0x0010 */ void* PackageSid;
  /* 0x0014 */ unsigned long LowboxNumber;
  /* 0x0018 */ void* AtomTable;
} SEP_LOWBOX_NUMBER_ENTRY, *PSEP_LOWBOX_NUMBER_ENTRY; /* size: 0x001c */

typedef struct _SEP_LOWBOX_NUMBER_MAPPING
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _RTL_BITMAP Bitmap;
  /* 0x000c */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
  /* 0x0010 */ unsigned char Active;
  /* 0x0011 */ char __PADDING__[3];
} SEP_LOWBOX_NUMBER_MAPPING, *PSEP_LOWBOX_NUMBER_MAPPING; /* size: 0x0014 */

typedef struct _SEP_SID_VALUES_BLOCK
{
  /* 0x0000 */ unsigned long BlockLength;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ unsigned long SidCount;
  /* 0x000c */ unsigned long SidValuesStart;
} SEP_SID_VALUES_BLOCK, *PSEP_SID_VALUES_BLOCK; /* size: 0x0010 */

typedef struct _SEP_TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned __int64 Present;
  /* 0x0008 */ unsigned __int64 Enabled;
  /* 0x0010 */ unsigned __int64 EnabledByDefault;
} SEP_TOKEN_PRIVILEGES, *PSEP_TOKEN_PRIVILEGES; /* size: 0x0018 */

struct _SERVER_SILO_MONITOR;

typedef struct _SESSION_LOWBOX_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;
} SESSION_LOWBOX_MAP, *PSESSION_LOWBOX_MAP; /* size: 0x0020 */

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO
{
  /* 0x0000 */ struct _OBJECT_NAME_INFORMATION* ImageFileName;
} SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO; /* size: 0x0004 */

typedef struct _SHARED_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned long OpenCount;
  /* 0x0008 */ union _LARGE_INTEGER FileSize;
  /* 0x0010 */ struct _LIST_ENTRY BcbList;
  /* 0x0018 */ union _LARGE_INTEGER SectionSize;
  /* 0x0020 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0028 */ union _LARGE_INTEGER ValidDataGoal;
  /* 0x0030 */ struct _VACB* InitialVacbs[4];
  /* 0x0040 */ struct _VACB** Vacbs;
  /* 0x0044 */ struct _EX_FAST_REF FileObjectFastRef;
  /* 0x0048 */ struct _EX_PUSH_LOCK VacbLock;
  /* 0x004c */ unsigned long DirtyPages;
  /* 0x0050 */ struct _LIST_ENTRY LoggedStreamLinks;
  /* 0x0058 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0060 */ unsigned long Flags;
  /* 0x0064 */ long Status;
  /* 0x0068 */ struct _MBCB* Mbcb;
  /* 0x006c */ void* Section;
  /* 0x0070 */ struct _KEVENT* CreateEvent;
  /* 0x0074 */ struct _KEVENT* WaitOnActiveCount;
  /* 0x0078 */ unsigned long PagesToWrite;
  /* 0x0080 */ __int64 BeyondLastFlush;
  /* 0x0088 */ struct _CACHE_MANAGER_CALLBACKS* Callbacks;
  /* 0x008c */ void* LazyWriteContext;
  /* 0x0090 */ struct _LIST_ENTRY PrivateList;
  union
  {
    /* 0x0098 */ struct _LOGGED_STREAM_CALLBACK_V1 V1;
    /* 0x0098 */ struct _LOGGED_STREAM_CALLBACK_V2 V2;
  }; /* size: 0x0008 */
  /* 0x00a0 */ union _LARGE_INTEGER LargestLSN;
  /* 0x00a8 */ unsigned long DirtyPageThreshold;
  /* 0x00ac */ unsigned long LazyWritePassCount;
  /* 0x00b0 */ struct _CACHE_UNINITIALIZE_EVENT* UninitializeEvent;
  /* 0x00b4 */ struct _FAST_MUTEX BcbLock;
  /* 0x00d8 */ union _LARGE_INTEGER LastUnmapBehindOffset;
  /* 0x00e0 */ struct _KEVENT Event;
  /* 0x00f0 */ union _LARGE_INTEGER HighWaterMappingOffset;
  /* 0x00f8 */ struct _PRIVATE_CACHE_MAP PrivateCacheMap;
  /* 0x0160 */ void* WriteBehindWorkQueueEntry;
  /* 0x0164 */ struct _VOLUME_CACHE_MAP* VolumeCacheMap;
  /* 0x0168 */ unsigned long ProcImagePathHash;
  /* 0x016c */ unsigned long WritesInProgress;
  /* 0x0170 */ unsigned long AsyncReadRequestCount;
  /* 0x0174 */ long __PADDING__[1];
} SHARED_CACHE_MAP, *PSHARED_CACHE_MAP; /* size: 0x0178 */

typedef struct _SHARED_CACHE_MAP_LIST_CURSOR
{
  /* 0x0000 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0008 */ unsigned long Flags;
} SHARED_CACHE_MAP_LIST_CURSOR, *PSHARED_CACHE_MAP_LIST_CURSOR; /* size: 0x000c */

typedef struct _SID
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char SubAuthorityCount;
  /* 0x0002 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* 0x0008 */ unsigned long SubAuthority[1];
} SID, *PSID; /* size: 0x000c */

typedef struct _SID_AND_ATTRIBUTES
{
  /* 0x0000 */ void* Sid;
  /* 0x0004 */ unsigned long Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES; /* size: 0x0008 */

typedef struct _SID_AND_ATTRIBUTES_HASH
{
  /* 0x0000 */ unsigned long SidCount;
  /* 0x0004 */ struct _SID_AND_ATTRIBUTES* SidAttr;
  /* 0x0008 */ unsigned long Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH; /* size: 0x0088 */

typedef struct _SID_IDENTIFIER_AUTHORITY
{
  /* 0x0000 */ unsigned char Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; /* size: 0x0006 */

typedef struct _SINGLE_LIST_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; /* size: 0x0004 */

typedef union _SLIST_HEADER
{
  union
  {
    /* 0x0000 */ unsigned __int64 Alignment;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY Next;
      /* 0x0004 */ unsigned short Depth;
      /* 0x0006 */ unsigned short CpuId;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} SLIST_HEADER, *PSLIST_HEADER; /* size: 0x0008 */

typedef struct _STACK_TABLE
{
  /* 0x0000 */ unsigned short NumStackTraces;
  /* 0x0002 */ unsigned short TraceCapacity;
  /* 0x0004 */ struct _OBJECT_REF_TRACE* StackTrace[16];
  /* 0x0044 */ unsigned short StackTableHash[16381];
  /* 0x803e */ char __PADDING__[2];
} STACK_TABLE, *PSTACK_TABLE; /* size: 0x8040 */

typedef struct _STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ char* Buffer;
} STRING, *PSTRING; /* size: 0x0008 */

typedef struct _STRING32
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ unsigned long Buffer;
} STRING32, *PSTRING32; /* size: 0x0008 */

typedef struct _STRING64
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0008 */ unsigned __int64 Buffer;
} STRING64, *PSTRING64; /* size: 0x0010 */

typedef struct _SUBSECTION
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0004 */ struct _MMPTE* SubsectionBase;
  /* 0x0008 */ struct _SUBSECTION* NextSubsection;
  union
  {
    /* 0x000c */ struct _MI_FILE_EXTENTS* FileExtents;
    /* 0x000c */ struct _RTL_AVL_TREE GlobalPerSessionHead;
    /* 0x000c */ struct _MI_PER_SESSION_PROTOS* SessionDriverProtos;
  }; /* size: 0x0004 */
  union // _TAG_UNNAMED_188
  {
    union
    {
      /* 0x0010 */ unsigned long LongFlags;
      /* 0x0010 */ struct _MMSUBSECTION_FLAGS SubsectionFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0014 */ unsigned long StartingSector;
  /* 0x0018 */ unsigned long NumberOfFullSectors;
  /* 0x001c */ unsigned long PtesInSubsection;
  union // _TAG_UNNAMED_189
  {
    /* 0x0020 */ unsigned long NumberOfChildViews;
  } /* size: 0x0004 */ u1;
  union
  {
    /* 0x0024 */ unsigned long UnusedPtes;
    /* 0x0024 */ unsigned long AlignmentNoAccessPtes;
  }; /* size: 0x0004 */
} SUBSECTION, *PSUBSECTION; /* size: 0x0028 */

typedef struct _SYNCH_COUNTERS
{
  /* 0x0000 */ unsigned long SpinLockAcquireCount;
  /* 0x0004 */ unsigned long SpinLockContentionCount;
  /* 0x0008 */ unsigned long SpinLockSpinCount;
  /* 0x000c */ unsigned long IpiSendRequestBroadcastCount;
  /* 0x0010 */ unsigned long IpiSendRequestRoutineCount;
  /* 0x0014 */ unsigned long IpiSendSoftwareInterruptCount;
  /* 0x0018 */ unsigned long ExInitializeResourceCount;
  /* 0x001c */ unsigned long ExReInitializeResourceCount;
  /* 0x0020 */ unsigned long ExDeleteResourceCount;
  /* 0x0024 */ unsigned long ExecutiveResourceAcquiresCount;
  /* 0x0028 */ unsigned long ExecutiveResourceContentionsCount;
  /* 0x002c */ unsigned long ExecutiveResourceReleaseExclusiveCount;
  /* 0x0030 */ unsigned long ExecutiveResourceReleaseSharedCount;
  /* 0x0034 */ unsigned long ExecutiveResourceConvertsCount;
  /* 0x0038 */ unsigned long ExAcqResExclusiveAttempts;
  /* 0x003c */ unsigned long ExAcqResExclusiveAcquiresExclusive;
  /* 0x0040 */ unsigned long ExAcqResExclusiveAcquiresExclusiveRecursive;
  /* 0x0044 */ unsigned long ExAcqResExclusiveWaits;
  /* 0x0048 */ unsigned long ExAcqResExclusiveNotAcquires;
  /* 0x004c */ unsigned long ExAcqResSharedAttempts;
  /* 0x0050 */ unsigned long ExAcqResSharedAcquiresExclusive;
  /* 0x0054 */ unsigned long ExAcqResSharedAcquiresShared;
  /* 0x0058 */ unsigned long ExAcqResSharedAcquiresSharedRecursive;
  /* 0x005c */ unsigned long ExAcqResSharedWaits;
  /* 0x0060 */ unsigned long ExAcqResSharedNotAcquires;
  /* 0x0064 */ unsigned long ExAcqResSharedStarveExclusiveAttempts;
  /* 0x0068 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresExclusive;
  /* 0x006c */ unsigned long ExAcqResSharedStarveExclusiveAcquiresShared;
  /* 0x0070 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
  /* 0x0074 */ unsigned long ExAcqResSharedStarveExclusiveWaits;
  /* 0x0078 */ unsigned long ExAcqResSharedStarveExclusiveNotAcquires;
  /* 0x007c */ unsigned long ExAcqResSharedWaitForExclusiveAttempts;
  /* 0x0080 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresExclusive;
  /* 0x0084 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresShared;
  /* 0x0088 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
  /* 0x008c */ unsigned long ExAcqResSharedWaitForExclusiveWaits;
  /* 0x0090 */ unsigned long ExAcqResSharedWaitForExclusiveNotAcquires;
  /* 0x0094 */ unsigned long ExSetResOwnerPointerExclusive;
  /* 0x0098 */ unsigned long ExSetResOwnerPointerSharedNew;
  /* 0x009c */ unsigned long ExSetResOwnerPointerSharedOld;
  /* 0x00a0 */ unsigned long ExTryToAcqExclusiveAttempts;
  /* 0x00a4 */ unsigned long ExTryToAcqExclusiveAcquires;
  /* 0x00a8 */ unsigned long ExBoostExclusiveOwner;
  /* 0x00ac */ unsigned long ExBoostSharedOwners;
  /* 0x00b0 */ unsigned long ExEtwSynchTrackingNotificationsCount;
  /* 0x00b4 */ unsigned long ExEtwSynchTrackingNotificationsAccountedCount;
} SYNCH_COUNTERS, *PSYNCH_COUNTERS; /* size: 0x00b8 */

typedef struct _SYSPTES_HEADER
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead[16];
  /* 0x0080 */ unsigned long Count;
  /* 0x0084 */ unsigned long NumberOfEntries;
  /* 0x0088 */ unsigned long NumberOfEntriesPeak;
} SYSPTES_HEADER, *PSYSPTES_HEADER; /* size: 0x008c */

typedef struct _SYSTEM_POWER_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ struct POWER_ACTION_POLICY PowerButton;
  /* 0x0010 */ struct POWER_ACTION_POLICY SleepButton;
  /* 0x001c */ struct POWER_ACTION_POLICY LidClose;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE LidOpenWake;
  /* 0x002c */ unsigned long Reserved;
  /* 0x0030 */ struct POWER_ACTION_POLICY Idle;
  /* 0x003c */ unsigned long IdleTimeout;
  /* 0x0040 */ unsigned char IdleSensitivity;
  /* 0x0041 */ unsigned char DynamicThrottle;
  /* 0x0042 */ unsigned char Spare2[2];
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* 0x004c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep;
  /* 0x0050 */ unsigned long WinLogonFlags;
  /* 0x0054 */ unsigned long Spare3;
  /* 0x0058 */ unsigned long DozeS4Timeout;
  /* 0x005c */ unsigned long BroadcastCapacityResolution;
  /* 0x0060 */ struct SYSTEM_POWER_LEVEL DischargePolicy[4];
  /* 0x00c0 */ unsigned long VideoTimeout;
  /* 0x00c4 */ unsigned char VideoDimDisplay;
  /* 0x00c8 */ unsigned long VideoReserved[3];
  /* 0x00d4 */ unsigned long SpindownTimeout;
  /* 0x00d8 */ unsigned char OptimizeForPower;
  /* 0x00d9 */ unsigned char FanThrottleTolerance;
  /* 0x00da */ unsigned char ForcedThrottle;
  /* 0x00db */ unsigned char MinThrottle;
  /* 0x00dc */ struct POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY; /* size: 0x00e8 */

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long TargetSystemState : 4; /* bit position: 8 */
      /* 0x0000 */ unsigned long EffectiveSystemState : 4; /* bit position: 12 */
      /* 0x0000 */ unsigned long CurrentSystemState : 4; /* bit position: 16 */
      /* 0x0000 */ unsigned long IgnoreHibernationPath : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long PseudoTransition : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long Reserved2 : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long ContextAsUlong;
  }; /* size: 0x0004 */
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT; /* size: 0x0004 */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x001c */ void* EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID ClientId;
  /* 0x0028 */ void* ActiveRpcHandle;
  /* 0x002c */ void* ThreadLocalStoragePointer;
  /* 0x0030 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ void* CsrClientThread;
  /* 0x0040 */ void* Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ void* WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ void* ReservedForDebuggerInstrumentation[16];
  /* 0x010c */ void* SystemReserved1[38];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;
  /* 0x01ac */ unsigned long InstrumentationCallbackSp;
  /* 0x01b0 */ unsigned long InstrumentationCallbackPreviousPc;
  /* 0x01b4 */ unsigned long InstrumentationCallbackPreviousSp;
  /* 0x01b8 */ unsigned char InstrumentationCallbackDisabled;
  /* 0x01b9 */ unsigned char SpareBytes[23];
  /* 0x01d0 */ unsigned long TxFsContext;
  /* 0x01d4 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID RealClientId;
  /* 0x06bc */ void* GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ void* GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ void* glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ void* glReserved2;
  /* 0x0be0 */ void* glSectionInfo;
  /* 0x0be4 */ void* glSection;
  /* 0x0be8 */ void* glTable;
  /* 0x0bec */ void* glCurrentRC;
  /* 0x0bf0 */ void* glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0c */ void* DeallocationStack;
  /* 0x0e10 */ void* TlsSlots[64];
  /* 0x0f10 */ struct _LIST_ENTRY TlsLinks;
  /* 0x0f18 */ void* Vdm;
  /* 0x0f1c */ void* ReservedForNtRpc;
  /* 0x0f20 */ void* DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ void* Instrumentation[9];
  /* 0x0f50 */ struct _GUID ActivityId;
  /* 0x0f60 */ void* SubProcessTag;
  /* 0x0f64 */ void* PerflibData;
  /* 0x0f68 */ void* EtwTraceData;
  /* 0x0f6c */ void* WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x0f74 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x0f74 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x0f74 */ unsigned char ReservedPad0;
      /* 0x0f75 */ unsigned char ReservedPad1;
      /* 0x0f76 */ unsigned char ReservedPad2;
      /* 0x0f77 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0f78 */ unsigned long GuaranteedStackBytes;
  /* 0x0f7c */ void* ReservedForPerf;
  /* 0x0f80 */ void* ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ void* SavedPriorityState;
  /* 0x0f8c */ unsigned long ReservedForCodeCoverage;
  /* 0x0f90 */ void* ThreadPoolData;
  /* 0x0f94 */ void** TlsExpansionSlots;
  /* 0x0f98 */ unsigned long MuiGeneration;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ void* NlsCache;
  /* 0x0fa4 */ void* pShimData;
  /* 0x0fa8 */ unsigned short HeapVirtualAffinity;
  /* 0x0faa */ unsigned short LowFragHeapDataSlot;
  /* 0x0fac */ void* CurrentTransactionHandle;
  /* 0x0fb0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x0fb4 */ void* FlsData;
  /* 0x0fb8 */ void* PreferredLanguages;
  /* 0x0fbc */ void* UserPrefLanguages;
  /* 0x0fc0 */ void* MergedPrefLanguages;
  /* 0x0fc4 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x0fc8 */ volatile unsigned short CrossTebFlags;
    /* 0x0fc8 */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0fca */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x0fca */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x0fca */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x0fca */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x0fca */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x0fca */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x0fca */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x0fca */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x0fca */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x0fca */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x0fca */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x0fca */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x0fca */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x0fca */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x0fca */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x0fca */ unsigned short SpareSameTebBits : 2; /* bit position: 14 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0fcc */ void* TxnScopeEnterCallback;
  /* 0x0fd0 */ void* TxnScopeExitCallback;
  /* 0x0fd4 */ void* TxnScopeContext;
  /* 0x0fd8 */ unsigned long LockCount;
  /* 0x0fdc */ long WowTebOffset;
  /* 0x0fe0 */ void* ResourceRetValue;
  /* 0x0fe4 */ void* ReservedForWdf;
  /* 0x0fe8 */ unsigned __int64 ReservedForCrt;
  /* 0x0ff0 */ struct _GUID EffectiveContainerId;
} TEB, *PTEB; /* size: 0x1000 */

typedef struct _TEB32
{
  /* 0x0000 */ struct _NT_TIB32 NtTib;
  /* 0x001c */ unsigned long EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID32 ClientId;
  /* 0x0028 */ unsigned long ActiveRpcHandle;
  /* 0x002c */ unsigned long ThreadLocalStoragePointer;
  /* 0x0030 */ unsigned long ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ unsigned long CsrClientThread;
  /* 0x0040 */ unsigned long Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ unsigned long WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ unsigned long ReservedForDebuggerInstrumentation[16];
  /* 0x010c */ unsigned long SystemReserved1[38];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ unsigned long ActivationContextStackPointer;
  /* 0x01ac */ unsigned long InstrumentationCallbackSp;
  /* 0x01b0 */ unsigned long InstrumentationCallbackPreviousPc;
  /* 0x01b4 */ unsigned long InstrumentationCallbackPreviousSp;
  /* 0x01b8 */ unsigned char InstrumentationCallbackDisabled;
  /* 0x01b9 */ unsigned char SpareBytes[23];
  /* 0x01d0 */ unsigned long TxFsContext;
  /* 0x01d4 */ struct _GDI_TEB_BATCH32 GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID32 RealClientId;
  /* 0x06bc */ unsigned long GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ unsigned long GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ unsigned long glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ unsigned long glReserved2;
  /* 0x0be0 */ unsigned long glSectionInfo;
  /* 0x0be4 */ unsigned long glSection;
  /* 0x0be8 */ unsigned long glTable;
  /* 0x0bec */ unsigned long glCurrentRC;
  /* 0x0bf0 */ unsigned long glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _STRING32 StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0c */ unsigned long DeallocationStack;
  /* 0x0e10 */ unsigned long TlsSlots[64];
  /* 0x0f10 */ struct LIST_ENTRY32 TlsLinks;
  /* 0x0f18 */ unsigned long Vdm;
  /* 0x0f1c */ unsigned long ReservedForNtRpc;
  /* 0x0f20 */ unsigned long DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ unsigned long Instrumentation[9];
  /* 0x0f50 */ struct _GUID ActivityId;
  /* 0x0f60 */ unsigned long SubProcessTag;
  /* 0x0f64 */ unsigned long PerflibData;
  /* 0x0f68 */ unsigned long EtwTraceData;
  /* 0x0f6c */ unsigned long WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x0f74 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x0f74 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x0f74 */ unsigned char ReservedPad0;
      /* 0x0f75 */ unsigned char ReservedPad1;
      /* 0x0f76 */ unsigned char ReservedPad2;
      /* 0x0f77 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0f78 */ unsigned long GuaranteedStackBytes;
  /* 0x0f7c */ unsigned long ReservedForPerf;
  /* 0x0f80 */ unsigned long ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ unsigned long SavedPriorityState;
  /* 0x0f8c */ unsigned long ReservedForCodeCoverage;
  /* 0x0f90 */ unsigned long ThreadPoolData;
  /* 0x0f94 */ unsigned long TlsExpansionSlots;
  /* 0x0f98 */ unsigned long MuiGeneration;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ unsigned long NlsCache;
  /* 0x0fa4 */ unsigned long pShimData;
  /* 0x0fa8 */ unsigned short HeapVirtualAffinity;
  /* 0x0faa */ unsigned short LowFragHeapDataSlot;
  /* 0x0fac */ unsigned long CurrentTransactionHandle;
  /* 0x0fb0 */ unsigned long ActiveFrame;
  /* 0x0fb4 */ unsigned long FlsData;
  /* 0x0fb8 */ unsigned long PreferredLanguages;
  /* 0x0fbc */ unsigned long UserPrefLanguages;
  /* 0x0fc0 */ unsigned long MergedPrefLanguages;
  /* 0x0fc4 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x0fc8 */ volatile unsigned short CrossTebFlags;
    /* 0x0fc8 */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0fca */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x0fca */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x0fca */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x0fca */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x0fca */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x0fca */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x0fca */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x0fca */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x0fca */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x0fca */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x0fca */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x0fca */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x0fca */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x0fca */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x0fca */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x0fca */ unsigned short SpareSameTebBits : 2; /* bit position: 14 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0fcc */ unsigned long TxnScopeEnterCallback;
  /* 0x0fd0 */ unsigned long TxnScopeExitCallback;
  /* 0x0fd4 */ unsigned long TxnScopeContext;
  /* 0x0fd8 */ unsigned long LockCount;
  /* 0x0fdc */ long WowTebOffset;
  /* 0x0fe0 */ unsigned long ResourceRetValue;
  /* 0x0fe4 */ unsigned long ReservedForWdf;
  /* 0x0fe8 */ unsigned __int64 ReservedForCrt;
  /* 0x0ff0 */ struct _GUID EffectiveContainerId;
} TEB32, *PTEB32; /* size: 0x1000 */

typedef struct _TEB64
{
  /* 0x0000 */ struct _NT_TIB64 NtTib;
  /* 0x0038 */ unsigned __int64 EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID64 ClientId;
  /* 0x0050 */ unsigned __int64 ActiveRpcHandle;
  /* 0x0058 */ unsigned __int64 ThreadLocalStoragePointer;
  /* 0x0060 */ unsigned __int64 ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ unsigned __int64 CsrClientThread;
  /* 0x0078 */ unsigned __int64 Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x0100 */ unsigned __int64 WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ unsigned __int64 ReservedForDebuggerInstrumentation[16];
  /* 0x0190 */ unsigned __int64 SystemReserved1[38];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c4 */ unsigned char Padding0[4];
  /* 0x02c8 */ unsigned __int64 ActivationContextStackPointer;
  /* 0x02d0 */ unsigned __int64 InstrumentationCallbackSp;
  /* 0x02d8 */ unsigned __int64 InstrumentationCallbackPreviousPc;
  /* 0x02e0 */ unsigned __int64 InstrumentationCallbackPreviousSp;
  /* 0x02e8 */ unsigned long TxFsContext;
  /* 0x02ec */ unsigned char InstrumentationCallbackDisabled;
  /* 0x02ed */ unsigned char Padding1[3];
  /* 0x02f0 */ struct _GDI_TEB_BATCH64 GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID64 RealClientId;
  /* 0x07e8 */ unsigned __int64 GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ unsigned __int64 GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ unsigned __int64 glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ unsigned __int64 glReserved2;
  /* 0x1228 */ unsigned __int64 glSectionInfo;
  /* 0x1230 */ unsigned __int64 glSection;
  /* 0x1238 */ unsigned __int64 glTable;
  /* 0x1240 */ unsigned __int64 glCurrentRC;
  /* 0x1248 */ unsigned __int64 glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1254 */ unsigned char Padding2[4];
  /* 0x1258 */ struct _STRING64 StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1472 */ unsigned char Padding3[6];
  /* 0x1478 */ unsigned __int64 DeallocationStack;
  /* 0x1480 */ unsigned __int64 TlsSlots[64];
  /* 0x1680 */ struct LIST_ENTRY64 TlsLinks;
  /* 0x1690 */ unsigned __int64 Vdm;
  /* 0x1698 */ unsigned __int64 ReservedForNtRpc;
  /* 0x16a0 */ unsigned __int64 DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b4 */ unsigned char Padding4[4];
  /* 0x16b8 */ unsigned __int64 Instrumentation[11];
  /* 0x1710 */ struct _GUID ActivityId;
  /* 0x1720 */ unsigned __int64 SubProcessTag;
  /* 0x1728 */ unsigned __int64 PerflibData;
  /* 0x1730 */ unsigned __int64 EtwTraceData;
  /* 0x1738 */ unsigned __int64 WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x1744 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x1744 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x1744 */ unsigned char ReservedPad0;
      /* 0x1745 */ unsigned char ReservedPad1;
      /* 0x1746 */ unsigned char ReservedPad2;
      /* 0x1747 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x1748 */ unsigned long GuaranteedStackBytes;
  /* 0x174c */ unsigned char Padding5[4];
  /* 0x1750 */ unsigned __int64 ReservedForPerf;
  /* 0x1758 */ unsigned __int64 ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1764 */ unsigned char Padding6[4];
  /* 0x1768 */ unsigned __int64 SavedPriorityState;
  /* 0x1770 */ unsigned __int64 ReservedForCodeCoverage;
  /* 0x1778 */ unsigned __int64 ThreadPoolData;
  /* 0x1780 */ unsigned __int64 TlsExpansionSlots;
  /* 0x1788 */ unsigned __int64 DeallocationBStore;
  /* 0x1790 */ unsigned __int64 BStoreLimit;
  /* 0x1798 */ unsigned long MuiGeneration;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ unsigned __int64 NlsCache;
  /* 0x17a8 */ unsigned __int64 pShimData;
  /* 0x17b0 */ unsigned short HeapVirtualAffinity;
  /* 0x17b2 */ unsigned short LowFragHeapDataSlot;
  /* 0x17b4 */ unsigned char Padding7[4];
  /* 0x17b8 */ unsigned __int64 CurrentTransactionHandle;
  /* 0x17c0 */ unsigned __int64 ActiveFrame;
  /* 0x17c8 */ unsigned __int64 FlsData;
  /* 0x17d0 */ unsigned __int64 PreferredLanguages;
  /* 0x17d8 */ unsigned __int64 UserPrefLanguages;
  /* 0x17e0 */ unsigned __int64 MergedPrefLanguages;
  /* 0x17e8 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x17ec */ volatile unsigned short CrossTebFlags;
    /* 0x17ec */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x17ee */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x17ee */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x17ee */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x17ee */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x17ee */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x17ee */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x17ee */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x17ee */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x17ee */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x17ee */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x17ee */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x17ee */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x17ee */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x17ee */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x17ee */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x17ee */ unsigned short SpareSameTebBits : 2; /* bit position: 14 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x17f0 */ unsigned __int64 TxnScopeEnterCallback;
  /* 0x17f8 */ unsigned __int64 TxnScopeExitCallback;
  /* 0x1800 */ unsigned __int64 TxnScopeContext;
  /* 0x1808 */ unsigned long LockCount;
  /* 0x180c */ long WowTebOffset;
  /* 0x1810 */ unsigned __int64 ResourceRetValue;
  /* 0x1818 */ unsigned __int64 ReservedForWdf;
  /* 0x1820 */ unsigned __int64 ReservedForCrt;
  /* 0x1828 */ struct _GUID EffectiveContainerId;
} TEB64, *PTEB64; /* size: 0x1838 */

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0008 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x000c */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0008 */

typedef struct _TERMINATION_PORT
{
  /* 0x0000 */ struct _TERMINATION_PORT* Next;
  /* 0x0004 */ void* Port;
} TERMINATION_PORT, *PTERMINATION_PORT; /* size: 0x0008 */

typedef struct _THERMAL_COOLING_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ void* ActiveCooling /* function */;
  /* 0x0018 */ void* PassiveCooling /* function */;
} THERMAL_COOLING_INTERFACE, *PTHERMAL_COOLING_INTERFACE; /* size: 0x001c */

typedef struct _THERMAL_INFORMATION
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ unsigned long Processors;
  /* 0x0010 */ unsigned long SamplingPeriod;
  /* 0x0014 */ unsigned long CurrentTemperature;
  /* 0x0018 */ unsigned long PassiveTripPoint;
  /* 0x001c */ unsigned long CriticalTripPoint;
  /* 0x0020 */ unsigned char ActiveTripPointCount;
  /* 0x0024 */ unsigned long ActiveTripPoint[10];
} THERMAL_INFORMATION, *PTHERMAL_INFORMATION; /* size: 0x004c */

typedef struct _THERMAL_INFORMATION_EX
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ unsigned long SamplingPeriod;
  /* 0x0010 */ unsigned long CurrentTemperature;
  /* 0x0014 */ unsigned long PassiveTripPoint;
  /* 0x0018 */ unsigned long ThermalStandbyTripPoint;
  /* 0x001c */ unsigned long CriticalTripPoint;
  /* 0x0020 */ unsigned char ActiveTripPointCount;
  /* 0x0024 */ unsigned long ActiveTripPoint[10];
  /* 0x004c */ unsigned long S4TransitionTripPoint;
  /* 0x0050 */ unsigned long MinimumThrottle;
  /* 0x0054 */ unsigned long OverThrottleThreshold;
} THERMAL_INFORMATION_EX, *PTHERMAL_INFORMATION_EX; /* size: 0x0058 */

typedef struct _THERMAL_POLICY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char WaitForUpdate;
  /* 0x0005 */ unsigned char Hibernate;
  /* 0x0006 */ unsigned char Critical;
  /* 0x0007 */ unsigned char ThermalStandby;
  /* 0x0008 */ unsigned long ActivationReasons;
  /* 0x000c */ unsigned long PassiveLimit;
  /* 0x0010 */ unsigned long ActiveLevel;
  /* 0x0014 */ unsigned char OverThrottled;
  /* 0x0015 */ char __PADDING__[3];
} THERMAL_POLICY, *PTHERMAL_POLICY; /* size: 0x0018 */

typedef struct _THERMAL_ZONE_COUNTERS
{
  /* 0x0000 */ unsigned long Temperature;
  /* 0x0004 */ unsigned long ThrottleLimit;
  /* 0x0008 */ unsigned long ThrottleReasons;
} THERMAL_ZONE_COUNTERS, *PTHERMAL_ZONE_COUNTERS; /* size: 0x000c */

typedef struct _THREAD_ENERGY_VALUES
{
  /* 0x0000 */ unsigned __int64 Cycles[2][4];
} THREAD_ENERGY_VALUES, *PTHREAD_ENERGY_VALUES; /* size: 0x0040 */

typedef struct _THREAD_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ struct _PROCESSOR_NUMBER ProcessorNumber;
  /* 0x0008 */ unsigned long ContextSwitches;
  /* 0x000c */ unsigned long HwCountersCount;
  /* 0x0010 */ volatile unsigned __int64 UpdateCount;
  /* 0x0018 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING CycleTime;
  /* 0x0040 */ struct _COUNTER_READING HwCounters[16];
} THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA; /* size: 0x01c0 */

typedef struct _TIME_FIELDS
{
  /* 0x0000 */ short Year;
  /* 0x0002 */ short Month;
  /* 0x0004 */ short Day;
  /* 0x0006 */ short Hour;
  /* 0x0008 */ short Minute;
  /* 0x000a */ short Second;
  /* 0x000c */ short Milliseconds;
  /* 0x000e */ short Weekday;
} TIME_FIELDS, *PTIME_FIELDS; /* size: 0x0010 */

typedef struct _TOKEN
{
  /* 0x0000 */ struct _TOKEN_SOURCE TokenSource;
  /* 0x0010 */ struct _LUID TokenId;
  /* 0x0018 */ struct _LUID AuthenticationId;
  /* 0x0020 */ struct _LUID ParentTokenId;
  /* 0x0028 */ union _LARGE_INTEGER ExpirationTime;
  /* 0x0030 */ struct _ERESOURCE* TokenLock;
  /* 0x0034 */ struct _LUID ModifiedId;
  /* 0x0040 */ struct _SEP_TOKEN_PRIVILEGES Privileges;
  /* 0x0058 */ struct _SEP_AUDIT_POLICY AuditPolicy;
  /* 0x0078 */ unsigned long SessionId;
  /* 0x007c */ unsigned long UserAndGroupCount;
  /* 0x0080 */ unsigned long RestrictedSidCount;
  /* 0x0084 */ unsigned long VariableLength;
  /* 0x0088 */ unsigned long DynamicCharged;
  /* 0x008c */ unsigned long DynamicAvailable;
  /* 0x0090 */ unsigned long DefaultOwnerIndex;
  /* 0x0094 */ struct _SID_AND_ATTRIBUTES* UserAndGroups;
  /* 0x0098 */ struct _SID_AND_ATTRIBUTES* RestrictedSids;
  /* 0x009c */ void* PrimaryGroup;
  /* 0x00a0 */ unsigned long* DynamicPart;
  /* 0x00a4 */ struct _ACL* DefaultDacl;
  /* 0x00a8 */ enum _TOKEN_TYPE TokenType;
  /* 0x00ac */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x00b0 */ unsigned long TokenFlags;
  /* 0x00b4 */ unsigned char TokenInUse;
  /* 0x00b8 */ unsigned long IntegrityLevelIndex;
  /* 0x00bc */ unsigned long MandatoryPolicy;
  /* 0x00c0 */ struct _SEP_LOGON_SESSION_REFERENCES* LogonSession;
  /* 0x00c4 */ struct _LUID OriginatingLogonSession;
  /* 0x00cc */ struct _SID_AND_ATTRIBUTES_HASH SidHash;
  /* 0x0154 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
  /* 0x01dc */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pSecurityAttributes;
  /* 0x01e0 */ void* Package;
  /* 0x01e4 */ struct _SID_AND_ATTRIBUTES* Capabilities;
  /* 0x01e8 */ unsigned long CapabilityCount;
  /* 0x01ec */ struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
  /* 0x0274 */ struct _SEP_LOWBOX_NUMBER_ENTRY* LowboxNumberEntry;
  /* 0x0278 */ struct _SEP_LOWBOX_HANDLES_ENTRY* LowboxHandlesEntry;
  /* 0x027c */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* pClaimAttributes;
  /* 0x0280 */ void* TrustLevelSid;
  /* 0x0284 */ struct _TOKEN* TrustLinkedToken;
  /* 0x0288 */ void* IntegrityLevelSidValue;
  /* 0x028c */ struct _SEP_SID_VALUES_BLOCK* TokenSidValues;
  /* 0x0290 */ unsigned long VariablePart;
  /* 0x0294 */ long __PADDING__[1];
} TOKEN, *PTOKEN; /* size: 0x0298 */

typedef struct _TOKEN_ACCESS_INFORMATION
{
  /* 0x0000 */ struct _SID_AND_ATTRIBUTES_HASH* SidHash;
  /* 0x0004 */ struct _SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;
  /* 0x0008 */ struct _TOKEN_PRIVILEGES* Privileges;
  /* 0x000c */ struct _LUID AuthenticationId;
  /* 0x0014 */ enum _TOKEN_TYPE TokenType;
  /* 0x0018 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x001c */ struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long AppContainerNumber;
  /* 0x0028 */ void* PackageSid;
  /* 0x002c */ struct _SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;
  /* 0x0030 */ void* TrustLevelSid;
  /* 0x0034 */ void* SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION; /* size: 0x0038 */

typedef struct _TOKEN_AUDIT_POLICY
{
  /* 0x0000 */ unsigned char PerUserPolicy[30];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY; /* size: 0x001e */

typedef struct _TOKEN_CONTROL
{
  /* 0x0000 */ struct _LUID TokenId;
  /* 0x0008 */ struct _LUID AuthenticationId;
  /* 0x0010 */ struct _LUID ModifiedId;
  /* 0x0018 */ struct _TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL; /* size: 0x0028 */

typedef enum _TOKEN_INFORMATION_CLASS
{
  TokenUser = 1,
  TokenGroups = 2,
  TokenPrivileges = 3,
  TokenOwner = 4,
  TokenPrimaryGroup = 5,
  TokenDefaultDacl = 6,
  TokenSource = 7,
  TokenType = 8,
  TokenImpersonationLevel = 9,
  TokenStatistics = 10,
  TokenRestrictedSids = 11,
  TokenSessionId = 12,
  TokenGroupsAndPrivileges = 13,
  TokenSessionReference = 14,
  TokenSandBoxInert = 15,
  TokenAuditPolicy = 16,
  TokenOrigin = 17,
  TokenElevationType = 18,
  TokenLinkedToken = 19,
  TokenElevation = 20,
  TokenHasRestrictions = 21,
  TokenAccessInformation = 22,
  TokenVirtualizationAllowed = 23,
  TokenVirtualizationEnabled = 24,
  TokenIntegrityLevel = 25,
  TokenUIAccess = 26,
  TokenMandatoryPolicy = 27,
  TokenLogonSid = 28,
  TokenIsAppContainer = 29,
  TokenCapabilities = 30,
  TokenAppContainerSid = 31,
  TokenAppContainerNumber = 32,
  TokenUserClaimAttributes = 33,
  TokenDeviceClaimAttributes = 34,
  TokenRestrictedUserClaimAttributes = 35,
  TokenRestrictedDeviceClaimAttributes = 36,
  TokenDeviceGroups = 37,
  TokenRestrictedDeviceGroups = 38,
  TokenSecurityAttributes = 39,
  TokenIsRestricted = 40,
  TokenProcessTrustLevel = 41,
  TokenPrivateNameSpace = 42,
  MaxTokenInfoClass = 43,
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;

typedef struct _TOKEN_MANDATORY_POLICY
{
  /* 0x0000 */ unsigned long Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY; /* size: 0x0004 */

typedef struct _TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ struct _LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES; /* size: 0x0010 */

typedef struct _TOKEN_SOURCE
{
  /* 0x0000 */ char SourceName[8];
  /* 0x0008 */ struct _LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE; /* size: 0x0010 */

typedef enum _TOKEN_TYPE
{
  TokenPrimary = 1,
  TokenImpersonation = 2,
} TOKEN_TYPE, *PTOKEN_TYPE;

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _TP_POOL* Pool;
  /* 0x0008 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x000c */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0010 */ void* RaceDll;
  /* 0x0014 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0018 */ void* FinalizationCallback /* function */;
  union // _TAG_UNNAMED_190
  {
    union
    {
      /* 0x001c */ unsigned long Flags;
      struct // _TAG_UNNAMED_191
      {
        struct /* bitfield */
        {
          /* 0x001c */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x001c */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x001c */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0020 */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0024 */ unsigned long Size;
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0028 */

struct _TP_CALLBACK_INSTANCE;

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

struct _TP_CLEANUP_GROUP;

struct _TP_POOL;

typedef struct _TRACE_ENABLE_INFO
{
  /* 0x0000 */ unsigned long IsEnabled;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short LoggerId;
  /* 0x0008 */ unsigned long EnableProperty;
  /* 0x000c */ unsigned long Reserved2;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
} TRACE_ENABLE_INFO, *PTRACE_ENABLE_INFO; /* size: 0x0020 */

typedef enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
} TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef struct _TRACE_LOGFILE_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct // _TAG_UNNAMED_192
    {
      /* 0x0004 */ unsigned char MajorVersion;
      /* 0x0005 */ unsigned char MinorVersion;
      /* 0x0006 */ unsigned char SubVersion;
      /* 0x0007 */ unsigned char SubMinorVersion;
    } /* size: 0x0004 */ VersionDetail;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ProviderVersion;
  /* 0x000c */ unsigned long NumberOfProcessors;
  /* 0x0010 */ union _LARGE_INTEGER EndTime;
  /* 0x0018 */ unsigned long TimerResolution;
  /* 0x001c */ unsigned long MaximumFileSize;
  /* 0x0020 */ unsigned long LogFileMode;
  /* 0x0024 */ unsigned long BuffersWritten;
  union
  {
    /* 0x0028 */ struct _GUID LogInstanceGuid;
    struct
    {
      /* 0x0028 */ unsigned long StartBuffers;
      /* 0x002c */ unsigned long PointerSize;
      /* 0x0030 */ unsigned long EventsLost;
      /* 0x0034 */ unsigned long CpuSpeedInMHz;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0038 */ unsigned short* LoggerName;
  /* 0x003c */ unsigned short* LogFileName;
  /* 0x0040 */ struct _RTL_TIME_ZONE_INFORMATION TimeZone;
  /* 0x00f0 */ union _LARGE_INTEGER BootTime;
  /* 0x00f8 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0100 */ union _LARGE_INTEGER StartTime;
  /* 0x0108 */ unsigned long ReservedFlags;
  /* 0x010c */ unsigned long BuffersLost;
} TRACE_LOGFILE_HEADER, *PTRACE_LOGFILE_HEADER; /* size: 0x0110 */

typedef enum _TRANSFER_TYPE
{
  ReadTransfer = 0,
  WriteTransfer = 1,
  OtherTransfer = 2,
} TRANSFER_TYPE, *PTRANSFER_TYPE;

typedef struct _TRIAGE_9F_PNP
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE* CompletionQueue;
  /* 0x0008 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;
} TRIAGE_9F_PNP, *PTRIAGE_9F_PNP; /* size: 0x000c */

typedef struct _TRIAGE_9F_POWER
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ struct _LIST_ENTRY* IrpList;
  /* 0x0008 */ struct _LIST_ENTRY* ThreadList;
  /* 0x000c */ struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;
} TRIAGE_9F_POWER, *PTRIAGE_9F_POWER; /* size: 0x0010 */

typedef struct _TRIAGE_DEVICE_NODE
{
  /* 0x0000 */ struct _TRIAGE_DEVICE_NODE* Sibling;
  /* 0x0004 */ struct _TRIAGE_DEVICE_NODE* Child;
  /* 0x0008 */ struct _TRIAGE_DEVICE_NODE* Parent;
  /* 0x000c */ struct _TRIAGE_DEVICE_NODE* LastChild;
  /* 0x0010 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0014 */ struct _UNICODE_STRING InstancePath;
  /* 0x001c */ struct _UNICODE_STRING ServiceName;
  /* 0x0024 */ struct _IRP* PendingIrp;
  /* 0x0028 */ struct _TRIAGE_POP_FX_DEVICE* FxDevice;
} TRIAGE_DEVICE_NODE, *PTRIAGE_DEVICE_NODE; /* size: 0x002c */

typedef struct _TRIAGE_EX_WORK_QUEUE
{
  /* 0x0000 */ struct _KPRIQUEUE WorkPriQueue;
} TRIAGE_EX_WORK_QUEUE, *PTRIAGE_EX_WORK_QUEUE; /* size: 0x019c */

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY DispatchedList;
} TRIAGE_PNP_DEVICE_COMPLETION_QUEUE, *PTRIAGE_PNP_DEVICE_COMPLETION_QUEUE; /* size: 0x0008 */

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _TRIAGE_DEVICE_NODE* DeviceNode;
} TRIAGE_PNP_DEVICE_COMPLETION_REQUEST, *PTRIAGE_PNP_DEVICE_COMPLETION_REQUEST; /* size: 0x000c */

typedef struct _TRIAGE_POP_FX_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _TRIAGE_POP_IRP_DATA* IrpData;
  /* 0x0010 */ long Status;
  /* 0x0014 */ long PowerReqCall;
  /* 0x0018 */ long PowerNotReqCall;
  /* 0x001c */ struct _TRIAGE_DEVICE_NODE* DeviceNode;
} TRIAGE_POP_FX_DEVICE, *PTRIAGE_POP_FX_DEVICE; /* size: 0x0020 */

typedef struct _TRIAGE_POP_IRP_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _DEVICE_OBJECT* Pdo;
} TRIAGE_POP_IRP_DATA, *PTRIAGE_POP_IRP_DATA; /* size: 0x0010 */

typedef struct _TXN_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short TxFsContext;
  /* 0x0004 */ void* TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK; /* size: 0x0008 */

typedef enum _TYPE_OF_MEMORY
{
  LoaderExceptionBlock = 0,
  LoaderSystemBlock = 1,
  LoaderFree = 2,
  LoaderBad = 3,
  LoaderLoadedProgram = 4,
  LoaderFirmwareTemporary = 5,
  LoaderFirmwarePermanent = 6,
  LoaderOsloaderHeap = 7,
  LoaderOsloaderStack = 8,
  LoaderSystemCode = 9,
  LoaderHalCode = 10,
  LoaderBootDriver = 11,
  LoaderConsoleInDriver = 12,
  LoaderConsoleOutDriver = 13,
  LoaderStartupDpcStack = 14,
  LoaderStartupKernelStack = 15,
  LoaderStartupPanicStack = 16,
  LoaderStartupPcrPage = 17,
  LoaderStartupPdrPage = 18,
  LoaderRegistryData = 19,
  LoaderMemoryData = 20,
  LoaderNlsData = 21,
  LoaderSpecialMemory = 22,
  LoaderBBTMemory = 23,
  LoaderZero = 24,
  LoaderXIPRom = 25,
  LoaderHALCachedMemory = 26,
  LoaderLargePageFiller = 27,
  LoaderErrorLogMemory = 28,
  LoaderVsmMemory = 29,
  LoaderFirmwareCode = 30,
  LoaderFirmwareData = 31,
  LoaderFirmwareReserved = 32,
  LoaderMaximum = 33,
} TYPE_OF_MEMORY, *PTYPE_OF_MEMORY;

typedef enum _TlgBlob_t
{
  _TlgBlobNone = 0,
  _TlgBlobEnd = 1,
  _TlgBlobProvider = 2,
  _TlgBlobEvent3 = 3,
  _TlgBlobProvider3 = 4,
  _TlgBlobEvent2 = 5,
  _TlgBlobMax = 6,
} TlgBlob_t, *PTlgBlob_t;

typedef enum _TlgIn_t
{
  _TlgInNULL = 0,
  _TlgInUNICODESTRING = 1,
  _TlgInANSISTRING = 2,
  _TlgInINT8 = 3,
  _TlgInUINT8 = 4,
  _TlgInINT16 = 5,
  _TlgInUINT16 = 6,
  _TlgInINT32 = 7,
  _TlgInUINT32 = 8,
  _TlgInINT64 = 9,
  _TlgInUINT64 = 10,
  _TlgInFLOAT = 11,
  _TlgInDOUBLE = 12,
  _TlgInBOOL32 = 13,
  _TlgInBINARY = 14,
  _TlgInGUID = 15,
  _TlgInPOINTER_unsupported = 16,
  _TlgInFILETIME = 17,
  _TlgInSYSTEMTIME = 18,
  _TlgInSID = 19,
  _TlgInHEXINT32 = 20,
  _TlgInHEXINT64 = 21,
  _TlgInCOUNTEDSTRING = 22,
  _TlgInCOUNTEDANSISTRING = 23,
  _TlgInSTRUCT = 24,
  _TlgInMax = 25,
  _TlgInINTPTR = 7,
  _TlgInUINTPTR = 8,
  _TlgInPOINTER = 20,
  _TlgInCcount = 32,
  _TlgInVcount = 64,
  _TlgInChain = 128,
  _TlgInCustom = 96,
  _TlgInTypeMask = 31,
  _TlgInCountMask = 96,
  _TlgInFlagMask = 224,
} TlgIn_t, *PTlgIn_t;

typedef enum _TlgOut_t
{
  _TlgOutNULL = 0,
  _TlgOutNOPRINT = 1,
  _TlgOutSTRING = 2,
  _TlgOutBOOLEAN = 3,
  _TlgOutHEX = 4,
  _TlgOutPID = 5,
  _TlgOutTID = 6,
  _TlgOutPORT = 7,
  _TlgOutIPV4 = 8,
  _TlgOutIPV6 = 9,
  _TlgOutSOCKETADDRESS = 10,
  _TlgOutXML = 11,
  _TlgOutJSON = 12,
  _TlgOutWIN32ERROR = 13,
  _TlgOutNTSTATUS = 14,
  _TlgOutHRESULT = 15,
  _TlgOutFILETIME = 16,
  _TlgOutSIGNED = 17,
  _TlgOutUNSIGNED = 18,
  _TlgOutMax = 19,
  _TlgOutChain = 128,
  _TlgOutTypeMask = 127,
} TlgOut_t, *PTlgOut_t;

typedef struct _TlgProviderMetadata_t
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ struct _GUID ProviderId;
  /* 0x0011 */ unsigned short RemainingSize;
} TlgProviderMetadata_t, *PTlgProviderMetadata_t; /* size: 0x0013 */

typedef struct _TlgProvider_t
{
  /* 0x0000 */ unsigned int LevelPlus1;
  /* 0x0004 */ const unsigned short* ProviderMetadataPtr;
  /* 0x0008 */ unsigned __int64 KeywordAny;
  /* 0x0010 */ unsigned __int64 KeywordAll;
  /* 0x0018 */ unsigned __int64 RegHandle;
  /* 0x0020 */ void* EnableCallback /* function */;
  /* 0x0024 */ void* CallbackContext;
  /* 0x0028 */ void* AnnotationFunc /* function */;
  /* 0x002c */ long __PADDING__[1];
} TlgProvider_t, *PTlgProvider_t; /* size: 0x0030 */

typedef struct _TraceLoggingMetadata_t
{
  /* 0x0000 */ unsigned int Signature;
  /* 0x0004 */ unsigned short Size;
  /* 0x0006 */ unsigned char Version;
  /* 0x0007 */ unsigned char Flags;
  /* 0x0008 */ unsigned __int64 Magic;
} TraceLoggingMetadata_t, *PTraceLoggingMetadata_t; /* size: 0x0010 */

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct // _TAG_UNNAMED_193
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ unsigned short* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0008 */

typedef struct _UNLOADED_DRIVERS
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
  /* 0x0008 */ void* StartAddress;
  /* 0x000c */ void* EndAddress;
  /* 0x0010 */ union _LARGE_INTEGER CurrentTime;
} UNLOADED_DRIVERS, *PUNLOADED_DRIVERS; /* size: 0x0018 */

typedef enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef struct _VACB
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0004 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
  union // _TAG_UNNAMED_194
  {
    union
    {
      /* 0x0008 */ union _LARGE_INTEGER FileOffset;
      /* 0x0008 */ unsigned short ActiveCount;
      /* 0x0008 */ struct _LIST_ENTRY Links;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Overlay;
  /* 0x0010 */ struct _VACB_ARRAY_HEADER* ArrayHead;
  /* 0x0014 */ long __PADDING__[1];
} VACB, *PVACB; /* size: 0x0018 */

typedef struct _VACB_ARRAY_HEADER
{
  /* 0x0000 */ unsigned long VacbArrayIndex;
  /* 0x0004 */ unsigned long MappingCount;
  /* 0x0008 */ unsigned long HighestMappedIndex;
  /* 0x000c */ unsigned long Reserved;
} VACB_ARRAY_HEADER, *PVACB_ARRAY_HEADER; /* size: 0x0010 */

typedef struct _VACB_LEVEL_REFERENCE
{
  /* 0x0000 */ long Reference;
  /* 0x0004 */ long SpecialReference;
} VACB_LEVEL_REFERENCE, *PVACB_LEVEL_REFERENCE; /* size: 0x0008 */

struct _VERIFIER_SHARED_EXPORT_THUNK;

typedef struct _VF_ADDRESS_RANGE
{
  /* 0x0000 */ unsigned char* Start;
  /* 0x0004 */ unsigned char* End;
} VF_ADDRESS_RANGE, *PVF_ADDRESS_RANGE; /* size: 0x0008 */

typedef struct _VF_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE RtlTable;
  /* 0x0038 */ struct _VF_AVL_TREE_NODE* ReservedNode;
  /* 0x003c */ void* NodeToFree;
  /* 0x0040 */ volatile long Lock;
  /* 0x0044 */ long __PADDING__[15];
} VF_AVL_TABLE, *PVF_AVL_TABLE; /* size: 0x0080 */

typedef struct _VF_AVL_TREE
{
  /* 0x0000 */ unsigned long NodeRangeSize;
  /* 0x0004 */ volatile unsigned long NodeCount;
  /* 0x0008 */ struct _VF_AVL_TABLE* Tables;
  /* 0x000c */ unsigned long TablesNo;
  union // _TAG_UNNAMED_195
  {
    union
    {
      /* 0x0010 */ unsigned long NodeSize;
      /* 0x0010 */ unsigned long UseLookaside;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} VF_AVL_TREE, *PVF_AVL_TREE; /* size: 0x0014 */

typedef struct _VF_AVL_TREE_NODE
{
  /* 0x0000 */ void* p;
  /* 0x0004 */ unsigned long RangeSize;
} VF_AVL_TREE_NODE, *PVF_AVL_TREE_NODE; /* size: 0x0008 */

typedef struct _VF_BTS_DATA_MANAGEMENT_AREA
{
  /* 0x0000 */ void* BTSBufferBase;
  /* 0x0004 */ void* BTSIndex;
  /* 0x0008 */ void* BTSMax;
  /* 0x000c */ void* BTSInterruptThreshold;
  /* 0x0010 */ void* PEBSBufferBase;
  /* 0x0014 */ void* PEBSIndex;
  /* 0x0018 */ void* PEBSMax;
  /* 0x001c */ void* PEBSInterruptThreshold;
  /* 0x0020 */ void* PEBSCounterReset[2];
  /* 0x0028 */ char Reserved[12];
} VF_BTS_DATA_MANAGEMENT_AREA, *PVF_BTS_DATA_MANAGEMENT_AREA; /* size: 0x0034 */

typedef struct _VF_BTS_RECORD
{
  /* 0x0000 */ void* JumpedFrom;
  /* 0x0004 */ void* JumpedTo;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long Unused1 : 3; /* bit position: 0 */
    /* 0x0008 */ unsigned long Predicted : 4; /* bit position: 3 */
    /* 0x0008 */ unsigned long Unused2 : 25; /* bit position: 7 */
  }; /* bitfield */
} VF_BTS_RECORD, *PVF_BTS_RECORD; /* size: 0x000c */

typedef struct _VF_DRIVER_IO_CALLBACKS
{
  /* 0x0000 */ void* DriverInit /* function */;
  /* 0x0004 */ void* DriverStartIo /* function */;
  /* 0x0008 */ void* DriverUnload /* function */;
  /* 0x000c */ void* AddDevice /* function */;
  /* 0x0010 */ void* MajorFunction[28] /* function */;
} VF_DRIVER_IO_CALLBACKS, *PVF_DRIVER_IO_CALLBACKS; /* size: 0x0080 */

typedef struct _VF_KE_CRITICAL_REGION_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0004 */ void* StackTrace[7];
} VF_KE_CRITICAL_REGION_TRACE, *PVF_KE_CRITICAL_REGION_TRACE; /* size: 0x0020 */

typedef struct _VF_POOL_TRACE
{
  /* 0x0000 */ void* Address;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _ETHREAD* Thread;
  /* 0x000c */ void* StackTrace[13];
} VF_POOL_TRACE, *PVF_POOL_TRACE; /* size: 0x0040 */

typedef struct _VF_SUSPECT_DRIVER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ unsigned long Loads;
  /* 0x000c */ unsigned long Unloads;
  /* 0x0010 */ struct _UNICODE_STRING BaseName;
} VF_SUSPECT_DRIVER_ENTRY, *PVF_SUSPECT_DRIVER_ENTRY; /* size: 0x0018 */

typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
{
  /* 0x0000 */ struct _VERIFIER_SHARED_EXPORT_THUNK* SharedExportThunks;
  /* 0x0004 */ struct _VERIFIER_SHARED_EXPORT_THUNK* PoolSharedExportThunks;
  /* 0x0008 */ struct _VERIFIER_SHARED_EXPORT_THUNK* OrderDependentSharedExportThunks;
  /* 0x000c */ struct _VERIFIER_SHARED_EXPORT_THUNK* XdvSharedExportThunks;
} VF_TARGET_ALL_SHARED_EXPORT_THUNKS, *PVF_TARGET_ALL_SHARED_EXPORT_THUNKS; /* size: 0x0010 */

typedef struct _VF_TARGET_DRIVER
{
  /* 0x0000 */ struct _VF_AVL_TREE_NODE TreeNode;
  union // _TAG_UNNAMED_196
  {
    union
    {
      /* 0x0008 */ struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;
      struct // _TAG_UNNAMED_197
      {
        struct /* bitfield */
        {
          /* 0x0008 */ unsigned long SnapSharedExportsFailed : 1; /* bit position: 0 */
          /* 0x0008 */ unsigned long Spare : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u1;
  /* 0x0018 */ struct _VF_TARGET_VERIFIED_DRIVER_DATA* VerifiedData;
} VF_TARGET_DRIVER, *PVF_TARGET_DRIVER; /* size: 0x001c */

typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA
{
  /* 0x0000 */ struct _VF_SUSPECT_DRIVER_ENTRY* SuspectDriverEntry;
  /* 0x0004 */ void* WMICallback;
  /* 0x0008 */ struct _LIST_ENTRY EtwHandlesListHead;
  union // _TAG_UNNAMED_198
  {
    union
    {
      struct // _TAG_UNNAMED_199
      {
        struct /* bitfield */
        {
          /* 0x0010 */ unsigned long MissedEtwRegistration : 1; /* bit position: 0 */
          /* 0x0010 */ unsigned long Spare : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x0010 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0014 */ unsigned long Signature;
  /* 0x0018 */ union _SLIST_HEADER PoolPageHeaders;
  /* 0x0020 */ union _SLIST_HEADER PoolTrackers;
  /* 0x0028 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x002c */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0030 */ unsigned long PeakPagedPoolAllocations;
  /* 0x0034 */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0038 */ volatile unsigned long PagedBytes;
  /* 0x003c */ volatile unsigned long NonPagedBytes;
  /* 0x0040 */ unsigned long PeakPagedBytes;
  /* 0x0044 */ unsigned long PeakNonPagedBytes;
  /* 0x0048 */ unsigned long RaiseIrqls;
  /* 0x004c */ unsigned long AcquireSpinLocks;
  /* 0x0050 */ unsigned long SynchronizeExecutions;
  /* 0x0054 */ unsigned long AllocationsWithNoTag;
  /* 0x0058 */ unsigned long AllocationsFailed;
  /* 0x005c */ unsigned long AllocationsFailedDeliberately;
  /* 0x0060 */ unsigned long LockedBytes;
  /* 0x0064 */ unsigned long PeakLockedBytes;
  /* 0x0068 */ unsigned long MappedLockedBytes;
  /* 0x006c */ unsigned long PeakMappedLockedBytes;
  /* 0x0070 */ unsigned long MappedIoSpaceBytes;
  /* 0x0074 */ unsigned long PeakMappedIoSpaceBytes;
  /* 0x0078 */ unsigned long PagesForMdlBytes;
  /* 0x007c */ unsigned long PeakPagesForMdlBytes;
  /* 0x0080 */ unsigned long ContiguousMemoryBytes;
  /* 0x0084 */ unsigned long PeakContiguousMemoryBytes;
  /* 0x0088 */ struct _LIST_ENTRY ContiguousMemoryListHead;
  /* 0x0090 */ volatile unsigned long ExecutePoolTypes;
  /* 0x0094 */ volatile unsigned long ExecutePageProtections;
  /* 0x0098 */ volatile unsigned long ExecutePageMappings;
  /* 0x009c */ volatile unsigned long ExecuteWriteSections;
  /* 0x00a0 */ volatile unsigned long SectionAlignmentFailures;
  /* 0x00a4 */ long __PADDING__[1];
} VF_TARGET_VERIFIED_DRIVER_DATA, *PVF_TARGET_VERIFIED_DRIVER_DATA; /* size: 0x00a8 */

typedef struct _VF_TRACKER
{
  /* 0x0000 */ unsigned long TrackerFlags;
  /* 0x0004 */ unsigned long TrackerSize;
  /* 0x0008 */ unsigned long TrackerIndex;
  /* 0x000c */ unsigned long TraceDepth;
} VF_TRACKER, *PVF_TRACKER; /* size: 0x0010 */

typedef struct _VF_TRACKER_STAMP
{
  /* 0x0000 */ void* Thread;
  /* 0x0004 */ unsigned char Flags : 8; /* bit position: 0 */
  /* 0x0005 */ unsigned char OldIrql : 8; /* bit position: 0 */
  /* 0x0006 */ unsigned char NewIrql : 8; /* bit position: 0 */
  /* 0x0007 */ unsigned char Processor : 8; /* bit position: 0 */
} VF_TRACKER_STAMP, *PVF_TRACKER_STAMP; /* size: 0x0008 */

typedef struct _VF_WATCHDOG_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ unsigned long DueTickCount;
  /* 0x0010 */ volatile unsigned char Inserted;
  /* 0x0011 */ char TrackedStackLocation;
  /* 0x0012 */ unsigned short CancelTimeoutTicks;
} VF_WATCHDOG_IRP, *PVF_WATCHDOG_IRP; /* size: 0x0014 */

typedef struct _VI_DEADLOCK_GLOBALS
{
  /* 0x0000 */ __int64 TimeAcquire;
  /* 0x0008 */ __int64 TimeRelease;
  /* 0x0010 */ struct _LIST_ENTRY* ResourceDatabase;
  /* 0x0014 */ unsigned long ResourceDatabaseCount;
  /* 0x0018 */ struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];
  /* 0x2010 */ struct _LIST_ENTRY* ThreadDatabase;
  /* 0x2014 */ unsigned long ThreadDatabaseCount;
  /* 0x2018 */ struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];
  /* 0x4010 */ volatile unsigned long AllocationFailures;
  /* 0x4014 */ unsigned long NodesTrimmedBasedOnAge;
  /* 0x4018 */ unsigned long NodesTrimmedBasedOnCount;
  /* 0x401c */ unsigned long NodesSearched;
  /* 0x4020 */ unsigned long MaxNodesSearched;
  /* 0x4024 */ unsigned long SequenceNumber;
  /* 0x4028 */ unsigned long RecursionDepthLimit;
  /* 0x402c */ unsigned long SearchedNodesLimit;
  /* 0x4030 */ unsigned long DepthLimitHits;
  /* 0x4034 */ unsigned long SearchLimitHits;
  /* 0x4038 */ unsigned long StackLimitHits;
  /* 0x403c */ unsigned long ABC_ACB_Skipped;
  /* 0x4040 */ unsigned long OutOfOrderReleases;
  /* 0x4044 */ unsigned long NodesReleasedOutOfOrder;
  /* 0x4048 */ unsigned long TotalReleases;
  /* 0x404c */ unsigned long RootNodesDeleted;
  /* 0x4050 */ unsigned long ForgetHistoryCounter;
  /* 0x4054 */ void* Instigator;
  /* 0x4058 */ unsigned long NumberOfParticipants;
  /* 0x405c */ struct _VI_DEADLOCK_NODE* Participant[32];
  /* 0x40dc */ long ChildrenCountWatermark;
  /* 0x40e0 */ enum _KERNEL_STACK_LIMITS StackType;
  /* 0x40e4 */ unsigned long StackLowLimit;
  /* 0x40e8 */ unsigned long StackHighLimit;
  /* 0x40ec */ long __PADDING__[1];
} VI_DEADLOCK_GLOBALS, *PVI_DEADLOCK_GLOBALS; /* size: 0x40f0 */

typedef struct _VI_DEADLOCK_NODE
{
  /* 0x0000 */ struct _VI_DEADLOCK_NODE* Parent;
  /* 0x0004 */ struct _LIST_ENTRY ChildrenList;
  /* 0x000c */ struct _LIST_ENTRY SiblingsList;
  union
  {
    /* 0x0014 */ struct _LIST_ENTRY ResourceList;
    /* 0x0014 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  /* 0x001c */ struct _VI_DEADLOCK_RESOURCE* Root;
  /* 0x0020 */ struct _VI_DEADLOCK_THREAD* ThreadEntry;
  union // _TAG_UNNAMED_200
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0024 */ unsigned long Active : 1; /* bit position: 0 */
        /* 0x0024 */ unsigned long OnlyTryAcquireUsed : 1; /* bit position: 1 */
        /* 0x0024 */ unsigned long ReleasedOutOfOrder : 1; /* bit position: 2 */
        /* 0x0024 */ unsigned long SequenceNumber : 29; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0024 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0028 */ long ChildrenCount;
  /* 0x002c */ void* StackTrace[8];
  /* 0x004c */ void* ParentStackTrace[8];
} VI_DEADLOCK_NODE, *PVI_DEADLOCK_NODE; /* size: 0x006c */

typedef struct _VI_DEADLOCK_RESOURCE
{
  /* 0x0000 */ enum _VI_DEADLOCK_RESOURCE_TYPE Type;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long NodeCount : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned long RecursionCount : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0008 */ void* ResourceAddress;
  /* 0x000c */ struct _VI_DEADLOCK_THREAD* ThreadOwner;
  /* 0x0010 */ struct _LIST_ENTRY ResourceList;
  union
  {
    /* 0x0018 */ struct _LIST_ENTRY HashChainList;
    /* 0x0018 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  /* 0x0020 */ void* StackTrace[8];
  /* 0x0040 */ void* LastAcquireTrace[8];
  /* 0x0060 */ void* LastReleaseTrace[8];
} VI_DEADLOCK_RESOURCE, *PVI_DEADLOCK_RESOURCE; /* size: 0x0080 */

typedef enum _VI_DEADLOCK_RESOURCE_TYPE
{
  VfDeadlockUnknown = 0,
  VfDeadlockMutex = 1,
  VfDeadlockMutexAbandoned = 2,
  VfDeadlockFastMutex = 3,
  VfDeadlockFastMutexUnsafe = 4,
  VfDeadlockSpinLock = 5,
  VfDeadlockInStackQueuedSpinLock = 6,
  VfDeadlockUnusedSpinLock = 7,
  VfDeadlockEresource = 8,
  VfDeadlockTypeMaximum = 9,
} VI_DEADLOCK_RESOURCE_TYPE, *PVI_DEADLOCK_RESOURCE_TYPE;

typedef struct _VI_DEADLOCK_THREAD
{
  /* 0x0000 */ struct _KTHREAD* Thread;
  /* 0x0004 */ struct _VI_DEADLOCK_NODE* CurrentSpinNode;
  /* 0x0008 */ struct _VI_DEADLOCK_NODE* CurrentOtherNode;
  union
  {
    /* 0x000c */ struct _LIST_ENTRY ListEntry;
    /* 0x000c */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  /* 0x0014 */ unsigned long NodeCount;
  /* 0x0018 */ volatile unsigned long PagingCount;
  /* 0x001c */ unsigned char ThreadUsesEresources;
  /* 0x001d */ char __PADDING__[3];
} VI_DEADLOCK_THREAD, *PVI_DEADLOCK_THREAD; /* size: 0x0020 */

typedef struct _VI_FAULT_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0004 */ void* StackTrace[8];
} VI_FAULT_TRACE, *PVI_FAULT_TRACE; /* size: 0x0024 */

typedef struct _VI_POOL_ENTRY
{
  union
  {
    /* 0x0000 */ struct _VI_POOL_PAGE_HEADER PageHeader;
    /* 0x0000 */ struct _VI_POOL_ENTRY_INUSE InUse;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY* NextFree;
      /* 0x0004 */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} VI_POOL_ENTRY, *PVI_POOL_ENTRY; /* size: 0x0010 */

typedef struct _VI_POOL_ENTRY_INUSE
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0004 */ void* CallingAddress;
  /* 0x0008 */ unsigned long NumberOfBytes;
  /* 0x000c */ unsigned long Tag;
} VI_POOL_ENTRY_INUSE, *PVI_POOL_ENTRY_INUSE; /* size: 0x0010 */

typedef struct _VI_POOL_PAGE_HEADER
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* NextPage;
  /* 0x0004 */ void* VerifierEntry;
  /* 0x0008 */ unsigned long Signature;
} VI_POOL_PAGE_HEADER, *PVI_POOL_PAGE_HEADER; /* size: 0x000c */

typedef struct _VI_TRACK_IRQL
{
  /* 0x0000 */ void* Thread;
  /* 0x0004 */ unsigned char OldIrql;
  /* 0x0005 */ unsigned char NewIrql;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ unsigned long TickCount;
  /* 0x000c */ void* StackTrace[5];
} VI_TRACK_IRQL, *PVI_TRACK_IRQL; /* size: 0x0020 */

typedef struct _VI_VERIFIER_ISSUE
{
  /* 0x0000 */ unsigned long IssueType;
  /* 0x0004 */ void* Address;
  /* 0x0008 */ unsigned long Parameters[2];
} VI_VERIFIER_ISSUE, *PVI_VERIFIER_ISSUE; /* size: 0x0010 */

typedef struct _VOLUME_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteCode;
  /* 0x0004 */ unsigned long UseCount;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ struct _LIST_ENTRY VolumeCacheMapLinks;
  /* 0x0014 */ unsigned long DirtyPages;
  /* 0x0018 */ struct _LOG_HANDLE_CONTEXT LogHandleContext;
  /* 0x0080 */ unsigned long Flags;
  /* 0x0084 */ unsigned long PagesQueuedToDisk;
  /* 0x0088 */ unsigned long LoggedPagesQueuedToDisk;
  /* 0x008c */ long __PADDING__[1];
} VOLUME_CACHE_MAP, *PVOLUME_CACHE_MAP; /* size: 0x0090 */

typedef struct _VPB
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short VolumeLabelLength;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ struct _DEVICE_OBJECT* RealDevice;
  /* 0x0010 */ unsigned long SerialNumber;
  /* 0x0014 */ unsigned long ReferenceCount;
  /* 0x0018 */ wchar_t VolumeLabel[32];
} VPB, *PVPB; /* size: 0x0058 */

typedef struct _WAITING_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ void* CompletionRoutine /* function */;
  /* 0x0010 */ void* Context;
  /* 0x0014 */ struct _KEVENT* Event;
  /* 0x0018 */ unsigned long Information;
  /* 0x001c */ unsigned char BreakAllRH;
  /* 0x001d */ char __PADDING__[3];
} WAITING_IRP, *PWAITING_IRP; /* size: 0x0020 */

typedef struct _WAIT_CONTEXT_BLOCK
{
  union
  {
    /* 0x0000 */ struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY DmaWaitEntry;
      /* 0x0008 */ unsigned long NumberOfChannels;
      struct /* bitfield */
      {
        /* 0x000c */ unsigned long SyncCallback : 1; /* bit position: 0 */
        /* 0x000c */ unsigned long DmaContext : 1; /* bit position: 1 */
        /* 0x000c */ unsigned long Reserved : 30; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0010 */ void* DeviceRoutine /* function */;
  /* 0x0014 */ void* DeviceContext;
  /* 0x0018 */ unsigned long NumberOfMapRegisters;
  /* 0x001c */ void* DeviceObject;
  /* 0x0020 */ void* CurrentIrp;
  /* 0x0024 */ struct _KDPC* BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK; /* size: 0x0028 */

typedef struct _WHEAP_ERROR_RECORD_WRAPPER
{
  /* 0x0000 */ struct _LIST_ENTRY WorkEntry;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long ProcessorNumber;
  /* 0x0010 */ union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;
  /* 0x0014 */ volatile long InUse;
  /* 0x0018 */ struct _WHEAP_ERROR_SOURCE* ErrorSource;
  /* 0x001c */ struct _WHEA_ERROR_RECORD ErrorRecord;
} WHEAP_ERROR_RECORD_WRAPPER, *PWHEAP_ERROR_RECORD_WRAPPER; /* size: 0x00e4 */

typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Preallocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long FromPersistentStore : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Reserved : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEAP_ERROR_RECORD_WRAPPER_FLAGS, *PWHEAP_ERROR_RECORD_WRAPPER_FLAGS; /* size: 0x0004 */

typedef struct _WHEAP_ERROR_SOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long FailedAllocations;
  /* 0x000c */ unsigned long PlatformErrorSourceId;
  /* 0x0010 */ long ErrorCount;
  /* 0x0014 */ unsigned long RecordCount;
  /* 0x0018 */ unsigned long RecordLength;
  /* 0x001c */ unsigned long PoolTag;
  /* 0x0020 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x0024 */ struct _WHEAP_ERROR_RECORD_WRAPPER* Records;
  /* 0x0028 */ void* Context;
  /* 0x002c */ unsigned long SectionCount;
  /* 0x0030 */ unsigned long SectionLength;
  /* 0x0038 */ union _LARGE_INTEGER TickCountAtLastError;
  /* 0x0040 */ unsigned long AccumulatedErrors;
  /* 0x0044 */ unsigned long TotalErrors;
  /* 0x0048 */ unsigned char Deferred;
  /* 0x0049 */ struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;
  /* 0x0415 */ char __PADDING__[3];
} WHEAP_ERROR_SOURCE, *PWHEAP_ERROR_SOURCE; /* size: 0x0418 */

typedef struct _WHEAP_ERROR_SOURCE_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Count;
  /* 0x0008 */ struct _LIST_ENTRY Items;
  /* 0x0010 */ struct _KEVENT InsertLock;
} WHEAP_ERROR_SOURCE_TABLE, *PWHEAP_ERROR_SOURCE_TABLE; /* size: 0x0020 */

typedef struct _WHEAP_INFO_BLOCK
{
  /* 0x0000 */ unsigned long ErrorSourceCount;
  /* 0x0004 */ struct _WHEAP_ERROR_SOURCE_TABLE* ErrorSourceTable;
  /* 0x0008 */ struct _WHEAP_WORK_QUEUE* WorkQueue;
} WHEAP_INFO_BLOCK, *PWHEAP_INFO_BLOCK; /* size: 0x000c */

typedef struct _WHEAP_WORK_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long ListLock;
  /* 0x000c */ volatile long ItemCount;
  /* 0x0010 */ struct _KDPC Dpc;
  /* 0x0030 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0040 */ void* WorkRoutine /* function */;
} WHEAP_WORK_QUEUE, *PWHEAP_WORK_QUEUE; /* size: 0x0044 */

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long SecondaryUncorrectableErrorMask;
  /* 0x0024 */ unsigned long SecondaryUncorrectableErrorSev;
  /* 0x0028 */ unsigned long SecondaryCapsAndControl;
} WHEA_AER_BRIDGE_DESCRIPTOR, *PWHEA_AER_BRIDGE_DESCRIPTOR; /* size: 0x002c */

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
} WHEA_AER_ENDPOINT_DESCRIPTOR, *PWHEA_AER_ENDPOINT_DESCRIPTOR; /* size: 0x0020 */

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long RootErrorCommand;
} WHEA_AER_ROOTPORT_DESCRIPTOR, *PWHEA_AER_ROOTPORT_DESCRIPTOR; /* size: 0x0024 */

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
} WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef union _WHEA_ERROR_PACKET_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved1 : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long HypervisorError : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved2 : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_PACKET_V2
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ union _WHEA_ERROR_PACKET_FLAGS Flags;
  /* 0x0010 */ enum _WHEA_ERROR_TYPE ErrorType;
  /* 0x0014 */ enum _WHEA_ERROR_SEVERITY ErrorSeverity;
  /* 0x0018 */ unsigned long ErrorSourceId;
  /* 0x001c */ enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
  /* 0x0020 */ struct _GUID NotifyType;
  /* 0x0030 */ unsigned __int64 Context;
  /* 0x0038 */ enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
  /* 0x003c */ unsigned long Reserved1;
  /* 0x0040 */ unsigned long DataOffset;
  /* 0x0044 */ unsigned long DataLength;
  /* 0x0048 */ unsigned long PshedDataOffset;
  /* 0x004c */ unsigned long PshedDataLength;
} WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2; /* size: 0x0050 */

typedef struct _WHEA_ERROR_RECORD
{
  /* 0x0000 */ struct _WHEA_ERROR_RECORD_HEADER Header;
  /* 0x0080 */ struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
} WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD; /* size: 0x00c8 */

typedef struct _WHEA_ERROR_RECORD_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ union _WHEA_REVISION Revision;
  /* 0x0006 */ unsigned long SignatureEnd;
  /* 0x000a */ unsigned short SectionCount;
  /* 0x000c */ enum _WHEA_ERROR_SEVERITY Severity;
  /* 0x0010 */ union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ union _WHEA_TIMESTAMP Timestamp;
  /* 0x0020 */ struct _GUID PlatformId;
  /* 0x0030 */ struct _GUID PartitionId;
  /* 0x0040 */ struct _GUID CreatorId;
  /* 0x0050 */ struct _GUID NotifyType;
  /* 0x0060 */ unsigned __int64 RecordId;
  /* 0x0068 */ union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  /* 0x006c */ union _WHEA_PERSISTENCE_INFO PersistenceInfo;
  /* 0x0074 */ unsigned char Reserved[12];
} WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER; /* size: 0x0080 */

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS; /* size: 0x0004 */

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PlatformId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Timestamp : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PartitionId : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  /* 0x0000 */ unsigned long SectionOffset;
  /* 0x0004 */ unsigned long SectionLength;
  /* 0x0008 */ union _WHEA_REVISION Revision;
  /* 0x000a */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ struct _GUID SectionType;
  /* 0x0020 */ struct _GUID FRUId;
  /* 0x0030 */ enum _WHEA_ERROR_SEVERITY SectionSeverity;
  /* 0x0034 */ char FRUText[20];
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR; /* size: 0x0048 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Primary : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ContainmentWarning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reset : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long ThresholdExceeded : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ResourceNotAvailable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long LatentError : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS; /* size: 0x0004 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char FRUId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char FRUText : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS; /* size: 0x0001 */

typedef enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
} WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x000c */ enum _WHEA_ERROR_SOURCE_STATE State;
  /* 0x0010 */ unsigned long MaxRawDataLength;
  /* 0x0014 */ unsigned long NumRecordsToPreallocate;
  /* 0x0018 */ unsigned long MaxSectionsPerRecord;
  /* 0x001c */ unsigned long ErrorSourceId;
  /* 0x0020 */ unsigned long PlatformErrorSourceId;
  /* 0x0024 */ unsigned long Flags;
  union // _TAG_UNNAMED_201
  {
    union
    {
      /* 0x0028 */ struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
      /* 0x0028 */ struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
      /* 0x0028 */ struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
    }; /* size: 0x03a4 */
  } /* size: 0x03a4 */ Info;
} WHEA_ERROR_SOURCE_DESCRIPTOR, *PWHEA_ERROR_SOURCE_DESCRIPTOR; /* size: 0x03cc */

typedef enum _WHEA_ERROR_SOURCE_STATE
{
  WheaErrSrcStateStopped = 1,
  WheaErrSrcStateStarted = 2,
} WHEA_ERROR_SOURCE_STATE, *PWHEA_ERROR_SOURCE_STATE;

typedef enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeMax = 12,
} WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef union _WHEA_ERROR_STATUS
{
  union
  {
    /* 0x0000 */ unsigned __int64 ErrorStatus;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ErrorType : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Address : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Control : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 Data : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned __int64 Responder : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned __int64 Requester : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 FirstError : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned __int64 Overflow : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 41; /* bit position: 23 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} WHEA_ERROR_STATUS, *PWHEA_ERROR_STATUS; /* size: 0x0008 */

typedef enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
} WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Reserved;
  /* 0x0003 */ unsigned char Enabled;
  /* 0x0004 */ unsigned long ErrStatusBlockLength;
  /* 0x0008 */ unsigned long RelatedErrorSourceId;
  /* 0x000c */ unsigned char ErrStatusAddressSpaceID;
  /* 0x000d */ unsigned char ErrStatusAddressBitWidth;
  /* 0x000e */ unsigned char ErrStatusAddressBitOffset;
  /* 0x000f */ unsigned char ErrStatusAddressAccessSize;
  /* 0x0010 */ union _LARGE_INTEGER ErrStatusAddress;
  /* 0x0018 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
} WHEA_GENERIC_ERROR_DESCRIPTOR, *PWHEA_GENERIC_ERROR_DESCRIPTOR; /* size: 0x0034 */

typedef struct _WHEA_IPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CMC_DESCRIPTOR, *PWHEA_IPF_CMC_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_IPF_CPE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CPE_DESCRIPTOR, *PWHEA_IPF_CPE_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_IPF_MCA_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_MCA_DESCRIPTOR, *PWHEA_IPF_MCA_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_MEMORY_ERROR_SECTION
{
  /* 0x0000 */ union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
  /* 0x0008 */ union _WHEA_ERROR_STATUS ErrorStatus;
  /* 0x0010 */ unsigned __int64 PhysicalAddress;
  /* 0x0018 */ unsigned __int64 PhysicalAddressMask;
  /* 0x0020 */ unsigned short Node;
  /* 0x0022 */ unsigned short Card;
  /* 0x0024 */ unsigned short Module;
  /* 0x0026 */ unsigned short Bank;
  /* 0x0028 */ unsigned short Device;
  /* 0x002a */ unsigned short Row;
  /* 0x002c */ unsigned short Column;
  /* 0x002e */ unsigned short BitPosition;
  /* 0x0030 */ unsigned __int64 RequesterId;
  /* 0x0038 */ unsigned __int64 ResponderId;
  /* 0x0040 */ unsigned __int64 TargetId;
  /* 0x0048 */ unsigned char ErrorType;
} WHEA_MEMORY_ERROR_SECTION, *PWHEA_MEMORY_ERROR_SECTION; /* size: 0x0049 */

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ErrorStatus : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 PhysicalAddress : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 PhysicalAddressMask : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 Node : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Card : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Module : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 Bank : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 Device : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 Row : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Column : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 BitPosition : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 RequesterId : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 ResponderId : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 TargetId : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 ErrorType : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned __int64 Reserved : 49; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 ValidBits;
  }; /* size: 0x0008 */
} WHEA_MEMORY_ERROR_SECTION_VALIDBITS, *PWHEA_MEMORY_ERROR_SECTION_VALIDBITS; /* size: 0x0008 */

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ union _WHEA_NOTIFICATION_FLAGS Flags;
  union // _TAG_UNNAMED_202
  {
    union
    {
      struct // _TAG_UNNAMED_203
      {
        /* 0x0004 */ unsigned long PollInterval;
      } /* size: 0x0004 */ Polled;
      struct // _TAG_UNNAMED_204
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Interrupt;
      struct // _TAG_UNNAMED_204
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ LocalInterrupt;
      struct // _TAG_UNNAMED_204
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sci;
      struct // _TAG_UNNAMED_204
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Nmi;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} WHEA_NOTIFICATION_DESCRIPTOR, *PWHEA_NOTIFICATION_DESCRIPTOR; /* size: 0x001c */

typedef union _WHEA_NOTIFICATION_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short PollIntervalRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short SwitchToPollingThresholdRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short SwitchToPollingWindowRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short ErrorThresholdRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short ErrorThresholdWindowRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_NOTIFICATION_FLAGS, *PWHEA_NOTIFICATION_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_PCI_SLOT_NUMBER
{
  union // _TAG_UNNAMED_205
  {
    union
    {
      struct // _TAG_UNNAMED_206
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long DeviceNumber : 5; /* bit position: 0 */
          /* 0x0000 */ unsigned long FunctionNumber : 3; /* bit position: 5 */
          /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 8 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
} WHEA_PCI_SLOT_NUMBER, *PWHEA_PCI_SLOT_NUMBER; /* size: 0x0004 */

typedef union _WHEA_PERSISTENCE_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Signature : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Length : 24; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Identifier : 16; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Attributes : 2; /* bit position: 56 */
      /* 0x0000 */ unsigned __int64 DoNotLog : 1; /* bit position: 58 */
      /* 0x0000 */ unsigned __int64 Reserved : 5; /* bit position: 59 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 AsULONGLONG;
  }; /* size: 0x0008 */
} WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO; /* size: 0x0008 */

typedef union _WHEA_REVISION
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char MinorRevision;
      /* 0x0001 */ unsigned char MajorRevision;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_REVISION, *PWHEA_REVISION; /* size: 0x0002 */

typedef union _WHEA_TIMESTAMP
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Seconds : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Minutes : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Hours : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Precise : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 Day : 8; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 Month : 8; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Year : 8; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 Century : 8; /* bit position: 56 */
    }; /* bitfield */
    /* 0x0000 */ union _LARGE_INTEGER AsLARGE_INTEGER;
  }; /* size: 0x0008 */
} WHEA_TIMESTAMP, *PWHEA_TIMESTAMP; /* size: 0x0008 */

typedef struct _WHEA_XPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  /* 0x0024 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_CMC_DESCRIPTOR, *PWHEA_XPF_CMC_DESCRIPTOR; /* size: 0x03a4 */

typedef struct _WHEA_XPF_MCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ union _XPF_MCE_FLAGS Flags;
  /* 0x0008 */ unsigned __int64 MCG_Capability;
  /* 0x0010 */ unsigned __int64 MCG_GlobalControl;
  /* 0x0018 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_MCE_DESCRIPTOR, *PWHEA_XPF_MCE_DESCRIPTOR; /* size: 0x0398 */

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR
{
  /* 0x0000 */ unsigned char BankNumber;
  /* 0x0001 */ unsigned char ClearOnInitialization;
  /* 0x0002 */ unsigned char StatusDataFormat;
  /* 0x0003 */ union _XPF_MC_BANK_FLAGS Flags;
  /* 0x0004 */ unsigned long ControlMsr;
  /* 0x0008 */ unsigned long StatusMsr;
  /* 0x000c */ unsigned long AddressMsr;
  /* 0x0010 */ unsigned long MiscMsr;
  /* 0x0014 */ unsigned __int64 ControlData;
} WHEA_XPF_MC_BANK_DESCRIPTOR, *PWHEA_XPF_MC_BANK_DESCRIPTOR; /* size: 0x001c */

typedef struct _WHEA_XPF_NMI_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
} WHEA_XPF_NMI_DESCRIPTOR, *PWHEA_XPF_NMI_DESCRIPTOR; /* size: 0x0003 */

typedef struct _WMI_BUFFER_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  /* 0x0004 */ unsigned long SavedOffset;
  /* 0x0008 */ volatile unsigned long CurrentOffset;
  /* 0x000c */ volatile long ReferenceCount;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ __int64 SequenceNumber;
  union
  {
    struct /* bitfield */
    {
      /* 0x0020 */ unsigned __int64 ClockType : 3; /* bit position: 0 */
      /* 0x0020 */ unsigned __int64 Frequency : 61; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0020 */ struct _SINGLE_LIST_ENTRY SlistEntry;
    /* 0x0020 */ struct _WMI_BUFFER_HEADER* NextBuffer;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _ETW_BUFFER_CONTEXT ClientContext;
  /* 0x002c */ enum _ETW_BUFFER_STATE State;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned short BufferFlag;
  /* 0x0036 */ unsigned short BufferType;
  union
  {
    /* 0x0038 */ unsigned long Padding1[4];
    /* 0x0038 */ struct _ETW_REF_CLOCK ReferenceTime;
    /* 0x0038 */ struct _LIST_ENTRY GlobalEntry;
    struct
    {
      /* 0x0038 */ void* Pointer0;
      /* 0x003c */ void* Pointer1;
      /* 0x0040 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} WMI_BUFFER_HEADER, *PWMI_BUFFER_HEADER; /* size: 0x0048 */

typedef struct _WMI_LOGGER_CONTEXT
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long BufferSize;
  /* 0x0008 */ unsigned long MaximumEventSize;
  /* 0x000c */ unsigned long LoggerMode;
  /* 0x0010 */ long AcceptNewEvents;
  /* 0x0014 */ unsigned long EventMarker[1];
  /* 0x0018 */ unsigned long ErrorMarker;
  /* 0x001c */ unsigned long SizeMask;
  /* 0x0020 */ void* GetCpuClock /* function */;
  /* 0x0024 */ struct _ETHREAD* LoggerThread;
  /* 0x0028 */ long LoggerStatus;
  /* 0x002c */ unsigned long FailureReason;
  /* 0x0030 */ struct _ETW_BUFFER_QUEUE BufferQueue;
  /* 0x003c */ struct _ETW_BUFFER_QUEUE OverflowQueue;
  /* 0x0048 */ struct _LIST_ENTRY GlobalList;
  /* 0x0050 */ struct _LIST_ENTRY ProviderBinaryList;
  union
  {
    /* 0x0058 */ struct _WMI_BUFFER_HEADER* BatchedBufferList;
    /* 0x0058 */ struct _EX_FAST_REF CurrentBuffer;
  }; /* size: 0x0004 */
  /* 0x005c */ struct _UNICODE_STRING LoggerName;
  /* 0x0064 */ struct _UNICODE_STRING LogFileName;
  /* 0x006c */ struct _UNICODE_STRING LogFilePattern;
  /* 0x0074 */ struct _UNICODE_STRING NewLogFileName;
  /* 0x007c */ unsigned long ClockType;
  /* 0x0080 */ unsigned long LastFlushedBuffer;
  /* 0x0084 */ unsigned long FlushTimer;
  /* 0x0088 */ unsigned long FlushThreshold;
  /* 0x0090 */ union _LARGE_INTEGER ByteOffset;
  /* 0x0098 */ unsigned long MinimumBuffers;
  /* 0x009c */ volatile long BuffersAvailable;
  /* 0x00a0 */ volatile long NumberOfBuffers;
  /* 0x00a4 */ unsigned long MaximumBuffers;
  /* 0x00a8 */ volatile unsigned long EventsLost;
  /* 0x00ac */ volatile long PeakBuffersCount;
  /* 0x00b0 */ unsigned long BuffersWritten;
  /* 0x00b4 */ unsigned long LogBuffersLost;
  /* 0x00b8 */ unsigned long RealTimeBuffersDelivered;
  /* 0x00bc */ unsigned long RealTimeBuffersLost;
  /* 0x00c0 */ long* SequencePtr;
  /* 0x00c4 */ unsigned long LocalSequence;
  /* 0x00c8 */ struct _GUID InstanceGuid;
  /* 0x00d8 */ unsigned long MaximumFileSize;
  /* 0x00dc */ long FileCounter;
  /* 0x00e0 */ enum _POOL_TYPE PoolType;
  /* 0x00e8 */ struct _ETW_REF_CLOCK ReferenceTime;
  /* 0x00f8 */ long CollectionOn;
  /* 0x00fc */ unsigned long ProviderInfoSize;
  /* 0x0100 */ struct _LIST_ENTRY Consumers;
  /* 0x0108 */ unsigned long NumConsumers;
  /* 0x010c */ struct _ETW_REALTIME_CONSUMER* TransitionConsumer;
  /* 0x0110 */ void* RealtimeLogfileHandle;
  /* 0x0114 */ struct _UNICODE_STRING RealtimeLogfileName;
  /* 0x0120 */ union _LARGE_INTEGER RealtimeWriteOffset;
  /* 0x0128 */ union _LARGE_INTEGER RealtimeReadOffset;
  /* 0x0130 */ union _LARGE_INTEGER RealtimeLogfileSize;
  /* 0x0138 */ unsigned __int64 RealtimeLogfileUsage;
  /* 0x0140 */ unsigned __int64 RealtimeMaximumFileSize;
  /* 0x0148 */ unsigned long RealtimeBuffersSaved;
  /* 0x0150 */ struct _ETW_REF_CLOCK RealtimeReferenceTime;
  /* 0x0160 */ enum _ETW_RT_EVENT_LOSS NewRTEventsLost;
  /* 0x0164 */ struct _KEVENT LoggerEvent;
  /* 0x0174 */ struct _KEVENT FlushEvent;
  /* 0x0188 */ struct _KTIMER FlushTimeOutTimer;
  /* 0x01b0 */ struct _KDPC LoggerDpc;
  /* 0x01d0 */ struct _KMUTANT LoggerMutex;
  /* 0x01f0 */ struct _EX_PUSH_LOCK LoggerLock;
  union
  {
    /* 0x01f4 */ unsigned long BufferListSpinLock;
    /* 0x01f4 */ struct _EX_PUSH_LOCK BufferListPushLock;
  }; /* size: 0x0004 */
  /* 0x01f8 */ struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;
  /* 0x0234 */ struct _TOKEN_ACCESS_INFORMATION* TokenAccessInformation;
  /* 0x0238 */ struct _EX_FAST_REF SecurityDescriptor;
  /* 0x0240 */ union _LARGE_INTEGER StartTime;
  /* 0x0248 */ void* LogFileHandle;
  /* 0x0250 */ __int64 BufferSequenceNumber;
  union
  {
    /* 0x0258 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0258 */ unsigned long Persistent : 1; /* bit position: 0 */
      /* 0x0258 */ unsigned long AutoLogger : 1; /* bit position: 1 */
      /* 0x0258 */ unsigned long FsReady : 1; /* bit position: 2 */
      /* 0x0258 */ unsigned long RealTime : 1; /* bit position: 3 */
      /* 0x0258 */ unsigned long Wow : 1; /* bit position: 4 */
      /* 0x0258 */ unsigned long KernelTrace : 1; /* bit position: 5 */
      /* 0x0258 */ unsigned long NoMoreEnable : 1; /* bit position: 6 */
      /* 0x0258 */ unsigned long StackTracing : 1; /* bit position: 7 */
      /* 0x0258 */ unsigned long ErrorLogged : 1; /* bit position: 8 */
      /* 0x0258 */ unsigned long RealtimeLoggerContextFreed : 1; /* bit position: 9 */
      /* 0x0258 */ unsigned long PebsTracing : 1; /* bit position: 10 */
      /* 0x0258 */ unsigned long PmcCounters : 1; /* bit position: 11 */
      /* 0x0258 */ unsigned long PageAlignBuffers : 1; /* bit position: 12 */
      /* 0x0258 */ unsigned long StackLookasideListAllocated : 1; /* bit position: 13 */
      /* 0x0258 */ unsigned long SecurityTrace : 1; /* bit position: 14 */
      /* 0x0258 */ unsigned long SpareFlags1 : 1; /* bit position: 15 */
      /* 0x0258 */ unsigned long SystemLoggerIndex : 8; /* bit position: 16 */
      /* 0x0258 */ unsigned long StackCaching : 1; /* bit position: 24 */
      /* 0x0258 */ unsigned long SpareFlags2 : 7; /* bit position: 25 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x025c */ volatile unsigned long RequestFlag;
    struct /* bitfield */
    {
      /* 0x025c */ unsigned long DbgRequestNewFile : 1; /* bit position: 0 */
      /* 0x025c */ unsigned long DbgRequestUpdateFile : 1; /* bit position: 1 */
      /* 0x025c */ unsigned long DbgRequestFlush : 1; /* bit position: 2 */
      /* 0x025c */ unsigned long DbgRequestDisableRealtime : 1; /* bit position: 3 */
      /* 0x025c */ unsigned long DbgRequestDisconnectConsumer : 1; /* bit position: 4 */
      /* 0x025c */ unsigned long DbgRequestConnectConsumer : 1; /* bit position: 5 */
      /* 0x025c */ unsigned long DbgRequestNotifyConsumer : 1; /* bit position: 6 */
      /* 0x025c */ unsigned long DbgRequestUpdateHeader : 1; /* bit position: 7 */
      /* 0x025c */ unsigned long DbgRequestDeferredFlush : 1; /* bit position: 8 */
      /* 0x025c */ unsigned long DbgRequestDeferredFlushTimer : 1; /* bit position: 9 */
      /* 0x025c */ unsigned long DbgRequestFlushTimer : 1; /* bit position: 10 */
      /* 0x025c */ unsigned long DbgRequestUpdateDebugger : 1; /* bit position: 11 */
      /* 0x025c */ unsigned long DbgSpareRequestFlags : 20; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0260 */ struct _RTL_BITMAP HookIdMap;
  /* 0x0268 */ struct _ETW_STACK_CACHE* StackCache;
  /* 0x026c */ struct _ETW_PMC_SUPPORT* PmcData;
  /* 0x0270 */ struct _LIST_ENTRY WinRtProviderBinaryList;
  /* 0x0278 */ struct _WMI_BUFFER_HEADER** ScratchArray;
  /* 0x027c */ struct _DISALLOWED_GUIDS DisallowedGuids;
  /* 0x0284 */ struct _ESILO* ServerSilo;
} WMI_LOGGER_CONTEXT, *PWMI_LOGGER_CONTEXT; /* size: 0x0288 */

typedef struct _WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME; /* size: 0x0008 */

typedef enum _WORKING_SET_TYPE
{
  WorkingSetTypeUser = 0,
  WorkingSetTypeSession = 1,
  WorkingSetTypeSystemTypes = 2,
  WorkingSetTypeSystemCache = 2,
  WorkingSetTypePagedPool = 3,
  WorkingSetTypeSystemPtes = 4,
  WorkingSetTypeMaximum = 5,
} WORKING_SET_TYPE, *PWORKING_SET_TYPE;

typedef struct _WORK_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY WorkQueueLinks;
  union // _TAG_UNNAMED_207
  {
    union
    {
      struct // _TAG_UNNAMED_208
      {
        /* 0x0008 */ struct _FILE_OBJECT* FileObject;
      } /* size: 0x0004 */ Read;
      struct // _TAG_UNNAMED_209
      {
        /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
      } /* size: 0x0004 */ Write;
      struct // _TAG_UNNAMED_210
      {
        /* 0x0008 */ struct _KEVENT* Event;
      } /* size: 0x0004 */ Event;
      struct // _TAG_UNNAMED_211
      {
        /* 0x0008 */ unsigned long Reason;
      } /* size: 0x0004 */ Notification;
      struct // _TAG_UNNAMED_212
      {
        /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x000c */ struct _IO_STATUS_BLOCK* IoStatus;
        /* 0x0010 */ struct _KEVENT CallerWaitEvent;
        /* 0x0020 */ unsigned char IsLowPriWriteBehind;
        /* 0x0021 */ char __PADDING__[3];
      } /* size: 0x001c */ LowPriWrite;
      struct // _TAG_UNNAMED_213
      {
        /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x0010 */ union _LARGE_INTEGER FileOffset;
        /* 0x0018 */ struct _FILE_OBJECT* FileObject;
        /* 0x001c */ unsigned long Length;
        /* 0x0020 */ struct _SINGLE_LIST_ENTRY* PrefetchList;
        /* 0x0024 */ unsigned long PrefetchPagePriority;
        /* 0x0028 */ struct _MDL* Mdl;
        /* 0x002c */ struct _IO_STATUS_BLOCK* IoStatusBlock;
        /* 0x0030 */ struct _CC_ASYNC_READ_CONTEXT* CallbackContext;
        /* 0x0034 */ struct _EPROCESS* OriginatingProcess;
        /* 0x0038 */ char RequestorMode;
        /* 0x003c */ unsigned long NestingLevel;
      } /* size: 0x0038 */ AsyncRead;
    }; /* size: 0x0038 */
  } /* size: 0x0038 */ Parameters;
  /* 0x0040 */ unsigned char Function;
  /* 0x0041 */ char __PADDING__[7];
} WORK_QUEUE_ENTRY, *PWORK_QUEUE_ENTRY; /* size: 0x0048 */

typedef struct _WORK_QUEUE_ITEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0008 */ void* WorkerRoutine /* function */;
  /* 0x000c */ void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; /* size: 0x0010 */

typedef enum _WOW64_SHARED_INFORMATION
{
  SharedNtdll32LdrInitializeThunk = 0,
  SharedNtdll32KiUserExceptionDispatcher = 1,
  SharedNtdll32KiUserApcDispatcher = 2,
  SharedNtdll32KiUserCallbackDispatcher = 3,
  SharedNtdll32ExpInterlockedPopEntrySListFault = 4,
  SharedNtdll32ExpInterlockedPopEntrySListResume = 5,
  SharedNtdll32ExpInterlockedPopEntrySListEnd = 6,
  SharedNtdll32RtlUserThreadStart = 7,
  SharedNtdll32pQueryProcessDebugInformationRemote = 8,
  SharedNtdll32BaseAddress = 9,
  SharedNtdll32LdrSystemDllInitBlock = 10,
  Wow64SharedPageEntriesCount = 11,
} WOW64_SHARED_INFORMATION, *PWOW64_SHARED_INFORMATION;

typedef struct _X86_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned long Dr7;
  /* 0x0008 */ unsigned long CurrentSymbolStart;
  /* 0x000c */ unsigned long CurrentSymbolEnd;
} X86_DBGKD_CONTROL_SET, *PX86_DBGKD_CONTROL_SET; /* size: 0x0010 */

typedef struct _X86_KTRAP_FRAME
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned long DbgArgPointer;
  /* 0x0010 */ unsigned long TempSegCs;
  /* 0x0014 */ unsigned long TempEsp;
  /* 0x0018 */ unsigned long Dr0;
  /* 0x001c */ unsigned long Dr1;
  /* 0x0020 */ unsigned long Dr2;
  /* 0x0024 */ unsigned long Dr3;
  /* 0x0028 */ unsigned long Dr6;
  /* 0x002c */ unsigned long Dr7;
  /* 0x0030 */ unsigned long SegGs;
  /* 0x0034 */ unsigned long SegEs;
  /* 0x0038 */ unsigned long SegDs;
  /* 0x003c */ unsigned long Edx;
  /* 0x0040 */ unsigned long Ecx;
  /* 0x0044 */ unsigned long Eax;
  /* 0x0048 */ unsigned char PreviousPreviousMode;
  /* 0x0049 */ unsigned char EntropyQueueDpc;
  /* 0x004a */ unsigned char Reserved[2];
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME, *PX86_KTRAP_FRAME; /* size: 0x008c */

typedef struct _X86_KTRAP_FRAME_BLUE
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned short TempSegCs;
  /* 0x000e */ unsigned char Logging;
  /* 0x000f */ unsigned char FrameType;
  /* 0x0010 */ unsigned long TempEsp;
  /* 0x0014 */ unsigned long Dr0;
  /* 0x0018 */ unsigned long Dr1;
  /* 0x001c */ unsigned long Dr2;
  /* 0x0020 */ unsigned long Dr3;
  /* 0x0024 */ unsigned long Dr6;
  /* 0x0028 */ unsigned long Dr7;
  /* 0x002c */ unsigned long SegGs;
  /* 0x0030 */ unsigned long SegEs;
  /* 0x0034 */ unsigned long SegDs;
  /* 0x0038 */ unsigned long Edx;
  /* 0x003c */ unsigned long Ecx;
  /* 0x0040 */ unsigned long Eax;
  /* 0x0044 */ unsigned char PreviousPreviousMode;
  /* 0x0045 */ unsigned char EntropyQueueDpc;
  /* 0x0046 */ unsigned char Reserved[2];
  /* 0x0048 */ unsigned long MxCsr;
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME_BLUE, *PX86_KTRAP_FRAME_BLUE; /* size: 0x008c */

typedef union _XPF_MCE_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long MCG_CapabilityRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long MCG_GlobalControlRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} XPF_MCE_FLAGS, *PXPF_MCE_FLAGS; /* size: 0x0004 */

typedef union _XPF_MC_BANK_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ClearOnInitializationRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ControlDataRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} XPF_MC_BANK_FLAGS, *PXPF_MC_BANK_FLAGS; /* size: 0x0001 */

typedef struct _XSAVE_AREA
{
  /* 0x0000 */ struct _XSAVE_FORMAT LegacyState;
  /* 0x0200 */ struct _XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA; /* size: 0x0240 */

typedef struct _XSAVE_AREA_HEADER
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned __int64 CompactionMask;
  /* 0x0010 */ unsigned __int64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER; /* size: 0x0040 */

typedef struct _XSAVE_FORMAT
{
  /* 0x0000 */ unsigned short ControlWord;
  /* 0x0002 */ unsigned short StatusWord;
  /* 0x0004 */ unsigned char TagWord;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short ErrorOpcode;
  /* 0x0008 */ unsigned long ErrorOffset;
  /* 0x000c */ unsigned short ErrorSelector;
  /* 0x000e */ unsigned short Reserved2;
  /* 0x0010 */ unsigned long DataOffset;
  /* 0x0014 */ unsigned short DataSelector;
  /* 0x0016 */ unsigned short Reserved3;
  /* 0x0018 */ unsigned long MxCsr;
  /* 0x001c */ unsigned long MxCsr_Mask;
  /* 0x0020 */ struct _M128A FloatRegisters[8];
  /* 0x00a0 */ struct _M128A XmmRegisters[8];
  /* 0x0120 */ unsigned char Reserved4[224];
} XSAVE_FORMAT, *PXSAVE_FORMAT; /* size: 0x0200 */

typedef struct _XSTATE_CONFIGURATION
{
  /* 0x0000 */ unsigned __int64 EnabledFeatures;
  /* 0x0008 */ unsigned __int64 EnabledVolatileFeatures;
  /* 0x0010 */ unsigned long Size;
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned long OptimizedSave : 1; /* bit position: 0 */
    /* 0x0014 */ unsigned long CompactionEnabled : 1; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0018 */ struct _XSTATE_FEATURE Features[64];
  /* 0x0218 */ unsigned __int64 EnabledSupervisorFeatures;
  /* 0x0220 */ unsigned __int64 AlignedFeatures;
  /* 0x0228 */ unsigned long AllFeatureSize;
  /* 0x022c */ unsigned long AllFeatures[64];
  /* 0x032c */ long __PADDING__[1];
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; /* size: 0x0330 */

typedef struct _XSTATE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long Reserved1;
  /* 0x0010 */ struct _XSAVE_AREA* Area;
  /* 0x0014 */ unsigned long Reserved2;
  /* 0x0018 */ void* Buffer;
  /* 0x001c */ unsigned long Reserved3;
} XSTATE_CONTEXT, *PXSTATE_CONTEXT; /* size: 0x0020 */

typedef struct _XSTATE_FEATURE
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE; /* size: 0x0008 */

typedef struct _XSTATE_SAVE
{
  union
  {
    struct
    {
      /* 0x0000 */ __int64 Reserved1;
      /* 0x0008 */ unsigned long Reserved2;
      /* 0x000c */ struct _XSTATE_SAVE* Prev;
      /* 0x0010 */ struct _XSAVE_AREA* Reserved3;
      /* 0x0014 */ struct _KTHREAD* Thread;
      /* 0x0018 */ void* Reserved4;
      /* 0x001c */ unsigned char Level;
    }; /* size: 0x001d */
    /* 0x0000 */ struct _XSTATE_CONTEXT XStateContext;
  }; /* size: 0x0020 */
} XSTATE_SAVE, *PXSTATE_SAVE; /* size: 0x0020 */

typedef struct _flags
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Removable : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char GroupAssigned : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned char GroupCommitted : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned char GroupAssignmentFixed : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char Fill : 4; /* bit position: 4 */
  }; /* bitfield */
} flags, *Pflags; /* size: 0x0001 */

typedef struct _iobuf
{
  /* 0x0000 */ char* _ptr;
  /* 0x0004 */ int _cnt;
  /* 0x0008 */ char* _base;
  /* 0x000c */ int _flag;
  /* 0x0010 */ int _file;
  /* 0x0014 */ int _charbuf;
  /* 0x0018 */ int _bufsiz;
  /* 0x001c */ char* _tmpfname;
} iobuf, *Piobuf; /* size: 0x0020 */

typedef union _u
{
  union
  {
    /* 0x0000 */ struct _CM_KEY_NODE KeyNode;
    /* 0x0000 */ struct _CM_KEY_VALUE KeyValue;
    /* 0x0000 */ struct _CM_KEY_SECURITY KeySecurity;
    /* 0x0000 */ struct _CM_KEY_INDEX KeyIndex;
    /* 0x0000 */ struct _CM_BIG_DATA ValueData;
    /* 0x0000 */ unsigned long KeyList[1];
    /* 0x0000 */ wchar_t KeyString[1];
  }; /* size: 0x0050 */
} u, *Pu; /* size: 0x0050 */

struct tagSWITCH_CONTEXT
{
  /* 0x0000 */ struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute;
  /* 0x0018 */ struct tagSWITCH_CONTEXT_DATA Data;
}; /* size: 0x0068 */

struct tagSWITCH_CONTEXT_ATTRIBUTE
{
  /* 0x0000 */ unsigned __int64 ulContextUpdateCounter;
  /* 0x0008 */ int fAllowContextUpdate;
  /* 0x000c */ int fEnableTrace;
  /* 0x0010 */ unsigned __int64 EtwHandle;
}; /* size: 0x0018 */

struct tagSWITCH_CONTEXT_DATA
{
  /* 0x0000 */ unsigned __int64 ullOsMaxVersionTested;
  /* 0x0008 */ unsigned long ulTargetPlatform;
  /* 0x0010 */ unsigned __int64 ullContextMinimum;
  /* 0x0018 */ struct _GUID guPlatform;
  /* 0x0028 */ struct _GUID guMinPlatform;
  /* 0x0038 */ unsigned long ulContextSource;
  /* 0x003c */ unsigned long ulElementCount;
  /* 0x0040 */ struct _GUID guElements[1];
}; /* size: 0x0050 */

/*
?BTreeChangeKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGKPAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeDelete@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@KPAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGJPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeDeleteNode@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeDeleteNode@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeDescendToSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAUPATH_ENTRY@1@KPAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAUPATH_ENTRY@1@KPAUSEARCH_RESULT@1@@Z
?BTreeFindLeafSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAU23@K@Z
?BTreeFindLeafSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAU23@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeFindNextEntry@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAU_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeFindPreviousEntry@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGKPAUSEARCH_RESULT@1@KPAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGKPAUSEARCH_RESULT@1@KPAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGKPAUSEARCH_RESULT@1@KPAUPATH_ENTRY@1@@Z
?BTreeInsert@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@PAU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@PAUSEARCH_RESULT@1@@Z
?BTreeInsertEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@PAUSEARCH_RESULT@1@PAK@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGJPAU1@PAUSEARCH_RESULT@1@PAT_SM_PAGE_KEY@@@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@PAUSEARCH_RESULT@1@PAT_SM_PAGE_KEY@@@Z
?BTreeIteratorAttachEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAUITERATOR@1@PAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAUITERATOR@1@PAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAUITERATOR@1@PAU1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUITERATOR@1@PAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGXPAU1@PAUITERATOR@1@PAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUITERATOR@1@PAUSEARCH_RESULT@1@@Z
?BTreeMergeNodes@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUSEARCH_RESULT@1@PAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGXPAU1@PAUSEARCH_RESULT@1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUSEARCH_RESULT@1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNewNode@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@KK@Z
?BTreeNodeFindKey@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGKPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@T_SM_PAGE_KEY@@@Z
?BTreeNodeFree@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeRedistribute@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@KPAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGJPAU1@T_SM_PAGE_KEY@@PAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@T_SM_PAGE_KEY@@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGXPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultInit@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultInit@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGXPAUSEARCH_RESULT@1@K@Z
?BTreeSplitChild@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@PAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU_SINGLE_LIST_ENTRY@@P6GJPAX3PAK@Z3PAPAU23@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@SGJPAU1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU_SINGLE_LIST_ENTRY@@P6GJPAX3PAK@Z3PAPAU23@@Z
?CompareLangIDs@@YAHPBX0@Z
?CompareLangName@@YAHPBX0@Z
?IsNeutralLanguageItem@@YGHPBUCultureDataType@@@Z
?NpCleanup@NP_CONTEXT@@SGXPAU1@K@Z
?NpGetResidentLeaf@NP_CONTEXT@@SGPAUB_TREE_NODE_HDR@@PAUNP_CTX@1@PAT_NP_LEAF_PTR@@@Z
?NpInitialize@NP_CONTEXT@@SGXPAU1@@Z
?NpLeafDerefInternal@NP_CONTEXT@@SGXPAUNP_CTX@1@PAPAX@Z
?NpLeafRefInternal@NP_CONTEXT@@SGPAXPAUNP_CTX@1@PAPAXK@Z
?NpLeafRemoveInternal@NP_CONTEXT@@SGPAXPAUNP_CTX@1@PAPAX@Z
?NpNodeAllocate@NP_CONTEXT@@SGPAXPAUNP_CTX@1@KK@Z
?NpNodeFree@NP_CONTEXT@@SGXPAUNP_CTX@1@PAXK@Z
?NpNodesPageOut@NP_CONTEXT@@SGJPAUNP_CTX@1@@Z
?NpStart@NP_CONTEXT@@SGJPAU1@PAU_NP_PARAMETERS@1@@Z
?NpiGetReservedBuffer@NP_CONTEXT@@SGPAXPAU1@PAUNP_CTX@1@@Z
?NpiLeafPageIn@NP_CONTEXT@@SGXPAU1@PAUNP_CTX@1@PAT_NP_LEAF_PTR@@@Z
?NpiLeafPageOut@NP_CONTEXT@@SGJPAU1@PAUNP_CTX@1@PAT_NP_LEAF_PTR@@K@Z
?NpiPerformPageOut@NP_CONTEXT@@SGJPAU1@PAUNP_CTX@1@@Z
?NpiRebaseCallback@NP_CONTEXT@@SGJPAX0PAK@Z
?NpiTreeWalkCallback@NP_CONTEXT@@SGJPAX0PAK@Z
?RtlStringCbCopyUnicodeString@@YGJPAGIPBU_UNICODE_STRING@@@Z
?SmAsyncReadQueueInsert@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_SM_ASYNC_READ_QUEUE@1@PAU_SM_ASYNC_DIRECT_READ_CTX@1@K@Z
?SmAsyncReadQueueWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAX@Z
?SmEmptyQueueToStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@K@Z
?SmEmptyStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@KK@Z
?SmEmptyWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAX@Z
?SmEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KPAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmFeAddComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KKK@Z
?SmFeAddFirstPass@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@KPAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@K@Z
?SmFeAddInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@KKPAU_SM_QUEUE_CONTEXT@1@K@Z
?SmFeCheckPresent@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAK2@Z
?SmFeEmpty@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@@Z
?SmFeEmptyComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@K@Z
?SmFeEmptyInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@K@Z
?SmFeEvictComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KK@Z
?SmFeEvictInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAK2@Z
?SmFeEvictUpdatePass@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAK2PAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@@@@Z
?SmFeReadInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAKPA_K2@Z
?SmFeSetEvictFailed@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KK@Z
?SmFeStoreDelete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@K@Z
?SmFeStoreEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KK@Z
?SmFreeWrapper@@YGXPAX0@Z
?SmHighMemPriorityWatchdogDpc@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_KDPC@@PAX11@Z
?SmHighMemPriorityWatchdogWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAX@Z
?SmInitialize@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SMKM_STORE_MGR_PARAMS@@@Z
?SmIoCtxPrepareToQueue@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SM_IO_CONTEXT@1@PAU1@KPAU_SM_WORK_ITEM@1@PAU_SM_QUEUE_CONTEXT@1@@Z
?SmIoCtxQueueWork@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SM_IO_CONTEXT@1@PAU1@KPAX@Z
?SmIoCtxWorkItemComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU_ST_WORK_ITEM_HDR@@PAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmKmIssueFileIo@@YGJPAU_SMKM_FILE_INFO@@PAU_SMKM_ISSUE_IO_PARAMS@@PAT_LARGE_INTEGER@@P6GXPAXPAU_IO_STATUS_BLOCK@@K@Z3@Z
?SmKmProbeAndLockAddress@@YGJPAXKPAU_MDL@@@Z
?SmPageRead@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@PAU_MDL@@PAXPAU_IO_STATUS_BLOCK@@@Z
?SmPageWrite@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@T_SM_PAGE_ADD_PARAM@@PAU_MDL@@PAXPAU_IO_STATUS_BLOCK@@K@Z
?SmPerformStoreMaintenance@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_ST_MAINTENANCE_TYPE@@@Z
?SmPickStoreForWrite@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGPAU?$SMKM_STORE@USM_TRAITS@@@@PAU1@@Z
?SmPrioritizeRegionsStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmProcessAddCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SM_WORK_ITEM@1@KPAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmProcessIoCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KKJK@Z
?SmProcessReadCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SM_WORK_ITEM@1@KPAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmQueueContextCleanup@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SM_QUEUE_CONTEXT@1@@Z
?SmReadPickStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@PAKPAPAU?$SMKM_STORE@USM_TRAITS@@@@2@Z
?SmStAllocateVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@K@Z
?SmStCheckLockInProgressRegionComplete@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@PAT_SM_VIRTUAL_REGION@@K@Z
?SmStCleanup@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?SmStDirectRead@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@PAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@@Z
?SmStDirectReadCallout@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStDirectReadComplete@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@J@Z
?SmStDirectReadIssue@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@PAX@Z
?SmStEtwFillStoreEvent@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStEtwFillStoreStatsEvent@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@PAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStFindVirtualLockedRegion@?$SMKM_STORE@USM_TRAITS@@@@SGPAU_SM_VIRTUAL_LOCKED_REGION@@PAU1@KPAX@Z
?SmStGetDataInUseKb@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@@Z
?SmStGetStoreStats@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@W4_ST_STATS_LEVEL@@PAU_ST_STATS@@PAK@Z
?SmStHelperSendCommand@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@W4_SMKM_STORE_HELPER_COMMAND@@PAU_SMKM_STORE_HELPER_PARAMS@@K@Z
?SmStInitialize@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?SmStIsRegionBusy@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@K@Z
?SmStMapPhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SGPAXPAU1@KKKK@Z
?SmStMapVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGPAXPAU1@KKKK@Z
?SmStOutSwapPrepareStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@@Z
?SmStOutSwapStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@@Z
?SmStPrioritizeRegionsStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@K@Z
?SmStReadThread@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStReadThreadCtxCleanup@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU_SMKM_STORE_READ_THREAD_CTX@@@Z
?SmStReadThreadCtxInitialize@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU_SMKM_STORE_READ_THREAD_CTX@@@Z
?SmStReleaseVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@KK@Z
?SmStStart@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@PAU_SMST_PARAMETERS@@@Z
?SmStStatsUpdate@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@J@Z
?SmStSwapStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@W4_SM_STORE_SWAP_OPERATION@@@Z
?SmStTrimWsStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@@Z
?SmStTrimWsStoreBatch@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAKPAPAXKK@Z
?SmStUnhandledExceptionFilter@?$SMKM_STORE@USM_TRAITS@@@@SGJPAXPAU_EXCEPTION_POINTERS@@@Z
?SmStUnmapPhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@KKKPADK@Z
?SmStUnmapVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@KKKPAXK@Z
?SmStUpdateMemoryCondition@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@W4_SMP_MEMORY_CONDITION@@@Z
?SmStWorkItemGet@?$SMKM_STORE@USM_TRAITS@@@@SGPAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@PAU1@PAK@Z
?SmStWorkItemQueue@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAU_ST_WORK_ITEM_HDR@@K@Z
?SmStWorker@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStWorkerThread@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStWorkerThreadStartThread@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@P6GXPAX@ZPAPAU_ETHREAD@@@Z
?SmStoreActionNotify@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_SM_STORE_ACTION_TYPE@@PAX@Z
?SmStoreContentsRundown@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmStoreMgrCallback@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SMKM_STORE_LIST@@PAXW4_SMKM_CALLBACK_TYPE@@@Z
?SmStorePrepare@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@@Z
?SmStoreRequest@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@KPAU_SM_WORK_ITEM@1@PAU_KEVENT@@PAU_IO_STATUS_BLOCK@@@Z
?SmStoreRequestEx@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@PAU_SM_WORK_ITEM@1@PAU_KEVENT@@PAU_IO_STATUS_BLOCK@@@Z
?SmStoreTerminate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_ST_ETW_TERMINATION_REASON@@J@Z
?SmStoresContentsRundown@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@@Z
?SmStoresEtaCheck@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@@Z
?SmSwapStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_SM_STORE_SWAP_OPERATION@@@Z
?SmUpdateMemoryConditions@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@W4_SMP_MEMORY_CONDITION@@@Z
?SmWdCompleteWorkItems@@YGXPAU_PF_QUEUE@@PAXJK@Z
?SmWdRemoveWorkItems@@YGXPAU_SMKM_STORE_QUEUE@@PAU_PF_QUEUE@@K@Z
?SmWorkItemFree@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@PAU_ST_WORK_ITEM_HDR@@PAJ@Z
?SmWorkItemFreeResource@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SM_WORK_ITEM@1@PAU_SM_IO_CONTEXT@1@@Z
?SmpDeviceIoCompletion@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?SmpFlushStorePages@@YGXPAX@Z
?SmpIoCompletionApc@@YGXPAXPAU_IO_STATUS_BLOCK@@K@Z
?SmpPageEvict@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@KPAX@Z
?SmpStoreMgrCallback@@YGJPAU_SMKM_STORE_LIST@@PAXW4_SMKM_CALLBACK_TYPE@@@Z
?StAcquireReadContext@?$ST_STORE@USM_TRAITS@@@@SGPAXPAU1@@Z
?StAddRemoveRegions@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StChangeState@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@PAJ@Z
?StCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?StCompactRegions@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PADK1KK@Z
?StCompactionFindEmptiest@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAPAT_ST_REGION_STATE@1@KK@Z
?StCompactionPerformEmergency@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StCompactionPerformFile@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@K@Z
?StCompactionPerformInMem@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@K@Z
?StCompactionPickPriority@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAPAT_ST_REGION_STATE@1@K1K@Z
?StCompactionWorker@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StCopyIoStats@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_IO_STATS@@PAU_ST_IO_COUNTS@@@Z
?StDeviceIoBuild@?$ST_STORE@USM_TRAITS@@@@SGPAU_ST_WORK_ITEM@1@PAU_ST_DATA_MGR@1@PAU_ST_PAGE_LOCATION@1@KPAX@Z
?StDeviceIoIssue@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_PF_QUEUE@@@Z
?StDeviceIoMarkFailed@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DEVICE_IO@1@J@Z
?StDeviceWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmCheckForCompaction@?$ST_STORE@USM_TRAITS@@@@SG?AW4_ST_COMPACTION_CHECK_RESULT@@PAU_ST_DATA_MGR@1@K@Z
?StDmCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StDmCurrentRegionSet@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KK@Z
?StDmDeviceError@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@W4_ST_DEVICE_FAIL_TYPE@1@J@Z
?StDmDeviceIoCompletion@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmDeviceIoListBuild@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_PAGE_LOCATION@1@KPAXPAU_PF_QUEUE@@PAK@Z
?StDmDeviceIoTransfer@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@PAU_ST_DEVICE_IO@1@@Z
?StDmEtaPerformIo@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KK@Z
?StDmEtaQueueRefresh@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmEtaRefresh@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmEtwPageRundown@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmEtwRegionRundown@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmGetFreeStagingRegionBytes@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@@Z
?StDmGetOutstandingRegionWrites@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@@Z
?StDmGetSpaceStats@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAK1@Z
?StDmGetStatsBitmap@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KPAEPA_K@Z
?StDmInitialize@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@0@Z
?StDmInvalidateCurrentRegions@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@@Z
?StDmLazyRegionsWorker@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@K@Z
?StDmLazyRemoveKeysWorker@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmLazyRemoveStateUpdate@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAT_SM_PAGE_KEY@@K@Z
?StDmLazyWorkItemQueue@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPageAdd@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPageEntryLazyRemove@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAU_ST_PAGE_ENTRY@1@PAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@@@@Z
?StDmPageError@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAD1PAU_ST_PAGE_LOCATION@1@J@Z
?StDmPageMove@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@T_SM_PAGE_KEY@@K@Z
?StDmPageRemove@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPageRetrieve@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_READ_CONTEXT@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPickRandomRegion@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@@Z
?StDmRegionAdd@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StDmRegionEvict@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_SEARCH_RESULTS@1@KKKK@Z
?StDmRegionGetKeys@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_SEARCH_RESULTS@1@KKKPAT_SM_PAGE_KEY@@PAK@Z
?StDmRegionRemove@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAK@Z
?StDmSinglePageCopy@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAXPAD2PAU_ST_PAGE_LOCATION@1@PAU_STDM_READ_CONTEXT@1@@Z
?StDmSinglePageRetrieveSync@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@T_SM_PAGE_KEY@@PAXPAU_ST_PAGE_ENTRY@1@@Z
?StDmSinglePageTransfer@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAXPAD11PAU_ST_PAGE_LOCATION@1@PAU_STDM_READ_CONTEXT@1@@Z
?StDmSparseBitmapAlloc@?$ST_STORE@USM_TRAITS@@@@SGPAXK@Z
?StDmSparseBitmapFree@?$ST_STORE@USM_TRAITS@@@@SGXPAX@Z
?StDmStart@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_DATA_MGR@1@PAU_STDM_PARAMETERS@@PAU_RTL_BITMAP@@PAKK@Z
?StDmUpdateRegionLazyCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@KK@Z
?StDmpCurrentRegionWrite@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@@Z
?StDmpSinglePageAdd@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_IO_PARAMS@1@PAK@Z
?StDmpSinglePageFindSpace@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KKPAPADPAK@Z
?StDmpSinglePageInsert@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_IO_PARAMS@1@PAU_ST_PAGE_ENTRY@1@@Z
?StDmpSinglePageRetrieve@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_READ_CONTEXT@1@PAU_ST_IO_PARAMS@1@PAXPAU_ST_PAGE_LOCATION@1@@Z
?StDrainReadContextList@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?StEmptyStore@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@K@Z
?StGetStats@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StGetStatsWorker@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@W4_ST_STATS_LEVEL@@PAU_ST_STATS@@PAK@Z
?StGetUserSpaceStatsKb@?$ST_STORE@USM_TRAITS@@@@SGKPAU1@PAK1@Z
?StInitialize@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?StLazyWorkMgrIdleTimeoutProcess@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrInitialize@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrQueueWork@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@W4_ST_LAZY_WORK_TYPE@1@KK@Z
?StLazyWorkMgrResetIdle@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrRunExpiredWork@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@_K@Z
?StLazyWorkMgrSetSchedule@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@_K@Z
?StMapAndLockRegion@?$ST_STORE@USM_TRAITS@@@@SGPADPAU_ST_DATA_MGR@1@KKK@Z
?StMetaRegionsUpdate@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StNpEnumBTreeNodes@?$ST_STORE@USM_TRAITS@@@@SGJPAUNP_CTX@NP_CONTEXT@@P6GJPAX1PAK@Z1@Z
?StNpLeafDelete@?$ST_STORE@USM_TRAITS@@@@SGXPAUNP_CTX@NP_CONTEXT@@K@Z
?StNpLeafPageIn@?$ST_STORE@USM_TRAITS@@@@SGJPAUNP_CTX@NP_CONTEXT@@PAXK@Z
?StNpLeafPageOut@?$ST_STORE@USM_TRAITS@@@@SGKPAUNP_CTX@NP_CONTEXT@@PAX@Z
?StRegionFindCompact@?$ST_STORE@USM_TRAITS@@@@SGPAT_ST_REGION_STATE@1@PAU_ST_DATA_MGR@1@KK@Z
?StRegionFindRepurpose@?$ST_STORE@USM_TRAITS@@@@SGPAT_ST_REGION_STATE@1@PAU_ST_DATA_MGR@1@K@Z
?StRegionLATRebase@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StReleaseReadContext@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@PAX@Z
?StReleaseRegion@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StStagingRegionFind@?$ST_STORE@USM_TRAITS@@@@SGPAU_ST_STAGING_REGION@1@PAU_ST_DATA_MGR@1@K@Z
?StStagingRegionIssueIo@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_STAGING_REGION@1@K@Z
?StStagingRegionMap@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KPAPAD@Z
?StStagingRegionReuse@?$ST_STORE@USM_TRAITS@@@@SGPAU_ST_STAGING_REGION@1@PAU_ST_DATA_MGR@1@@Z
?StStagingRegionStart@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_STAGING_REGION@1@K@Z
?StStart@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_CREATE_PARAMS@@@Z
?StStoreWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@PAU_ST_WORK_ITEM@1@@Z
?StUnlockAndUnmapRegion@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@KPAD@Z
?StWorkItemProcess@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StpKeyCompare@?$ST_STORE@USM_TRAITS@@@@SAHPBX0@Z
?StpLocationCompare@?$ST_STORE@USM_TRAITS@@@@SAHPBX0@Z
?StringCchCopyNW@@YGJPAGIPBGI@Z
@AlpcAddHandleTableEntry@8
@AlpcDeleteBlobByHandle@12
@AlpcReferenceBlobByHandle@12
@AlpcRegisterLogRoutine@4
@AlpcUnregisterLogRoutine@4
@AlpcpAllocateBlob@12
@AlpcpAllocateMessage@12
@AlpcpCancelMessage@12
@AlpcpCaptureAttributes@20
@AlpcpCaptureContextAttribute@16
@AlpcpCaptureDirectAttribute@20
@AlpcpCaptureHandleAttribute@8
@AlpcpCaptureHandleAttributeInternal@8
@AlpcpCaptureMessageData@12
@AlpcpCaptureSecurityAttribute@12
@AlpcpCaptureSecurityAttributeInternal@20
@AlpcpCaptureViewAttribute@16
@AlpcpCaptureViewAttributeInternal@16
@AlpcpCompleteDeferSignalRequest@4
@AlpcpCompleteDeferSignalRequestAndWait@20
@AlpcpCompleteDispatchMessage@4
@AlpcpDeleteBlob@4
@AlpcpDestroyBlob@4
@AlpcpDispatchCloseMessage@4
@AlpcpDispatchConnectionRequest@4
@AlpcpDispatchNewMessage@4
@AlpcpDispatchReplyToWaitingThread@4
@AlpcpEndInitialization@4
@AlpcpExposeAttributes@16
@AlpcpExposeContextAttribute@16
@AlpcpExposeHandleAttribute@16
@AlpcpExposeSecurityAttribute@16
@AlpcpExposeTokenAttribute@16
@AlpcpExposeViewAttribute@16
@AlpcpFlushMessagesByRequestor@16
@AlpcpFlushQueue@12
@AlpcpInsertCompletionListEntry@8
@AlpcpLookupMessage@16
@AlpcpReadMessageData@8
@AlpcpReceiveLegacyMessage@16
@AlpcpReceiveMessage@20
@AlpcpReceiveMessagePort@20
@AlpcpReceiveSynchronousReply@20
@AlpcpReferenceAndLockTargetPortsAndCommunicationInfo@12
@AlpcpReferenceConnectedPort@4
@AlpcpReleaseAttributes@4
@AlpcpReleaseMessageAttributesOnCancel@8
@AlpcpSendMessage@16
@AlpcpSignal@8
@AlpcpSignalAndWait@20
@AlpcpUnlockAndDereferenceTargetPortsAndCommunicationInfo@12
@CcCreateVacbArray@12
@CcDeallocateBcb@4
@CcDeleteSharedCacheMap@16
@CcFreeVirtualAddress@4
@CcPerformReadAhead@8
@CcPostWorkQueue@8
@CcPostWorkQueueAsyncRead@8
@CcUnmapVacbArray@20
@CcUnpinFileDataEx@12
@CcWriteBehind@8
@DbgkpDeleteErrorPort@4
@EtwGetKernelTraceTimestamp@8
@EtwTraceContextSwap@8
@EtwTraceDebuggerEvent@12
@EtwTraceJob@20
@EtwTracePageFault@16
@EtwTraceProcess@8
@EtwpAcquireLoggerContext@8
@EtwpAcquireLoggerContextByLoggerId@8
@EtwpAcquireLoggerContextByLoggerName@8
@EtwpCCSwapTrace@16
@EtwpDisableKernelTrace@12
@EtwpEnableKernelTrace@12
@EtwpEnqueueFreeBuffer@8
@EtwpEnqueueOverflowBuffer@8
@EtwpGetLoggerInfoFromContext@8
@EtwpPmcInterrupt@8
@EtwpPrepareDirtyBuffer@8
@EtwpProfileInterrupt@8
@EtwpReleaseLoggerContext@8
@EtwpReserveTraceBuffer@20
@EtwpResetBufferHeader@8
@EtwpTraceALPC@8
@EtwpValidateLoggerInfo@4
@ExAcquireAutoExpandPushLockExclusive@8
@ExAcquireAutoExpandPushLockShared@8
@ExAcquireCacheAwarePushLockExclusiveEx@8
@ExAcquireCacheAwarePushLockSharedEx@8
@ExAcquireFastMutex@4
@ExAcquireFastMutexUnsafe@4
@ExAcquirePushLockExclusiveEx@8
@ExAcquirePushLockSharedEx@8
@ExAcquireRundownProtection@4
@ExAcquireRundownProtectionCacheAware@4
@ExAcquireRundownProtectionCacheAwareEx@8
@ExAcquireRundownProtectionEx@8
@ExBlockOnAddressPushLock@20
@ExBlockPushLock@8
@ExEnterCriticalRegionAndAcquireFastMutexUnsafe@4
@ExInitializeRundownProtection@4
@ExInterlockedAddLargeStatistic@8
@ExInterlockedAddUlong@12
@ExInterlockedCompareExchange64@16
@ExInterlockedFlushSList@4
@ExInterlockedInsertHeadList@12
@ExInterlockedInsertTailList@12
@ExInterlockedPopEntryList@8
@ExInterlockedPopEntrySList@8
@ExInterlockedPushEntryList@12
@ExInterlockedPushEntrySList@12
@ExInterlockedRemoveHeadList@8
@ExReInitializeRundownProtection@4
@ExReInitializeRundownProtectionCacheAware@4
@ExReleaseAutoExpandPushLockExclusive@8
@ExReleaseAutoExpandPushLockShared@8
@ExReleaseCacheAwarePushLockExclusiveEx@8
@ExReleaseCacheAwarePushLockSharedEx@8
@ExReleaseFastMutex@4
@ExReleaseFastMutexUnsafe@4
@ExReleaseFastMutexUnsafeAndLeaveCriticalRegion@4
@ExReleasePushLockEx@8
@ExReleasePushLockExclusiveEx@8
@ExReleasePushLockSharedEx@8
@ExReleaseResourceAndLeaveCriticalRegion@4
@ExReleaseResourceAndLeavePriorityRegion@4
@ExReleaseResourceLite@4
@ExReleaseRundownProtection@4
@ExReleaseRundownProtectionCacheAware@4
@ExReleaseRundownProtectionCacheAwareEx@8
@ExReleaseRundownProtectionEx@8
@ExRundownCompleted@4
@ExRundownCompletedCacheAware@4
@ExTimedWaitForUnblockPushLock@12
@ExTryAcquireAutoExpandPushLockExclusive@8
@ExTryAcquireAutoExpandPushLockShared@8
@ExTryAcquireCacheAwarePushLockExclusiveEx@8
@ExTryAcquireCacheAwarePushLockSharedEx@8
@ExTryAcquirePushLockExclusiveEx@8
@ExTryAcquirePushLockSharedEx@8
@ExTryConvertPushLockSharedToExclusiveEx@8
@ExTryToAcquireFastMutex@4
@ExUnblockOnAddressPushLockEx@8
@ExUnblockPushLockEx@8
@ExWaitForRundownProtectionRelease@4
@ExWaitForRundownProtectionReleaseCacheAware@4
@ExWaitForUnblockPushLock@8
@ExfAcquireCacheAwarePushLockExclusiveEx@12
@ExfAcquirePushLockExclusive@4
@ExfAcquirePushLockExclusiveEx@12
@ExfAcquirePushLockShared@4
@ExfAcquirePushLockSharedEx@12
@ExfAcquireRundownProtection@4
@ExfInterlockedAddUlong@12
@ExfInterlockedCompareExchange64@12
@ExfInterlockedInsertHeadList@12
@ExfInterlockedInsertTailList@12
@ExfInterlockedPopEntryList@8
@ExfInterlockedPushEntryList@12
@ExfInterlockedRemoveHeadList@8
@ExfReleasePushLock@4
@ExfReleasePushLockExclusive@4
@ExfReleasePushLockShared@4
@ExfReleasePushLockSharedEx@8
@ExfReleaseRundownProtection@4
@ExfTryAcquirePushLockShared@4
@ExfTryToWakePushLock@4
@ExfUnblockPushLock@8
@ExfWaitForRundownProtectionRelease@8
@Exfi386InterlockedDecrementLong@4
@Exfi386InterlockedExchangeUlong@8
@Exfi386InterlockedIncrementLong@4
@ExpAcquireFannedOutPushLockExclusive@12
@ExpAcquireFannedOutPushLockShared@12
@ExpAcquireSpinLockExclusiveAtDpcLevelInstrumented@4
@ExpAcquireSpinLockSharedAtDpcLevelInstrumented@4
@ExpBoostIoAfterAcquire@8
@ExpFindCurrentThread@20
@ExpFindEmptyEntry@8
@ExpLockResource@8
@ExpOptimizePushLockList@8
@ExpReleaseResourceForThreadLite@8
@ExpReleaseSpinLockExclusiveFromDpcLevelInstrumented@8
@ExpReleaseSpinLockSharedFromDpcLevelInstrumented@8
@ExpTryAcquireFannedOutPushLockShared@4
@ExpTryAcquireSpinLockExclusiveAtDpcLevelInstrumented@4
@ExpTryAcquireSpinLockSharedAtDpcLevelInstrumented@4
@ExpTryExpandAutoExpandPushLock@4
@ExpUnblockPushLock@12
@ExpUnlockResource@8
@ExpWaitForResource@8
@ExpWakePushLock@8
@HalExamineMBR@16
@InterlockedPopEntrySList@4
@InterlockedPushEntrySList@8
@InterlockedPushListSList@16
@IoGetPagingIoPriority@4
@IoReadPartitionTable@16
@IoSetPartitionInformation@16
@IoWritePartitionTable@20
@IofCallDriver@8
@IofCallDriverSpecifyReturn@12
@IofCompleteRequest@8
@IopInterlockedDecrementUlong@8
@IopInterlockedIncrementUlong@8
@IopInterlockedInsertHeadList@8
@IopInterlockedInsertTailList@8
@IopInterlockedRemoveHeadList@4
@IopPerfCallDriver@12
@IopPerfCompleteRequest@8
@IopPoHandleIrp@4
@IopfCompleteRequest@8
@IovCallDriver@12
@IovCompleteRequest@8
@IovpCallDriverNoIrpTracking@12
@IovpCallDriverWithStackBuffer@12
@IovpCancelRoutine@12
@KeAccumulateTicks@20
@KeAcquireGuardedMutex@4
@KeAcquireGuardedMutexUnsafe@4
@KeAcquireInStackQueuedSpinLock@8
@KeAcquireInStackQueuedSpinLockAtDpcLevel@8
@KeAcquireInStackQueuedSpinLockForDpc@8
@KeAcquireInStackQueuedSpinLockRaiseToSynch@8
@KeAcquireQueuedSpinLock@4
@KeAcquireQueuedSpinLockRaiseToSynch@4
@KeAcquireSpinLockForDpc@4
@KeAcquireSpinLockRaiseToSynch@4
@KeCheckForZeroPage@4
@KeClockInterruptNotify@8
@KeFlushSingleCurrentTb@4
@KeFlushSingleTb@8
@KeInitializeGate@8
@KeInitializeGuardedMutex@4
@KeInvalidAccessAllowed@4
@KeInvalidateRangeAllCaches@8
@KeIsContextSwapActive@4
@KeQueryHeteroCpuPolicyThread@8
@KeReleaseGuardedMutex@4
@KeReleaseGuardedMutexUnsafe@4
@KeReleaseInStackQueuedSpinLock@4
@KeReleaseInStackQueuedSpinLockForDpc@4
@KeReleaseInStackQueuedSpinLockFromDpcLevel@4
@KeReleaseQueuedSpinLock@8
@KeReleaseQueuedSpinLockFromDpcLevel@4
@KeReleaseSemaphoreEx@20
@KeReleaseSpinLockForDpc@8
@KeSelectNodeForAffinity@4
@KeSetPriorityBoost@8
@KeSignalGate@8
@KeTestSpinLock@4
@KeTryToAcquireGuardedMutex@4
@KeTryToAcquireQueuedSpinLock@8
@KeTryToAcquireQueuedSpinLockRaiseToSynch@8
@KeTryToAcquireSpinLockAtDpcLevel@4
@KeWaitForGate@12
@KeWakeWaitChain@12
@KefAcquireSpinLockAtDpcLevel@4
@KefReleaseSpinLockFromDpcLevel@4
@KfAcquireSpinLock@4
@KfLowerIrql@4
@KfRaiseIrql@4
@KfReleaseSpinLock@8
@KiAbProcessContextSwitch@8
@KiAccumulateCycleStats@16
@KiAcquireProcessLockExclusive@8
@KiAcquireProcessLockShared@8
@KiAcquireQueuedSpinLockCheckForFreeze@8
@KiAcquireQueuedSpinLockInstrumented@8
@KiAcquireSpinLockInstrumented@4
@KiActivateWaiterKQueue@4
@KiActivateWaiterPriQueue@8
@KiActivateWaiterQueueWithNoLocks@12
@KiAlertThread@12
@KiAttemptFastRemovePriQueue@12
@KiAttemptFastRemoveQueue@12
@KiBeginCounterAccumulation@8
@KiBeginThreadAccountingPeriod@16
@KiCallInterruptServiceRoutine@8
@KiCheckForSListAddress@4
@KiComputeDueTime@20
@KiDecrementProcessStackCount@4
@KiDeferGroupSchedulingPreemption@8
@KiDeferredReadyThread@8
@KiDirectSwitchThread@8
@KiEndThreadAccountingPeriod@16
@KiEntropyQueueDpc@4
@KiExecuteAllDpcs@16
@KiExitThreadWait@12
@KiExpireTimerTable@32
@KiFindReadyThread@16
@KiGetIsrStackToSwitch@4
@KiGetPendingTick@0
@KiIdleLoop@0
@KiIdleSchedule@4
@KiInSwapSingleProcess@12
@KiInsertQueue@16
@KiInsertQueueApc@4
@KiInsertQueueInternal@8
@KiInsertTimerTable@20
@KiIpiSignalPacketDoneAndStall@8
@KiLoadLdtr@4
@KiLockKobjectArray@8
@KiMonitorCacheErrata@8
@KiPriQueueThreadPriorityChanged@8
@KiProcessDebugRegister@8
@KiProcessThreadWaitList@16
@KiQueueReadyThread@8
@KiReadyThread@8
@KiRecordDr7@8
@KiReduceByEffectiveIdleSmtSet@8
@KiReleaseQueuedSpinLockInstrumented@8
@KiReleaseSpinLockInstrumented@8
@KiRemoveBoostThread@8
@KiRequestProcessInSwap@8
@KiRetireDpcList@4
@KiSearchForNewThread@8
@KiSelectCandidateProcessor@12
@KiSelectIdleProcessor@16
@KiSelectNextThread@8
@KiSelectReadyThread@8
@KiSetAffinityThread@12
@KiSetPendingTick@4
@KiSetPriorityThread@12
@KiSignalThread@16
@KiSwapContext@12
@KiSwapThread@8
@KiSwitchPriQueue@12
@KiSwitchQueue@12
@KiTimerExpiration@20
@KiTryToAcquireQueuedSpinLockInstrumented@8
@KiTryToAcquireSpinLockInstrumented@4
@KiTryUnwaitThread@16
@KiTryUnwaitThreadWithPriority@16
@KiUnlockKobjectArray@8
@KiUpdateDr7@4
@KiUpdateRunTime@8
@KiWakePriQueueWaiter@16
@KiWakeQueueWaiter@12
@KiXMMIZeroPages@8
@KiXMMIZeroPagesNoSave@8
@KiZeroPages@8
@KxWaitForLockChainValid@4
@KxWaitForLockOwnerShip@8
@KxWaitForLockOwnerShipWithIrql@12
@ObDereferenceObjectEx@8
@ObDereferenceObjectExWithTag@12
@ObFastDereferenceObject@8
@ObFastReferenceObject@4
@ObFastReferenceObjectLocked@4
@ObFastReplaceObject@8
@ObInitializeFastReference@8
@ObReferenceObjectExWithTag@12
@ObReferenceObjectSafe@4
@ObReferenceObjectSafeWithTag@8
@ObfDereferenceDeviceMap@4
@ObfDereferenceObject@4
@ObfDereferenceObjectWithTag@8
@ObfReferenceObject@4
@ObfReferenceObjectWithTag@8
@ObpFreeObject@4
@ObpFreeObjectNameBuffer@4
@PerfInfoLogInterrupt@12
@PerfInfoLogIpi@8
@PerfInfoLogSysCallEntry@4
@PerfInfoLogSysCallExit@4
@PerfInfoLogUnexpectedInterrupt@4
@PerfLogExecutiveResourceAcquire@16
@PerfLogExecutiveResourceInitialize@16
@PerfLogExecutiveResourceRelease@16
@PerfLogExecutiveResourceSetOwnerPointer@8
@PerfLogExecutiveResourceWait@12
@PerfLogImageUnload@36
@PerfLogSpinLockAcquire@28
@PerfLogSpinLockRelease@16
@PoIdle@4
@PoInitializePrcb@4
@PoNotifyMediaBuffering@4
@PoNotifyVSyncChange@4
@PopInternalAddToDumpFile@12
@PopInternalSaveStackToDumpFile@4
@PopIsAddressRangeValid@8
@PpmCancelExitLatencyTrace@4
@PpmGetExitSamplingCountdown@0
@PpmIdleDefaultComplete@20
@PpmIdleDefaultExecute@20
@PpmIdleDefaultInitiateWake@4
@PpmIdleDefaultIsHalted@4
@PpmIdleDefaultTest@12
@PpmIdleEvaluateConstraints@8
@PpmIdleExecuteTransition@36
@PpmIdleGuestComplete@20
@PpmIdleGuestExecute@20
@PpmIdleGuestPreExecute@20
@PpmIdleGuestPreselect@8
@PpmIdleGuestTest@12
@PpmIdlePrepare@24
@PpmPerfControlActionCallback@0
@PpmPrepareExitLatencyTrace@4
@PpvUtilCallAddDevice@16
@PpvUtilFailDriver@16
@PpvUtilGetDevnodeRemovalOption@4
@PpvUtilIsHardwareBeingVerified@4
@PpvUtilIsPdo@4
@PpvUtilTestStartedPdoStack@4
@PsPicoSystemCallDispatch@4
@PsSynchronizeWithThreadInsertion@8
@PspBindProcessSessionToJob@8
@PspChargeQuota@16
@PspConvertJobToMixed@8
@PspHashKeyValue@8
@PspLocateSystemDll@8
@PspLockQuotaExpansion@8
@PspReturnQuota@16
@PspReturnResourceQuota@16
@PspSetProcessAffinityUpdateMode@8
@PspUnlockQuotaExpansion@8
@PspWriteTebIdealProcessor@8
@RDMSR@4
@ReadAMDMsr@4
@RtlInterlockedCompareExchange64@12
@RtlInterlockedSetClearBits@12
@RtlPrefetchMemoryNonTemporal@8
@RtlUlongByteSwap@4
@RtlUlonglongByteSwap@8
@RtlUshortByteSwap@4
@RtlpAllocateHeap@24
@RtlpCreateSplitBlock@28
@RtlpFindUCREntry@8
@RtlpFreeHeap@16
@RtlpInsertUCRBlock@8
@RtlpInterlockedFlushSList@4
@RtlpInterlockedPopEntrySList@4
@RtlpInterlockedPushEntrySList@8
@RtlpOpenBaseImageFileOptionsKey@4
@RtlpProbeUserBufferSafe@8
@RtlpRemoveUCRBlock@8
@RtlpSearchUCRBlock@8
@RtlpSetupExtendedBlock@24
@RtlpUpdateHeapRates@8
@SeAuditingWithTokenForSubcategory@8
@SymCryptDetectCpuFeaturesByCpuid@4
@SymCryptInit@0
@SymCryptInitEnvWindowsKernelmodeWin8_1nLater@0
@SymCryptMarvin32@16
@SymCryptMarvin32ExpandSeed@12
@SymCryptSha256@12
@SymCryptSha256Append@12
@SymCryptSha256AppendBlocks_ul1@16
@SymCryptSha256Init@4
@SymCryptSha256Result@8
@SymCryptWipeAsm@8
@VerifierExAcquireFastMutex@4
@VerifierExAcquireFastMutexNoReboot@4
@VerifierExAcquireFastMutexUnsafe@4
@VerifierExAcquireFastMutexUnsafeNoReboot@4
@VerifierExAcquireRundownProtection@4
@VerifierExAcquireRundownProtectionCacheAware@4
@VerifierExAcquireRundownProtectionCacheAwareEx@8
@VerifierExAcquireRundownProtectionEx@8
@VerifierExReleaseFastMutex@4
@VerifierExReleaseFastMutexNoReboot@4
@VerifierExReleaseFastMutexUnsafe@4
@VerifierExReleaseFastMutexUnsafeNoReboot@4
@VerifierExReleaseResourceAndLeaveCriticalRegion@4
@VerifierExReleaseResourceAndLeaveCriticalRegionNoReboot@4
@VerifierExReleaseResourceAndLeavePriorityRegion@4
@VerifierExReleaseResourceAndLeavePriorityRegionNoReboot@4
@VerifierExReleaseResourceLite@4
@VerifierExReleaseResourceLiteNoReboot@4
@VerifierExReleaseRundownProtection@4
@VerifierExReleaseRundownProtectionCacheAware@4
@VerifierExReleaseRundownProtectionEx@8
@VerifierExTryToAcquireFastMutex@4
@VerifierExTryToAcquireFastMutexNoReboot@4
@VerifierExWaitForRundownProtectionRelease@4
@VerifierExWaitForRundownProtectionReleaseCacheAware@4
@VerifierExfAcquirePushLockExclusive@4
@VerifierExfAcquirePushLockShared@4
@VerifierExfInterlockedCompareExchange64@12
@VerifierExfInterlockedInsertHeadList@12
@VerifierExfInterlockedInsertTailList@12
@VerifierExfInterlockedPopEntryList@8
@VerifierExfInterlockedPushEntryList@12
@VerifierExfInterlockedRemoveHeadList@8
@VerifierExfReleasePushLock@4
@VerifierExfReleasePushLockShared@4
@VerifierExfTryAcquirePushLockShared@4
@VerifierExfTryToWakePushLock@4
@VerifierHalExamineMBR@16
@VerifierInterlockedPopEntrySList@4
@VerifierInterlockedPushEntrySList@8
@VerifierIoReadPartitionTable@16
@VerifierIoSetPartitionInformation@16
@VerifierIoWritePartitionTable@20
@VerifierIofCallDriver@8
@VerifierIofCompleteRequest@8
@VerifierKeAcquireGuardedMutex@4
@VerifierKeAcquireGuardedMutexUnsafe@4
@VerifierKeAcquireInStackQueuedSpinLock@8
@VerifierKeAcquireInStackQueuedSpinLockAtDpcLevel@8
@VerifierKeAcquireInStackQueuedSpinLockAtDpcLevelNoReboot@8
@VerifierKeAcquireInStackQueuedSpinLockForDpc@8
@VerifierKeAcquireInStackQueuedSpinLockForDpcNoReboot@8
@VerifierKeAcquireInStackQueuedSpinLockNoReboot@8
@VerifierKeAcquireInStackQueuedSpinLockRaiseToSynch@8
@VerifierKeAcquireInStackQueuedSpinLockRaiseToSynchNoReboot@8
@VerifierKeAcquireQueuedSpinLock@4
@VerifierKeAcquireQueuedSpinLockRaiseToSynch@4
@VerifierKeAcquireSpinLockAtDpcLevel@4
@VerifierKeAcquireSpinLockAtDpcLevelNoReboot@4
@VerifierKeAcquireSpinLockForDpc@4
@VerifierKeInitializeGuardedMutex@4
@VerifierKeReleaseGuardedMutex@4
@VerifierKeReleaseGuardedMutexUnsafe@4
@VerifierKeReleaseInStackQueuedSpinLock@4
@VerifierKeReleaseInStackQueuedSpinLockForDpc@4
@VerifierKeReleaseInStackQueuedSpinLockForDpcNoReboot@4
@VerifierKeReleaseInStackQueuedSpinLockFromDpcLevel@4
@VerifierKeReleaseInStackQueuedSpinLockFromDpcLevelNoReboot@4
@VerifierKeReleaseInStackQueuedSpinLockNoReboot@4
@VerifierKeReleaseQueuedSpinLock@8
@VerifierKeReleaseSpinLockForDpc@8
@VerifierKeReleaseSpinLockFromDpcLevel@4
@VerifierKeReleaseSpinLockFromDpcLevelNoReboot@4
@VerifierKeTestSpinLock@4
@VerifierKeTryToAcquireGuardedMutex@4
@VerifierKeTryToAcquireQueuedSpinLock@8
@VerifierKeTryToAcquireQueuedSpinLockRaiseToSynch@8
@VerifierKeTryToAcquireSpinLockAtDpcLevel@4
@VerifierKeTryToAcquireSpinLockAtDpcLevelNoReboot@4
@VerifierKfAcquireSpinLock@4
@VerifierKfAcquireSpinLockNoReboot@4
@VerifierKfLowerIrql@4
@VerifierKfRaiseIrql@4
@VerifierKfReleaseSpinLock@8
@VerifierKfReleaseSpinLockNoReboot@8
@VerifierObfDereferenceObject@4
@VerifierObfDereferenceObjectWithTag@8
@VerifierObfReferenceObject@4
@VerifierObfReferenceObjectWithTag@8
@VfGetPristineDispatchRoutine@8
@VfGetPristineDriverInit@4
@VfMajorAdvanceIrpStatus@12
@VfMajorBuildIrpLogEntry@16
@VfMajorIsNewRequest@8
@VfMajorIsValidIrpStatus@8
@VfMajorTestStartedPdoStack@4
@VfMajorVerifyFinalIrpStack@8
@VfMajorVerifyIrpStackDownward@24
@VfMajorVerifyIrpStackUpward@20
@VfMajorVerifyNewIrp@20
@VfMajorVerifyNewRequest@24
@VfPnpAdvanceIrpStatus@12
@VfPnpDumpIrpStack@4
@VfPnpIsSystemRestrictedIrp@4
@VfPnpTestStartedPdoStack@4
@VfPnpVerifyIrpStackDownward@28
@VfPnpVerifyIrpStackUpward@24
@VfPnpVerifyNewRequest@24
@VfPowerDumpIrpStack@4
@VfPowerIsSystemRestrictedIrp@4
@VfPowerTestStartedPdoStack@4
@VfPowerVerifyIrpStackDownward@28
@VfPowerVerifyIrpStackUpward@24
@VfPowerVerifyNewRequest@24
@VfWmiDumpIrpStack@4
@VfWmiTestStartedPdoStack@4
@VfWmiVerifyIrpStackDownward@28
@VfWmiVerifyIrpStackUpward@24
@VfWmiVerifyNewRequest@24
@ViGenericBuildIrpLogEntry@16
@ViGenericDispatchHandler@16
@ViGenericDumpIrpStack@4
@ViGenericIsNewRequest@8
@ViGenericIsValidIrpStatus@8
@ViGenericVerifyFinalIrpStack@8
@ViGenericVerifyIrpStackDownward@28
@ViGenericVerifyIrpStackUpward@24
@ViGenericVerifyNewIrp@20
@ViGenericVerifyNewRequest@24
@ViGetContextPointer@8
@ViIrpLogDatabaseFindPointer@8
@ViIsContextIdValid@8
@ViLockContextPointer@4
@ViResourceReleaseSanityChecks@4
@ViUnlockContextPointer@4
@WmiGetClock@8
@_EH4_CallFilterFunc@8
@_EH4_GlobalUnwind@4
@_EH4_LocalUnwind@16
@_EH4_TransferToHandler@8
@_PopInternalError@4
@__InterlockedCompareExchange@12
@__InterlockedDecrement@4
@__InterlockedExchangeAdd@8
@__InterlockedIncrement@4
@__security_check_cookie@4
@_guard_check_icall_nop@4
@xHalGetPartialGeometry@8
@xHalHandlerForBus@8
@xHalReferenceHandler@4
CheckEip
CheckEsp
CsToLinear
EnlightenedSwapContext
ExecuteHandler2@20
ExecuteHandler@20
FinalExceptionHandlerPad0
FinalExceptionHandlerPad1
FinalExceptionHandlerPad10
FinalExceptionHandlerPad11
FinalExceptionHandlerPad12
FinalExceptionHandlerPad13
FinalExceptionHandlerPad14
FinalExceptionHandlerPad15
FinalExceptionHandlerPad16
FinalExceptionHandlerPad17
FinalExceptionHandlerPad18
FinalExceptionHandlerPad19
FinalExceptionHandlerPad2
FinalExceptionHandlerPad20
FinalExceptionHandlerPad21
FinalExceptionHandlerPad22
FinalExceptionHandlerPad23
FinalExceptionHandlerPad24
FinalExceptionHandlerPad25
FinalExceptionHandlerPad26
FinalExceptionHandlerPad27
FinalExceptionHandlerPad28
FinalExceptionHandlerPad29
FinalExceptionHandlerPad3
FinalExceptionHandlerPad30
FinalExceptionHandlerPad31
FinalExceptionHandlerPad32
FinalExceptionHandlerPad33
FinalExceptionHandlerPad34
FinalExceptionHandlerPad35
FinalExceptionHandlerPad36
FinalExceptionHandlerPad37
FinalExceptionHandlerPad38
FinalExceptionHandlerPad39
FinalExceptionHandlerPad4
FinalExceptionHandlerPad40
FinalExceptionHandlerPad41
FinalExceptionHandlerPad42
FinalExceptionHandlerPad43
FinalExceptionHandlerPad44
FinalExceptionHandlerPad45
FinalExceptionHandlerPad46
FinalExceptionHandlerPad47
FinalExceptionHandlerPad48
FinalExceptionHandlerPad49
FinalExceptionHandlerPad5
FinalExceptionHandlerPad50
FinalExceptionHandlerPad51
FinalExceptionHandlerPad52
FinalExceptionHandlerPad53
FinalExceptionHandlerPad54
FinalExceptionHandlerPad55
FinalExceptionHandlerPad56
FinalExceptionHandlerPad57
FinalExceptionHandlerPad58
FinalExceptionHandlerPad59
FinalExceptionHandlerPad6
FinalExceptionHandlerPad60
FinalExceptionHandlerPad61
FinalExceptionHandlerPad62
FinalExceptionHandlerPad63
FinalExceptionHandlerPad7
FinalExceptionHandlerPad8
FinalExceptionHandlerPad9
GetHandlerAddress
GetMachineBootPointers@0
GetVirtualBits
Kei386EoiHelper@0
KiDispatchTrapException
KiVdmSetUserCR0
Opcode0F
Opcode0FV86
OpcodeADDR32Prefix
OpcodeADDR32PrefixV86
OpcodeCLI
OpcodeCLIV86
OpcodeCSPrefix
OpcodeCSPrefixV86
OpcodeDSPrefix
OpcodeDSPrefixV86
OpcodeESPrefix
OpcodeESPrefixV86
OpcodeFSPrefix
OpcodeFSPrefixV86
OpcodeGSPrefix
OpcodeGSPrefixV86
OpcodeGenericPrefix
OpcodeGenericPrefixV86
OpcodeHLTV86
OpcodeINB
OpcodeINBV86
OpcodeINBimm
OpcodeINBimmV86
OpcodeINSB
OpcodeINSBV86
OpcodeINSW
OpcodeINSWV86
OpcodeINTO
OpcodeINTOV86
OpcodeINTnn
OpcodeINTnnV86
OpcodeINW
OpcodeINWV86
OpcodeINWimm
OpcodeINWimmV86
OpcodeIRETV86
OpcodeInvalid
OpcodeInvalidV86
OpcodeLOCKPrefix
OpcodeLOCKPrefixV86
OpcodeNPXV86
OpcodeOPER32Prefix
OpcodeOPER32PrefixV86
OpcodeOUTB
OpcodeOUTBV86
OpcodeOUTBimm
OpcodeOUTBimmV86
OpcodeOUTSB
OpcodeOUTSBV86
OpcodeOUTSW
OpcodeOUTSWV86
OpcodeOUTW
OpcodeOUTWV86
OpcodeOUTWimm
OpcodeOUTWimmV86
OpcodePOPFV86
OpcodePUSHFV86
OpcodeREPNEPrefix
OpcodeREPNEPrefixV86
OpcodeREPPrefix
OpcodeREPPrefixV86
OpcodeSSPrefix
OpcodeSSPrefixV86
OpcodeSTI
OpcodeSTIV86
PushException
PushInt
SsToLinear
SwapContext
SwitchToHandlerStack
VdmDecodeOperand
VdmDispatchIntAck
VdmFixEspEbp
VdmOpcode0f
VdmOpcodeClts
VdmOpcodeGetCrx
VdmOpcodeGetDrx
VdmOpcodeLmsw
VdmOpcodeSetCrx
VdmOpcodeSetDrx
VdmSegParams
_ADD_MAP_REGISTERS@12
_AdtpAppendString@16
_AdtpAppendZString@16
_AdtpBuildAccessReasonAuditString@36
_AdtpBuildAccessReasonAuditStringInternal@48
_AdtpBuildAccessesString@36
_AdtpBuildContextFromSecurityDescriptor@8
_AdtpBuildGuidString@24
_AdtpBuildHexInt64String@24
_AdtpBuildIPv4Strings@20
_AdtpBuildIPv6Strings@20
_AdtpBuildLogonIdStrings@28
_AdtpBuildMacStrings@12
_AdtpBuildMessageString@24
_AdtpBuildMultiSzStringListString@12
_AdtpBuildObjectTypeStrings@24
_AdtpBuildPrivilegeAuditString@24
_AdtpBuildRegistryValueString@20
_AdtpBuildReplacementString@8
_AdtpBuildSecurityDescriptorChangeString@44
_AdtpBuildSecurityDescriptorUnicodeString@28
_AdtpBuildSidListString@24
_AdtpBuildSockAddrString@20
_AdtpBuildStagingReasonAuditStringInternal@36
_AdtpBuildStringListString@24
_AdtpBuildUlongString@24
_AdtpBuildUserAccountControlString@32
_AdtpCleanupParameterAllocations@12
_AdtpDbInitializePrivilegeObject@0
_AdtpEtwBuildDashString@4
_AdtpEtwBuildString@20
_AdtpFormatPrefix@12
_AdtpGetCapID@8
_AdtpGetCategoryAndSubCategoryId@12
_AdtpInitializeAuditingCommon@0
_AdtpInitializeDriveLetters@0
_AdtpIsCorrectlyFormedUnicodeString@4
_AdtpLookupDriveLetter@12
_AdtpLookupKnownPrivilegeNameQuickly@8
_AdtpNormalizeAuditInfo@4
_AdtpObjsInitialize@0
_AdtpPackageParameters@20
_AdtpSubstituteDriveLetter@4
_AdtpWriteToEtw@8
_AhcCacheQueryHwId@4
_AlpcConnectionDeleteProcedure@4
_AlpcConnectionDestroyProcedure@4
_AlpcGetHeaderSize@4
_AlpcGetMessageAttribute@8
_AlpcHandleDataDeleteProcedure@4
_AlpcHandleDataDestroyProcedure@4
_AlpcInitializeHandleTable@8
_AlpcInitializeMessageAttribute@16
_AlpcMessageDeleteProcedure@4
_AlpcMessageDestroyProcedure@4
_AlpcRegionDeleteProcedure@4
_AlpcRegionDestroyProcedure@4
_AlpcReserveDeleteProcedure@4
_AlpcReserveDestroyProcedure@4
_AlpcSectionDeleteProcedure@4
_AlpcSectionDestroyProcedure@4
_AlpcSecurityDeleteProcedure@4
_AlpcSecurityDestroyProcedure@4
_AlpcViewDeleteProcedure@4
_AlpcViewDestroyProcedure@4
_AlpciDestroyDeferredMessageContext@4
_AlpcpAcceptConnectPort@48
_AlpcpAdjustCompletionListConcurrencyCount@8
_AlpcpAllocateBuffer@12
_AlpcpAllocateCompletionPacketLookaside@12
_AlpcpAllocateFromBitmap@12
_AlpcpAllocateMessageFromExtendedTables@4
_AlpcpAllocateMessageFunction@12
_AlpcpAllocateMessageLog@0
_AlpcpAllocateSnapshotMessageLog@0
_AlpcpAssociateIoCompletionPort@12
_AlpcpCancelMessagesByRequestor@20
_AlpcpCaptureMessageDataSafe@4
_AlpcpCheckConnectionSecurity@16
_AlpcpCleanupProcessViews@4
_AlpcpClosePort@16
_AlpcpConnectPort@52
_AlpcpCopyRequestData@28
_AlpcpCreateClientPort@44
_AlpcpCreateConnectionPort@24
_AlpcpCreateRegion@16
_AlpcpCreateReserve@12
_AlpcpCreateSection@24
_AlpcpCreateSectionView@20
_AlpcpCreateSecurityContext@16
_AlpcpCreateView@12
_AlpcpDeferredFreeCompletionPacketLookaside@4
_AlpcpDeletePort@4
_AlpcpDestroyPort@4
_AlpcpDisconnectPort@8
_AlpcpDispatchReplyToPort@4
_AlpcpDoPortCleanup@4
_AlpcpEnterAllocationEventMessageLog@4
_AlpcpEnterFreeEventMessageLog@4
_AlpcpEnterStateChangeEventMessageLog@4
_AlpcpEnumerateResourcesPort@16
_AlpcpFlushCancelQueue@8
_AlpcpFlushMessagesPort@4
_AlpcpFlushResourcesPort@4
_AlpcpForceUnlinkSecureView@4
_AlpcpFormatConnectionRequest@40
_AlpcpFreeBitmap@16
_AlpcpFreeBuffer@4
_AlpcpFreeCompletionBuffer@12
_AlpcpFreeCompletionList@4
_AlpcpFreeCompletionPacketLookaside@4
_AlpcpFreeMessageFunction@4
_AlpcpGetDataFromUserVaSafe@8
_AlpcpGetEffectiveTokenMessage@20
_AlpcpGetPortNameInformation@12
_AlpcpImpersonateMessage@12
_AlpcpInitSystem@0
_AlpcpInitializeCompletionList@24
_AlpcpInitializeDefaultPortAttributes@4
_AlpcpInitializeMessageLog@8
_AlpcpInitializePort@12
_AlpcpInvokeLogCallbacks@8
_AlpcpLocateMessageLog@4
_AlpcpLocateSectionView@16
_AlpcpLocateView@8
_AlpcpLogClosePort@4
_AlpcpLogConnectFail@8
_AlpcpLogConnectRequest@4
_AlpcpLogConnectSuccess@4
_AlpcpLogReceiveMessage@4
_AlpcpLogSendMessage@4
_AlpcpLogUnwait@4
_AlpcpLogWaitForNewMessage@4
_AlpcpLogWaitForReply@4
_AlpcpLookasidePacketCallbackRoutine@8
_AlpcpMapLegacyPortRemoteView@12
_AlpcpMapLegacyPortView@12
_AlpcpOpenPort@24
_AlpcpPortQueryBasicInfo@20
_AlpcpPortQueryConnectedSidInfo@20
_AlpcpPortQueryServerInfo@20
_AlpcpPrepareViewForDelivery@12
_AlpcpProcessConnectionRequest@36
_AlpcpProcessSynchronousRequest@40
_AlpcpQueryRemoteView@12
_AlpcpQuerySidMessage@20
_AlpcpQuerySidToken@16
_AlpcpQueryTokenModifiedIdMessage@20
_AlpcpQueueIoCompletionPort@16
_AlpcpReceiveLegacyConnectionReply@24
_AlpcpReceiveView@12
_AlpcpReferenceMessageByWaitingThread@8
_AlpcpReferenceMessageByWaitingThreadPort@8
_AlpcpReferenceMessageByWaitingThreadPortQueue@8
_AlpcpRegisterCompletionListDatabase@4
_AlpcpReplyLegacySynchronousRequest@12
_AlpcpRestoreWriteAccess@4
_AlpcpReturnMessageOnInsufficientBuffer@8
_AlpcpSendCloseMessage@4
_AlpcpSendLegacySynchronousRequest@16
_AlpcpSetOwnerProcessPort@8
_AlpcpSetupMessageDataForDeferredCopy@24
_AlpcpUnregisterCompletionListDatabase@4
_AlpcpValidateAndSetPortAttributes@28
_AlpcpValidateDataInformation@8
_AlpcpViewSearchCallbackFunction@8
_AlpcpWaitForPortReferences@20
_AlpcpWalkConnectionList@4
_AnFwConfigureProgressResources@4
_AnFwDisableBackgroundUpdateTimer@0
_AnFwDisplayFade@0
_AnFwDisplayProgressIndicator@4
_AnFwFadeCompletion@0
_AnFwProgressIndicatorTransition@0
_AnFwpBackgroundUpdateTimer@16
_AnFwpDisableProgressTimer@0
_AnFwpFadeAnimationTimer@16
_AnFwpProgressAnimationManual@0
_AnFwpProgressIndicatorTimer@16
_ApiSetResolveToHost@20
_ApiSetpSearchForApiSet@12
_ApiSetpSearchForApiSetHost@16
_ArbAddAllocation@8
_ArbAddInaccessibleAllocationRange@8
_ArbAddMmConfigRangeAsBootReserved@8
_ArbAddOrdering@20
_ArbAddReserved@8
_ArbAllocateEntry@8
_ArbArbiterHandler@12
_ArbBacktrackAllocation@8
_ArbBootAllocation@8
_ArbBuildAssignmentOrdering@16
_ArbCommitAllocation@4
_ArbFindSuitableRange@8
_ArbFreeOrderingList@4
_ArbGetNextAllocationRange@8
_ArbInitializeArbiterInstance@24
_ArbInitializeOrderingList@4
_ArbInitializeOsInaccessibleRange@4
_ArbInitializeRangeList@16
_ArbIsConflictWithMmConfigRange@16
_ArbOverrideConflict@8
_ArbPreprocessEntry@8
_ArbPruneOrdering@20
_ArbQueryArbitrate@8
_ArbQueryConflict@8
_ArbRetestAllocation@8
_ArbRollbackAllocation@4
_ArbShareDriverExclusive@8
_ArbStartArbiter@8
_ArbTestAllocation@8
_ArbpBuildAllocationStack@12
_ArbpBuildAlternative@12
_ArbpGetRegistryValue@12
_ArbpQueryConflictCallback@8
_ArbpUpdatePriority@8
_ArrayContains@20
_AslAlloc@12
_AslComputeCrc32@12
_AslEnvExpandStrings2@24
_AslEnvExpandStrings@24
_AslEnvResolveVars@24
_AslEnvVarQuery@24
_AslFileAllocAndGetAttributes@16
_AslFileFreeAttributes@4
_AslFileMappingCreate@20
_AslFileMappingDelete@4
_AslFileMappingEnsure@4
_AslFileMappingEnsureMappedAs@8
_AslFileMappingGetFileKindDetail@8
_AslFileMappingGetImageTypeEx@20
_AslFileNotFound@4
_AslFileResourceNotFound@4
_AslGuidToString@12
_AslGuidToString_UStr@8
_AslHashFree@4
_AslLogCallPrintf
_AslPathClean@12
_AslPathSplit@28
_AslPathToNetworkPathNt@8
_AslPathToSystemPath@8
_AslRegistryBuildMachinePath@8
_AslRegistryBuildUserPath@8
_AslRegistryGetKey@20
_AslRegistryGetUInt32@12
_AslRegistryGetUInt32_UStr@12
_AslStringAnsiToUnicode@8
_AslStringDuplicate@8
_AslStringPatternMatchA@8
_AslStringPatternMatchW@8
_AslStringSearchA@16
_AslStringSearchW@16
_AslStringUpcaseToMultiByteN@12
_AslStringUpper@4
_AslStringXmlSanitize@4
_AslUnicodeStringFree@4
_AslpDetermineDosPathNameType@4
_AslpFileGet16BitDescription@8
_AslpFileGet16BitModuleName@8
_AslpFileGetChecksum@8
_AslpFileGetChecksumAttributes@8
_AslpFileGetClrVersion@8
_AslpFileGetClrVersionAttribute@8
_AslpFileGetCrcChecksum@8
_AslpFileGetExeWrapper@8
_AslpFileGetExportName@8
_AslpFileGetFileKindDetailAttribute@8
_AslpFileGetHeaderAttributesNE@8
_AslpFileGetHeaderAttributesPE@8
_AslpFileGetImageNtHeader@8
_AslpFileGetModuleType@8
_AslpFileGetNtHeaderAttributes@32
_AslpFileGetSizeAttribute@8
_AslpFileGetVersionAttributes@8
_AslpFileGetVersionBlock@12
_AslpFileHasActiveMarkWrapper@12
_AslpFileHasArmadilloWrapper@4
_AslpFileHasSecuromWrapper@4
_AslpFileMakeBinVersionAttributes@8
_AslpFileMakeStringVersionAttributes@8
_AslpFileMappingGetFileKind@8
_AslpFileQuery16BitDescription@8
_AslpFileQuery16BitModuleName@8
_AslpFileQueryExportName@8
_AslpFileQueryVersionString@20
_AslpFileVerQueryValue@16
_AslpHasStarForceWrapper@4
_AslpImageRvaToSection@8
_AslpImageRvaToVa@12
_AuthzBasepAddAccessTypeList@24
_AuthzBasepAddSecurityAttribute@8
_AuthzBasepAddSecurityAttributeToLists@16
_AuthzBasepAddSecurityAttributeValueToLists@16
_AuthzBasepAddSecurityAttributeValues@8
_AuthzBasepAllocateClaimCollectionNoLists@0
_AuthzBasepAllocateSecurityAttribute@4
_AuthzBasepAllocateSecurityAttributeValue@4
_AuthzBasepAllocateSecurityAttributesList@0
_AuthzBasepCommitSecurityAttributeChanges@8
_AuthzBasepCompareFQBNOperands@12
_AuthzBasepCompareIntegerOperands@8
_AuthzBasepCompareLegacySecurityAttributesInformation@8
_AuthzBasepCompareOctetStringOperands@8
_AuthzBasepCompareSecurityAttribute@8
_AuthzBasepCompareSecurityAttributesInformation@8
_AuthzBasepCompareSigned@20
_AuthzBasepCompareUnicodeStringCaseSensitive@8
_AuthzBasepCompareUnicodeStringOperands@12
_AuthzBasepCompareUnsigned@20
_AuthzBasepConvertRelativeToAbsoluteTokenAttribute@16
_AuthzBasepCopyoutClaimAttributeValues@20
_AuthzBasepCopyoutClaimAttributes@12
_AuthzBasepCopyoutInternalSecurityAttributeValues@20
_AuthzBasepCopyoutInternalSecurityAttributes@12
_AuthzBasepCopyoutSecurityAttributeValues@20
_AuthzBasepCopyoutSecurityAttributes@20
_AuthzBasepDeleteAllSecurityAttributeValues@4
_AuthzBasepDeleteAllSecurityAttributes@4
_AuthzBasepDeleteSecurityAttribute@8
_AuthzBasepDeleteSecurityAttributeValues@12
_AuthzBasepDeviceMemberOf@24
_AuthzBasepDuplicateSecurityAttributes@12
_AuthzBasepEqualUnicodeString@12
_AuthzBasepEqualUnicodeStringCaseSensitive@8
_AuthzBasepEvaluateAceCondition@48
_AuthzBasepEvaluateAttribute@4
_AuthzBasepEvaluateExpression@12
_AuthzBasepEvaluateSetRelationship@12
_AuthzBasepFinaliseSecurityAttributesList@8
_AuthzBasepFindSecurityAttribute@8
_AuthzBasepFindSecurityAttributeValue@16
_AuthzBasepFindSystemSecurityAttribute@4
_AuthzBasepFreeSecurityAttributeValues@8
_AuthzBasepFreeSecurityAttributesList@4
_AuthzBasepGetClaimAttributeValueCopyoutBufferSize@8
_AuthzBasepGetClaimAttributesCopyoutBufferSize@8
_AuthzBasepGetConstantOperand@16
_AuthzBasepGetInternalSecurityAttributeValueCopyoutBufferSize@8
_AuthzBasepGetInternalSecurityAttributesCopyoutBufferSize@8
_AuthzBasepGetNextValue@8
_AuthzBasepGetOperandStringCaseForEvaluation@8
_AuthzBasepGetSecurityAttributeValueCopyoutBufferSize@8
_AuthzBasepGetSecurityAttributesCopyoutBufferSize@16
_AuthzBasepInitializeResourceClaimsFromSacl@8
_AuthzBasepInitializeSystemSecurityAttributes@4
_AuthzBasepIsCompareRelevantAttribute@4
_AuthzBasepIsValidExpression@16
_AuthzBasepMemAlloc@12
_AuthzBasepMemberOf@24
_AuthzBasepMergeAccessReasons@12
_AuthzBasepObjectInTypeList@16
_AuthzBasepOperandValueTypesCompatible@4
_AuthzBasepPopResult@12
_AuthzBasepPushResult@12
_AuthzBasepQueryClaimAttributesToken@16
_AuthzBasepQueryInternalSecurityAttributesToken@16
_AuthzBasepQuerySecurityAttributeAndValues@4
_AuthzBasepQuerySecurityAttributesToken@24
_AuthzBasepQuerySystemSecurityAttributeAndValues@4
_AuthzBasepRemoveSecurityAttributeFromLists@16
_AuthzBasepRemoveSecurityAttributeValueFromLists@16
_AuthzBasepReplaceSecurityAttribute@8
_AuthzBasepResetOperands@8
_AuthzBasepRestartOperandValueEnumeration@4
_AuthzBasepRollbackSecurityAttributeChanges@8
_AuthzBasepSecurityAttributePresent@8
_AuthzBasepSetAccessReasons@20
_AuthzBasepSetAppContainerAccessReasons@16
_AuthzBasepSetSecurityAttributesToken@12
_AuthzBasepSetTypeListAccessReasons@24
_AuthzBasepUnicodeStringFromOperandValue@16
_AuthzBasepUpdateParentTypeList@20
_AuthzBasepValidateSecurityAttributes@8
_AuthzBasepValueInSet@16
_BCryptCloseAlgorithmProvider@8
_BCryptCreateHash@28
_BCryptDecrypt@40
_BCryptDestroyHash@4
_BCryptDestroyKey@4
_BCryptEncrypt@40
_BCryptFinishHash@16
_BCryptGenRandom@16
_BCryptGenerateSymmetricKey@28
_BCryptGetProperty@24
_BCryptHashData@16
_BCryptOpenAlgorithmProvider@16
_BCryptSetProperty@20
_BapdRecordFirmwareBootStats@0
_BapdRegisterSiData@12
_BapdWriteEtwEvents@8
_BapdpIsTime1MoreRecentThanTime2@8
_BapdpParseEventParts@20
_BapdpProcessBitlockerStatus@0
_BapdpProcessBootMetadata@0
_BapdpProcessEDrvHintInfo@0
_BapdpProcessEtwEvents@0
_BapdpProcessFwUpdateResults@0
_BapdpProcessHSTIResults@0
_BapdpProcessResumeInformation@0
_BapdpProcessSecureBootPolicy@0
_BapdpProcessSiData@0
_BapdpProcessSystemIntegrityPolicy@0
_BapdpProcessWmdResults@0
_BapdpQueryData@20
_BapdpRegisterBitlockerStatus@8
_BapdpRegisterEDrvHintInfo@4
_BapdpRegisterFwUpdateResults@8
_BapdpRegisterResumeInformation@8
_BapdpRegisterWmdResult@4
_BapdpWriteEventDataToRegistry@12
_BcdCloseObject@4
_BcdCloseStore@4
_BcdCreateObject@16
_BcdDeleteElement@8
_BcdDeleteObject@4
_BcdEnumerateObjects@20
_BcdFlushStore@4
_BcdForciblyUnloadStore@4
_BcdGetElementData@16
_BcdGetElementDataWithFlags@20
_BcdInitializeBcdSyncMutant@0
_BcdOpenObject@12
_BcdOpenSystemStore@4
_BcdQueryObject@16
_BcdSetElementData@16
_BcdSetElementDataWithFlags@20
_BcdUtilGetBootOption@8
_BcdUtilGetBootOptionBoolean@12
_BcdUtilGetBootOptionInteger@12
_BcdUtilGetBootOptionString@12
_BcpConvertBugDataToString@8
_BcpConvertProgressToString@8
_BcpCursorLessThan@8
_BcpDisplayCriticalCharacter@12
_BcpDisplayCriticalString@16
_BcpDisplayEarlyBugCheckScreen@12
_BcpDisplayErrorInformation@24
_BcpDisplayProgress@8
_BcpFindMessage@4
_BcpGetCharacterMaxResourceProfile@16
_BcpGetDisplayType@12
_BcpGetMaxResourceProfile@8
_BcpGetMessageOffsets@16
_BcpGetProgressMessages@12
_BcpPrintSpaces@24
_BcpSanitizeDriverName@8
_BcpSetCursorPosition@12
_BcpTicksToMicroseconds@16
_BgConsoleDestroyInterface@4
_BgConsoleGetInterface@4
_BgDisplayBackgroundUpdate@4
_BgDisplayFade@0
_BgDisplayProgressIndicator@4
_BgDisplayString@4
_BgFreeContext@4
_BgGetContext@0
_BgLibraryDestroy@0
_BgLibraryDisable@0
_BgLibraryEnable@8
_BgLibraryInitialize@8
_BgMarkHiberPhase@0
_BgQueryBootGraphicsInformation@8
_BgkAcquireDisplayOwnership@0
_BgkDestroy@0
_BgkDisplayBackgroundUpdate@0
_BgkDisplayCharacter@20
_BgkDisplayProgressIndicator@0
_BgkDisplayString@4
_BgkDisplayStringEx@4
_BgkDrawText@4
_BgkGetConsoleState@4
_BgkGetCursorState@12
_BgkInitialize@8
_BgkNotifyDisplayOwnershipChange@8
_BgkNotifyDisplayOwnershipLost@4
_BgkQueryBootGraphicsInformation@8
_BgkResumeFinished@0
_BgkResumeInitialize@0
_BgkResumePrepare@4
_BgkResumeProgressTransition@0
_BgkSetCursor@12
_BgkSetDisplayOwnership@4
_BgkSetTextColor@4
_BgkSolidColorFill@20
_BgkpAcquireConsole@0
_BgkpDisableConsole@0
_BgkpLockBgfxCodeSection@0
_BgkpReleaseConsole@0
_BgkpResetDisplay@12
_BgkpTryEnableConsole@0
_BgkpUnlockBgfxCodeSection@0
_BgkpVgaBltRoutine@12
_BgpBcInitializeCriticalMode@8
_BgpClearScreen@4
_BgpConsoleClearScreen@0
_BgpConsoleClearScreenEx@0
_BgpConsoleDisplayCharacter@20
_BgpConsoleDisplayCharacterEx@24
_BgpConsoleDisplayString@4
_BgpConsoleDrawCursor@0
_BgpConsoleGetCursorState@12
_BgpConsoleGetState@4
_BgpConsoleInitialize@16
_BgpConsoleScrollScreen@0
_BgpConsoleSetCursor@12
_BgpConsoleSetPointSize@24
_BgpConsoleSetTextColor@8
_BgpDisplayCharacterDestroyContext@4
_BgpDisplayCharacterEx@40
_BgpDisplayCharacterGetContext@12
_BgpFmRoundDefault@4
_BgpFmRoundUp@4
_BgpFmScale@8
_BgpFmSqrt@12
_BgpFoDestroy@4
_BgpFoDetermineFontInformation@24
_BgpFoGetAdvanceWidth@20
_BgpFoGetFontHandle@8
_BgpFoGetStringAdvanceWidth@20
_BgpFoGetTableOffset@16
_BgpFoGetTextMetrics@8
_BgpFoInitialize@8
_BgpFwAcquireLock@0
_BgpFwAllocateMemory@4
_BgpFwDisplayBugCheckProgressUpdate@12
_BgpFwDisplayBugCheckScreen@20
_BgpFwFreeMemory@4
_BgpFwGetCurrentIrql@0
_BgpFwInitializeLock@0
_BgpFwInitializeReservePool@12
_BgpFwLibraryDestroy@0
_BgpFwLibraryDisable@0
_BgpFwLibraryEnable@4
_BgpFwLibraryInitialize@8
_BgpFwMarkHiberPhase@0
_BgpFwQueryBootGraphicsInformation@8
_BgpFwQueryPerformanceCounter@4
_BgpFwReleaseLock@0
_BgpFwReserveAllocate@4
_BgpFwReserveFree@4
_BgpFwReservePoolSwap@16
_BgpGetBitsPerPixel@0
_BgpGetResolution@0
_BgpGxBlendColor@12
_BgpGxBlendRectangle@16
_BgpGxConvertRectangle@16
_BgpGxCopyBitmapToRectangle@12
_BgpGxCopyRectangle@16
_BgpGxDrawBitmapImage@12
_BgpGxDrawRectangle@8
_BgpGxFillRectangle@8
_BgpGxFindSubRectangle@20
_BgpGxInitializeRectangle@16
_BgpGxMarkClean@4
_BgpGxParseBitmap@12
_BgpGxReadRectangle@12
_BgpGxRectangleCreate@12
_BgpGxRectangleDestroy@4
_BgpGxRectangleSize@12
_BgpGxReservePoolRectangleSize@12
_BgpRasGetGlyphAdvanceWidth@20
_BgpRasGetGlyphTextCellDimensions@12
_BgpRasInitializeRasterizer@4
_BgpRasPrintGlyph@36
_BgpTxtAdjustStaticRegion@12
_BgpTxtCacheDestroy@0
_BgpTxtClearRegion@4
_BgpTxtCreateRegion@24
_BgpTxtDestroyRegion@4
_BgpTxtDisplayCharacter@28
_BgpTxtDisplayString@20
_BgpTxtGetRegionContext@4
_BgpTxtRegionSize@4
_BiAcquireBcdSyncMutant@4
_BiAcquirePrivilege@8
_BiAddBootEntry@8
_BiAddBootEntryToEfiBootManagerDisplayOrder@8
_BiAddBootEntryToNvramDisplayOrder@4
_BiAddStoreFromFile@12
_BiAdjustPrivilege@12
_BiAreBootEntriesEqual@8
_BiBindEfiBootManager@8
_BiBindEfiEntries@8
_BiBindEfiEntryToBcdObject@8
_BiBindEfiNamespaceObjects@4
_BiBuildIdentifierList@12
_BiCleanupLoadedStores@4
_BiCloseKey@4
_BiCloseStore@8
_BiConvertBootEnvironmentDeviceToNt@20
_BiConvertBootEnvironmentDeviceToQualifiedPartition@12
_BiConvertBootEnvironmentDeviceToUnknown@12
_BiConvertElementFormatToValueType@4
_BiConvertElementToRegistryData@24
_BiConvertNtDeviceToBootEnvironment@16
_BiConvertNtFilePathToBootEnvironment@20
_BiConvertQualifiedPartitionToBootEnvironment@12
_BiConvertRegistryDataToElement@28
_BiCreateBootEntry@8
_BiCreateEfiEntry@8
_BiCreateFileDeviceElement@12
_BiCreateKey@24
_BiCreateKeySecurityDescriptor@4
_BiCreateMergedBootEntry@20
_BiCreateObject@20
_BiCreatePartitionDevice@16
_BiDeleteBootEntry@4
_BiDeleteEfiVariable@4
_BiDeleteKey@4
_BiDeleteRegistryValue@12
_BiDoesHiveExist@4
_BiDoesHiveKeyExist@4
_BiEnumerateBootEntries@8
_BiEnumerateSubKeys@12
_BiExportBcdObjects@8
_BiExportEfiBootManager@12
_BiExportStoreAlterationsToEfi@4
_BiExportStoreAlterationsToFirmware@4
_BiFreeIdentifierList@4
_BiGetAliasedIdentifier@12
_BiGetDefaultBootEntryIdentifier@8
_BiGetDeviceFromEfiPath@12
_BiGetDriveLayoutBlock@12
_BiGetDriveLayoutInformation@8
_BiGetElement@16
_BiGetFilePathFromEfiPath@12
_BiGetFirmwareType@0
_BiGetKeyName@8
_BiGetNtPartitionPath@8
_BiGetObjectDescription@8
_BiGetObjectIdentifier@8
_BiGetObjectReferenceFromEfiEntry@8
_BiGetPartitionInformation@12
_BiGetPartitionVhdFilePath@4
_BiGetPartitionVhdFilePathFromUnicodeString@4
_BiGetPhysicalDriveName@8
_BiGetRegistryValue@24
_BiGetSavedBootEntry@8
_BiGetSystemPartition@4
_BiGetSystemStorePath@4
_BiGetVolumeDiskExtentsInformation@8
_BiHandleFirmwareDefaultEntry@16
_BiIsEnumerateMatch@8
_BiIsImpersonating@0
_BiIsObjectAliased@8
_BiIsOfflineHandle@4
_BiIsPortableWorkspaceBoot@0
_BiIsSystemStore@4
_BiIsValidObject@12
_BiIsVolumePartitionInformationRetained@4
_BiIsWinPEBoot@0
_BiIsWindowsEfiEntry@4
_BiIssueGetDriveLayoutIoctl@8
_BiLoadHive@12
_BiLoadSystemStore@4
_BiLookupObjectByBootEntry@12
_BiLookupObjectByIdentifier@12
_BiLookupObjectByIdentifierAndBootEntry@16
_BiMarkTreatAsSystemStore@8
_BiModifyBootEntry@4
_BiOpenKey@16
_BiOpenKeyNonBcd@16
_BiOpenSystemStore@8
_BiQueryBootEntryOrder@8
_BiQueryBootOptions@8
_BiReleaseBcdSyncMutant@4
_BiReleasePrivilege@4
_BiResolveLocateDevice@8
_BiSetBootEntryOrder@8
_BiSetBootOptions@8
_BiSetObjectDescription@8
_BiSetRegistryValue@24
_BiTranslateBootEntryId@12
_BiTranslateBootOrder@16
_BiTranslateDisplayOrder@16
_BiTranslateFilePath@12
_BiTranslateObjectIdentifier@12
_BiTranslateSymbolicLink@8
_BiTranslateSymbolicLinkFile@8
_BiUnloadHiveByHandle@8
_BiUnloadHiveByName@12
_BiUpdateBcdObject@8
_BiUpdateEfiEntry@8
_BiUpdateObjectReferenceInEfiEntry@8
_BiVerifyBootPartition@24
_BiZwClose@4
_BiZwCreateKey@28
_BiZwDeleteKey@4
_BiZwDeleteValueKey@8
_BiZwEnumerateKey@24
_BiZwOpenKey@12
_BiZwQueryKey@20
_BiZwQueryValueKey@24
_BiZwSetSecurityObject@12
_BiZwSetValueKey@24
_BootApplicationPersistentDataInitialize@4
_BootApplicationPersistentDataProcess@4
_BuildKnownDlls@0
_BuildQueryDirectoryIrp@68
_BvgaAcquireDisplayOwnership@0
_BvgaAcquireLock@0
_BvgaBitBlt@12
_BvgaCheckDisplayOwnership@0
_BvgaDisplayString@4
_BvgaDriverInitialize@12
_BvgaEnableBootDriver@4
_BvgaGetDisplayState@0
_BvgaGetResourceAddress@4
_BvgaIndicateProgress@0
_BvgaIsBootDriverInstalled@0
_BvgaNotifyDisplayOwnershipChange@8
_BvgaNotifyDisplayOwnershipLost@4
_BvgaReleaseLock@0
_BvgaReleaseResources@0
_BvgaResetDisplay@0
_BvgaSaveResources@0
_BvgaSetDisplayOwnership@4
_BvgaSetProgressBarSubset@8
_BvgaSetScrollRegion@16
_BvgaSetTextColor@4
_BvgaSolidColorFill@20
_BvgaUpdateProgressBar@4
_CMFAllocFn@8
_CMFCheckAccess@12
_CMFCreateSecurityDescriptor@8
_CMFFlushHitsFile@8
_CMFFreeFn@8
_CMFGetFileSizeEx@8
_CMFGetLargePageSectionSize@8
_CMFReadCompressedSegment@16
_CMFRegisterEventTime@4
_CMFSystemThreadRoutine@4
_CMFUnmapModules@4
_CanComposeHangul@8
_CcAcquireByteRangeForWrite@32
_CcAddDirtyPagesToExternalCache@8
_CcAdjustCurrentThresholdWrtTop@16
_CcAdjustThrottle@12
_CcAdjustVacbLevelLockCount@16
_CcAdjustWriteBehindThreadPool@4
_CcAdjustWriteBehindThreadPoolIfNeeded@4
_CcAllocateInitializeBcb@16
_CcAllocateInitializeMbcb@0
_CcAllocateInitializeVacbArray@0
_CcAllocateObcb@12
_CcAllocateVacbLevels@12
_CcApplyLowIoPriorityToThread@8
_CcAsyncCopyRead@32
_CcAsyncReadPrefetch@4
_CcAsyncReadWorker@4
_CcAsyncReadWorkerThread@4
_CcBoostLowPriorityWorkerThread@4
_CcBuildUpHighPriorityMappings@4
_CcCalculatePagesToWrite@16
_CcCalculateVacbLevelLockCount@12
_CcCanIWrite@16
_CcCanIWriteStream@16
_CcCanReuseVacb@8
_CcCancelMmWaitForUninitializeCacheMap@4
_CcChangeBackingFileObject@8
_CcChargeThreadForReadAhead@20
_CcClearPrivateWriteFile@4
_CcCoalescingCallBack@12
_CcCoherencyFlushAndPurgeCache@20
_CcCompleteAsyncRead@4
_CcCompleteAsyncReadWorker@4
_CcComputeNextScanTime@8
_CcCopyBytesToUserBuffer@12
_CcCopyRead@24
_CcCopyReadEx@28
_CcCopyReadExceptionFilter@8
_CcCopyWrite@20
_CcCopyWriteEx@24
_CcCopyWriteWontFlush@12
_CcDeductDirtyPagesFromExternalCache@8
_CcDeferWrite@24
_CcDeleteBcbs@4
_CcDeleteMbcb@4
_CcDereferenceFileOffset@12
_CcDereferenceVacbArray@8
_CcExceptionFilter@4
_CcExtendVacbArray@12
_CcFastCopyRead@24
_CcFastCopyWrite@16
_CcFetchDataForRead@28
_CcFindBcb@16
_CcFindBitmapRangeToClean@12
_CcFindBitmapRangeToDirty@16
_CcFindNextWorkQueueEntry@4
_CcFlushCache@16
_CcFlushCachePriv@24
_CcFlushCacheToLsn@12
_CcFreeUnusedVacbLevels@4
_CcFreeVacbArray@4
_CcGetBcbListHead@16
_CcGetBcbListHeadLargeOffset@16
_CcGetDirtyPages@16
_CcGetFileObjectFromBcb@4
_CcGetFileObjectFromSectionPtrs@4
_CcGetFileObjectFromSectionPtrsRef@4
_CcGetFirstVacbArrayWithReference@4
_CcGetFlushedValidData@8
_CcGetLsnForFileObject@8
_CcGetRandomVacbArrayWithReference@0
_CcGetVacbFromFreeList@4
_CcGetVacbLargeOffset@12
_CcGetVacbMiss@20
_CcGetVirtualAddress@28
_CcGetVirtualAddressIfMapped@20
_CcIncrementWriteBehindPriority@4
_CcInitializeAsyncRead@0
_CcInitializeCacheManager@0
_CcInitializeCacheMap@20
_CcInitializeProcessor@4
_CcInitializeVacbs@0
_CcInitializeVolumeCacheMap@8
_CcInsertVacbArray@4
_CcIsLazyWriteScanQueued@4
_CcIsThereDirtyData@4
_CcIsThereDirtyDataEx@8
_CcIsThereDirtyLoggedPages@8
_CcIsWriteBehindThreadpoolAtLowPriority@0
_CcLazyWriteScan@8
_CcLogExtraWBThreadAction@4
_CcMapAndCopyFromCache@32
_CcMapAndCopyInToCache@36
_CcMapAndRead@16
_CcMapData@24
_CcMapDataCommon@24
_CcMapDataForOverwrite@20
_CcMdlRead@20
_CcMdlReadComplete2@8
_CcMdlReadComplete@8
_CcMdlWriteAbort@8
_CcMdlWriteComplete2@12
_CcMdlWriteComplete@12
_CcMmLogLostDelayedWriteError@8
_CcNotifyExternalCaches@4
_CcNotifyOfMappedWrite@16
_CcNotifyOfMappedWriteComplete@20
_CcNotifyWriteBehind@4
_CcOkToAddWriteBehindThread@0
_CcPerfLogCanWriteFail@16
_CcPerfLogExtraWBThreadAction@20
_CcPerfLogFlushCache@28
_CcPerfLogFlushSection@20
_CcPerfLogLazyWriteScan@56
_CcPerfLogLoggedStreamsStats@8
_CcPerfLogReadAhead@20
_CcPerfLogReadAheadPrefetch@16
_CcPerfLogScheduleReadAhead@28
_CcPerfLogVolumeLogHandleInfo@28
_CcPerfLogWorkItemComplete@4
_CcPerfLogWorkItemDequeue@4
_CcPerfLogWorkItemEnqueue@16
_CcPinFileData@36
_CcPinMappedData@20
_CcPinRead@24
_CcPostDeferredWrites@0
_CcPrepareMdlWrite@20
_CcPreparePinWrite@28
_CcPurgeAndClearCacheSection@8
_CcPurgeCacheSection@16
_CcQueueLazyWriteScanThread@4
_CcReEngageWorkerThreads@8
_CcRecalculateVacbArrayHighwaterMark@4
_CcReferenceFileOffset@12
_CcReferenceSharedCacheMapByVacb@4
_CcReferenceVacbArray@4
_CcRegisterExternalCache@8
_CcReleaseByteRangeFromWrite@20
_CcRemapBcb@4
_CcRemoveVacbArray@4
_CcRepinBcb@4
_CcRescheduleLazyWriteScan@4
_CcScanDpc@16
_CcScanLogHandleList@12
_CcScheduleLazyWriteScan@8
_CcScheduleReadAhead@12
_CcScheduleReadAheadEx@16
_CcSetAdditionalCacheAttributes@12
_CcSetAdditionalCacheAttributesEx@8
_CcSetBcbOwnerPointer@8
_CcSetDirtyInMask@16
_CcSetDirtyPageThreshold@8
_CcSetDirtyPinnedData@8
_CcSetFileSizes@8
_CcSetFileSizesEx@8
_CcSetLazyWriteScanQueued@8
_CcSetLogHandleForFile@12
_CcSetLogHandleForFileEx@20
_CcSetLoggedDataThreshold@8
_CcSetParallelFlushFile@8
_CcSetPrivateWriteFile@4
_CcSetReadAheadGranularity@8
_CcSetReadAheadGranularityEx@8
_CcSetVacbInFreeList@8
_CcSetVacbIntoList@12
_CcSetVacbLargeOffset@20
_CcSetValidData@8
_CcShouldLazyWriteCacheMap@16
_CcShouldSpinAsyncReadWorkerThread@8
_CcSlowReferenceSharedCacheMapFileObject@4
_CcTestControl@12
_CcUninitializeCacheMap@12
_CcUninitializeVolumeCacheMap@4
_CcUnmapAndPurge@8
_CcUnmapFileOffsetFromSystemCache@16
_CcUnmapInactiveViews@12
_CcUnmapVacb@12
_CcUnpinData@4
_CcUnpinDataForThread@8
_CcUnpinRepinnedBcb@12
_CcUnregisterExternalCache@4
_CcUpdateReadHistory@12
_CcUpdateSharedCacheMapFlag@12
_CcUpdateTimeOnLogHandles@0
_CcWaitForCurrentLazyWriterActivity@0
_CcWaitForUninitializeCacheMap@4
_CcWorkerThread@4
_CcWriteBehindInternal@4
_CcZeroData@16
_CcZeroDataInCache@16
_CcZeroDataOnDisk@16
_CcZeroEndOfLastPage@4
_CheckOneBitValidFlag@8
_CloseGlobalizationUserSettingsKey@4
_CmAddLogForAction@8
_CmBootLastKnownGood@16
_CmCallbackGetKeyObjectID@16
_CmCallbackGetKeyObjectIDEx@20
_CmCallbackReleaseKeyObjectIDEx@4
_CmCheckNoTxContext@0
_CmCheckRegistry@8
_CmCloseRmHandle@8
_CmCloseTmHandle@8
_CmCompressKey@8
_CmConvertHandleToKernelHandle@20
_CmCreateKey@32
_CmDeleteKey@4
_CmDeleteKeyRecursive@20
_CmDeleteValueKey@20
_CmDrainDelayKCBQueues@0
_CmDumpKey@8
_CmEnumerateKey@28
_CmEnumerateValueKey@24
_CmEnumerateValueKeyFromMergedView@36
_CmEqualTrans@8
_CmEtwRunDown@16
_CmFreezeRegistry@4
_CmGetBoundTransaction@8
_CmGetCallbackVersion@8
_CmGetKCBCacheSecurity@8
_CmGetKeyFlags@8
_CmGetKeyLastWriteTime@12
_CmGetSystemControlValues@8
_CmGetSystemDriverList@4
_CmGetVisibleMaxNameLenAndClassLen@20
_CmGetVisibleMaxValueNameLenAndDataLen@20
_CmGetVisibleSubkeyCount@12
_CmGetVisibleValueCount@12
_CmInitSystem1@4
_CmInitializeProcessor@4
_CmIsLastKnownGoodBoot@0
_CmKeyBodyNeedsVirtualImage@4
_CmKeyBodyRemapToVirtual@4
_CmKeyBodyRemapToVirtualForEnum@8
_CmKeyBodyReplicateToVirtual@12
_CmKtmNotification@28
_CmListGetNextElement@12
_CmListGetPrevElement@12
_CmLoadAppKey@28
_CmLoadKey@28
_CmLockHiveSecurityExclusive@4
_CmLockKcbForWrite@4
_CmLogMcUpdateStatus@8
_CmLogTmRmAction@12
_CmMoveKey@4
_CmNotifyRunDown@4
_CmObReferenceObjectByHandle@24
_CmObliterateRMTxArray@4
_CmOpenKey@20
_CmPostCallbackNotification@20
_CmQueryKey@24
_CmQueryMultipleValueKey@28
_CmQueryRegistryQuotaInformation@4
_CmQueryValueKey@28
_CmRealKCBToVirtualPath@12
_CmReconcileAndValidateAllHives@0
_CmReferenceKtmTransaction@4
_CmRegisterCallback@12
_CmRegisterCallbackEx@24
_CmRegisterSystemHiveLimitCallback@16
_CmReleaseLoadKeyContext@8
_CmRenameKey@16
_CmReplaceKey@16
_CmRestoreKey@12
_CmRmFinalizeRecovery@4
_CmRmIsKCBDeleted@8
_CmRmIsKCBVisible@8
_CmSaveKey@12
_CmSaveMergedKeys@12
_CmSelectQualifiedInstallLanguage@16
_CmSetAcpiHwProfile@20
_CmSetCallbackObjectContext@16
_CmSetKeyFlags@12
_CmSetLastWriteTimeKey@8
_CmSetLazyFlushState@4
_CmSetRegistryQuotaInformation@4
_CmSetValueKey@28
_CmShutdownCmRM@8
_CmShutdownSystem@4
_CmSnapshotRMTxArray@12
_CmThawRegistry@0
_CmTmCreateEnlistment@16
_CmUnRegisterCallback@8
_CmUnloadKey@12
_CmUnloadKeyEx@12
_CmUnlockHiveSecurity@4
_CmVirtualKCBToRealPath@8
_CmWorkerEngineDequeueWorkItem@4
_CmWorkerEngineQueueWorkItem@4
_CmpAccountForLogReservation@12
_CmpAddAcpiAliasEntry@32
_CmpAddAliasEntry@12
_CmpAddDockingInfo@8
_CmpAddDriverToList@24
_CmpAddInfoAfterParseFailure@20
_CmpAddKeyHashToEntry@12
_CmpAddProcessorConfigurationEntry@12
_CmpAddRemoveContainerToCLFSLog@32
_CmpAddRemoveRMLogContainer@8
_CmpAddSecurityCellToCache@16
_CmpAddStringToMapping@8
_CmpAddSubKey@12
_CmpAddSubKeyEx@16
_CmpAddToDelayedDeref@8
_CmpAddToHiveFileList@4
_CmpAddToLeaf@16
_CmpAddValueKeyNew@24
_CmpAddValueToList@20
_CmpAddValueToListEx@24
_CmpAdjustRequestedFileSize@24
_CmpAdjustSecurityCacheSize@4
_CmpAdminSystemSecurityDescriptor@0
_CmpAllocate@12
_CmpAllocateExtraHashInfo@0
_CmpAllocateKeyControlBlock@0
_CmpAllocatePostBlock@16
_CmpAllocateUnitOfWork@0
_CmpAppendLine@12
_CmpAppendSection@12
_CmpAppendValue@12
_CmpArmDelayDerefKCBWorker@0
_CmpArmDelayedCloseTimer@0
_CmpArmLazyWriter@12
_CmpAssignSecurityDescriptor@20
_CmpAssignSecurityDescriptorWrapper@12
_CmpAssignSecurityToKcb@20
_CmpBecomeActiveFlusherAndReconciler@4
_CmpBindHiveToTrans@8
_CmpBlockHiveWrites@12
_CmpBlockTwoHiveWrites@12
_CmpBoostActiveHiveWriter@8
_CmpBuildAdminInformation@4
_CmpBuildHashStackAndLookupCache@56
_CmpBuildRegMultiSz@20
_CmpBuildVirtualReplicationStack@16
_CmpCallCallBacks@24
_CmpCallbackFillObjectContext@12
_CmpCanGrowHive@8
_CmpCancelBootDisabledFlush@0
_CmpCancelSubordinatePost@8
_CmpCheckAdminAccess@12
_CmpCheckAndFixSecurityCellsRefcount@4
_CmpCheckCreateAccess@24
_CmpCheckHivePrimaryFileReadWriteAccess@4
_CmpCheckKey@24
_CmpCheckKeyAccess@16
_CmpCheckKeyBodyAccess@20
_CmpCheckLeaf@16
_CmpCheckLexicographicalOrder@12
_CmpCheckNotifyAccess@12
_CmpCheckRegistry2@28
_CmpCheckSecurityCellAccess@16
_CmpCheckValueList@32
_CmpCheckWrpKeyAccess@4
_CmpClaimGlobalQuota@4
_CmpCleanUpKCBCacheTable@12
_CmpCleanUpKcbCacheWithLock@8
_CmpCleanUpKcbValueCache@4
_CmpCleanUpSubKeyInfo@4
_CmpCleanupTransactionState@16
_CmpClearKeyAccessBits@8
_CmpCloneHwProfile@28
_CmpCloneKCBValueListForTrans@12
_CmpCloseKeyObject@16
_CmpCmdHiveClose@4
_CmpCmdHiveOpen@28
_CmpCmdInit@4
_CmpCmdRenameHive@20
_CmpCoalescingCallback@12
_CmpCommitAddKeyUoW@8
_CmpCommitDeleteKeyUoW@8
_CmpCommitDeleteValueKeyUoW@8
_CmpCommitRenameKeyUoW@8
_CmpCommitSetSecurityUoW@8
_CmpCommitSetValueKeyUoW@8
_CmpCompareCompressedName@16
_CmpCompareInIndex@20
_CmpCompareKeysByName@8
_CmpCompareNewValueDataAgainstKCBCache@20
_CmpCompareTwoCompressedNames@16
_CmpCompareUnicodeString@12
_CmpCompleteFlushAndPurgeIrp@12
_CmpCompleteLazyWrite@8
_CmpComputeHashKey@8
_CmpComputeHashKeyForCompressedName@12
_CmpComputeKcbConvKey@4
_CmpComputeLogFillLevel@24
_CmpConstructName@4
_CmpConvertLangId@8
_CmpCopyCell@16
_CmpCopyCompressedName@16
_CmpCopyKeyPartial@28
_CmpCopyName@8
_CmpCopySaclToVirtualKey@20
_CmpCopySyncTree2@28
_CmpCopySyncTree@24
_CmpCopyValue@16
_CmpCreateControlSet@4
_CmpCreateEmptyKey@16
_CmpCreateEvent@12
_CmpCreateHwProfileFriendlyName@16
_CmpCreateKeyControlBlock@20
_CmpCreateLinkNode@52
_CmpCreateObjectTypes@0
_CmpCreatePerfKeys@0
_CmpCreatePredefined@12
_CmpCreateRegistryRoot@0
_CmpCreateRootNode@12
_CmpCreateTemporaryHive@12
_CmpDelayCloseWorker@4
_CmpDelayDerefKCBTimerRoutine@8
_CmpDelayDerefKCBWorker@4
_CmpDelayDerefKeyControlBlock@4
_CmpDelayFreeCmRm@4
_CmpDelayFreeRMDpcRoutine@16
_CmpDelayFreeRMWorker@4
_CmpDelayedDerefKeys@4
_CmpDeleteHive@4
_CmpDeleteKcbCache@4
_CmpDeleteKeyObject@4
_CmpDeleteTree@8
_CmpDereferenceHive@4
_CmpDereferenceKeyControlBlock@4
_CmpDereferenceKeyControlBlockWithLock@8
_CmpDereferenceNameControlBlockWithLock@4
_CmpDestroyHive@8
_CmpDestroySecurityCache@4
_CmpDestroyTemporaryHive@4
_CmpDestroyVirtualStack@12
_CmpDisableLazyFlush@4
_CmpDiskFullWarning@0
_CmpDiskFullWarningWorker@4
_CmpDoAccessCheckOnKCB@16
_CmpDoAccessCheckOnSubtree@20
_CmpDoBuildVirtualStack@12
_CmpDoCompareKeyName@12
_CmpDoCreate@48
_CmpDoCreateChild@52
_CmpDoFileSetSizeEx@20
_CmpDoFileWrite@28
_CmpDoFindSubKeyByNumber@12
_CmpDoFlushAll@4
_CmpDoFlushNextHive@8
_CmpDoOpen@68
_CmpDoQueueLateUnloadWorker@4
_CmpDoQueueSystemHiveHysteresis@4
_CmpDoReDoCreateKey@8
_CmpDoReDoDeleteKey@8
_CmpDoReDoDeleteValue@8
_CmpDoReDoRecord@8
_CmpDoReDoRenameKey@8
_CmpDoReDoSetKeyUserFlags@8
_CmpDoReDoSetLastWriteTime@8
_CmpDoReDoSetSecurityDescriptor@8
_CmpDoReDoSetValueExisting@8
_CmpDoReDoSetValueNew@8
_CmpDoReOpenTransKey@16
_CmpDoReadTxRBigLogRecord@12
_CmpDoReconcileNextHive@8
_CmpDoSort@8
_CmpDoSystemCacheRead@16
_CmpDoSystemCacheWrite@20
_CmpDummyApc@12
_CmpDumpKeyBodyList@12
_CmpDumpOneKeyBody@16
_CmpDuplicateIndex@12
_CmpDuplicateKey@12
_CmpEnableLazyFlush@4
_CmpEnableLazyFlushDpcRoutine@16
_CmpEtwDumpKcb@8
_CmpEtwReleaseHivePath@4
_CmpExamineSaclForAuditEvent@8
_CmpFatalFilter@8
_CmpFileFlush@8
_CmpFileFlushAndPurge@8
_CmpFileRead@20
_CmpFileReadEx@20
_CmpFileWrite@24
_CmpFilterAcpiDockingState@24
_CmpFindCellInIndex@8
_CmpFindControlSet@16
_CmpFindDrivers@32
_CmpFindGroupOrderList@8
_CmpFindKeyNameAtIndex@12
_CmpFindMatchingDescriptorCell@20
_CmpFindNameInList@24
_CmpFindNameInListWithStatus@24
_CmpFindPathByName@20
_CmpFindSecurityCellCacheIndex@12
_CmpFindSubKeyByName@12
_CmpFindSubKeyByNameWithStatus@16
_CmpFindSubKeyByNumber@16
_CmpFindSubKeyByNumberEx@32
_CmpFindSubKeyByNumberFromMergedView@32
_CmpFindSubKeyInLeafWithStatus@20
_CmpFindSubKeyInRoot@16
_CmpFindSubkeyInHashByChildCell@20
_CmpFindTagIndex@16
_CmpFindValueByName@12
_CmpFindValueByNameFromCache@16
_CmpFinishBeingActiveFlusherAndReconciler@4
_CmpFinishSystemHivesLoad@4
_CmpFireCleanupNotifications@4
_CmpFlushBackupHive@4
_CmpFlushHive@8
_CmpFlushNotifiesOnKeyBodyList@12
_CmpFlushNotify@12
_CmpForceFlushWorker@4
_CmpFree@8
_CmpFreeAllMemory@0
_CmpFreeBootRegistry@0
_CmpFreeCallbackObjectContexts@4
_CmpFreeDriverList@8
_CmpFreeExtraHashInfo@4
_CmpFreeKeyBody@8
_CmpFreeKeyByCell@12
_CmpFreeKeyControlBlock@4
_CmpFreeKeyValues@12
_CmpFreeLineList@4
_CmpFreeOffsetArray@8
_CmpFreePostBlock@4
_CmpFreeSectionList@4
_CmpFreeSecurityDescriptor@8
_CmpFreeSubordinatePost@4
_CmpFreeUnitOfWork@4
_CmpFreeValue@8
_CmpFreeValueData@12
_CmpFreezeThawDpcRoutine@16
_CmpFreezeThawWorker@4
_CmpGenerateAppHiveSecurityDescriptor@0
_CmpGenerateFlushControlData@12
_CmpGetAcpiBiosInformation@8
_CmpGetAcpiProfileInformation@24
_CmpGetBiosDate@16
_CmpGetBiosVersion@12
_CmpGetBootValueData@16
_CmpGetCallbackObjectContext@8
_CmpGetCmHiveFromVirtualPath@8
_CmpGetConvKeyAtIndex@12
_CmpGetFileSize@8
_CmpGetIndexElementSize@4
_CmpGetKeyName@12
_CmpGetLastHive@0
_CmpGetLastSetFileSize@8
_CmpGetMappingHiveForString@8
_CmpGetNameControlBlock@8
_CmpGetNextActiveHive@4
_CmpGetNextFailedUnloadHive@4
_CmpGetNextHive@4
_CmpGetNextName@12
_CmpGetNodeName@12
_CmpGetRegistryValue@12
_CmpGetSectionLineIndex@16
_CmpGetSectionLineIndexValueCount@12
_CmpGetSymbolicLink@20
_CmpGetToken@12
_CmpGetValueData@28
_CmpGetValueDataFromCache@20
_CmpGetValueForAudit@16
_CmpGetVirtualStoreRoot@8
_CmpGetVirtualizationID@4
_CmpGetVirtualizationIDFromFullVirtualPath@8
_CmpGetVolumeClusterSize@8
_CmpGetVolumeClusterSizeCompletion@12
_CmpGetVolumeLogFileSizeCap@4
_CmpHiveRootSecurityDescriptor@4
_CmpHwprofileDefaultSelect@12
_CmpInitBackupHive@8
_CmpInitCallbacks@0
_CmpInitCmPrivateAlloc@0
_CmpInitCmRM@8
_CmpInitDelayDerefKCBEngine@0
_CmpInitGlobalQuotaAllowed@0
_CmpInitHiveFromFile@36
_CmpInitSIDToHiveMapping@0
_CmpInitSecurityCache@4
_CmpInitializeActualPrimaryFileSize@8
_CmpInitializeDelayedCloseTable@0
_CmpInitializeFreezeThaw@0
_CmpInitializeHardwareConfiguration@4
_CmpInitializeHive@48
_CmpInitializeKcbCache@8
_CmpInitializeKeyNameString@12
_CmpInitializeLazyWriters@0
_CmpInitializeMachineDependentConfiguration@4
_CmpInitializeNameCache@0
_CmpInitializePreloadedHive@8
_CmpInitializePreloadedHives@8
_CmpInitializeRegistryNames@0
_CmpInitializeRegistryNode@28
_CmpInitializeSystemBiosInformation@4
_CmpInitializeSystemHive@4
_CmpInitializeSystemHivesLoad@0
_CmpInitializeTransactions@0
_CmpInitializeTrustedInstallerSid@0
_CmpInitializeValueNameString@12
_CmpInsertCallbackInListByAltitude@8
_CmpInsertKeyHash@12
_CmpInsertKeyHashToDeletedKcbTable@8
_CmpInsertSecurityCellList@16
_CmpInterlockedFunction@8
_CmpIsCmRm@4
_CmpIsHiveAlreadyLoaded@20
_CmpIsHiveBoundToTrans@8
_CmpIsHiveEligibleForLazyReconcile@4
_CmpIsHiveLoadingOnOtherThread@4
_CmpIsHiveOnRemovableDisk@4
_CmpIsKcbLockAllowed@12
_CmpIsKcbLockedExclusive@4
_CmpIsLoadType@24
_CmpIsLockAllowedByIndex@20
_CmpIsMasterHive@4
_CmpIsSystemEntity@4
_CmpIsThisSameFile@8
_CmpIssueNewDirtyCallback@0
_CmpKcbCacheLookup@56
_CmpKeyInfoProbeAlingment@4
_CmpLateUnloadHiveWorker@4
_CmpLazyCommitDpcRoutine@16
_CmpLazyCommitWorker@4
_CmpLazyFlushDpcRoutine@16
_CmpLazyWriteWorker@4
_CmpLinkHiveToMaster@36
_CmpLinkKeyToHive@8
_CmpLoadHiveThread@4
_CmpLoadHiveVolatile@8
_CmpLoadKeyCommon@32
_CmpLoadManufacturingModeNode@16
_CmpLoadManufacturingProfileNode@20
_CmpLoadManufacturingProfileServicesNode@20
_CmpLoadServicesNode@16
_CmpLockDeletedHashEntryExclusiveByKcb@4
_CmpLockHashEntryByIndexExclusive@8
_CmpLockHashEntryByIndexShared@8
_CmpLockHashEntryExclusive@8
_CmpLockHashEntryExclusiveByKcb@4
_CmpLockHashEntryShared@8
_CmpLockHiveFlusherExclusive@4
_CmpLockHiveFlusherShared@4
_CmpLockHiveListExclusive@0
_CmpLockHiveListShared@0
_CmpLockHiveWriter@4
_CmpLockIXLockExclusive@12
_CmpLockIXLockIntent@12
_CmpLockKcbExclusive@4
_CmpLockKcbShared@4
_CmpLockNameHashEntryExclusive@4
_CmpLockRegistry@0
_CmpLockRegistryExclusive@0
_CmpLockRegistryFreezeAware@4
_CmpLockTableAdd@8
_CmpLockTableConvertSharedToExclusive@8
_CmpLockTableRemove@8
_CmpLockTwoKcbsExclusive@8
_CmpLockTwoKcbsShared@8
_CmpLockTwoSecurityCachesExclusiveShared@8
_CmpLogCheckpoint@12
_CmpLogClearAccessBitsEvent@12
_CmpLogDirtyVectorUse@16
_CmpLogEvent@12
_CmpLogHiveDestroyEvent@4
_CmpLogHiveInitializeEvent@16
_CmpLogHiveLinkEvent@8
_CmpLogHiveRundownEvent@8
_CmpLogReorganizeEvent@12
_CmpLogTxrInitEvent@12
_CmpLogUnload@8
_CmpMarkCurrentProfileDirty@0
_CmpMarkCurrentValueDirty@8
_CmpMarkIndexDirty@12
_CmpMarkKcbDeleted@4
_CmpMarkKcbDeletedAndCache@4
_CmpMarkKeyDirty@12
_CmpMarkKeyParentDirty@8
_CmpMarkKeyValuesDirty@12
_CmpMarkValueDataDirty@8
_CmpMergeKeyValues@24
_CmpMigrateOOBELanguageToInstallationLanguage@0
_CmpMountPreloadedHives@0
_CmpMoveBiosAliasTable@32
_CmpNameFromAttributes@12
_CmpNameSize@4
_CmpNotifyChangeKey@28
_CmpNotifyTriggerCheck@12
_CmpOKToFollowLink@8
_CmpOpenHiveFile@32
_CmpParseCacheAddHive@8
_CmpParseCacheAddSymbolicLink@4
_CmpParseCacheAllocEntry@16
_CmpParseCacheAllocTable@4
_CmpParseCacheClose@0
_CmpParseCacheCompareUnicodeStrings@16
_CmpParseCacheComputeRegHashKey@8
_CmpParseCacheFreeTable@4
_CmpParseCacheInit@0
_CmpParseCacheInsertEntry@8
_CmpParseCacheLookup@20
_CmpParseCacheLookupByHash@32
_CmpParseCacheRemoveEntry@8
_CmpParseCacheRemoveHive@4
_CmpParseInfBuffer@12
_CmpParseKey@40
_CmpPostApc@20
_CmpPostApcRunDown@4
_CmpPostNotify@28
_CmpPreserveSystemHiveData@8
_CmpProcessForSimpleStringSub@8
_CmpProtectPool@12
_CmpPublishEventForPcaResolver@4
_CmpQueryFileSecurityDescriptor@8
_CmpQueryHiveRedirectionFileList@8
_CmpQueryKeyData@24
_CmpQueryKeyDataFromCache@24
_CmpQueryKeyDataFromNode@32
_CmpQueryKeyName@24
_CmpQueryKeyValueData@28
_CmpQueryNameString@8
_CmpQueueLazyCommitWorker@4
_CmpQuotaWarningWorker@4
_CmpRealignLogBuffers@4
_CmpRebuildKcbCache@4
_CmpRecordUnloadEventForHive@8
_CmpRecoverEnlistment@12
_CmpReferenceEffectiveToken@4
_CmpReferenceHive@4
_CmpReferenceKeyControlBlock@4
_CmpReferenceKeyControlBlockUnsafe@4
_CmpRefreshHive@4
_CmpRefreshParent@12
_CmpRefreshWorkerRoutine@12
_CmpRegisterCallbackInternal@20
_CmpRegisterTraceLoggingProvider@0
_CmpRehashKcbSubtree@8
_CmpReleaseGlobalQuota@4
_CmpReleaseWriteQueue@8
_CmpRemoveCellFromIndex@8
_CmpRemoveFromDelayedClose@4
_CmpRemoveFromDelayedDeref@4
_CmpRemoveFromHiveFileList@4
_CmpRemoveFromSecurityCache@8
_CmpRemoveHiveFromMapping@4
_CmpRemoveKeyControlBlock@4
_CmpRemoveKeyHash@8
_CmpRemoveKeyHashFromDeletedKcbTable@8
_CmpRemoveSecurityCellList@8
_CmpRemoveSubKey@12
_CmpRemoveSubKeyCellNoCellRef@12
_CmpRemoveValueFromList@12
_CmpReorganizeHive@8
_CmpReparseToVirtualPath@12
_CmpReplicateKeyToVirtual@8
_CmpReportAuditVirtualizationEvent@4
_CmpReportNotify@24
_CmpReportNotifyHelper@28
_CmpRmAnalysisPhase@12
_CmpRmReDoPhase@12
_CmpRmRecover@12
_CmpRmUnDoPhase@4
_CmpRollbackTransactionArray@16
_CmpRunDownCmRM@8
_CmpRunDownDelayDerefKCBEngine@8
_CmpRundownUnitOfWork@4
_CmpSaveBootControlSet@4
_CmpSaveKeyByFileCopy@8
_CmpSearchAddTrans@28
_CmpSearchForOpenSubKeys@16
_CmpSearchForTrans@12
_CmpSearchKCBForTransChildByName@8
_CmpSearchKeyControlBlockTree@12
_CmpSearchLineInSectionByIndex@8
_CmpSearchSectionByName@8
_CmpSearchValueInLine@8
_CmpSecConvKey@8
_CmpSecurityMethod@36
_CmpSelectLeaf@20
_CmpSendBootDeviceUsageNotification@4
_CmpSetConvKeyAtIndex@16
_CmpSetGlobalQuotaAllowed@0
_CmpSetIoPriorityThread@8
_CmpSetNetworkValue@4
_CmpSetPriorityThread@8
_CmpSetRespectIoPriorityThread@8
_CmpSetSecurityDescriptorInfo@32
_CmpSetSystemBiosInformation@12
_CmpSetSystemValues@4
_CmpSetValueDataExisting@20
_CmpSetValueDataNew@20
_CmpSetValueKeyExisting@28
_CmpSetValueKeyNew@32
_CmpSetVersionData@0
_CmpSetVideoBiosInformation@8
_CmpSetupConfigurationTree@16
_CmpSignalDeferredPosts@4
_CmpSignalUnloadEventArrayForHive@4
_CmpSnapshotHiveToOffsetArray@16
_CmpSnapshotKCBSecurity@16
_CmpSnapshotTxOwnerArray@12
_CmpSortByTag@4
_CmpSortDriverList@12
_CmpSplitLeaf@16
_CmpStartCLFSLog@36
_CmpStartRMLog@8
_CmpStartRMLogs@4
_CmpStepThroughExit@8
_CmpStopRMLog@4
_CmpSyncKcbCacheForHive@12
_CmpSyncKeyValues@28
_CmpSyncNextBackupHive@0
_CmpSyncSubKeysAfterDelete@20
_CmpSystemHiveHysteresisWorker@4
_CmpSystemQuotaWarningWorker@4
_CmpTouchFile@4
_CmpTraceHiveFlushBoostedActiveFlusher@0
_CmpTraceHiveFlushFinishWaitForActive@0
_CmpTraceHiveFlushStartWaitForActive@0
_CmpTraceHiveFlushWroteLogFile@8
_CmpTraceHiveFlushWrotePrimaryFile@8
_CmpTraceHiveLoadStart@8
_CmpTraceHiveLoadStop@4
_CmpTraceHiveMountBaseFileMounted@8
_CmpTraceHiveMountLogEntryApplied@8
_CmpTraceHiveMountStart@0
_CmpTraceHiveMountStop@4
_CmpTraceHiveRestoreStart@8
_CmpTraceHiveRestoreStop@4
_CmpTraceHiveSaveFileCopied@0
_CmpTraceHiveSaveFileWritten@0
_CmpTraceHiveSaveStart@4
_CmpTraceHiveSaveStop@4
_CmpTraceHiveSaveTreeCopied@0
_CmpTraceHiveUnloadStart@8
_CmpTraceHiveUnloadStop@4
_CmpTraceShutdownFlushStart@0
_CmpTraceShutdownFlushStop@0
_CmpTraceShutdownRundownComplete@0
_CmpTraceShutdownStart@0
_CmpTraceShutdownStop@0
_CmpTransMgrCommit@12
_CmpTransMgrCommitUoW@8
_CmpTransMgrFreeVolatileData@8
_CmpTransMgrPrepare@16
_CmpTransMgrRollback@8
_CmpTransMgrSyncHive@4
_CmpTransWriteLog@20
_CmpTrimHive@4
_CmpTryAcquireIXLockIntent@4
_CmpTryConvertKcbLockSharedToExclusive@4
_CmpTryToLockHashEntryByIndexExclusive@8
_CmpTryToRundownHive@16
_CmpUnblockHiveWrites@12
_CmpUnblockTwoHiveWrites@8
_CmpUndoDeleteKeyForTrans@8
_CmpUnfreezeHive@4
_CmpUnlockAndLockKcbs@16
_CmpUnlockDeletedHashEntryByKcb@4
_CmpUnlockHashEntry@8
_CmpUnlockHashEntryByIndex@8
_CmpUnlockHashEntryByKcb@4
_CmpUnlockHiveFlusher@4
_CmpUnlockHiveList@0
_CmpUnlockHiveWriter@4
_CmpUnlockKcb@4
_CmpUnlockNameHashEntry@4
_CmpUnlockRegistry@0
_CmpUnlockTwoKcbs@8
_CmpUnlockTwoSecurityCaches@8
_CmpUpdateGlobalQuotaAllowed@0
_CmpUpdateKeyNodeAccessBits@12
_CmpUpdateParentForEachSon@8
_CmpUpdatePhaseAccessBit@0
_CmpUpdateReorganizeRegistryValues@0
_CmpUpdateSystemHiveHysteresis@12
_CmpUpgradeKcbLockToExclusive@4
_CmpUserPresenceCallback@16
_CmpUuidCreate@4
_CmpVEExecuteParseLogic@16
_CmpValidateGlobalFlushControlFlags@0
_CmpValidateHiveSecurityDescriptors@16
_CmpValueToData@20
_CmpVirtualBranchIsReplicated@12
_CmpVirtualPathPresent@4
_CmpWaitForHiveMount@16
_CmpWaitForLateUnloadWorker@0
_CmpWaitOnHiveWriteQueue@12
_CmpWalkPath@12
_CmpWorkerEngineWorker@4
_CmpWriteOffsetArrayToFile@20
_CompareFileTimeType@8
_CompareNamesCaseSensitive@8
_CompareObjectTypes
_CompareUnicodeStrings@12
_ComposeHangulLV@8
_ComposeHangulLVT@8
_ComputeNameLength@4
_ComputeUnicodeNameLength@4
_ConstraintEval@20
_ConsumerGetBuffer@12
_ConsumerPeekAndConsumeBuffer@20
_ConvertDevpropcompkeyToString@16
_ConvertDevpropertyToString@16
_CountUTF8ToUnicode@12
_CountUnicodeToUTF8@12
_CpDoesPortExist@4
_CpEnableFifo@8
_CpGetByte@16
_CpInitialize@12
_CpPutByte@8
_CpReadLsr@8
_CpSetBaud@8
_CreateMiniNtBootKey@0
_CreateSystemRootLink@4
_CsrShutdownSynchronization@12
_DECREMENT_ADAPTER_CHANNELS@4
_DECREMENT_COMMON_BUFFERS@4
_DECREMENT_SCATTER_GATHER_LISTS@4
_DbgBreakPoint@0
_DbgBreakPointWithStatus@4
_DbgCommandString@8
_DbgLoadImageSymbols@12
_DbgLoadImageSymbolsUnicode@12
_DbgLoadUserImageSymbols@20
_DbgPrint
_DbgPrintEx
_DbgPrintReturnControlC
_DbgPrompt@12
_DbgQueryDebugFilterState@8
_DbgSetDebugFilterState@12
_DbgSetDebugPrintCallback@8
_DbgUnLoadImageSymbols@12
_DbgUnLoadImageSymbolsUnicode@12
_DbgUnicodeStringToAnsiString@8
_DbgUserBreakPoint@0
_DbgkCaptureLiveDump@16
_DbgkCaptureLiveKernelDump@4
_DbgkClearProcessDebugObject@8
_DbgkCreateMinimalProcess@4
_DbgkCreateMinimalThread@4
_DbgkCreateThread@4
_DbgkExitProcess@4
_DbgkExitThread@4
_DbgkForwardException@12
_DbgkInitialize@0
_DbgkLkmdRegisterCallback@12
_DbgkLkmdUnregisterCallback@4
_DbgkMapViewOfSection@20
_DbgkOpenProcessDebugPort@12
_DbgkRegisterErrorPort@8
_DbgkSendSystemDllMessages@12
_DbgkUnMapViewOfSection@8
_DbgkWerAddSecondaryData@16
_DbgkWerCaptureLiveKernelDump@36
_DbgkWerInitialize@0
_DbgkpCloseObject@16
_DbgkpConvertKernelToUserStateChange@8
_DbgkpCreateNotificationEvent@8
_DbgkpDeleteObject@4
_DbgkpFreeDebugEvent@4
_DbgkpInitializePhase0@0
_DbgkpInitializePhase1@0
_DbgkpLkmdFireCallbacks@12
_DbgkpLkmdIsMemoryBlockPresentFromCallback@12
_DbgkpLkmdLaunchSnapApc@16
_DbgkpLkmdSnapData@12
_DbgkpLkmdSnapDataEx@24
_DbgkpLkmdSnapGlobals@4
_DbgkpLkmdSnapKernelStack@24
_DbgkpLkmdSnapKernelStackSegmentCallback@12
_DbgkpLkmdSnapObject@12
_DbgkpLkmdSnapPendingIrps@12
_DbgkpLkmdSnapThread@16
_DbgkpLkmdSnapThreadApc@20
_DbgkpLkmdSnapThreadInContext@12
_DbgkpLkmdSqmIncrementDword@16
_DbgkpLkmdSqmIsOptedIn@0
_DbgkpLkmdSqmStatus@12
_DbgkpMarkProcessPeb@4
_DbgkpOpenHandles@12
_DbgkpPostFakeProcessCreateMessages@12
_DbgkpPostFakeThreadMessages@20
_DbgkpPostModuleMessages@12
_DbgkpQueueMessage@20
_DbgkpRemoveErrorPort@8
_DbgkpSectionToFileHandle@4
_DbgkpSendApiMessage@12
_DbgkpSendApiMessageLpc@12
_DbgkpSendErrorMessage@12
_DbgkpSetProcessDebugObject@16
_DbgkpStartSystemErrorHandler@0
_DbgkpSuppressDbgMsg@4
_DbgkpSuspendProcess@4
_DbgkpTriageDumpCheckPresentHashTable@16
_DbgkpTriageDumpFillHeaders@24
_DbgkpTriageDumpInitialize@16
_DbgkpTriageDumpIsMemoryBlockPresent@12
_DbgkpTriageDumpRestoreState@4
_DbgkpTriageDumpSaveState@4
_DbgkpTriageDumpSnapData@24
_DbgkpTriageDumpWrite@8
_DbgkpWakeTarget@4
_DbgkpWerAllocateNonpagedPool@4
_DbgkpWerAllocatePool@4
_DbgkpWerCaptureLiveFullDump@8
_DbgkpWerCaptureLiveTriageDump@4
_DbgkpWerCleanupContext@4
_DbgkpWerDeferredWriteRoutine@4
_DbgkpWerFreePool@4
_DbgkpWerInitializeDeferredLiveDump@4
_DbgkpWerInvokeCallbacks@4
_DbgkpWerProcessPolicyResult@16
_DbgkpWerUpdateTriageDumpHeader@4
_DbgkpWerWriteSecondaryData@8
_DbgkpWerWriteTriageDump@4
_DbgpInsertDebugPrintCallback@4
_DbgpRemoveDebugPrintCallback@4
_DebugPrint@12
_DebugPrompt@8
_DebugService@20
_DeleteNodeFromTree@8
_DelistKeyBodyFromKCB@8
_DisplayBootBitmap@4
_DisplayFilter@4
_DownLevelGetParentLanguageName@16
_DownLevelLangIDToLanguageName@16
_DownLevelLanguageNameToLangID@8
_DrvDbAcquireDatabaseNodeBaseKey@16
_DrvDbBuildDeviceIdDriverInfMatch@16
_DrvDbCreateDatabaseNode@32
_DrvDbCreateDeviceId@20
_DrvDbCreateDriverDatabase@20
_DrvDbCreateDriverFile@20
_DrvDbCreateDriverInfFile@20
_DrvDbCreateDriverPackage@20
_DrvDbDeleteDriverDatabase@8
_DrvDbDeleteObjectRegKey@16
_DrvDbDeleteObjectSubKey@16
_DrvDbDestroyDatabaseNode@8
_DrvDbDispatchDeviceId@20
_DrvDbDispatchDriverDatabase@20
_DrvDbDispatchDriverFile@20
_DrvDbDispatchDriverInfFile@20
_DrvDbDispatchDriverPackage@20
_DrvDbFindDatabaseNode@12
_DrvDbGetCompositeMappedPropertyKeys@24
_DrvDbGetDeviceIdDriverInfMatches@24
_DrvDbGetDeviceIdMappedProperty@32
_DrvDbGetDeviceIdMappedPropertyKeys@24
_DrvDbGetDriverDatabaseList@24
_DrvDbGetDriverDatabaseMappedProperty@32
_DrvDbGetDriverDatabaseMappedPropertyKeys@24
_DrvDbGetDriverFileMappedProperty@32
_DrvDbGetDriverFileMappedPropertyKeys@24
_DrvDbGetDriverInfFileMappedProperty@32
_DrvDbGetDriverInfFileMappedPropertyKeys@24
_DrvDbGetDriverPackageMappedProperty@32
_DrvDbGetDriverPackageMappedPropertyKeys@24
_DrvDbGetDriverPackageSignerName@24
_DrvDbGetDriverPackageSignerScore@16
_DrvDbGetObjectDatabaseNode@16
_DrvDbGetObjectList@32
_DrvDbGetObjectSubKeyCallback@16
_DrvDbGetObjectSubKeyList@32
_DrvDbGetRegValueMappedProperty@28
_DrvDbGetRegValueMappedPropertyKeys@28
_DrvDbGetSecurityDescriptor@0
_DrvDbInitializeDatabaseNodeVersion@8
_DrvDbLoadDatabaseNode@8
_DrvDbOpenContext@8
_DrvDbOpenDriverDatabaseRegKey@24
_DrvDbOpenObjectRegKey@32
_DrvDbRegisterDatabase@28
_DrvDbRegisterObjects@8
_DrvDbReleaseDatabaseNodeBaseKey@16
_DrvDbSetDeviceIdDriverInfMatches@16
_DrvDbSetDeviceIdMappedProperty@28
_DrvDbSetDriverDatabaseMappedProperty@28
_DrvDbSetDriverFileMappedProperty@28
_DrvDbSetDriverInfFileMappedProperty@28
_DrvDbSetDriverPackageMappedProperty@28
_DrvDbSetRegValueMappedProperty@24
_DrvDbSplitDeviceIdDriverInfMatch@16
_DrvDbSuspendDatabase@12
_DrvDbUnloadDatabaseNode@8
_DrvDbValidateDeviceIdName@8
_DrvDbValidateDriverDatabaseName@8
_DrvDbValidateDriverFileName@8
_DrvDbValidateDriverInfFileName@8
_DrvDbValidateDriverPackageName@8
_ElapsedDaysToYears@4
_EmClientQueryRuleState@8
_EmClientRuleDeregisterNotification@4
_EmClientRuleEvaluate@16
_EmClientRuleRegisterNotification@16
_EmCpuMatchCallback@28
_EmFalseCallback@28
_EmInitSystem@8
_EmMatchDate@28
_EmPowerPagingEnabled@4
_EmProviderDeregister@4
_EmProviderDeregisterEntry@4
_EmProviderRegister@24
_EmProviderRegisterEntry@16
_EmRemoveBadS3PagesCallback@28
_EmSystemArchitectureCallback@28
_EmTrueCallback@28
_EmpAcquirePagingReference@0
_EmpCacheBiosDate@0
_EmpCheckOperator@12
_EmpClientRuleRegisterNotification@16
_EmpCreateRuleParserStack@0
_EmpEvaluateNodeLink@36
_EmpEvaluateParseNodeMapping@56
_EmpEvaluatePermuteRuleEntries@16
_EmpEvaluateTargetRule@12
_EmpEvaluateUpdateRuleEvalState@8
_EmpInfParseGetGuidFromName@16
_EmpInfParseGetSectionLineCount@8
_EmpInfParseGetStringIndexFromName@12
_EmpInfParseGetValueFromSectionAndKeyName@20
_EmpInfParseSearchDependencyList@8
_EmpMapPhysicalAddress@20
_EmpParseCallbacks@4
_EmpParseEntryTypes@4
_EmpParseInfDatabase@8
_EmpParseRuleExpression@12
_EmpParseRuleTerm@20
_EmpParseRuleTermArgMapping@20
_EmpParseRules@4
_EmpParseStrings@4
_EmpParseTargetRuleStringIndexList@28
_EmpParseTargetRules@4
_EmpProviderDeregisterEntry@4
_EmpProviderRegister@24
_EmpQueueRuleUpdateState@8
_EmpReleasePagingReference@0
_EmpRemoveBadS3PageWorker@4
_EmpRuleParserStackPop@20
_EmpRuleParserStackPush@20
_EmpRuleUpdateWorkerThread@4
_EmpSearchCallbackDatabase@4
_EmpSearchEntryDatabase@4
_EmpSearchRuleDatabase@4
_EmpSearchTargetRuleList@4
_EmpUpdateRuleState@8
_EncloseSubCondition@4
_EncodeAttributeName@12
_EnlightenedSwapContext@0
_EnlistKeyBodyWithKCB@8
_EtwActivityIdControl@8
_EtwActivityIdControlKernel@8
_EtwAdjustTraceBuffers@0
_EtwDeleteProcessor@4
_EtwDereferenceSpinLockCounters@0
_EtwEnableTrace@44
_EtwEventEnabled@12
_EtwExitProcess@4
_EtwGetNotifyRoutine@4
_EtwGetProcessorBuffer@12
_EtwGetProviderIdFromHandle@16
_EtwInitialize@4
_EtwInitializeProcessor@4
_EtwKernelMemoryRundown@0
_EtwLogPfnInfoRundown@12
_EtwProviderEnabled@20
_EtwQueryPerformanceTraceInformation@16
_EtwQueryProcessTelemetryInfo@20
_EtwQueryTraceHandleByLoggerName@8
_EtwReferenceSpinLockCounters@0
_EtwRegister@16
_EtwRegisterClassicProvider@20
_EtwRegisterCounters@0
_EtwSendTraceBuffer@24
_EtwSetInformation@20
_EtwSetPerformanceTraceInformation@12
_EtwShutdown@4
_EtwTraceAntiStarvationBoost@8
_EtwTraceAppStateChange@8
_EtwTraceAutoBoostClearFloor@12
_EtwTraceAutoBoostEntryExhaustion@8
_EtwTraceAutoBoostSetFloor@32
_EtwTraceCpuCacheFlush@24
_EtwTraceDequeueWork@12
_EtwTraceDpcEnqueueEvent@24
_EtwTraceDuplicateHandle@24
_EtwTraceEnqueueWork@12
_EtwTraceEvent@24
_EtwTraceFreezeThawProcess@8
_EtwTraceInswapProcess@4
_EtwTraceIoTimerEvent@12
_EtwTraceJobAssignProcess@16
_EtwTraceJobRemoveProcess@12
_EtwTraceJobSendNotification@8
_EtwTraceJobSetQuery@28
_EtwTraceKernelEvent@20
_EtwTraceMemoryAcg@4
_EtwTraceObject@8
_EtwTraceObjectOperation@16
_EtwTracePool@20
_EtwTracePriority@20
_EtwTraceProcessTerminate@4
_EtwTraceReadyThread@16
_EtwTraceShouldYieldProcessor@12
_EtwTraceSystemTimeChange@12
_EtwTraceThread@12
_EtwTraceThreadAffinity@8
_EtwTraceThreadWorkItem@8
_EtwTraceTimedEvent@24
_EtwTraceWakeCounter@24
_EtwTraceWakeEvent@8
_EtwTraceWorkingSetInSwapStoreFail@8
_EtwTraceWorkingSetSwap@12
_EtwUnregister@8
_EtwUnregisterCounters@0
_EtwWmitraceWorker@0
_EtwWrite@24
_EtwWriteEndScenario@24
_EtwWriteErrorLogEntry@36
_EtwWriteEx@40
_EtwWriteKMSecurityEvent@16
_EtwWriteStartScenario@24
_EtwWriteString@28
_EtwWriteTransfer@28
_EtwpAccessCheck@12
_EtwpAccessCheckFromState@12
_EtwpAcquireTokenAccessInformation@4
_EtwpAddBinaryInfoEvents@12
_EtwpAddDataSource@4
_EtwpAddDebugInfoEvents@20
_EtwpAddEventToBuffer@28
_EtwpAddGuidEntry@8
_EtwpAddKmRegEntry@20
_EtwpAddLogHeader@8
_EtwpAddNotificationEvent@4
_EtwpAddProviderToSession@12
_EtwpAddRegEntryToGroup@20
_EtwpAddReplyIndex@8
_EtwpAddUmRegEntry@24
_EtwpAddWinRtProviderToSession@12
_EtwpAdjustFreeBuffers@4
_EtwpAdjustTraceBuffers@4
_EtwpAllocDataBlock@12
_EtwpAllocGuidEntry@4
_EtwpAllocateFreeBuffers@8
_EtwpAllocatePayloadFilterData@12
_EtwpAllocatePmcData@4
_EtwpAllocateStringFilterData@8
_EtwpAllocateTimeStampIndex@4
_EtwpAllocateTraceBufferPool@4
_EtwpApplyEventIdPayloadFilter@36
_EtwpApplyEventIdPayloadFilterOnUserEvent@24
_EtwpApplyExeFilter@8
_EtwpApplyPackageIdFilter@12
_EtwpApplyPayloadFilterInternal@28
_EtwpApplyScopeFilters@16
_EtwpApplyStackWalkFilter@16
_EtwpApplyStackWalkFilterOnUserEvent@12
_EtwpBufferingModeFlush@4
_EtwpBugCheckMultiPartCallback@16
_EtwpBuildNotificationPacket@16
_EtwpBuildProcessEvent@44
_EtwpCCSwapDeleteProcessor@4
_EtwpCCSwapInitializeProcessor@4
_EtwpCCSwapStart@4
_EtwpCCSwapStop@8
_EtwpCalculateUpdateNotification@28
_EtwpCapturePreviousRegistryData@4
_EtwpCaptureRegistryData@12
_EtwpCaptureString@8
_EtwpCheckForPoolTagFilterExtension@12
_EtwpCheckForStackTracingExtension@8
_EtwpCheckGuidAccess@12
_EtwpCheckGuidAccessAndDoRundown@16
_EtwpCheckLoggerAccessAndDoRundown@12
_EtwpCheckLoggerControlAccess@8
_EtwpCheckNotificationAccess@8
_EtwpCheckPoolTagFilters@8
_EtwpCheckProviderLoggingAccess@12
_EtwpCheckSystemTraceAccess@8
_EtwpClearSessionAndUnreferenceEntry@12
_EtwpClockSourceRunDown@8
_EtwpCloseRealTimeConnectionObject@16
_EtwpCloseRegistrationObject@16
_EtwpCompareGuid
_EtwpCompleteBuffer@12
_EtwpComputeRegEntryEnableInfo@8
_EtwpCopyJobGuidSafe@8
_EtwpCopySchematizedFilters@12
_EtwpCreateActivityId@4
_EtwpCreateDirectoryFile@28
_EtwpCreateEventKey@4
_EtwpCreateLogFile@8
_EtwpCreateNtFileName@12
_EtwpCreatePerfectHashFunction@16
_EtwpCreateUmReplyObject@12
_EtwpCrimsonProvEnableCallback@36
_EtwpCrimsonStackWalkApc@20
_EtwpDelayCreate@24
_EtwpDeleteRealTimeConnectionObject@4
_EtwpDeleteRegistrationObject@4
_EtwpDequeueFreeBuffer@4
_EtwpDereferenceLoggerSecurityDescriptor@8
_EtwpDereferenceStackEntry@8
_EtwpDisableTraceProviders@4
_EtwpDisallowedGuidAddition@8
_EtwpDisallowedGuidRemoval@8
_EtwpDisassociateConsumer@8
_EtwpDiskProvTraceDisk@16
_EtwpEnableAutoLoggerProviders@12
_EtwpEnableDisableSpecialGuids@24
_EtwpEnableDisableUMGL@16
_EtwpEnableGuid@8
_EtwpEnableKeyProviders@16
_EtwpEnableStackCaching@12
_EtwpEnableTrace@52
_EtwpEnumerateAddressSpace@12
_EtwpEnumerateTraceGuids@8
_EtwpEnumerateWorkingSet@8
_EtwpEventTracingCounterSetCallback@12
_EtwpEventWriteFull@72
_EtwpEventWriteTemplateAdmin@32
_EtwpEventWriteTemplateBackingFile@28
_EtwpEventWriteTemplateMaxFileSize@40
_EtwpEventWriteTemplateSessAndProv@28
_EtwpEventWriteTemplateSession@16
_EtwpEventWriteTemplateSessionEnd@36
_EtwpExecutiveResourceConfigRunDown@8
_EtwpExpandFileName@16
_EtwpFailLogging@36
_EtwpFileProvTrace@16
_EtwpFillPerfectHashTable@24
_EtwpFinalizeHeader@12
_EtwpFindAndLockBufferForFlushing@12
_EtwpFindDebugId@16
_EtwpFindGuidEntryByGuid@8
_EtwpFindUserBufferSpace@16
_EtwpFlushActiveBuffers@8
_EtwpFlushBuffer@12
_EtwpFlushBufferToLogfile@8
_EtwpFlushBufferToRealtime@12
_EtwpFlushTrace@4
_EtwpFreeFilterInfo@4
_EtwpFreeGuidEntry@4
_EtwpFreeLoggerContext@4
_EtwpFreePmcData@4
_EtwpFreeSecurityDescriptor@4
_EtwpFreeStackCache@4
_EtwpFreeSystemLoggerIndex@4
_EtwpFreeTraceBufferPool@4
_EtwpFreeUserBufferSpace@12
_EtwpGenerateFileName@12
_EtwpGetAutoLoggerProviderFilter@12
_EtwpGetCycleCount@0
_EtwpGetDirectMappingCount@20
_EtwpGetDisallowList@12
_EtwpGetFlagExtension@8
_EtwpGetGuidSecurityDescriptor@8
_EtwpGetImageSize@8
_EtwpGetMaxDebugIdBufferSize@4
_EtwpGetNextEventOffsetType@12
_EtwpGetNextGuidEntry@8
_EtwpGetPerfCounter@0
_EtwpGetProcessAppSessionGuid@8
_EtwpGetProcessStartKey@4
_EtwpGetProviderGroupFromTraits@4
_EtwpGetPsmKeyExtendedHeaderItem@4
_EtwpGetSchematizedFilterSize@8
_EtwpGetScsiPassThroughCdb@4
_EtwpGetSecurityDescriptorByGuid@8
_EtwpGetSidExtendedHeaderItem@4
_EtwpGetStackExtendedHeaderItem@24
_EtwpGetSystemMaximumBufferCount@4
_EtwpGetSystemTime@0
_EtwpGetTraceGroupInfo@12
_EtwpGetTraceGroupList@8
_EtwpGetTraceGuidInfo@12
_EtwpGetTraceGuidList@8
_EtwpGetTrackingLockSlotForThread@8
_EtwpInitLoggerContext@8
_EtwpInitialize@4
_EtwpInitializeActivityIdSeed@8
_EtwpInitializeAutoLoggers@0
_EtwpInitializeBufferHeader@8
_EtwpInitializeLoggerSecurityDescriptor@8
_EtwpInitializeProviderInfoBuffer@12
_EtwpInitializeProviderTraits@0
_EtwpInitializeRealTimeConnection@0
_EtwpInitializeRegistration@0
_EtwpInitializeSecurity@0
_EtwpInitializeStackLookasideList@0
_EtwpInitializeStackTracing@8
_EtwpInitializeTimeStamp@4
_EtwpIsCaptureStateAllowed@12
_EtwpIsGuidAllowed@8
_EtwpIsProcessZombie@4
_EtwpIsRealtimeLogfileSpaceAvailable@4
_EtwpIsRegEntryAllowed@24
_EtwpKernelProvEnableCallback@36
_EtwpKernelTraceRundown@12
_EtwpLockStackCacheBucket@4
_EtwpLockUnlockBufferList@4
_EtwpLogAlwaysPresentRundown@4
_EtwpLogFileNameRundown@4
_EtwpLogGroupMask@12
_EtwpLogKernelEvent@20
_EtwpLogKernelTraceRundown@12
_EtwpLogMemInfo@8
_EtwpLogMemInfoDpc@16
_EtwpLogMemInfoRundown@4
_EtwpLogMemInfoWs@8
_EtwpLogPmcCounterRundown@8
_EtwpLogProcessPerfCtrs@4
_EtwpLogRefSetAutoMark@8
_EtwpLogRegistryEvent@28
_EtwpLogSessionWorkingSetInfo@4
_EtwpLogSystemEventUnsafe@24
_EtwpLogTxREvent@28
_EtwpLogger@4
_EtwpLoggerDpc@16
_EtwpLookupLoggerIdByName@8
_EtwpMapEnableFlags@8
_EtwpNetProvTraceNetwork@8
_EtwpNotifyGuid@8
_EtwpObjectHandleEnumCallback@16
_EtwpObjectHandleRundown@8
_EtwpObjectTypeRundown@8
_EtwpOpenConsumer@4
_EtwpOpenRealTimeConnectionObject@24
_EtwpOpenRegistrationObject@24
_EtwpParsePoolTagFilter@8
_EtwpPerfMemInfoWork@4
_EtwpPerfectHashFunctionSearch@8
_EtwpPmcProfileInit@0
_EtwpPoolRunDown@8
_EtwpPowerStateCallback@12
_EtwpPrepareHeader@12
_EtwpPrepareWmitraceLoggerInfo@4
_EtwpProcessEnumCallback@8
_EtwpProcessPerfCtrsRundown@8
_EtwpProcessThreadImageRundown@12
_EtwpProcessorRundown@8
_EtwpProviderArrivalCallback@12
_EtwpPsProvCaptureState@12
_EtwpPsProvProcessEnumCallback@8
_EtwpPsProvTraceImage@16
_EtwpPsProvTraceJob@16
_EtwpPsProvTracePriority@16
_EtwpPsProvTraceProcess@20
_EtwpPsProvTraceThread@12
_EtwpQueryProcessCommandLine@8
_EtwpQueryProcessOtherInfo@8
_EtwpQueryPsmKey@12
_EtwpQueryReferenceTime@8
_EtwpQueryRegistryCallback@24
_EtwpQueryTokenPackageInfo@12
_EtwpQueryTrace@4
_EtwpQueueNotification@12
_EtwpQueuePerfMemInfoWorkItem@4
_EtwpQueueReply@8
_EtwpQueueStackWalkApc@16
_EtwpQueueStackWalkDpc@12
_EtwpReadConfigParameters@0
_EtwpRealtimeConnect@4
_EtwpRealtimeCreateLogfile@4
_EtwpRealtimeDeliverBuffer@8
_EtwpRealtimeDisconnectAllConsumers@4
_EtwpRealtimeDisconnectConsumer@4
_EtwpRealtimeDisconnectConsumerByHandle@4
_EtwpRealtimeFlushSavedBuffers@4
_EtwpRealtimeInjectEtwBuffer@12
_EtwpRealtimeNotifyConsumers@4
_EtwpRealtimeResetReferenceTime@4
_EtwpRealtimeRestoreBuffer@8
_EtwpRealtimeRestoreState@4
_EtwpRealtimeSaveBuffer@8
_EtwpRealtimeSaveState@4
_EtwpRealtimeSendEmptyMarker@4
_EtwpRealtimeUpdateConsumers@4
_EtwpRealtimeUpdateReferenceTime@8
_EtwpRealtimeZeroTruncateLogfile@4
_EtwpReceiveNotification@12
_EtwpReceiveReplyDataBlock@12
_EtwpReferenceGuidEntry@4
_EtwpReferenceLoggerSecurityDescriptor@4
_EtwpReferenceStackLookasideList@0
_EtwpRegTraceCallback@12
_EtwpRegTraceEnableCallback@36
_EtwpRegisterProvider@24
_EtwpRegisterSecurityProvider@0
_EtwpRegisterUMGuid@12
_EtwpReleaseProviderTraitsReference@4
_EtwpReleaseQueueEntry@8
_EtwpRequestFlushTimer@8
_EtwpReserveWithPebsIndex@24
_EtwpReserveWithPmcCounters@24
_EtwpRundownNotifications@8
_EtwpSampledProfileRunDown@12
_EtwpSendBufferToDebugger@4
_EtwpSendDataBlock@8
_EtwpSendDbgId@4
_EtwpSendReplyDataBlock@4
_EtwpSendSessionNotification@12
_EtwpSendTraceEvent@8
_EtwpServerSiloContextCleanupNotify@4
_EtwpServerSiloCreateNotify@4
_EtwpServerSiloTerminateNotify@8
_EtwpSetMark@20
_EtwpSetPmcProfileSource@8
_EtwpSetProviderTraitsCommon@16
_EtwpSetProviderTraitsKm@12
_EtwpSetProviderTraitsUm@12
_EtwpShutdownConsumers@4
_EtwpSpinLockConfigRunDown@8
_EtwpStackRundown@8
_EtwpStackTraceDispatcher@16
_EtwpStackWalkApc@20
_EtwpStackWalkDpc@16
_EtwpStartAutoLogger@16
_EtwpStartLogger@4
_EtwpStartTrace@4
_EtwpStopLoggerInstance@4
_EtwpStopTrace@8
_EtwpSwitchBuffer@20
_EtwpSynchronizationDpc@16
_EtwpSynchronizeWithLogger@8
_EtwpSysModuleRunDown@8
_EtwpSystemImageEnumCallback@8
_EtwpSystemTraceWdf@20
_EtwpThreadEnumCallback@12
_EtwpThreadRundownApc@20
_EtwpTimeProfileInit@0
_EtwpTraceCachedStack@12
_EtwpTraceDebugPrint@12
_EtwpTraceFileIo@20
_EtwpTraceFileName@16
_EtwpTraceFltIo@16
_EtwpTraceFltTimedIo@20
_EtwpTraceHandle@16
_EtwpTraceImageRundown@28
_EtwpTraceIo@12
_EtwpTraceIoInit@4
_EtwpTraceKernelEventWithFilter@20
_EtwpTraceLoggingProvEnableCallback@36
_EtwpTraceLostEvent@16
_EtwpTraceMessageVa@28
_EtwpTraceNetwork@16
_EtwpTraceOpticalIo@20
_EtwpTraceOpticalIoInit@4
_EtwpTraceProcessRundown@16
_EtwpTraceRedirectedIo@8
_EtwpTraceRegistry@24
_EtwpTraceRegistryTransaction@24
_EtwpTraceSplitIo@12
_EtwpTraceStackKey@24
_EtwpTraceStackWalk@16
_EtwpTraceSystemInitialization@0
_EtwpTraceSystemShutdown@0
_EtwpTraceThreadRundown@8
_EtwpTraceThreadRundownWithStack@8
_EtwpTraceWdf@20
_EtwpTracingProvEnableCallback@36
_EtwpTrackProviderBinary@4
_EtwpUMGLEnabled@8
_EtwpUnreferenceDataBlock@4
_EtwpUnreferenceGuidEntry@4
_EtwpUpdateDisallowList@12
_EtwpUpdateDisallowedGuids@28
_EtwpUpdateEnableMask@16
_EtwpUpdateFileHeader@8
_EtwpUpdateFileInfoDriverRegistration@4
_EtwpUpdateFileInfoDriverState@16
_EtwpUpdateFilterData@20
_EtwpUpdateGroupMasks@8
_EtwpUpdateGuidEnableInfo@24
_EtwpUpdateKernelGroupMasks@8
_EtwpUpdateKernelGroupsWork@4
_EtwpUpdateLoggerGroupMasks@8
_EtwpUpdateLoggerSecurityDescriptor@8
_EtwpUpdatePayloadFilterData@12
_EtwpUpdatePerProcessTracing@12
_EtwpUpdatePerfectHashFunction@12
_EtwpUpdatePidFilterData@12
_EtwpUpdatePmcCounters@12
_EtwpUpdatePmcEvents@12
_EtwpUpdateProcessTracingCallback@8
_EtwpUpdateRegEntryEnableMask@16
_EtwpUpdateSchematizedFilterData@16
_EtwpUpdateStackTracing@12
_EtwpUpdateStringFilterData@12
_EtwpUpdateTagFilter@12
_EtwpUpdateTrace@4
_EtwpUseDescriptorTypeUm@4
_EtwpValidateEnableNotification@20
_EtwpValidateFilterDescriptors@8
_EtwpValidateFlagExtension@4
_EtwpValidatePayloadFilter@12
_EtwpValidateUserModeLoggerInfo@12
_EtwpWaitForBufferReferenceCount@4
_EtwpWriteUserEvent@72
_ExAcquireCacheAwarePushLockExclusive@4
_ExAcquireResourceExclusiveLite@8
_ExAcquireResourceSharedLite@8
_ExAcquireSharedStarveExclusive@8
_ExAcquireSharedWaitForExclusive@8
_ExAcquireSpinLockExclusive@4
_ExAcquireSpinLockExclusiveAtDpcLevel@4
_ExAcquireSpinLockShared@4
_ExAcquireSpinLockSharedAtDpcLevel@4
_ExAcquireTimeRefreshLock@4
_ExAddPrivateDataToCrashDump@8
_ExAdjustLookasideDepth@0
_ExAllocateAutoExpandPushLock@4
_ExAllocateCacheAwarePushLock@4
_ExAllocateCacheAwareRundownProtection@8
_ExAllocateCallBack@8
_ExAllocateFromNPagedLookasideList@4
_ExAllocateFromPagedLookasideList@4
_ExAllocateLocallyUniqueId@4
_ExAllocatePool@8
_ExAllocatePoolEx@16
_ExAllocatePoolSanityChecks@16
_ExAllocatePoolWithQuota@8
_ExAllocatePoolWithQuotaTag@12
_ExAllocatePoolWithTag@12
_ExAllocatePoolWithTagPriority@16
_ExAllocatePrivateWorkerPool@12
_ExAllocateTimer@12
_ExAllocateTimerInternal@12
_ExBurnMemory@16
_ExCallCallBack@12
_ExCallSessionCallBack@20
_ExCancelTimer@8
_ExCleanTimerResolutionRequest@0
_ExCleanupAutoExpandPushLock@4
_ExCleanupRundownProtectionCacheAware@4
_ExClearPoolFlags@4
_ExCompareExchangeCallBack@12
_ExComputeTickCountMultiplier@4
_ExConvertExclusiveToSharedLite@4
_ExConvertPushLockExclusiveToShared@4
_ExCopyWakeTimerInfo@8
_ExCovAddInfoToLoaderEntry@4
_ExCovReadjustUnloadedModuleEntry@8
_ExCpuSetResourceManagerAccessCheck@4
_ExCreateCallback@16
_ExCreateHandle@8
_ExCreateHandleEx@20
_ExCreateHandleTable@8
_ExCreatePoolTagTable@8
_ExDeferredFreePool@8
_ExDeleteLookasideListEx@4
_ExDeleteNPagedLookasideList@4
_ExDeletePagedLookasideList@4
_ExDeletePoolTagTable@4
_ExDeleteResourceLite@4
_ExDeleteTimer@16
_ExDeleteWakeTimerInfo@4
_ExDereferenceCallBackBlock@8
_ExDereferenceHandleDebugInfo@8
_ExDestroyHandle@12
_ExDisableAllLookasideLists@0
_ExDisableHandleTracing@4
_ExDisableResourceBoostLite@4
_ExDrainPoolLookasideList@4
_ExDupHandleTable@20
_ExEnableHandleExceptions@8
_ExEnableHandleTracing@8
_ExEnableRaiseUMExceptionOnInvalidHandleClose@8
_ExEnterCriticalRegionAndAcquireResourceExclusive@4
_ExEnterCriticalRegionAndAcquireResourceShared@4
_ExEnterCriticalRegionAndAcquireSharedWaitForExclusive@4
_ExEnterPriorityRegionAndAcquireResourceExclusive@4
_ExEnterPriorityRegionAndAcquireResourceShared@4
_ExEnumHandleTable@16
_ExExtendZone@12
_ExFastReplenishHandleTableEntry@12
_ExFlushLookasideListEx@4
_ExFlushTb@12
_ExFreeAutoExpandPushLock@4
_ExFreeCacheAwarePushLock@4
_ExFreeCacheAwareRundownProtection@4
_ExFreeCallBack@4
_ExFreeLargePool@16
_ExFreePool@4
_ExFreePoolEx@8
_ExFreePoolSanityChecks@4
_ExFreePoolWithTag@8
_ExFreeSvmAsid@0
_ExFreeToNPagedLookasideList@8
_ExFreeToPagedLookasideList@8
_ExGenRandom@4
_ExGetAttachedSessionPoolTagInfo@16
_ExGetBigPoolInfo@16
_ExGetCallBackBlockContext@4
_ExGetCallBackBlockRoutine@4
_ExGetCurrentProcessorCounts@12
_ExGetCurrentProcessorCpuUsage@4
_ExGetExclusiveWaiterCount@4
_ExGetExpirationDate@4
_ExGetExtensionTable@4
_ExGetFirmwareEnvironmentVariable@20
_ExGetLicenseTamperState@4
_ExGetNextProcess@8
_ExGetNextWakeTime@28
_ExGetNextWakeTimeForDeepSleep@0
_ExGetPoolTagInfo@12
_ExGetPreviousMode@0
_ExGetSessionBigPoolInformation@16
_ExGetSessionPoolTagInfo@16
_ExGetSessionPoolTagInformation@16
_ExGetSharedWaiterCount@4
_ExGetWakeTimerList@8
_ExHandleLogBadReference@12
_ExHandleTableQuery@12
_ExInitLicenseCallback@0
_ExInitPoolLookasidePointers@0
_ExInitSystem@0
_ExInitSystemPhase2@0
_ExInitializeAutoExpandPushLock@8
_ExInitializeCallBack@4
_ExInitializeExternalBootSupport@0
_ExInitializeLookasideListEx@32
_ExInitializeLookasideListExInternal@36
_ExInitializeNPagedLookasideList@28
_ExInitializeNPagedLookasideListInternal@32
_ExInitializeNls@0
_ExInitializePagedLookasideList@28
_ExInitializePagedLookasideListInternal@32
_ExInitializePoolDescriptor@12
_ExInitializeProcessor@8
_ExInitializePushLock@4
_ExInitializeResourceLite@4
_ExInitializeRundownProtectionCacheAware@8
_ExInitializeRundownProtectionCacheAwareEx@8
_ExInitializeSystemLookasideList@24
_ExInitializeTimeRefresh@0
_ExInitializeZone@16
_ExInsertPoolTag@20
_ExInterlockedAddLargeInteger@16
_ExInterlockedDecrementLong@8
_ExInterlockedExchangeUlong@12
_ExInterlockedExtendZone@16
_ExInterlockedIncrementLong@8
_ExIsAppLicensed@4
_ExIsAppLicensedProduct@4
_ExIsManufacturingModeEnabled@0
_ExIsProcessorFeaturePresent@4
_ExIsResourceAcquiredExclusiveLite@4
_ExIsResourceAcquiredSharedLite@4
_ExIsRestrictedCaller@4
_ExIsWindowsToGo@4
_ExLocalTimeToSystemTime@8
_ExLockUserBuffer@24
_ExMapHandleToPointer@8
_ExMapHandleToPointerEx@12
_ExNotifyBootDeviceRemoval@4
_ExNotifyCallback@12
_ExNotifyPlatformBinaryExecuted@0
_ExNotifyWithProcessing@16
_ExProcessorCounterSetCallback@12
_ExProtectPool@12
_ExQueryBootEntropyInformation@4
_ExQueryClipSp@24
_ExQueryHandleExceptionsPermanency@12
_ExQueryPoolBlockSize@8
_ExQueryPoolUsage@32
_ExQueryProcessHandleInformation@16
_ExQueryRaiseUMExceptionOnInvalidHandleClose@4
_ExQuerySystemLockInformation@12
_ExQueryTimerResolution@12
_ExQueryWnfStateData@16
_ExQueueDebuggerWorker@0
_ExQueueWorkItem@8
_ExQueueWorkItemEx@12
_ExQueueWorkItemToPrivatePool@16
_ExRaiseAccessViolation@0
_ExRaiseDatatypeMisalignment@0
_ExRaiseHardError@24
_ExReArmFastCache@0
_ExRealTimeIsUniversal@0
_ExReferenceCallBackBlock@4
_ExRegisterBootDevice@8
_ExRegisterCallback@12
_ExRegisterExtension@12
_ExRegisterHost@12
_ExReinitializeResourceLite@4
_ExReleaseCacheAwarePushLockExclusive@4
_ExReleaseExtensionTable@4
_ExReleaseResourceForThreadLite@8
_ExReleaseSpinLockExclusive@8
_ExReleaseSpinLockExclusiveFromDpcLevel@4
_ExReleaseSpinLockShared@8
_ExReleaseSpinLockSharedFromDpcLevel@4
_ExReleaseTimeRefreshLock@0
_ExRemoveLowBoxAtomReferences@8
_ExRemoveVirtualizedTimer@12
_ExReturnPoolQuota@4
_ExSaAllocate@12
_ExSaFree@8
_ExSessionDeleted@4
_ExSetFirmwareEnvironmentVariable@20
_ExSetLicenseTamperState@4
_ExSetPoolFlags@4
_ExSetResourceOwnerPointer@8
_ExSetResourceOwnerPointerEx@12
_ExSetTimer@24
_ExSetTimerResolution@8
_ExShareAddressSpaceWithDevice@8
_ExShutdownSystem@4
_ExSizeOfAutoExpandPushLock@4
_ExSizeOfRundownProtectionCacheAware@0
_ExSlowReplenishHandleTableEntry@4
_ExSubscribeWnfStateChange@24
_ExSvmDevicePowerCallback@12
_ExSwapinWorkerThreads@4
_ExSweepHandleTable@8
_ExSystemExceptionFilter@0
_ExSystemTimeToLocalTime@8
_ExTimerResume@12
_ExTimerRundown@0
_ExTraceTimerResolution@0
_ExTryAcquireSpinLockExclusiveAtDpcLevel@4
_ExTryConvertSharedSpinLockExclusive@4
_ExTryConvertSharedToExclusiveLite@4
_ExTryQueueWorkItem@8
_ExTryToAcquireResourceExclusiveLite@4
_ExUnlockUserBuffer@4
_ExUnregisterCallback@4
_ExUnregisterExtension@4
_ExUnsubscribeWnfStateChange@4
_ExUpdateLicenseData@8
_ExUpdateLicenseRegistry@4
_ExUpdateOsPfnInRegistry@16
_ExUpdateSystemTimeFromCmos@8
_ExUuidCreate@4
_ExVerifySuite@4
_ExWaitForCallBacks@4
_ExWakeTimersPause@0
_ExWakeTimersResume@0
_ExWnfExitProcess@8
_ExWnfServerSiloTerminated@4
_ExceptionRecord32To64@8
_ExpAcquireFastMutexContended@8
_ExpAddTagForBigPages@24
_ExpAeThresholdInitWorker@16
_ExpAeThresholdInitialization@0
_ExpAllocateAsid@0
_ExpAllocateBigPool@20
_ExpAllocateExclusiveWaiterEvent@8
_ExpAllocateFannedOutPushLock@8
_ExpAllocateHandleTable@8
_ExpAllocateHandleTableEntry@8
_ExpAllocateHandleTableEntrySlow@8
_ExpAllocateLowLevelTable@8
_ExpAllocateMidLevelTable@12
_ExpAllocatePoolForNode@8
_ExpAllocateStringRoutine@4
_ExpAllocateTablePagedPool@8
_ExpAllocateTablePagedPoolNoZero@8
_ExpAllocateUuids@12
_ExpApplyPriorityBoost@12
_ExpAssignPasid@8
_ExpBlockOnLockedHandleEntry@12
_ExpBootFinishedDispatch@16
_ExpCallProcessing@20
_ExpCancelTimer@4
_ExpCaptureWnfStateName@12
_ExpCenturyDpcRoutine@16
_ExpCheckForFreedEnhancedTimer@4
_ExpCheckForLookaside@8
_ExpCheckForLookasideList@16
_ExpCheckForResource@8
_ExpCheckForWorker@8
_ExpCheckFullProcessInformationAccess@4
_ExpCheckIRTimerAccess@4
_ExpCheckThreadHistory@4
_ExpCloseWorkerFactory@16
_ExpCompleteSoftReboot@4
_ExpConvertArcName@24
_ExpConvertLdrEntryToModuleInfo@12
_ExpConvertSignatureName@24
_ExpCopyProcessInfo@16
_ExpCovCreateUnloadedModuleEntry@4
_ExpCovDeleteUnloadedModuleEntry@4
_ExpCovFreeUnloadedModuleEntry@4
_ExpCovGetSectionInfo@8
_ExpCovIsLoadedModulePresent@16
_ExpCovIsModulePresent@20
_ExpCovIsUnLoadedModulePresent@16
_ExpCovQueryInfoCallBack@8
_ExpCovQueryInformation@12
_ExpCovQueryLoadedModule@24
_ExpCovReadFriendlyName@12
_ExpCovReadRequestBuffer@16
_ExpCovResetInfoCallBack@8
_ExpCovResetInformation@8
_ExpCreateOutputARC@16
_ExpCreateOutputEFI@32
_ExpCreateOutputNT@16
_ExpCreateOutputSIGNATURE@32
_ExpCreateRestrictedFastCacheRegistryKey@8
_ExpCreateSystemThreadForNode@16
_ExpCreateWorkerThread@8
_ExpDebuggerDpcRoutine@16
_ExpDebuggerWorker@4
_ExpDeleteCallback@4
_ExpDeleteMutant@4
_ExpDeleteTimer2@4
_ExpDeleteTimer@4
_ExpDeleteWorkerFactory@4
_ExpDereferenceHost@4
_ExpDuplicateSingleHandle@28
_ExpEventInitialization@0
_ExpExTimerAttributesAreValid@4
_ExpExpandResourceOwnerTable@8
_ExpExpirationThread@4
_ExpFastCacheDescriptorCompare
_ExpFinalizeTimerDeletion@4
_ExpFindArcName@8
_ExpFindDiskSignature@24
_ExpFindFastCacheDescriptor@8
_ExpFindHost@8
_ExpFreeAsid@4
_ExpFreeHandleTable@4
_ExpFreeHandleTableEntry@12
_ExpFreeLowLevelTable@8
_ExpFreeTablePagedPool@12
_ExpGenuinePolicyPostProcess@20
_ExpGetCurrentUserUILanguage@12
_ExpGetDeviceDataInformation@12
_ExpGetDriveGeometry@8
_ExpGetFirmwareEnvironmentVariable@24
_ExpGetGlobalLocaleSection@8
_ExpGetHandleExtraInfo@8
_ExpGetHandleInformation@12
_ExpGetHandleInformationEx@12
_ExpGetInstemulInformation@4
_ExpGetLockInformation@12
_ExpGetLookasideInformation@12
_ExpGetNextHandleTableEntry@12
_ExpGetObjectInformation@12
_ExpGetPartitionTableInfo@8
_ExpGetPoolTagInfoTarget@16
_ExpGetProcessInformation@20
_ExpGetStackTraceInformation@12
_ExpGetSystemBasicInformation@4
_ExpGetSystemFirmwareTableInformation@16
_ExpGetSystemPlatformBinary@12
_ExpGetSystemProcessorFeaturesInformation@4
_ExpGetSystemProcessorInformation@4
_ExpGetUILanguagePolicy@8
_ExpHotAddProcessorToWorkers@4
_ExpInitBootEntropyInformation@12
_ExpInitFullProcessSecurityInfo@12
_ExpInitSystemPhase0@0
_ExpInitSystemPhase1@0
_ExpInitializeBootEnvironment@4
_ExpInitializeCallbacks@0
_ExpInitializePcw@0
_ExpInitializeSessionDriver@8
_ExpInitializeSvm@0
_ExpInitializeThreadHistory@4
_ExpInsertLowLevelTableIntoFreeList@16
_ExpInsertPoolTracker@16
_ExpInsertPoolTrackerExpansion@12
_ExpInsertTimerResolutionEntry@4
_ExpIsDevicePathForRemovableMedia@4
_ExpIsPoolTagPrintable@4
_ExpIsValidUILanguage@4
_ExpKeyedEventInitialization@0
_ExpLeaveWorkerFactoryAwayMode@4
_ExpLegacyWorkerInitialization@0
_ExpLookupHandleTableEntry@8
_ExpMutantInitialization@0
_ExpNextYearDpcRoutine@16
_ExpOsProductCacheProviderHelper@24
_ExpOsProductContentIdCacheProvider@20
_ExpOsProductPfnCacheProvider@20
_ExpParseArcPathName@20
_ExpParseEfiPath@16
_ExpParseFastCache@16
_ExpParseFastCacheHelper@12
_ExpParseSignatureName@32
_ExpPcwDisabledStatus@0
_ExpPcwHostCallback@8
_ExpPrepareNewSvmDevice@12
_ExpProfileCreate@44
_ExpProfileDelete@4
_ExpProfileInitialization@0
_ExpQueryChannelInformation@12
_ExpQueryElamCertInfo@4
_ExpQueryLegacyDriverInformation@8
_ExpQueryMemoryTopologyInformation@12
_ExpQueryModuleInformation@16
_ExpQueryModuleInformationEx@16
_ExpQueryNumaAvailableMemory@12
_ExpQueryNumaProcessorMap@12
_ExpQueryNumaProximityNode@12
_ExpQueryPortableWorkspaceEfiLauncherInformation@12
_ExpQueryProcessorInformationCounters@20
_ExpQuerySingleModuleInformation@16
_ExpQuerySystemInformation@24
_ExpQuerySystemPerformanceInformation@12
_ExpQueueWorkItem@16
_ExpQueueWorkItemNode@16
_ExpRaiseHardError@28
_ExpReadComPlusPackage@0
_ExpRecordShutdownTime@0
_ExpRefreshSystemTime@0
_ExpRefreshTimeZoneInformation@0
_ExpRegisterFirmwareTableInformationHandler@12
_ExpReleaseFannedOutPushLockExclusive@4
_ExpReleaseFastMutexContended@8
_ExpReleaseMutantExceptionFilter@4
_ExpRemoveCurrentThreadFromThreadHistory@4
_ExpRemoveGeneralLookaside@8
_ExpRemoveHandleTable@4
_ExpRemovePoolTrackerExpansion@12
_ExpResizeBigPageTable@12
_ExpRngInitializeSystem@0
_ExpSaAllocatorAllocate@12
_ExpSaAllocatorFree@16
_ExpSaAllocatorInitialize@8
_ExpSaAllocatorOptimizeList@4
_ExpSaBinaryArrayChunkAllocate@4
_ExpSaBinaryArrayInsert@8
_ExpSaBinaryArrayRemove@8
_ExpSaInitialize@0
_ExpSaPageGroupAllocateMemory@8
_ExpSaPageGroupDescriptorAllocate@8
_ExpSaPageGroupDescriptorFree@4
_ExpSaPageGroupFreeMemory@12
_ExpSafeWcslen@8
_ExpSafeWcslenUnaligned@8
_ExpScanGeneralLookasideList@8
_ExpScanSystemLookasideList@0
_ExpSeedHotTags@0
_ExpSemaphoreInitialization@0
_ExpSetBootEntry@12
_ExpSetBorrowedTimeOnTimestamp@8
_ExpSetCurrentUserUILanguage@8
_ExpSetDriverEntry@12
_ExpSetFirmwareEnvironmentVariable@24
_ExpSetHandleExtraInfo@12
_ExpSetProcessorMicrocodeUpdateInformation@12
_ExpSetSwappingKernelApc@20
_ExpSetSystemTime@24
_ExpSetThreadReaperEvents@8
_ExpSetTimeZoneInformation@8
_ExpSetTimer2@12
_ExpSetTimer@40
_ExpSetWorkerFactoryDeferredCreateTimer@4
_ExpShutdownWorkerFactory@4
_ExpSnapShotHandleTables@20
_ExpStringCapture@8
_ExpSvmDereferenceAsid@4
_ExpSvmDereferenceDevice@4
_ExpSvmDpcRoutine@16
_ExpSvmFaultRoutine@4
_ExpSvmReferenceAsid@4
_ExpSvmServicePageFault@12
_ExpSvmWorkerThread@4
_ExpSystemErrorHandler@20
_ExpTimeRefreshCallback@8
_ExpTimeRefreshDpcRoutine@16
_ExpTimeRefreshWork@4
_ExpTimeZoneDpcRoutine@16
_ExpTimeZoneWork@4
_ExpTimerApcRoutine@20
_ExpTimerDpcRoutine@16
_ExpTimerInitialization@0
_ExpTimerPause@20
_ExpTimerResume@12
_ExpTimerSetParametersAreValid@4
_ExpTranslateArcPath@16
_ExpTranslateBootEntryNameToId@8
_ExpTranslateDriverEntryNameToId@8
_ExpTranslateEfiPath@16
_ExpTranslateHexStringToGUID@8
_ExpTranslateHexStringToULONG@8
_ExpTranslateHexStringToULONGLONG@8
_ExpTranslateNtPath@16
_ExpTranslateSymbolicLink@8
_ExpTriggerFastCacheReeval@0
_ExpTryAcquireFannedOutPushLockExclusive@4
_ExpTryConvertSharedSpinLockExclusiveInstrumented@8
_ExpTryEnterWorkerFactoryAwayMode@4
_ExpUnicodeStringToNonpagedWStr@4
_ExpUpdateComPlusPackage@4
_ExpUpdateDebugInfo@16
_ExpUpdateProductSuiteType@4
_ExpUpdateProductSuiteTypeInRegistry@4
_ExpUpdateTimerConfiguration@12
_ExpUpdateTimerConfigurationWorker@8
_ExpUpdateTimerResolution@12
_ExpUseSpecialPool@8
_ExpUuidGetValues@4
_ExpUuidLoadSequenceNumber@4
_ExpUuidSaveSequenceNumber@4
_ExpUuidSaveSequenceNumberIf@0
_ExpValidateFastCacheSize@12
_ExpValidateLoader@4
_ExpValidateLocale@4
_ExpVerifyFilePath@8
_ExpVerifyWindowsOsOptions@8
_ExpWaitForBootDevices@4
_ExpWaitForSpinLockExclusiveAndAcquire@4
_ExpWaitForSpinLockSharedAndAcquire@4
_ExpWin32CloseProcedure@16
_ExpWin32DeleteProcedure@4
_ExpWin32Initialization@0
_ExpWin32OkayToCloseProcedure@16
_ExpWin32OpenProcedure@24
_ExpWin32ParseProcedure@40
_ExpWnfAcquireSubscriptionByName@16
_ExpWnfAcquireSubscriptionNameInstance@8
_ExpWnfAllocateDispatcher@0
_ExpWnfAllocateNextPersistentNameSequence@4
_ExpWnfAllocateScopeInstance@16
_ExpWnfAllocateScopeMap@4
_ExpWnfCaptureScopeInstanceId@20
_ExpWnfCheckCallerAccess@8
_ExpWnfCheckCrossScopeAccess@8
_ExpWnfCompleteThreadSubscriptions@24
_ExpWnfComposeValueName@12
_ExpWnfCreateNameInstance@24
_ExpWnfCreateProcessContext@8
_ExpWnfCreateServerSiloCallback@4
_ExpWnfDeleteNameInstance@12
_ExpWnfDeleteNameInstanceCallback@8
_ExpWnfDeletePermanentName@8
_ExpWnfDeletePermanentStateData@12
_ExpWnfDeleteProcessContext@8
_ExpWnfDeleteScopeById@12
_ExpWnfDeleteScopeInstances@4
_ExpWnfDeleteStateData@4
_ExpWnfDeleteSubscription@8
_ExpWnfDeliverThreadNotifications@12
_ExpWnfDispatchKernelSubscription@0
_ExpWnfEnumeratePermanentDataStores@16
_ExpWnfEnumerateScopeInstances@8
_ExpWnfFindScopeInstance@12
_ExpWnfFindStateName@12
_ExpWnfFreeScopeInstance@8
_ExpWnfGenerateStateName@16
_ExpWnfGetCurrentScopeInstance@24
_ExpWnfGetNameStoreRegistryRoot@8
_ExpWnfGetPermanentDataStoreHandle@16
_ExpWnfGetPermanentDataStoreHandleByScopeId@24
_ExpWnfInitServerSilo@0
_ExpWnfInsertSubscriptionInPendingQueue@8
_ExpWnfLookupNameInstance@16
_ExpWnfLookupPermanentName@12
_ExpWnfNotifyNameSubscribers@16
_ExpWnfNotifySubscription@16
_ExpWnfPopulateStateData@4
_ExpWnfQueryCurrentUserSID@20
_ExpWnfReadStateData@20
_ExpWnfRegisterPermanentName@12
_ExpWnfReleaseCapturedScopeInstanceId@12
_ExpWnfResolveScopeInstance@24
_ExpWnfSpecializeSecurityDescriptor@4
_ExpWnfSubscribeNameInstance@44
_ExpWnfSubscribeWnfStateChange@32
_ExpWnfTerminateServerSiloCallback@8
_ExpWnfUpdateSubscription@36
_ExpWnfValidatePubSubPreconditions@20
_ExpWnfWorkItemRoutine@4
_ExpWnfWriteStateData@20
_ExpWorkerFactoryCheckCreate@12
_ExpWorkerFactoryCompletionPacketRoutine@8
_ExpWorkerFactoryCreateThread@4
_ExpWorkerFactoryDeferredThreadCreation@0
_ExpWorkerFactoryInitialization@0
_ExpWorkerFactoryManagerThread@4
_ExpWorkerHotAddProcessor@4
_ExpWorkerInitialization@0
_ExpWorkerThread@4
_ExpWorkerThreadBalanceManager@4
_ExpandKnownDllsPath@8
_ExpressionConvertToString@16
_FadePalette@4
_FilterConvertToString@20
_FilterEval@20
_FilterEvalImpliedAnd@20
_FilterEvalStrict@20
_FinalExceptionHandler@16
_FinalizeBootLogo@0
_FindBitmapResource@8
_FindEmailAt@8
_FindFilterOperatorClose@12
_FindLabelEnd@12
_FindNodeOrParent@12
_FioFwReadBytesAtOffset@16
_FioFwReadUlong@8
_FioFwReadUlongAtOffset@12
_FioFwReadUshortAtOffset@12
_FirstEntrySList@4
_FopFreeFontData@4
_FopFreeMappingTable@4
_FopGetTableOffsetAndSize@20
_FopInitializeFonts@4
_FopReadCmapTable@12
_FopReadEncodingRecord@12
_FopReadMappingTable@12
_FopReadNameRecord@12
_FopReadNamingTable@12
_FopReadOffsetTable@12
_FopReadPushortAtOffset@16
_FopReadSegmentMapHeader@12
_FopValidateFontNameTable@12
_FsFilterAllocateCompletionStack@12
_FsFilterCtrlFree@4
_FsFilterCtrlInit@24
_FsFilterFreeCompletionStack@4
_FsFilterInit@0
_FsFilterPerformCallbacks@16
_FsFilterPerformCompletionCallbacks@8
_FsRtlAcknowledgeEcp@4
_FsRtlAcquireEofLock@4
_FsRtlAcquireFileExclusive@4
_FsRtlAcquireFileExclusiveCommon@16
_FsRtlAcquireFileForCcFlushEx@4
_FsRtlAcquireFileForModWriteEx@12
_FsRtlAcquireHeaderMutex@4
_FsRtlAcquireToCreateMappedSection@16
_FsRtlAddBaseMcbEntry@28
_FsRtlAddBaseMcbEntryEx@28
_FsRtlAddDiskIOCounterInstance@8
_FsRtlAddEntry@12
_FsRtlAddLargeMcbEntry@28
_FsRtlAddMcbEntry@16
_FsRtlAddToTunnelCache@32
_FsRtlAllocateExtraCreateParameter@24
_FsRtlAllocateExtraCreateParameterFromLookasideList@24
_FsRtlAllocateExtraCreateParameterList@8
_FsRtlAllocateFileLock@8
_FsRtlAllocatePool@8
_FsRtlAllocatePoolWithQuota@8
_FsRtlAllocatePoolWithQuotaTag@12
_FsRtlAllocatePoolWithTag@12
_FsRtlAllocateResource@0
_FsRtlAreThereCurrentOrInProgressFileLocks@4
_FsRtlAreThereWaitingFileLocks@4
_FsRtlAreVolumeStartupApplicationsComplete@0
_FsRtlBalanceReads@4
_FsRtlCancelNotify@8
_FsRtlCancellableWaitForMultipleObjects@24
_FsRtlCancellableWaitForSingleObject@12
_FsRtlChangeBackingFileObject@16
_FsRtlCheckLockForOplockRequest@8
_FsRtlCheckLockForReadAccess@8
_FsRtlCheckLockForWriteAccess@8
_FsRtlCheckNoExclusiveConflict@24
_FsRtlCheckNoSharedConflict@12
_FsRtlCheckNotifyForDelete@8
_FsRtlCheckNotifyForDeleteLite@4
_FsRtlCheckOplock@20
_FsRtlCheckOplockEx@24
_FsRtlCheckUpperOplock@24
_FsRtlCompareNodeAndKey@16
_FsRtlCompleteLockIrpReal@24
_FsRtlCopyRead@32
_FsRtlCopyWrite@32
_FsRtlCreateSectionForDataScan@40
_FsRtlCurrentBatchOplock@4
_FsRtlCurrentOplock@4
_FsRtlCurrentOplockH@4
_FsRtlDeleteExtraCreateParameterLookasideList@8
_FsRtlDeleteKeyFromTunnelCache@12
_FsRtlDeleteTunnelCache@4
_FsRtlDeregisterUncProvider@4
_FsRtlDiskIOCounterSetCallback@12
_FsRtlDismountComplete@8
_FsRtlDissectDbcs@16
_FsRtlDoesDbcsContainWildCards@4
_FsRtlEmptyFreePoolList@4
_FsRtlFastCheckLockForRead@24
_FsRtlFastCheckLockForWrite@24
_FsRtlFastUnlockAll@16
_FsRtlFastUnlockAllByKey@20
_FsRtlFastUnlockSingle@32
_FsRtlFastUnlockSingleExclusive@36
_FsRtlFastUnlockSingleShared@36
_FsRtlFindExtraCreateParameter@16
_FsRtlFindFirstOverlapInNode@12
_FsRtlFindFirstOverlappingExclusiveNode@20
_FsRtlFindFirstOverlappingSharedNode@20
_FsRtlFindInTunnelCache@32
_FsRtlFindLargeIndex@12
_FsRtlFreeExtraCreateParameter@4
_FsRtlFreeExtraCreateParameterList@4
_FsRtlFreeFileLock@4
_FsRtlFreeTunnelNode@8
_FsRtlGetCompatibilityModeValue@8
_FsRtlGetEcpListFromIrp@8
_FsRtlGetFileExtents@28
_FsRtlGetFileNameInformation@16
_FsRtlGetFileSize@8
_FsRtlGetIoAtEof@28
_FsRtlGetNextBaseMcbEntry@20
_FsRtlGetNextExtraCreateParameter@20
_FsRtlGetNextFileLock@8
_FsRtlGetNextLargeMcbEntry@20
_FsRtlGetNextMcbEntry@20
_FsRtlGetSectorSizeInformation@8
_FsRtlGetSupportedFeatures@8
_FsRtlGetTunnelParameterValue@8
_FsRtlGetVirtualDiskNestingLevel@12
_FsRtlHeatInit@12
_FsRtlHeatLogIo@20
_FsRtlHeatLogTierMove@32
_FsRtlHeatUninit@8
_FsRtlIncrementCcFastMdlReadWait@0
_FsRtlIncrementCcFastReadNoWait@0
_FsRtlIncrementCcFastReadNotPossible@0
_FsRtlIncrementCcFastReadResourceMiss@0
_FsRtlIncrementCcFastReadWait@0
_FsRtlInitExtraCreateParameterLookasideList@16
_FsRtlInitSystem@0
_FsRtlInitializeBaseMcb@8
_FsRtlInitializeBaseMcbEx@12
_FsRtlInitializeEofLock@8
_FsRtlInitializeExtraCreateParameter@24
_FsRtlInitializeExtraCreateParameterList@4
_FsRtlInitializeFileLock@12
_FsRtlInitializeFileLocks@0
_FsRtlInitializeLargeMcb@8
_FsRtlInitializeLargeMcbs@0
_FsRtlInitializeMcb@8
_FsRtlInitializeOplock@4
_FsRtlInitializeSmssEvent@0
_FsRtlInitializeTieringHeat@0
_FsRtlInitializeTunnelCache@4
_FsRtlInitializeTunnels@0
_FsRtlInitializeWorkerThread@0
_FsRtlInsertExtraCreateParameter@8
_FsRtlInsertPerFileContext@8
_FsRtlInsertPerFileContextInternal@12
_FsRtlInsertPerFileObjectContext@8
_FsRtlInsertPerStreamContext@8
_FsRtlInsertReservedPerFileContext@8
_FsRtlInsertReservedPerStreamContext@8
_FsRtlIsDbcsInExpression@8
_FsRtlIsEcpAcknowledged@4
_FsRtlIsEcpFromUserMode@4
_FsRtlIsFatDbcsLegal@20
_FsRtlIsHpfsDbcsLegal@20
_FsRtlIsMobileOS@0
_FsRtlIsNotifyOnList@8
_FsRtlIsNtstatusExpected@4
_FsRtlIsPagingFile@4
_FsRtlIsSystemPagingFile@4
_FsRtlIsTotalDeviceFailure@4
_FsRtlIssueDeviceIoControl@32
_FsRtlIssueFileNotificationFsctl@12
_FsRtlKernelFsControlFile@28
_FsRtlLogCcFlushError@20
_FsRtlLookupBaseMcbEntry@32
_FsRtlLookupLargeMcbEntry@32
_FsRtlLookupLastBaseMcbEntry@12
_FsRtlLookupLastBaseMcbEntryAndIndex@16
_FsRtlLookupLastLargeMcbEntry@12
_FsRtlLookupLastLargeMcbEntryAndIndex@16
_FsRtlLookupLastMcbEntry@12
_FsRtlLookupMcbEntry@20
_FsRtlLookupPerFileContext@12
_FsRtlLookupPerFileObjectContext@12
_FsRtlLookupPerStreamContextInternal@12
_FsRtlLookupReservedPerFileContext@12
_FsRtlLookupReservedPerStreamContext@12
_FsRtlMdlRead@24
_FsRtlMdlReadComplete@8
_FsRtlMdlReadCompleteDev@12
_FsRtlMdlReadDev@28
_FsRtlMdlReadEx@24
_FsRtlMdlWriteComplete@12
_FsRtlMdlWriteCompleteDev@16
_FsRtlMupGetProviderIdFromName@8
_FsRtlMupGetProviderInfoFromFileObject@16
_FsRtlNormalizeNtstatus@8
_FsRtlNotifyChangeDirectory@28
_FsRtlNotifyCleanup@12
_FsRtlNotifyCleanupAll@8
_FsRtlNotifyCleanupOneEntry@8
_FsRtlNotifyCompleteIrp@20
_FsRtlNotifyCompleteIrpList@8
_FsRtlNotifyFilterChangeDirectory@44
_FsRtlNotifyFilterChangeDirectoryLite@36
_FsRtlNotifyFilterReportChange@40
_FsRtlNotifyFilterReportChangeLite@36
_FsRtlNotifyFullChangeDirectory@40
_FsRtlNotifyFullReportChange@36
_FsRtlNotifyInitializeSync@4
_FsRtlNotifyReportChange@20
_FsRtlNotifySetCancelRoutine@8
_FsRtlNotifyUninitializeSync@4
_FsRtlNotifyUpdateBuffer@28
_FsRtlNotifyVolumeEvent@8
_FsRtlNotifyVolumeEventEx@12
_FsRtlNumberOfRunsInBaseMcb@4
_FsRtlNumberOfRunsInLargeMcb@4
_FsRtlNumberOfRunsInMcb@4
_FsRtlOplockBreakH@24
_FsRtlOplockBreakToNone@24
_FsRtlOplockBreakToNoneEx@24
_FsRtlOplockFsctrl@12
_FsRtlOplockFsctrlEx@16
_FsRtlOplockIsFastIoPossible@4
_FsRtlOplockIsSharedRequest@4
_FsRtlOplockKeysEqual@8
_FsRtlPostPagingFileStackOverflow@12
_FsRtlPostStackOverflow@12
_FsRtlPrepareMdlWrite@24
_FsRtlPrepareMdlWriteDev@28
_FsRtlPrepareMdlWriteEx@24
_FsRtlPrepareToReuseEcp@4
_FsRtlPrivateCancelFileLockIrp@8
_FsRtlPrivateCheckForExclusiveLockAccess@8
_FsRtlPrivateCheckForSharedLockAccess@8
_FsRtlPrivateCheckWaitingLocks@12
_FsRtlPrivateFastUnlockAll@24
_FsRtlPrivateInitializeFileLock@8
_FsRtlPrivateInsertExclusiveLock@8
_FsRtlPrivateInsertLock@12
_FsRtlPrivateInsertSharedLock@8
_FsRtlPrivateLock@48
_FsRtlPrivateRemoveLock@12
_FsRtlPrivateResetLowestLockOffset@4
_FsRtlProcessFileLock@12
_FsRtlPruneTunnelCache@8
_FsRtlQueryCachedVdl@8
_FsRtlQueryInformationFile@20
_FsRtlQueryKernelEaFile@36
_FsRtlQueryMaximumVirtualDiskNestingLevel@0
_FsRtlRegisterFileSystemFilterCallbacks@8
_FsRtlRegisterFltMgrCalls@4
_FsRtlRegisterMupCalls@4
_FsRtlRegisterUncProvider@12
_FsRtlRegisterUncProviderEx2@16
_FsRtlRegisterUncProviderEx@16
_FsRtlReleaseEofLock@4
_FsRtlReleaseFile@4
_FsRtlReleaseFileForCcFlush@4
_FsRtlReleaseFileForModWrite@8
_FsRtlReleaseFileNameInformation@4
_FsRtlReleaseHeaderMutex@4
_FsRtlRemoveBaseMcbEntry@20
_FsRtlRemoveDotsFromPath@12
_FsRtlRemoveExtraCreateParameter@16
_FsRtlRemoveLargeEntry@12
_FsRtlRemoveLargeMcbEntry@20
_FsRtlRemoveMcbEntry@12
_FsRtlRemoveNodeFromTunnel@16
_FsRtlRemovePerFileContext@12
_FsRtlRemovePerFileObjectContext@12
_FsRtlRemovePerStreamContext@12
_FsRtlRemoveReservedPerFileContext@12
_FsRtlRemoveReservedPerStreamContext@12
_FsRtlResetBaseMcb@4
_FsRtlResetLargeMcb@8
_FsRtlSendModernAppTermination@12
_FsRtlSetDriverBacking@8
_FsRtlSetEcpListIntoIrp@8
_FsRtlSetFileSize@8
_FsRtlSetKernelEaFile@12
_FsRtlSplitBaseMcb@20
_FsRtlSplitLargeMcb@20
_FsRtlSplitLocks@16
_FsRtlStackOverflowRead@4
_FsRtlSyncVolumes@12
_FsRtlTeardownPerFileContexts@4
_FsRtlTeardownPerStreamContexts@4
_FsRtlTruncateBaseMcb@12
_FsRtlTruncateLargeMcb@12
_FsRtlTruncateMcb@8
_FsRtlTryToAcquireHeaderMutex@4
_FsRtlUninitializeBaseMcb@4
_FsRtlUninitializeFileLock@4
_FsRtlUninitializeLargeMcb@4
_FsRtlUninitializeMcb@4
_FsRtlUninitializeOplock@4
_FsRtlUpdateDiskCounters@16
_FsRtlUpperOplockFsctrl@20
_FsRtlValidateReparsePointBuffer@8
_FsRtlWaitForSmssEvent@4
_FsRtlWorkerThread@4
_FsRtlpAcknowledgeOplockBreak@20
_FsRtlpAcknowledgeOplockBreakByCacheFlags@24
_FsRtlpAllocateOplock@0
_FsRtlpAttachOplockKey@4
_FsRtlpCallerIsAtomicRequestor@12
_FsRtlpCancelExclusiveIrp@12
_FsRtlpCancelOplockRHIrp@12
_FsRtlpCancelReadOnlyOplockIrp@8
_FsRtlpCancelWaitingIrp@8
_FsRtlpCleanupEcps@4
_FsRtlpClearOwnerThread@8
_FsRtlpComputeShareableOplockState@4
_FsRtlpDoBoost@20
_FsRtlpExclusiveIrpCancelRoutine@8
_FsRtlpFreeMdlChain@4
_FsRtlpGenericCompletion@12
_FsRtlpGetMaxVirtualDiskNestingLevel@0
_FsRtlpGrantAnyOplockFromExclusive@40
_FsRtlpHeatRegisterVolume@12
_FsRtlpHeatUnregisterVolume@8
_FsRtlpModifyThreadPriorities@12
_FsRtlpNotifyOplockBreakComplete@8
_FsRtlpOpBatchBreakClosePending@12
_FsRtlpOpenDev@8
_FsRtlpOplockBreakByCacheFlags@40
_FsRtlpOplockBreakNotify@12
_FsRtlpOplockBreakToII@36
_FsRtlpOplockBreakToNone@36
_FsRtlpOplockCleanup@8
_FsRtlpOplockDequeueRH@4
_FsRtlpOplockEnqueueRH@8
_FsRtlpOplockFsctrlInternal@20
_FsRtlpOplockKeysEqual@12
_FsRtlpOplockRHIrpCancelRoutine@8
_FsRtlpOplockSendModernAppTermination@8
_FsRtlpOplockStoreKeyForDeleteOperation@12
_FsRtlpOplockUpperLowerCompatible@8
_FsRtlpOplockWaitCompleteRoutine@8
_FsRtlpPostStackOverflow@16
_FsRtlpQueryValueKey@20
_FsRtlpReadOnlyOplockIrpCancelRoutine@8
_FsRtlpRegisterProviderWithMUP@16
_FsRtlpRegisterUncProvider@16
_FsRtlpReleaseIrpsWaitingForRH@4
_FsRtlpRemoveAndBreakRHIrp@32
_FsRtlpRemoveAndCompleteReadOnlyIrp@12
_FsRtlpRemoveAndCompleteWaitingIrp@4
_FsRtlpRequestExclusiveOplock@28
_FsRtlpRequestShareableOplock@32
_FsRtlpRestoreCallerEcpsToCallerList@8
_FsRtlpValidateExtraCreateParameters@4
_FsRtlpWaitForIoAtEof@12
_FsRtlpWaitOnIrp@32
_FsRtlpWaitingIrpCancelRoutine@8
_FstubAdjustPartitionCount@8
_FstubAllocateDiskInformation@12
_FstubConvertExtendedToLayout@4
_FstubCopyEntryEFI@12
_FstubCreateDiskEFI@8
_FstubCreateDiskMBR@8
_FstubCreateDiskRaw@4
_FstubDetectPartitionStyle@8
_FstubFixupEfiPartition@12
_FstubFreeDiskInformation@4
_FstubGetDiskGeometry@8
_FstubReadHeaderEFI@16
_FstubReadPartitionTableEFI@12
_FstubReadPartitionTableMBR@12
_FstubReadSectors@24
_FstubReadTableEFI@12
_FstubSetPartitionGuidMBR@8
_FstubSetPartitionInformationEFI@12
_FstubTranslateRequirement@20
_FstubTranslateResource@28
_FstubTranslatorNull@4
_FstubVerifyPartitionTableEFI@8
_FstubWriteBootSectorEFI@4
_FstubWriteEntryEFI@28
_FstubWriteHeaderEFI@52
_FstubWritePartitionTableEFI@52
_FstubWritePartitionTableMBR@8
_FstubWriteSector@20
_GetBootSystemTime@8
_GetHangulT@4
_GetIretHookAddress@12
_GetNextWchar@16
_GetOperatorIndexByToken@4
_GetPrintableAttributeName@20
_GetPrintableOperandValue@32
_GetPropertyFromPropArray@20
_GetSurrogateHigh@4
_GetSurrogateLow@4
_GetUCBytes@12
_GetUTF32@4
_GxpBitsToBytes@4
_GxpMatchPaletteColor@8
_GxpReadFrameBufferPixels@8
_GxpWriteFrameBufferPixels@8
_HalAllocateCommonBuffer@16
_HalAllocateCrashDumpRegisters@8
_HalFreeCommonBuffer@24
_HalGetAdapter@8
_HalGetInterruptVector@24
_HalInitializeBios@8
_HalReadDmaCounter@4
_HalpCalculateChsValues@28
_HalpGetFullGeometry@12
_HalpIsValidPartitionEntry@20
_HdlspAddLogEntry@4
_HdlspBugCheckProcessing@0
_HdlspDispatch@20
_HdlspEnableTerminal@4
_HdlspGetLine@8
_HdlspKernelAddLogEntry@8
_HdlspProcessDumpCommand@4
_HdlspPutData@8
_HdlspPutMore@4
_HdlspPutString@4
_HdlspPutWideString@4
_HdlspSendBlueScreenInfo@4
_HdlspSendStringAtBaud@4
_HdlspSetBlueScreenInformation@8
_HdlspUTF8Encode@8
_HeadlessDispatch@20
_HeadlessInit@4
_HeadlessKernelAddLogEntry@8
_HeadlessTerminalAddResources@20
_HvAddToLayoutStats@8
_HvAllocateCell@20
_HvApplyLegacyLogFile@16
_HvApplyLogFile@32
_HvBufferCheckSum@8
_HvCheckAndUpdateHiveBackupTimeStamp@4
_HvCheckBin@20
_HvCheckHive@16
_HvClearBinTrimStatus@8
_HvCountFreeLogsLockFree@4
_HvDuplicateCell@16
_HvExtendHivePrimaryFileValidDataLength@12
_HvFoldBackDirtyData@4
_HvFoldBackUnreconciledData@4
_HvFreeCell@8
_HvFreeDirtyData@4
_HvFreeHive@8
_HvFreeHivePartial@12
_HvFreeUnreconciledData@4
_HvGetCurrentLogFileSizePointer@4
_HvGetEffectiveLogSizeCapForHive@4
_HvGetHiveLogFileStatus@12
_HvInitializeHashLibrary@0
_HvInitializeHive@48
_HvIsCellAllocated@12
_HvIsCurrentLogSwappable@4
_HvIsInPlaceBaseBlockValid@4
_HvLoadHive@4
_HvMarkBaseBlockDirty@4
_HvMoveLayoutStats@4
_HvReallocateCell@24
_HvRefreshHive@8
_HvResetDirtyData@4
_HvResetLogFileStatusAll@4
_HvResetUnreconciledData@4
_HvStoreModifiedData@12
_HvSwapLogFiles@8
_HvSyncHive@4
_HvSynchronizeAndDropTemporaryBins@20
_HvTruncateAllLogFilesIfRequired@4
_HvTruncateCurrentLogFileIfRequired@4
_HvUpdateUnreconciledVector@8
_HvValidateOrInvalidatePrimaryFileHeader@16
_HvViewMapAddressForFileOffset@8
_HvViewMapChangeFileSize@16
_HvViewMapCleanup@12
_HvViewMapContiguousBytesAfterFileOffset@8
_HvViewMapCopyFromFileOffset@16
_HvViewMapCopyToFileOffset@16
_HvViewMapFlush@12
_HvViewMapIsRangePinned@12
_HvViewMapPinFile@4
_HvViewMapPinForFileOffset@12
_HvViewMapStart@20
_HvViewMapUnpinFile@4
_HvViewMapUnpinForFileOffset@16
_HvWriteExternal@4
_HvWriteHivePrimaryFile@12
_HvWriteLogFile@16
_HviGetDebugDeviceOptions@4
_HviGetEnlightenmentInformation@4
_HviGetHardwareFeatures@4
_HviGetHypervisorFeatures@4
_HviGetHypervisorInterface@4
_HviGetHypervisorVendorAndMaxFunction@4
_HviGetHypervisorVersion@4
_HviGetImplementationLimits@4
_HviIsAnyHypervisorPresent@0
_HviIsHypervisorMicrosoftCompatible@0
_HviIsHypervisorVendorMicrosoft@0
_HviIsIommuInUse@0
_HvlConfigureIdleStates@8
_HvlConfigurePcc@8
_HvlConfigurePerfStateCap@8
_HvlConfigurePerfStates@8
_HvlConfigureThrottleStates@8
_HvlDeleteProcessor@4
_HvlDisableEnlightenment@4
_HvlDummyInterruptCallback@4
_HvlEndSystemInterrupt@0
_HvlEnlightenProcessor@0
_HvlEnterSleepState@4
_HvlFlushRangeListTb@24
_HvlGetApicIdFromLpIndex@8
_HvlGetEncryptedData@24
_HvlGetEnlightenmentInfo@4
_HvlGetIdleGenerationCounter@8
_HvlGetLogicalProcessorRunTime@12
_HvlGetLpIndexFromApicId@4
_HvlGetPpmStatsForProcessor@12
_HvlGetProcessorIndexFromVpIndex@4
_HvlGetReferenceTime@0
_HvlGetReferenceTimeUsingTscPage@0
_HvlHalGetVpIndexFromApicId@8
_HvlHalStartVirtualProcessor@8
_HvlHalVpStartEnabled@0
_HvlInitializeProcessor@8
_HvlInvokeHypervisorDebugger@8
_HvlInvokeWheaErrorNotificationCallback@12
_HvlLogGuestCrashInformation@20
_HvlLpGetMachineCheckContext@16
_HvlLpReadCpuid@24
_HvlLpReadMultipleMsr@16
_HvlLpWriteMultipleMsr@16
_HvlLpWritebackInvalidate@4
_HvlMapDeviceInterrupt@28
_HvlMapGpaPages@36
_HvlNotifyDebugDeviceAvailable@0
_HvlNotifyHpetEnabled@0
_HvlNotifyLongSpinWait@4
_HvlParkedVirtualProcessors@4
_HvlPhase0Initialize@4
_HvlPhase1Initialize@4
_HvlPhase2Initialize@4
_HvlQueryActiveHypervisorProcessorCount@4
_HvlQueryActiveProcessors@8
_HvlQueryAssociatedProcessors@12
_HvlQueryConnection@4
_HvlQueryDetailInfo@16
_HvlQueryDmaProtectionInfo@12
_HvlQueryEnlightenmentInfo@16
_HvlQueryHypervisorProcessorNodeNumber@8
_HvlQueryHypervisorTscAdjustment@0
_HvlQueryNumaDistance@12
_HvlQueryProcessorTopology@16
_HvlQueryProcessorTopologyCount@8
_HvlQueryProcessorTopologyHighestId@8
_HvlReadPerformanceStateCounters@16
_HvlRegisterInterruptCallback@12
_HvlRegisterLogicalProcessorFrequency@8
_HvlRegisterPerfFeedbackCounters@8
_HvlRegisterWheaErrorNotification@4
_HvlRestoreEnlightenment@0
_HvlResumePartition@8
_HvlSendSyntheticClusterIpi@8
_HvlSetEnlightenmentInfo@16
_HvlSetHpetConfig@28
_HvlSetPartitionProperty@20
_HvlSetPlatformIdleState@4
_HvlSetSystemMachineCheckProperty@4
_HvlSetSystemSleepProperty@12
_HvlSuspendPartition@8
_HvlSwitchVirtualAddressSpace@4
_HvlUnmapDeviceInterrupt@12
_HvlUnregisterInterruptCallback@8
_HvlUnregisterWheaErrorNotification@4
_HvlWriteApicCommandRegister@8
_HvlpAllocateEarlyPages@16
_HvlpAllocateOverlayPages@4
_HvlpComputeLpComparisonMetrics@12
_HvlpConfigureLegacyPowerPolicySetting@4
_HvlpDepositPages@8
_HvlpDetermineEnlightenments@0
_HvlpDiscoverTopologyAmd@16
_HvlpDiscoverTopologyComplete@0
_HvlpDiscoverTopologyIntel@16
_HvlpDiscoverTopologyLocal@16
_HvlpEnlightenSwapContext@0
_HvlpEtwRegister@0
_HvlpFlushRangeListTb@24
_HvlpFreeOverlayPages@4
_HvlpGetLogicalProcessorProperty@12
_HvlpGetLpIndexFromProcessorIndex@4
_HvlpGetNode@4
_HvlpGetRegister64@8
_HvlpGetVpIndexFromApicId@8
_HvlpHvIdentityInfoCallback@16
_HvlpInitializeBootProcessor@4
_HvlpInitializePowerStatistics@0
_HvlpInitiateHypercall@24
_HvlpLegacyPowerPolicySettingCallback@16
_HvlpLogHypervisorLaunchError@40
_HvlpLogIommuEvent@4
_HvlpLogIommuInitStatus@0
_HvlpLogProcessorStartupFailure@12
_HvlpLpComparison@16
_HvlpLpCpuid@16
_HvlpMapEarlyPages@16
_HvlpMapStatisticsPage@12
_HvlpPowerPolicySettingCallback@16
_HvlpProcessIommu@0
_HvlpQueryApicIdAndNumaNode@12
_HvlpRegisterPowerPolicyCallbacks@0
_HvlpSelectLpSet@12
_HvlpSelectVpSet@12
_HvlpSetLogicalProcessorProperty@12
_HvlpSetPowerProperty@4
_HvlpSetRegister64@12
_HvlpSetupBootProcessorEarlyHypercallPages@4
_HvlpSetupCachedHypercallPages@4
_HvlpSlowFlushAddressSpaceTb@12
_HvlpStartVirtualProcessor@8
_HvlpTryConfigureInterface@4
_HvlpTryToLockCpuManagementVersion@4
_HvpAddBin@12
_HvpAddDummyBinToHive@16
_HvpAddFreeCellHint@16
_HvpAddLoadedBinToHive@16
_HvpAdjustBitmap@12
_HvpAdjustHiveFreeDisplay@12
_HvpAllocateBin@28
_HvpAllocateMap@16
_HvpApplyLogEntry@24
_HvpBuildMap@8
_HvpBuildMapForLoaderHive@8
_HvpCheckViewBoundary@8
_HvpCleanMap@4
_HvpCoalesceDiscardedBins@12
_HvpCopyModifiedData@16
_HvpCountSetRangesInVector@4
_HvpDelistFreeCell@12
_HvpDetermineLatestLogFile@4
_HvpDoAllocateCell@20
_HvpDropPagedBins@4
_HvpEnlistBinInMap@20
_HvpEnlistFreeCell@20
_HvpEnlistFreeCells@12
_HvpExpandMap@16
_HvpFaultCellWithClustering@4
_HvpFillFileName@8
_HvpFindFreeBin@16
_HvpFindFreeCell@24
_HvpFindFreeCellInBin@28
_HvpFindNextDirtyBlock@28
_HvpFindNextDirtyBlockAndCreateTemporary@20
_HvpFindNextDirtyRun@20
_HvpFinishPrimaryWrite@16
_HvpFreeAllocatedBins@4
_HvpFreeBin@20
_HvpFreeHiveFreeDisplay@8
_HvpFreeMap@16
_HvpGenerateLogEntry@12
_HvpGenerateLogEntryChecksums@8
_HvpGenerateLogMetadata@12
_HvpGetBinMemAlloc@12
_HvpGetCellContextInitialize@4
_HvpGetCellContextMove@8
_HvpGetCellContextReinitialize@4
_HvpGetCellFlat@12
_HvpGetCellMap@8
_HvpGetCellPaged@12
_HvpGetHCell@12
_HvpGetHiveHeader@12
_HvpGetLogHeader@28
_HvpHeaderCheckSum@4
_HvpInitMap@4
_HvpIsFreeNeighbor@20
_HvpIsHiveEligibleForSystemCacheBacking@4
_HvpIsLogEntryHeaderCoherent@12
_HvpIsMetadataArrayCoherent@12
_HvpLogEntryCheckHeaderChecksum@4
_HvpLogTypeToLogArrayIndex@4
_HvpMapEntryGetBinAddress@16
_HvpMapEntryGetBlockAddress@16
_HvpMapEntryGetFreeBin@4
_HvpMapEntryIsBinPresent@4
_HvpMapEntryIsDiscardable@4
_HvpMapEntryIsNewAlloc@4
_HvpMapEntryIsTrimmed@4
_HvpMapEntryMarkTrimmed@4
_HvpMapEntryReleaseBinAddress@12
_HvpMapEntryReleaseBlockAddress@12
_HvpMapHiveImage@20
_HvpMapHiveImageFromFile@20
_HvpMapHiveImageFromSystemCache@16
_HvpMarkCellDirty@16
_HvpMarkDirty@16
_HvpPointMapEntriesToBuffer@24
_HvpProtectBin@28
_HvpReadHiveDataFromFile@12
_HvpRecoverData@24
_HvpRecoverDataReadRoutine@20
_HvpReleaseCellFlat@8
_HvpReleaseCellPaged@8
_HvpReleaseHCell@8
_HvpRemapAndEnlistHiveBins@4
_HvpRemoveFreeCellHint@16
_HvpResetPageProtection@4
_HvpReviveDiscardedBin@16
_HvpSetRangeProtection@16
_HvpShouldTruncateLogFile@8
_HvpShrinkMap@16
_HvpTruncateBins@4
_HvpUpdateRecoveryVector@12
_HvpValidateLoadedBin@12
_HvpViewMapAcquireChargesForPinnedPages@8
_HvpViewMapAddressForFileOffset@8
_HvpViewMapContiguousBytesAfterFileOffset@8
_HvpViewMapCountPinMaskSetBits@8
_HvpViewMapGrowFile@16
_HvpViewMapIsRangePinned@12
_HvpViewMapLogPinChange@20
_HvpViewMapPinForFileOffset@12
_HvpViewMapPinViewOfPrimaryFile@8
_HvpViewMapPrefetchFile@8
_HvpViewMapReleaseChargesForPinnedPages@8
_HvpViewMapUnpinForFileOffset@16
_HvpViewMapUnpinViewOfPrimaryFile@8
_HvpViewMapViewOfPrimaryFile@20
_HvpViewRemapViewOfPrimaryFile@20
_HvpViewUnmapViewOfPrimaryFile@16
_INCREASE_MAPPED_TRANSFER_BYTE_COUNT@12
_INCREMENT_ADAPTER_CHANNELS@4
_IdnaMemAlloc@4
_InbvAcquireDisplayOwnership@0
_InbvAcquireLock@0
_InbvBitBlt@12
_InbvCheckDisplayOwnership@0
_InbvDetermineFunction@4
_InbvDisplayString@4
_InbvDriverInitialize@12
_InbvEnableBootDriver@4
_InbvEnableDisplayString@4
_InbvGetDisplayState@0
_InbvGetResourceAddress@4
_InbvIndicateProgress@0
_InbvInstallDisplayStringFilter@4
_InbvIsBootDriverInstalled@0
_InbvNotifyDisplayOwnershipChange@8
_InbvNotifyDisplayOwnershipLost@4
_InbvPortEnableFifo@8
_InbvPortGetByte@8
_InbvPortInitialize@28
_InbvPortPollOnly@4
_InbvPortPutByte@8
_InbvPortTerminate@4
_InbvReleaseLock@0
_InbvReleaseResources@0
_InbvResetDisplay@0
_InbvRotateGuiBootDisplay@4
_InbvSetFunction@4
_InbvSetProgressBarSubset@8
_InbvSetScrollRegion@16
_InbvSetTextColor@4
_InbvSolidColorFill@20
_InitBootProcessor@4
_InitMultiSessionSku@0
_InitOtherProcessors@0
_InitSafeBoot@4
_InitializeDynamicPartitioningPolicy@4
_InitializeKCBKeyBodyList@4
_InitializeListHeadPte@8
_InitializePagedPool@0
_InitializePool@8
_InitializeSidLookupTable@4
_InsertChar@12
_InsertTailListPte@8
_InterlockedCompareExchange64@20
_InternalBreakpointCheck@16
_IoAcquireCancelSpinLock@4
_IoAcquireRemoveLockEx@20
_IoAcquireVpbSpinLock@4
_IoAddTriageDumpDataBlock@8
_IoAdjustStackSizeForRedirection@12
_IoAllocateAdapterChannel@20
_IoAllocateController@16
_IoAllocateDriverObjectExtension@16
_IoAllocateErrorLogEntry@8
_IoAllocateGenericErrorLogEntry@4
_IoAllocateIrp@8
_IoAllocateIrpEx@12
_IoAllocateMdl@20
_IoAllocateMiniCompletionPacket@8
_IoAllocateSfioStreamIdentifier@16
_IoAllocateWorkItem@4
_IoAllowExecution@4
_IoApplyPriorityInfoThread@12
_IoAssignResources@24
_IoAsynchronousPageWrite@40
_IoAttachDevice@12
_IoAttachDeviceByPointer@8
_IoAttachDeviceToDeviceStack@8
_IoAttachDeviceToDeviceStackSafe@12
_IoBoostThreadIo@16
_IoBoostThreadIoPriority@12
_IoBuildAsynchronousFsdRequest@24
_IoBuildDeviceIoControlRequest@36
_IoBuildPartialMdl@16
_IoBuildPoDeviceNotifyList@4
_IoBuildSynchronousFsdRequest@28
_IoCallDriver@8
_IoCancelFileOpen@8
_IoCancelIrp@4
_IoCancelThreadIo@4
_IoCaptureLiveDump@28
_IoChangeFileObjectFilterContext@12
_IoCheckDesiredAccess@8
_IoCheckEaBufferValidity@12
_IoCheckFunctionAccess@24
_IoCheckQuerySetFileInformation@12
_IoCheckQuerySetVolumeInformation@12
_IoCheckQuotaBufferValidity@12
_IoCheckShareAccess@20
_IoCheckShareAccessEx@24
_IoClearActivityIdThread@4
_IoClearDependency@8
_IoClearIrpExtraCreateParameter@4
_IoCompleteRequest@8
_IoConfigureCrashDump@8
_IoConnectInterrupt@44
_IoConnectInterruptEx@4
_IoControlPnpDeviceActionQueue@4
_IoConvertFileHandleToKernelHandle@20
_IoCopyDeviceObjectHint@8
_IoCreateArcName@4
_IoCreateController@4
_IoCreateDevice@28
_IoCreateDisk@8
_IoCreateDriver@8
_IoCreateFile@56
_IoCreateFileEx@60
_IoCreateFileSpecifyDeviceObjectHint@60
_IoCreateFlow@4
_IoCreateNotificationEvent@8
_IoCreateObjectTypes@0
_IoCreateStreamFileObject@8
_IoCreateStreamFileObjectEx2@20
_IoCreateStreamFileObjectEx@12
_IoCreateStreamFileObjectLite@8
_IoCreateSymbolicLink@8
_IoCreateSynchronizationEvent@8
_IoCreateSystemThread@32
_IoCreateUnprotectedSymbolicLink@8
_IoCsqInitialize@28
_IoCsqInitializeEx@28
_IoCsqInsertIrp@12
_IoCsqInsertIrpEx@16
_IoCsqRemoveIrp@8
_IoCsqRemoveNextIrp@8
_IoDecrementKeepAliveCount@8
_IoDeleteAllDependencyRelations@4
_IoDeleteController@4
_IoDeleteDevice@4
_IoDeleteDriver@4
_IoDeleteFlow@4
_IoDeleteSymbolicLink@4
_IoDetachDevice@4
_IoDiagTraceDevicesRundown@0
_IoDiscardDeferredLiveDumpData@4
_IoDisconnectInterrupt@4
_IoDisconnectInterruptEx@4
_IoDumpStackResumeCapable@4
_IoDuplicateDependency@8
_IoEnableIoQos@0
_IoEnqueueIrp@4
_IoEnumerateDeviceObjectList@16
_IoEnumerateEnvironmentVariablesEx@12
_IoEnumerateRegisteredFiltersList@12
_IoFastQueryNetworkAttributes@20
_IoFillDumpHeader@32
_IoFillTriageDumpBuffer@52
_IoFindDeviceThatFailedIrp@4
_IoFlushAdapterBuffers@24
_IoForwardIrpSynchronously@8
_IoFreeAdapterChannel@4
_IoFreeController@4
_IoFreeDumpRange@16
_IoFreeErrorLogEntry@4
_IoFreeIrp@4
_IoFreeMapRegisters@12
_IoFreeMdl@4
_IoFreeMiniCompletionPacket@4
_IoFreePoDeviceNotifyList@4
_IoFreeSfioStreamIdentifier@8
_IoFreeWorkItem@4
_IoGetActivityIdIrp@8
_IoGetActivityIdThread@0
_IoGetAffinityInterrupt@8
_IoGetAttachedDevice@4
_IoGetAttachedDeviceReference@4
_IoGetBaseFileSystemDeviceObject@4
_IoGetBootDiskInformation@8
_IoGetBootDiskInformationLite@4
_IoGetConfigurationInformation@0
_IoGetContainerInformation@16
_IoGetDeviceAttachmentBaseRef@4
_IoGetDeviceInstanceName@8
_IoGetDeviceInterfaceAlias@12
_IoGetDeviceInterfacePropertyData@32
_IoGetDeviceInterfaces@16
_IoGetDeviceNumaNode@8
_IoGetDeviceObjectPointer@16
_IoGetDeviceProperty@20
_IoGetDevicePropertyData@32
_IoGetDeviceToVerify@4
_IoGetDiskDeviceObject@8
_IoGetDmaAdapter@12
_IoGetDriverObjectExtension@8
_IoGetDumpHiberRanges@8
_IoGetDumpStack@16
_IoGetDumpStackTransferSizes@8
_IoGetEnvironmentVariableEx@20
_IoGetFileObjectFilterContext@12
_IoGetFileObjectGenericMapping@0
_IoGetFsTrackOffsetState@12
_IoGetFsZeroingOffset@8
_IoGetGenericIrpExtension@12
_IoGetInitialStack@0
_IoGetInitiatorProcess@4
_IoGetIoPriorityHint@4
_IoGetIrpExtraCreateParameter@8
_IoGetLegacyVetoList@8
_IoGetLoadedDriverInfo@12
_IoGetLowerDeviceObject@4
_IoGetOplockFullFoExt@4
_IoGetOplockKeyContext@4
_IoGetOplockKeyContextEx@4
_IoGetRelatedDeviceObject@4
_IoGetRelatedTargetDevice@8
_IoGetRequestorProcess@4
_IoGetRequestorProcessId@4
_IoGetRequestorSessionId@8
_IoGetSfioStreamIdentifier@8
_IoGetStackLimits@8
_IoGetSymlinkSupportInformation@8
_IoGetTopLevelIrp@0
_IoGetTransactionParameterBlock@4
_IoIncrementKeepAliveCount@8
_IoInitSystem@4
_IoInitSystemPreDrivers@4
_IoInitializeBugCheckProgress@8
_IoInitializeCrashDump@12
_IoInitializeDumpStack@8
_IoInitializeIrp@12
_IoInitializeIrpEx@16
_IoInitializeLiveDump@0
_IoInitializeMiniCompletionPacket@12
_IoInitializeProcessor@8
_IoInitializeRemoveLockEx@20
_IoInitializeTimer@12
_IoInitializeWorkItem@8
_IoInvalidateDeviceRelations@8
_IoInvalidateDeviceState@4
_IoIrpHasFsTrackOffsetExtensionType@4
_IoIsActivityTracingEnabled@0
_IoIsDeviceEjectable@4
_IoIsFileObjectIgnoringSharing@4
_IoIsFileOriginRemote@4
_IoIsOperationSynchronous@4
_IoIsSystemThread@4
_IoIsValidIrpStatus@4
_IoIsValidNameGraftingBuffer@8
_IoIsWdmVersionAvailable@8
_IoMakeAssociatedIrp@8
_IoMakeAssociatedIrpEx@12
_IoMakeAssociatedIrpPriv@12
_IoMapTransfer@24
_IoMarkTriageDumpBlock@0
_IoNotifyDump@4
_IoNotifyPowerOperationVetoed@12
_IoOpenDeviceInterfaceRegistryKey@12
_IoOpenDeviceRegistryKey@16
_IoPageRead@20
_IoPerfInit@4
_IoPerfReset@4
_IoProcessPassiveInterrupts@4
_IoPropagateActivityIdToThread@12
_IoPropagateIrpExtension@12
_IoPropagateIrpExtensionEx@20
_IoQueryDeviceDescription@32
_IoQueryEnvironmentVariableInfoEx@16
_IoQueryFileDosDeviceName@8
_IoQueryFileInformation@20
_IoQueryFlowHistory@16
_IoQueryFlowInformation@16
_IoQueryFullDriverPath@8
_IoQueryInterface@28
_IoQueryLowPriorityIoInformation@16
_IoQuerySystemDeviceName@16
_IoQueryVhdBootInformation@16
_IoQueryVolumeInformation@20
_IoQueueThreadIrp@4
_IoQueueWorkItem@16
_IoQueueWorkItemEx@16
_IoQueueWorkItemToNode@20
_IoRaiseHardError@12
_IoRaiseInformationalHardError@12
_IoReadDiskSignature@12
_IoReadPartitionTableEx@8
_IoRegisterBootDriverCallback@8
_IoRegisterBootDriverReinitialization@12
_IoRegisterContainerNotification@20
_IoRegisterDeviceInterface@16
_IoRegisterDriverReinitialization@12
_IoRegisterFileSystem@4
_IoRegisterFsRegistrationChange@8
_IoRegisterFsRegistrationChangeMountAware@12
_IoRegisterIoTracking@8
_IoRegisterLastChanceShutdownNotification@4
_IoRegisterPlugPlayNotification@28
_IoRegisterPriorityCallback@8
_IoRegisterShutdownNotification@4
_IoReleaseCancelSpinLock@4
_IoReleaseRemoveLockAndWaitEx@12
_IoReleaseRemoveLockEx@12
_IoReleaseVpbSpinLock@4
_IoRemoveIoCompletion@32
_IoRemoveShareAccess@8
_IoReplaceFileObjectName@12
_IoReplacePartitionUnit@12
_IoReportDetectedDevice@32
_IoReportHalResourceUsage@16
_IoReportInterruptActive@4
_IoReportInterruptInactive@4
_IoReportResourceForDetection@28
_IoReportResourceUsage@36
_IoReportResourceUsageInternal@40
_IoReportRootDevice@4
_IoReportTargetDeviceChange@8
_IoReportTargetDeviceChangeAsynchronous@16
_IoRequestDeviceEject@4
_IoRequestDeviceEjectEx@16
_IoRequestDeviceRemovalForReset@8
_IoReserveDependency@12
_IoResolveDependency@8
_IoRetrievePriorityInfo@16
_IoReuseIrp@8
_IoRevokeHandlesForProcess@8
_IoSaveBugCheckProgress@4
_IoSetActivityIdIrp@8
_IoSetActivityIdThread@4
_IoSetBugCheckProgressFlag@4
_IoSetCompletionRoutineEx@28
_IoSetDependency@12
_IoSetDeviceInterfacePropertyData@28
_IoSetDeviceInterfaceState@8
_IoSetDevicePropertyData@28
_IoSetDeviceToVerify@8
_IoSetDumpRange@16
_IoSetEnvironmentVariableEx@20
_IoSetFileObjectIgnoreSharing@4
_IoSetFileOrigin@8
_IoSetFlowPolicy@32
_IoSetFsTrackOffsetState@16
_IoSetFsZeroingOffset@8
_IoSetFsZeroingOffsetRequired@4
_IoSetGenericIrpExtension@16
_IoSetHandleFlow@16
_IoSetHardErrorOrVerifyDevice@8
_IoSetInformation@16
_IoSetIoCompletion@24
_IoSetIoCompletionEx2@32
_IoSetIoCompletionEx@28
_IoSetIoPriorityHint@8
_IoSetIoPriorityHintIntoFileObject@8
_IoSetIoPriorityHintIntoThread@8
_IoSetIrpExtraCreateParameter@8
_IoSetMasterIrpStatus@8
_IoSetOplockKeyContext@12
_IoSetOplockPrivateFoExt@8
_IoSetPartitionInformationEx@12
_IoSetShareAccess@16
_IoSetShareAccessEx@20
_IoSetStartIoAttributes@12
_IoSetSystemPartition@4
_IoSetThreadHardErrorMode@4
_IoSetTopLevelIrp@4
_IoShutdownSystem@4
_IoSizeOfIrpEx@8
_IoSizeofGenericIrpExtension@0
_IoSizeofWorkItem@0
_IoStartNextPacket@8
_IoStartNextPacketByKey@12
_IoStartPacket@16
_IoStartTimer@4
_IoSteerInterrupt@8
_IoStopTimer@4
_IoSynchronousCallDriver@8
_IoSynchronousInvalidateDeviceRelations@8
_IoSynchronousPageWrite@20
_IoSynchronousPageWriteEx@24
_IoTestDependency@16
_IoThreadToProcess@4
_IoTransferActivityId@8
_IoTranslateBusAddress@24
_IoTryQueueWorkItem@16
_IoUninitializeWorkItem@4
_IoUnregisterBootDriverCallback@4
_IoUnregisterContainerNotification@4
_IoUnregisterFileSystem@4
_IoUnregisterFsRegistrationChange@8
_IoUnregisterIoTracking@4
_IoUnregisterPlugPlayNotification@4
_IoUnregisterPlugPlayNotificationEx@4
_IoUnregisterPriorityCallback@4
_IoUnregisterShutdownNotification@4
_IoUpdateDumpPhysicalRanges@0
_IoUpdateShareAccess@8
_IoValidateDeviceIoControlAccess@8
_IoVerifierCheckForSettingsChange@4
_IoVerifierInit@4
_IoVerifyPartitionTable@8
_IoVerifyVolume@8
_IoVolumeDeviceToDosName@8
_IoVolumeDeviceToGuid@8
_IoVolumeDeviceToGuidPath@8
_IoWMIAllocateInstanceIds@12
_IoWMICompleteRequest@24
_IoWMIDeviceObjectToInstanceName@12
_IoWMIExecuteMethod@24
_IoWMIHandleToInstanceName@12
_IoWMIOpenBlock@12
_IoWMIQueryAllData@12
_IoWMIQueryAllDataMultiple@16
_IoWMIQuerySingleInstance@16
_IoWMIQuerySingleInstanceMultiple@20
_IoWMIRegistrationControl@8
_IoWMISetNotificationCallback@12
_IoWMISetSingleInstance@20
_IoWMISetSingleItem@24
_IoWMISuggestInstanceName@16
_IoWMISystemControl@12
_IoWMIWriteEvent@4
_IoWithinStackLimits@8
_IoWriteCrashDump@40
_IoWriteDeferredLiveDumpData@4
_IoWriteErrorLogEntry@4
_IoWritePartitionTableEx@8
_IopAbortRequest@4
_IopAcquireFileObjectLock@16
_IopAcquireReleaseConnectLockInternal@12
_IopAcquireReleaseDispatcherLock@8
_IopAddBootDiskInformation@8
_IopAddBugcheckPnpTriageData@8
_IopAddBugcheckPowerTriageData@12
_IopAddBugcheckTriageDevice@4
_IopAddBugcheckTriageDeviceNode@4
_IopAddBugcheckTriageDriver@4
_IopAddBugcheckTriageIrp@8
_IopAddBugcheckTriagePoFxDevice@4
_IopAddBugcheckTriageThread@4
_IopAddBugcheckTriageUnicodeString@8
_IopAddBugcheckTriageWorkQueue@4
_IopAddPageDumpRange@8
_IopAddPageToPageMap@20
_IopAddRelationToList@16
_IopAddRemoveReqDescs@16
_IopAddRunTimeTriageDataBlocks@24
_IopAddTriageDumpDataBlock@20
_IopAdjustFileObjectKeepAliveCount@20
_IopAllocRealFileObject@32
_IopAllocateBackpocketIrp@12
_IopAllocateBootResources@12
_IopAllocateBootResourcesInternal@12
_IopAllocateErrorLogEntry@12
_IopAllocateFileObjectExtension@8
_IopAllocateFoExtensionsOnCreate@16
_IopAllocateGenericTableEntry@8
_IopAllocateIrpCleanup@8
_IopAllocateIrpExtension@8
_IopAllocateIrpMustSucceed@8
_IopAllocateIrpPrivate@16
_IopAllocateIrpWithExtension@16
_IopAllocateLegacyBootResources@8
_IopAllocateMiniCompletionPacket@8
_IopAllocatePassiveInterruptBlock@8
_IopAllocateRelationList@4
_IopAllocateReserveIrp@12
_IopAllocateUnicodeString@8
_IopAllowRemoteDASD@0
_IopApcHardError@4
_IopAppendLegacyVeto@8
_IopAssignBootDriveLetter@0
_IopAttachDeviceToDeviceStackSafe@12
_IopBoostThreadCallback@12
_IopBootAllocation@4
_IopBootLog@8
_IopBootLogToFile@4
_IopBuildAsynchronousFsdRequest@28
_IopBuildDeviceIoControlRequest@40
_IopBuildFullDriverPath@12
_IopBuildGlobalSymbolicLinkString@8
_IopBuildSpecialMemoryTable@4
_IopBuildSynchronousFsdRequest@32
_IopBusNumberInitialize@0
_IopBusNumberPackResource@16
_IopBusNumberScoreRequirement@4
_IopBusNumberUnpackRequirement@20
_IopBusNumberUnpackResource@12
_IopCachePreviousBootData@4
_IopCallArbiter@20
_IopCallBootDriverReinitializationRoutines@0
_IopCallDriverReinitializationRoutines@4
_IopCancelAlertedRequest@8
_IopCancelApcRequired@12
_IopCancelIrpsInCurrentThreadList@16
_IopCancelIrpsInCurrentThreadListApcRoutine@12
_IopCancelIrpsInCurrentThreadListDummyApc@20
_IopCancelIrpsInCurrentThreadListSpecialApc@20
_IopCancelIrpsInFileObjectList@24
_IopCancelIrpsInThreadList@8
_IopCancelIrpsInThreadListForCurrentProcess@8
_IopCancelPendingEject@4
_IopCancelSynchronousIrpsForThread@8
_IopCancelWaitCompletionPacket@12
_IopCaptureObjectName@4
_IopChangeInterfaceType@8
_IopCheckDeviceAndDriver@8
_IopCheckDeviceFlags@8
_IopCheckDiskName@12
_IopCheckGetQuotaBufferValidity@12
_IopCheckHandleForRevocation@16
_IopCheckHardErrorEmpty@0
_IopCheckIfMergeRequired@8
_IopCheckInitiatorHint@8
_IopCheckListForCancelableIrp@24
_IopCheckSessionDeviceAccess@4
_IopCheckStackForTransactionSupport@4
_IopCheckTopDeviceHint@16
_IopCheckUnloadDriver@8
_IopCheckVpbMounted@16
_IopChildToRootTranslation@24
_IopCleanupExtraCreateParameters@4
_IopCleanupFileObjectIosbRange@4
_IopCleanupNotifications@8
_IopCleanupProcessResources@12
_IopCleanupSelectedConfiguration@8
_IopCloseFile@16
_IopCloseIoCompletion@16
_IopCloseWaitCompletionPacket@16
_IopCombineCmResourceList@8
_IopCombineLegacyResources@4
_IopCommitConfiguration@4
_IopCompareIosbRanges@12
_IopCompareReqAlternativePriority
_IopCompleteIrpInFileObjectList@12
_IopCompletePageWrite@20
_IopCompleteRequest@20
_IopCompleteUnloadOrDelete@12
_IopConnectInterrupt@40
_IopConnectInterruptFullySpecified@44
_IopConnectLineBasedInterrupt@28
_IopConnectLinkTrackingPort@4
_IopConnectMessageBasedInterrupt@28
_IopConstructInMemoryDumpHeader@0
_IopCopyBootLogRegistryToFile@0
_IopCopyOffloadCapable@8
_IopCopyOverNewPath@20
_IopCreateArcName@8
_IopCreateArcNames@4
_IopCreateArcNamesCd@4
_IopCreateArcNamesDisk@4
_IopCreateCmResourceList@16
_IopCreateDefaultDeviceSecurityDescriptor@28
_IopCreateFile@64
_IopCreateFlow@4
_IopCreatePassiveInterruptRealtimeThreads@8
_IopCreateRegistryKeyEx@24
_IopCreateRootDirectories@0
_IopCreateSecurityDescriptorPerType@16
_IopCreateVpb@4
_IopCsqCancelRoutine@8
_IopDeallocateApc@20
_IopDebugPrint
_IopDecDisableableDepends@4
_IopDecrementDeviceObjectHandleCount@4
_IopDecrementDeviceObjectRef@12
_IopDecrementDeviceObjectRefCount@8
_IopDecrementVpbRefCount@8
_IopDeleteDevice@4
_IopDeleteDriver@4
_IopDeleteFile@4
_IopDeleteFileObjectExtension@4
_IopDeleteFlow@4
_IopDeleteIoCompletion@4
_IopDeleteIoCompletionInternal@8
_IopDequeueIrpFromFileObject@8
_IopDequeueIrpFromThread@4
_IopDereferencePassiveInterruptBlock@4
_IopDereferenceVpbAndFree@4
_IopDestroyActiveConnectBlock@4
_IopDestroyDeviceNode@4
_IopDestroyPassiveInterruptBlock@4
_IopDeviceEjectComplete@12
_IopDeviceInterfaceFilterCallback@16
_IopDeviceObjectFromSymbolicName@4
_IopDeviceRemovalForResetComplete@4
_IopDisableCrashDump@0
_IopDisableTimer@4
_IopDisassociateThreadIrp@0
_IopDispatchSessionNotifications@12
_IopDmaInitialize@0
_IopDmaOverrideConflict@8
_IopDmaPackResource@16
_IopDmaScoreRequirement@4
_IopDmaUnpackRequirement@20
_IopDmaUnpackResource@12
_IopDoDeferredSetInterfaceState@4
_IopDropIrp@8
_IopDumpCallAddPagesCallbacks@4
_IopDumpCallRemovePagesCallbacks@4
_IopDuplicateDetection@16
_IopEfiStatusToNTSTATUS@4
_IopEjectDevice@8
_IopEliminateBogusConflict@8
_IopEnableTimer@4
_IopEnumerateEnvironmentVariablesHal@20
_IopEnumerateEnvironmentVariablesSysEnv@20
_IopEnumerateEnvironmentVariablesTrEE@20
_IopEnumerateRelations@20
_IopErrorLogConnectSession@0
_IopErrorLogDpc@16
_IopErrorLogGetEntry@0
_IopErrorLogQueueRequest@0
_IopErrorLogRequeueEntry@4
_IopErrorLogThread@4
_IopEtwEnableCallback@36
_IopExceptionCleanup@16
_IopExceptionFilter@8
_IopExecuteHardwareProfileChange@20
_IopExecuteHwpDefaultSelect@12
_IopFastQueryNetworkAttributes@40
_IopFetchConfigurationInformation@28
_IopFileUtilClearAttributes@8
_IopFileUtilRename@12
_IopFileUtilWalkDirectoryTreeBottomUp@16
_IopFileUtilWalkDirectoryTreeHelper@28
_IopFileUtilWalkDirectoryTreeTopDown@16
_IopFillTriageDumpDataBlocks@16
_IopFilterResourceRequirementsCall@12
_IopFindActiveConnectBlockLocked@4
_IopFindLegacyBusDeviceNode@8
_IopFindLegacyDeviceNode@16
_IopFindMatchingComponentsLengthR@8
_IopFindPassiveInterruptBlock@4
_IopFindPassiveInterruptBlockLocked@4
_IopFindResourceHandlerInfo@16
_IopFindSystemDevice@8
_IopFreeBackpocketIrp@8
_IopFreeBandwidthContract@8
_IopFreeCompletionListPackets@8
_IopFreeGenericTableEntry@8
_IopFreeIrp@4
_IopFreeIrpAndMdls@4
_IopFreeIrpExtension@12
_IopFreeMiniCompletionPacket@4
_IopFreePoDeviceNotifyListHead@4
_IopFreeRelationList@4
_IopFreeReqAlternative@4
_IopFreeReqList@4
_IopFreeReserveIrp@8
_IopFreeWaitCompletionPacket@8
_IopGenericPackResource@16
_IopGenericScoreRequirement@4
_IopGenericTranslateOrdering@8
_IopGenericUnpackRequirement@20
_IopGenericUnpackResource@12
_IopGetBasicInformationFile@8
_IopGetBootDiskInformation@8
_IopGetBootDiskInformationLite@4
_IopGetDeviceAttachmentBase@4
_IopGetDeviceInterfaces@24
_IopGetDevicePDO@4
_IopGetDriverNameFromKeyNode@8
_IopGetDriverPathInformation@12
_IopGetEnvironmentVariableHal@28
_IopGetEnvironmentVariableSysEnv@28
_IopGetEnvironmentVariableTrEE@28
_IopGetFileInformation@20
_IopGetFileObjectExtension@12
_IopGetFileVolumeNameInformation@16
_IopGetFsRegistrationInProgress@0
_IopGetInterruptConnectionData@8
_IopGetLegacyVetoListDeviceNode@8
_IopGetLegacyVetoListDrivers@4
_IopGetMaxValidMemorySize@8
_IopGetMaxValidMemorySizeDown@8
_IopGetModeInformation@4
_IopGetMountFlag@4
_IopGetNetworkOpenInformation@8
_IopGetNumaNodeInformation@8
_IopGetPhysicalMemoryBlock@0
_IopGetRegistryKeyInformation@8
_IopGetRegistryValue@16
_IopGetRegistryValues@12
_IopGetRelatedFileName@16
_IopGetRootDevices@4
_IopGetSessionIdFromPDO@4
_IopGetSessionIdFromSymbolicName@4
_IopGetSetObjectId@16
_IopGetSetSecurityObject@36
_IopGetSetSpecificExtension@24
_IopGetSetStreamIdentifier@20
_IopGetVolumeId@12
_IopGraftName@12
_IopHardErrorThread@4
_IopIncDisableableDepends@4
_IopIncrementDeviceObjectRefCount@8
_IopIncrementVpbRefCount@8
_IopInitActivityIdIrp@4
_IopInitCrashDumpDuringSysInit@4
_IopInitCrashDumpRegCallback@24
_IopInitDumpCapsuleSupport@0
_IopInitializeActiveConnectBlock@8
_IopInitializeActiveConnectList@0
_IopInitializeAttributesAndCreateObject@12
_IopInitializeBootDrivers@8
_IopInitializeBootLogging@8
_IopInitializeBuiltinDriver@24
_IopInitializeCrashDump@12
_IopInitializeDeviceInstanceKey@12
_IopInitializeInMemoryDumpData@0
_IopInitializeIoQos@0
_IopInitializeOfflineCrashDump@4
_IopInitializePassiveInterruptServices@0
_IopInitializePlugPlayServices@8
_IopInitializeReserveIrps@4
_IopInitializeResourceMap@4
_IopInitializeSessionNotifications@0
_IopInitializeSystemDrivers@0
_IopInitializeSystemVariableService@0
_IopInsertActiveConnectListLocked@4
_IopInsertLegacyBusDeviceNode@12
_IopInsertPassiveInterruptBlock@8
_IopInsertRemoveDevice@12
_IopInvalidDeviceRequest@8
_IopInvalidateVolumesForDevice@4
_IopIrpExtensionControl@8
_IopIrpHasValidCombinationOfExtensionTypes@8
_IopIrpStackProfilerDpcRoutine@16
_IopIrqInitialize@0
_IopIrqPackResource@16
_IopIrqScoreRequirement@4
_IopIrqTranslateOrdering@8
_IopIrqUnpackRequirement@20
_IopIrqUnpackResource@12
_IopIsAddressRangeValid@8
_IopIsBitlockerOn@0
_IopIsDescendantNode@8
_IopIsFileOpenOrSection@16
_IopIsPciRootBus@8
_IopIsRelationInList@8
_IopIsReportedAlready@20
_IopIssueSystemEnvironmentCallout@4
_IopIssueSystemEnvironmentRequest@36
_IopIssueTrEERequest@36
_IopKeepAliveWorker@4
_IopLegacyResourceAllocation@20
_IopLiveDumpAllocAndInitResources@4
_IopLiveDumpAllocateDumpBuffers@4
_IopLiveDumpAllocateMappingResources@4
_IopLiveDumpBufferDumpData@8
_IopLiveDumpCallRemovePagesCallbacks@4
_IopLiveDumpCaptureMemoryPages@4
_IopLiveDumpCorralDpc@16
_IopLiveDumpCorralProcessors@4
_IopLiveDumpDiscardSecondaryDataBuffersRange@4
_IopLiveDumpDiscardVirtualAddressRange@12
_IopLiveDumpEndMirroringCallback@4
_IopLiveDumpEstimateMemoryPages@4
_IopLiveDumpFreeDumpBuffers@4
_IopLiveDumpFreeMappingResources@4
_IopLiveDumpGetCapturePages@24
_IopLiveDumpGetCapturePagesNoLock@24
_IopLiveDumpInitiateCorralStateChange@8
_IopLiveDumpIsTracingEnabled@0
_IopLiveDumpLockPages@0
_IopLiveDumpMarkDeviceNode@8
_IopLiveDumpMarkImportantDumpData@8
_IopLiveDumpMarkLoadedModuleList@4
_IopLiveDumpMarkProcessorData@8
_IopLiveDumpMarkRequiredDumpData@8
_IopLiveDumpMirrorPhysicalMemoryCallback@16
_IopLiveDumpPopulateBitmapForDump@4
_IopLiveDumpProcessCorralStateChange@8
_IopLiveDumpReleaseResources@4
_IopLiveDumpResetCorralContext@4
_IopLiveDumpStartDumpDataBuffering@4
_IopLiveDumpStartMirroringCallback@0
_IopLiveDumpTrace@4
_IopLiveDumpTraceBufferAllocation@4
_IopLiveDumpTraceBufferEstimation@4
_IopLiveDumpTraceDumpFileWriteEnd@12
_IopLiveDumpTraceInterfaceEnd@12
_IopLiveDumpTraceInterfaceStart@4
_IopLiveDumpTraceMirroringPhase0End@4
_IopLiveDumpTraceMirroringPhase1End@4
_IopLiveDumpTraceMirroringStart@4
_IopLiveDumpTraceRemovePagesCallbackFailure@12
_IopLiveDumpTraceSystemQuiesceEnd@4
_IopLiveDumpTraceSystemQuiesceStart@4
_IopLiveDumpTracingControlCallback@36
_IopLiveDumpUnLockPages@0
_IopLiveDumpUncorralProcessors@8
_IopLiveDumpValidateCancelObject@4
_IopLiveDumpValidateDumpFileHandle@4
_IopLiveDumpValidateParameters@12
_IopLiveDumpValidateSecondaryData@4
_IopLiveDumpWriteBuffer@16
_IopLiveDumpWriteDumpFile@4
_IopLiveDumpWriteSecondaryData@16
_IopLoadCrashdumpDriver@0
_IopLoadDriver@16
_IopLoadFileSystemDriver@4
_IopLoadUnloadDriver@4
_IopMarkBootPartition@12
_IopMarshalIds@16
_IopMaskInterrupt@4
_IopMemFindSuitableRange@8
_IopMemInitialize@0
_IopMemQueryConflict@8
_IopMergeRelationLists@12
_IopMountInitializeVpb@16
_IopMountVolume@20
_IopNotifyAlreadyRegisteredFileSystems@12
_IopOpenLinkOrRenameTarget@16
_IopOpenRegistryKey@20
_IopOpenRegistryKeyEx@16
_IopOpenSystemVariableDevice@12
_IopParentToRawTranslation@4
_IopParseDevice@40
_IopParseFile@40
_IopPassiveInterruptDpc@16
_IopPassiveInterruptRealtimeWorker@4
_IopPassiveInterruptWorker@4
_IopPerfCompletionRoutine@12
_IopPerfLogCallEvent@12
_IopPerfLogCallReturnEvent@8
_IopPnPAddDevice@8
_IopPnPCompleteRequest@12
_IopPnPDispatch@8
_IopPortAddAllocation@8
_IopPortBacktrackAllocation@8
_IopPortFindSuitableRange@8
_IopPortGetNextAlias@16
_IopPortInitialize@0
_IopPostProcessIrp@8
_IopPowerDispatch@8
_IopPreInitializeIoQosWorkItem@8
_IopPrepareDeviceNotify@4
_IopProcessIoTracking@12
_IopProcessIrpStackProfiler@8
_IopProcessSetInterfaceState@12
_IopProcessWorkItem@4
_IopQueryConflictFillConflicts@24
_IopQueryConflictFillString@16
_IopQueryConflictList@24
_IopQueryConflictListInternal@24
_IopQueryDeviceResetRegistrySettings@4
_IopQueryDeviceResources@16
_IopQueryDeviceState@8
_IopQueryDockRemovalInterface@8
_IopQueryEnvironmentVariableInfoHal@24
_IopQueryEnvironmentVariableInfoSysEnv@24
_IopQueryEnvironmentVariableInfoTrEE@24
_IopQueryFlowHistory@4
_IopQueryFlowInformation@4
_IopQueryInterfaceRecurseUp@24
_IopQueryLegacyBusInformation@16
_IopQueryName@24
_IopQueryNameInternal@28
_IopQueryPassiveInterruptRegistryOptions@0
_IopQueryProcessIdsUsingFile@16
_IopQueryProcessorInitValues@4
_IopQueryReconfiguration@8
_IopQueryResourceHandlerInterface@16
_IopQueryVpbFlagsSafe@4
_IopQueryXxxInformation@28
_IopQueueIrpToFileObject@8
_IopQueueThreadIrp@4
_IopQueueWorkItemProlog@12
_IopRaiseHardError@12
_IopRaiseInformationalHardError@12
_IopReadDumpRegistry@8
_IopReadyDeviceObjects@4
_IopRearrangeReqList@4
_IopReassignSystemRoot@8
_IopReferenceDriverObjectByName@4
_IopReferenceVerifyVpb@12
_IopRegisterDeviceInterface@24
_IopRegistryCallback@4
_IopRegistryInitializeCallbacks@0
_IopRegistryOpenDeepestPath@12
_IopReleaseDeviceResources@8
_IopReleaseFilteredBootResources@8
_IopReleaseResources@4
_IopRemoveCurrentRelationFromList@12
_IopRemoveDevice@8
_IopRemoveDumpCapsuleSupport@0
_IopRemoveHardErrorPacket@0
_IopRemoveLegacyDeviceNode@8
_IopRemovePageDumpRange@8
_IopRemovePageFromPageMap@20
_IopRemoveRelationFromList@8
_IopRemoveTimerFromTimerList@4
_IopReplaceCompletionPort@12
_IopReplaceSeperatorWithPound@8
_IopReplaceSymlinkPath@28
_IopReportBootResources@12
_IopResourceRequirementsChanged@8
_IopResourceRequirementsListToReqList@8
_IopResurrectDriver@4
_IopRetestConfiguration@12
_IopRetrieveSystemDeviceName@16
_IopRetrieveTransactionParameters@16
_IopRetryDeviceRemovalForReset@4
_IopRetryDeviceRemovalForResetDpc@16
_IopReverseEnumerationOrder@8
_IopRevokeFileObjectForProcess@8
_IopRunIoQosWorkItem@4
_IopSafebootDriverLoad@4
_IopSaveRestoreConfiguration@16
_IopSelectNextConfiguration@12
_IopSendMessageToTrackService@12
_IopSessionChangeWorker@4
_IopSetAllRelationsTags@8
_IopSetDeviceSecurityDescriptor@20
_IopSetDeviceSecurityDescriptors@24
_IopSetEaOrQuotaInformationFile@20
_IopSetEnvironmentVariableHal@28
_IopSetEnvironmentVariableSysEnv@28
_IopSetEnvironmentVariableTrEE@28
_IopSetFileObjectIosbRange@8
_IopSetFlowPolicy@4
_IopSetFsRegistrationInProgress@4
_IopSetHandleFlow@4
_IopSetIoRoutines@0
_IopSetLegacyResourcesFlag@4
_IopSetLockOperationProcess@12
_IopSetRelationsTag@12
_IopSetRemoteLink@12
_IopSetTypeSpecificFoExtension@12
_IopSetupArbiterAndTranslators@4
_IopShutdownBaseFileSystems@4
_IopSizeTriageDumpDataBlocks@20
_IopSortRelationListForRemove@4
_IopStartApcHardError@4
_IopStartNextPacket@8
_IopStartNextPacketByKey@12
_IopStartNextPacketByKeyEx@12
_IopStoreArcInformation@4
_IopStoreSystemPartitionInformation@8
_IopSymlinkAllocateAndAddECP@12
_IopSymlinkApplyToOpenedName@24
_IopSymlinkCleanupECP@8
_IopSymlinkCreateECP@20
_IopSymlinkEnforceEnabledTypes@12
_IopSymlinkFreeRelatedMountPointChain@4
_IopSymlinkGetECP@8
_IopSymlinkGetRelatedMountPoint@8
_IopSymlinkInitializeSymlinkInfo@40
_IopSymlinkProcessReparse@16
_IopSymlinkQueryEnabledClasses@4
_IopSymlinkRegistryCallback@4
_IopSymlinkRegistryInitCallback@4
_IopSymlinkRememberJunction@16
_IopSymlinkRemoveECP@8
_IopSymlinkSetFoExtension@8
_IopSymlinkUpdateECP@24
_IopSynchronousApiServiceTail@24
_IopSynchronousCall@20
_IopSynchronousServiceTail@28
_IopSystemControlDispatch@8
_IopTestConfiguration@12
_IopThreadStart@4
_IopTimerDispatch@16
_IopTrackLink@24
_IopTranslateAndAdjustReqDesc@12
_IopTranslateBusAddress@20
_IopTranslatorHandlerCm@28
_IopTranslatorHandlerIo@20
_IopUnMarshalIds@16
_IopUncacheInterfaceInformation@8
_IopUnloadDriver@8
_IopUnloadSafeCompletion@12
_IopUnmaskInterrupt@4
_IopUpdateFunctionPointers@12
_IopUpdateMinidumpContext@32
_IopUserCompletion@20
_IopUserRundown@4
_IopVerifyDeviceObjectOnStack@12
_IopVerifyDiskSignature@12
_IopVerifyDriverObjectOnStack@8
_IopWarmEjectDevice@8
_IopWriteAllocatedResourcesToRegistry@12
_IopWriteCapsuleTriageDumpToFirmware@32
_IopWriteDriverList@16
_IopWriteResourceList@24
_IopWriteTriageDumpToFirmware@4
_IopXxxControlFile@44
_IovAllocateIrp@16
_IovAllocateMdl@24
_IovAllocateWorkItem@8
_IovAttachDeviceToDeviceStack@8
_IovBuildAsynchronousFsdRequest@24
_IovBuildDeviceIoControlRequest@36
_IovBuildSynchronousFsdRequest@28
_IovCancelIrp@4
_IovDeleteDevice@8
_IovDetachDevice@8
_IovFreeIrpPrivate@4
_IovInitializeIrp@16
_IovInitializeTimer@12
_IovUnloadDrivers@0
_IovUtilFlushStackCache@8
_IovUtilGetBottomDeviceObject@4
_IovUtilGetLowerDeviceObject@4
_IovUtilGetUpperDeviceObject@4
_IovUtilIsDeviceObjectMarked@8
_IovUtilIsInFdoStack@4
_IovUtilIsPdo@4
_IovUtilIsVerifiedDeviceStack@4
_IovUtilIsWdmStack@4
_IovUtilMarkDeviceObject@8
_IovUtilMarkStack@16
_IovUtilMultipleDevicesSameDriver@4
_IovUtilRelateDeviceObjects@12
_IovUtilWatermarkIrp@8
_IovpAdvanceStackDownwards@32
_IovpBuildDriverObjectList@20
_IovpCallDriver1@4
_IovpCallDriver2@8
_IovpCheckIrpForCriticalTracking@4
_IovpCompleteRequest1@12
_IovpCompleteRequest2@8
_IovpCompleteRequest3@12
_IovpCompleteRequest4@16
_IovpCompleteRequest5@4
_IovpCompleteRequest@12
_IovpExamineDevObjForwarding@8
_IovpExamineIrpStackForwarding@32
_IovpInternalCompletionTrap@12
_IovpLocalCompletionRoutine@12
_IovpLogStackCallout@4
_IovpLogStackTrace@4
_IovpPacketFromIrp@4
_IovpSessionDataCreate@12
_IovpSessionDataDereference@4
_IovpSessionDataReference@4
_IovpUnloadDriver@4
_IovpUtilMarkDeviceObject@8
_IovpValidateDeviceObject@4
_IovpValidateStatusInformation@16
_IsAnyDot@4
_IsEncodedAttributeChar@4
_IsHangulLV@4
_IsHangulS@4
_IsRegistryKeyLocked@8
_IsSurrogate@4
_KGetUnlockSetting@12
_KIsUnlockSettingEnabled@8
_KdAcquireDebuggerLock@4
_KdCallPowerHandlers@4
_KdChangeOption@24
_KdCheckForDebugBreak@0
_KdCopyDataBlock@4
_KdDeregisterPowerHandler@4
_KdDisableDebugger@0
_KdDisableDebuggerWithLock@4
_KdEnableDebugger@0
_KdEnableDebuggerWithLock@4
_KdEnterDebugger@8
_KdExitDebugger@4
_KdGetDebugDevice@0
_KdGetInternalBreakpoint@4
_KdInitSystem@8
_KdIsThisAKdTrap@12
_KdLogDbgPrint@4
_KdPollBreakIn@0
_KdPowerTransition@4
_KdPullRemoteFile@16
_KdRefreshDebuggerNotPresent@0
_KdRegisterDebuggerDataBlock@12
_KdRegisterPowerHandler@12
_KdReleaseDebuggerLock@4
_KdSendTraceData@8
_KdSetDbgPrintBufferSize@4
_KdSetEventLoggingPresent@4
_KdSetInternalBreakpoint@4
_KdSetOwedBreakpoints@4
_KdSetSpecialCall@8
_KdSystemDebugControl@28
_KdUpdateTimeSlipEvent@4
_KdpAddBreakpoint@20
_KdpAllowDisable@0
_KdpCheckTracePoint@8
_KdpCloseRemoteFile@4
_KdpCommandString@24
_KdpCopyCodeStream@20
_KdpCopyContext@12
_KdpCopyMemoryChunks@28
_KdpCreateRemoteFile@32
_KdpDeleteBreakpoint@4
_KdpDeleteBreakpointRange@8
_KdpFillMemory@12
_KdpGetBusData@12
_KdpGetCallNextOffset@8
_KdpGetContext@12
_KdpGetContextEx@12
_KdpGetExtendedContextLength@8
_KdpGetReturnAddress@4
_KdpGetStateChange@8
_KdpGetVersion@4
_KdpInitializeExtendedContext@8
_KdpInsertBreakpoint@8
_KdpIsBreakpoint@8
_KdpIsSpecialCall@16
_KdpIsTryFinallyReturn@8
_KdpLevelChange@12
_KdpLowRestoreBreakpoint@4
_KdpLowWriteContent@4
_KdpPollBreakInWithPortLock@0
_KdpPrint@32
_KdpPrintString@4
_KdpProcessInternalBreakpoint@4
_KdpPrompt@28
_KdpPromptString@8
_KdpQueryMemory@8
_KdpQuickMoveMemory@12
_KdpReadControlSpace@12
_KdpReadIoSpace@12
_KdpReadIoSpaceExtended@12
_KdpReadMachineSpecificRegister@12
_KdpReadPhysicalMemory@16
_KdpReadPhysicalMemoryLong@12
_KdpReadRemoteFile@24
_KdpReadVirtualMemory@12
_KdpRemoveBreakpoint@8
_KdpReport@24
_KdpReportCommandStringStateChange@12
_KdpReportExceptionStateChange@12
_KdpReportLoadSymbolsStateChange@16
_KdpRestoreAllBreakpoints@0
_KdpRestoreBreakPointEx@12
_KdpRestoreBreakpoint@12
_KdpSanitizeContextFlags@12
_KdpSearchMemory@12
_KdpSearchPhysicalPage@20
_KdpSearchPhysicalPageRange@4
_KdpSendWaitContinue@16
_KdpSetBusData@12
_KdpSetCommonState@12
_KdpSetContext@12
_KdpSetContextEx@12
_KdpSetContextState@8
_KdpSetOwedBreakpoints@4
_KdpStub@24
_KdpSuspendAllBreakpoints@0
_KdpSuspendBreakpoint@4
_KdpSwitchProcessor@12
_KdpSymbol@28
_KdpSysCheckLowMemory@4
_KdpSysGetVersion@4
_KdpSysReadBusData@28
_KdpSysReadControlSpace@24
_KdpSysReadIoSpace@32
_KdpSysReadMsr@8
_KdpSysWriteBusData@28
_KdpSysWriteControlSpace@24
_KdpSysWriteIoSpace@32
_KdpSysWriteMsr@8
_KdpTimeSlipDpcRoutine@16
_KdpTimeSlipWork@4
_KdpTrap@24
_KdpWriteBreakPointEx@12
_KdpWriteBreakpoint@12
_KdpWriteControlSpace@12
_KdpWriteCustomBreakpoint@12
_KdpWriteInstructionBuffer@16
_KdpWriteIoSpace@12
_KdpWriteIoSpaceExtended@12
_KdpWriteMachineSpecificRegister@12
_KdpWritePhysicalMemory@12
_KdpWriteVirtualMemory@12
_Ke386ConfigureCyrixProcessor@0
_Ke386CyrixId@0
_Ke386GetGdtEntryThread@12
_Ke386IoSetAccessProcess@8
_Ke386QueryIoAccessMap@8
_Ke386SetDescriptorProcess@16
_Ke386SetIoAccessMap@8
_Ke386SetLdtProcess@12
_Ke386SetVdmInterruptHandler@20
_KeAbEntryFree@8
_KeAbInitialize@0
_KeAbInitializeThreadState@4
_KeAbPostRelease@4
_KeAbPostReleaseEx@8
_KeAbPreAcquire@12
_KeAbPreWait@4
_KeAbProcessBaseIoPriorityChange@12
_KeAbThreadAreAllEntriesFree@4
_KeAcquireInterruptSpinLock@4
_KeAcquireSpinLock@8
_KeAcquireSpinLockAtDpcLevel@4
_KeAddGroupAffinityEx@12
_KeAddProcessorAffinityEx@8
_KeAddProcessorGroupAffinity@8
_KeAddSystemServiceTable@20
_KeAdjustInterruptTime@12
_KeAlertResumeThread@4
_KeAlertThread@8
_KeAlertThreadByThreadId@4
_KeAllocateCalloutStack@4
_KeAllocateCalloutStackEx@16
_KeAllocateInterrupt@4
_KeAllocateXStateContext@12
_KeAndAffinityEx@12
_KeAndGroupAffinityEx@12
_KeAreAllApcsDisabled@0
_KeAreApcsDisabled@0
_KeAreInterruptsEnabled@0
_KeAttachProcess@4
_KeBalanceSetManager@4
_KeBoostPriorityThread@8
_KeBugCheck2@24
_KeBugCheck@4
_KeBugCheckAnsiToUnicode@8
_KeBugCheckEx@20
_KeBugCheckUnicodeToAnsi@12
_KeBuildLogicalProcessorSystemInformation@16
_KeCancelTimer2@8
_KeCancelTimer@4
_KeCancelTimerInternal@16
_KeCapturePersistentThreadState@32
_KeCheckForTimer@8
_KeCheckProcessorAffinityEx@8
_KeCheckProcessorGroupAffinity@8
_KeCleanupThreadState@4
_KeClearEvent@4
_KeClockTimerPowerChange@4
_KeComplementAffinityEx@8
_KeConfigureHeteroProcessors@8
_KeConnectInterrupt@12
_KeContextFromKframes@12
_KeContextToKframes@20
_KeConvertAuxiliaryCounterToPerformanceCounter@16
_KeConvertPerformanceCounterToAuxiliaryCounter@16
_KeCopyAffinityEx@8
_KeCountSetBitsAffinityEx@4
_KeCountSetBitsGroupAffinity@4
_KeCpuSetQueryUnparkRecommendation@12
_KeCpuSetReportParkedProcessors@8
_KeDelayExecutionThread@12
_KeDeleteThread@4
_KeDeregisterBoundCallback@4
_KeDeregisterBugCheckCallback@4
_KeDeregisterBugCheckReasonCallback@4
_KeDeregisterNmiCallback@4
_KeDeregisterObjectNotification@8
_KeDeregisterProcessorChangeCallback@4
_KeDetachProcess@0
_KeDisableInterrupts@0
_KeDisableProfiling@8
_KeDisableQueueingPriorityIncrement@8
_KeDisableTimer2@16
_KeDisconnectInterrupt@12
_KeDispatchSecondaryInterrupt@12
_KeEnableProfiling@20
_KeEnterCriticalRegion@0
_KeEnterGuardedRegion@0
_KeEnterKernelDebugger@0
_KeEnumerateKernelStackSegments@12
_KeEnumerateNextProcessor@8
_KeEnumerateProcessorDpcs@16
_KeEnumerateQueueApc@16
_KeEstimateClockTickDuration@28
_KeExpandKernelStackAndCallout@12
_KeExpandKernelStackAndCalloutEx@20
_KeExpandKernelStackAndCalloutInternal@20
_KeFindConfigurationEntry@16
_KeFindConfigurationNextEntry@20
_KeFindFirstSetLeftAffinityEx@4
_KeFindFirstSetLeftGroupAffinity@4
_KeFindFirstSetRightAffinityEx@4
_KeFindFirstSetRightGroupAffinity@4
_KeFirstGroupAffinityEx@8
_KeFlushCurrentTb@0
_KeFlushEntireTb@8
_KeFlushIoBuffers@12
_KeFlushMultipleRangeCurrentTb@12
_KeFlushMultipleRangeTb@16
_KeFlushProcessTb@4
_KeFlushProcessWriteBuffers@4
_KeFlushQueuedDpcs@0
_KeFlushTb@8
_KeFoldProcessStatisticsThread@4
_KeForceEnableNx@0
_KeForceResumeProcess@4
_KeForceResumeThread@4
_KeFreeCalloutStack@4
_KeFreeInterrupt@4
_KeFreeXStateContext@4
_KeFreezeExecution@8
_KeFreezeProcess@8
_KeGenericCallDpc@8
_KeGenericProcessorCallback@16
_KeGetAffinitizedInterruptsInfo@4
_KeGetBugMessageResourceEntry@4
_KeGetBugMessageText@8
_KeGetClockOwner@0
_KeGetClockTimerResolution@8
_KeGetCurrentNodeNumber@0
_KeGetCurrentProcessorNumberEx@4
_KeGetCurrentStackPointer@0
_KeGetCurrentThread@0
_KeGetDynamicTickDisableReason@0
_KeGetExecuteOptions@8
_KeGetNextClockTickDuration@0
_KeGetNextKernelStackSegment@12
_KeGetPreviousMode@0
_KeGetProcessorIndexFromNumber@4
_KeGetProcessorNumberFromIndex@8
_KeGetRecommendedSharedDataAlignment@0
_KeGetSchedulingGroupSize@0
_KeGetXSaveFeatureFlags@0
_KeHwPolicyLocateResource@20
_KeI386GetExceptionChainTerminator@0
_KeI386InitializeSEHOP@0
_KeI386VdmInitialize@0
_KeInitThread@36
_KeInitializeAffinityEx@4
_KeInitializeApc@32
_KeInitializeClock@8
_KeInitializeCrashDumpHeader@20
_KeInitializeDeviceQueue@4
_KeInitializeDpc@12
_KeInitializeEntropySystem@12
_KeInitializeEnumerationContext@8
_KeInitializeEnumerationContextFromAffinity@12
_KeInitializeEnumerationContextFromGroup@8
_KeInitializeEvent@12
_KeInitializeInterrupt@52
_KeInitializeInterruptEx@64
_KeInitializeMutant@8
_KeInitializeMutex@8
_KeInitializePriQueue@8
_KeInitializeProcess@24
_KeInitializeProfile@36
_KeInitializeProfileCallback@16
_KeInitializeQueue@8
_KeInitializeSecondaryInterruptServices@4
_KeInitializeSemaphore@12
_KeInitializeThreadedDpc@12
_KeInitializeTimer2@16
_KeInitializeTimer@4
_KeInitializeTimerEx@8
_KeInitializeTimerTable@4
_KeInsertByKeyDeviceQueue@12
_KeInsertDeviceQueue@8
_KeInsertHeadQueue@8
_KeInsertPriQueue@20
_KeInsertQueue@8
_KeInsertQueueApc@16
_KeInsertQueueDpc@12
_KeInsertSchedulingGroup@16
_KeIntSteerAssignCpuSet@12
_KeIntSteerAssignCpuSetForGsiv@12
_KeIntSteerSnapPerf@8
_KeInterlockedClearProcessorAffinityEx@8
_KeInterlockedSetProcessorAffinityEx@8
_KeInvalidateAllCaches@0
_KeIpiGenericCall@8
_KeIsApcRunningThread@4
_KeIsAttachedProcess@0
_KeIsEmptyAffinityEx@4
_KeIsEqualAffinityEx@8
_KeIsExecutingDpc@0
_KeIsSingleGroupAffinityEx@8
_KeIsSubsetAffinityEx@8
_KeIsWaitListEmpty@4
_KeKeepProcessorAlive@8
_KeLeaveCriticalRegion@0
_KeLeaveGuardedRegion@0
_KeLoadMTRR@4
_KeLowerIrql@4
_KeMarkHiberPhase@4
_KeMaskInterrupt@16
_KeNotifyProcessorFreezeSupported@0
_KeNumaInitialize@0
_KeOptimizeProcessorControlState@8
_KeOrAffinityEx@12
_KePerformGroupConfiguration@4
_KePollFreezeExecution@0
_KePrepareClockTimerForIdle@16
_KeProcessorGroupAffinity@8
_KeProcessorProfileControlArea@12
_KeProfileInterruptWithSource@8
_KePulseEvent@12
_KeQueryActiveGroupCount@0
_KeQueryActiveProcessorAffinity@4
_KeQueryActiveProcessorCount@4
_KeQueryActiveProcessorCountEx@4
_KeQueryActiveProcessors@0
_KeQueryActualAffinityThread@8
_KeQueryAffinityProcess@16
_KeQueryAffinityThread@8
_KeQueryAuxiliaryCounterFrequency@4
_KeQueryBasePriorityThread@4
_KeQueryBootTimeValues@12
_KeQueryCpuSetInformation@16
_KeQueryCpuSetsProcess@16
_KeQueryCpuSetsThread@12
_KeQueryCurrentStackInformation@12
_KeQueryDpcWatchdogInformation@4
_KeQueryEffectiveBasePriorityThread@4
_KeQueryEffectivePriorityThread@4
_KeQueryGroupAffinity@4
_KeQueryGroupAffinityEx@8
_KeQueryGroupMaskProcess@4
_KeQueryHardwareCounterConfiguration@12
_KeQueryHighestNodeNumber@0
_KeQueryInterruptTime@0
_KeQueryInterruptTimePrecise@4
_KeQueryIntervalProfile@4
_KeQueryLogicalProcessorRelationship@16
_KeQueryMaximumGroupCount@0
_KeQueryMaximumProcessorCount@0
_KeQueryMaximumProcessorCountEx@4
_KeQueryNodeActiveAffinity@12
_KeQueryNodeMaximumProcessorCount@4
_KeQueryNumaGraph@0
_KeQueryOwnerMutant@8
_KeQueryPriorityThread@4
_KeQueryRuntimeThread@8
_KeQuerySchedulingGroupHistory@16
_KeQuerySchedulingGroupReadyTime@4
_KeQuerySystemAllowedCpuSetAffinity@8
_KeQuerySystemTime@4
_KeQuerySystemTimePrecise@4
_KeQuerySystemTimeUnsafe@0
_KeQueryTickCount@4
_KeQueryTimeIncrement@0
_KeQueryTimerDueTime@4
_KeQueryTotalCycleTimeThread@8
_KeQueryUnbiasedInterruptTime@0
_KeQueryValuesThread@8
_KeRaiseIrql@8
_KeRaiseIrqlToDpcLevel@0
_KeRaiseUserException@4
_KeReadStateEvent@4
_KeReadStateMutant@4
_KeReadStateQueue@4
_KeReadStateSemaphore@4
_KeReadStateTimer@4
_KeReadyThread@4
_KeRebaselineInterruptTime@0
_KeRebaselineSystemTime@0
_KeRegisterBoundCallback@4
_KeRegisterBugCheckCallback@20
_KeRegisterBugCheckReasonCallback@16
_KeRegisterNmiCallback@8
_KeRegisterObjectNotification@12
_KeRegisterProcessorChangeCallback@12
_KeReleaseInterruptSpinLock@8
_KeReleaseMutant@16
_KeReleaseMutex@8
_KeReleaseSemaphore@16
_KeReleaseSpinLock@8
_KeReleaseSpinLockFromDpcLevel@4
_KeRemoveByKeyDeviceQueue@8
_KeRemoveByKeyDeviceQueueIfBusy@8
_KeRemoveDeviceQueue@4
_KeRemoveEntryDeviceQueue@8
_KeRemoveGroupAffinityEx@12
_KeRemovePriQueue@16
_KeRemovePriorityBoost@4
_KeRemoveProcessorAffinityEx@8
_KeRemoveProcessorGroupAffinity@8
_KeRemoveQueue@12
_KeRemoveQueueApc@4
_KeRemoveQueueDpc@4
_KeRemoveQueueDpcEx@8
_KeRemoveQueueEntry@8
_KeRemoveQueueEx@24
_KeRemoveSchedulingGroup@4
_KeRemoveSystemServiceTable@4
_KeReportCacheIncoherentDevice@0
_KeRequestTerminationThread@4
_KeReservePrivilegedPages@12
_KeResetEvent@4
_KeRestoreExtendedAndSupervisorState@4
_KeRestoreExtendedProcessorState@4
_KeRestoreFloatingPointState@4
_KeRestoreMtrrBroadcast@0
_KeRestorePAT@0
_KeRestoreProcessorSpecificFeatures@0
_KeResumeClockTimer@0
_KeResumeClockTimerFromIdle@4
_KeResumeClockTimerSafe@0
_KeResumeThread@4
_KeRetryOutswapProcess@4
_KeRevertToUserAffinityThread@0
_KeRevertToUserAffinityThreadEx@4
_KeRevertToUserGroupAffinityThread@4
_KeRundownApcQueues@4
_KeRundownQueue@4
_KeRundownQueueEx@8
_KeSaveExtendedAndSupervisorState@12
_KeSaveExtendedProcessorState@12
_KeSaveFloatingPointState@4
_KeSaveStateForHibernate
_KeSelectIdealProcessor@12
_KeSetActualBasePriorityThread@8
_KeSetAffinityProcess@16
_KeSetAffinityThread@8
_KeSetAutoAlignmentProcess@8
_KeSetBasePriorityThread@8
_KeSetCheckStackExtentsProcess@8
_KeSetCoalescableTimer@24
_KeSetCpuSetsProcess@16
_KeSetDisableBoostProcess@8
_KeSetDisableBoostThread@8
_KeSetDisableQuantumProcess@8
_KeSetDmaIoCoherency@4
_KeSetEvent@12
_KeSetEventBoostPriority@8
_KeSetEventBoostPriorityEx@20
_KeSetExecuteOptions@8
_KeSetHardwareCounterConfiguration@8
_KeSetHeteroCpuPolicyThread@12
_KeSetIdealProcessorThread@8
_KeSetIdealProcessorThreadByNumber@12
_KeSetIdealProcessorThreadEx@12
_KeSetImportanceDpc@8
_KeSetIntervalProfile@8
_KeSetKernelStackSwapEnable@4
_KeSetLegacyAffinityThread@8
_KeSetMaxDynamicTickDuration@8
_KeSetMaximumCountPriQueue@8
_KeSetPriorityAndQuantumProcess@16
_KeSetPriorityThread@8
_KeSetProcess@4
_KeSetProcessSchedulingGroup@8
_KeSetProfileIrql@4
_KeSetQuantumProcess@8
_KeSetSchedulingGroupCpuRates@12
_KeSetSchedulingGroupCycleNotification@16
_KeSetSchedulingGroupRankBias@8
_KeSetSchedulingGroupWeights@12
_KeSetSelectedCpuSetsThread@12
_KeSetSystemAffinityThread@4
_KeSetSystemAffinityThreadEx@4
_KeSetSystemAllowedCpuSets@8
_KeSetSystemGroupAffinityThread@8
_KeSetSystemTime@12
_KeSetTagCpuSets@16
_KeSetTargetProcessorDpc@8
_KeSetTargetProcessorDpcEx@8
_KeSetThreadChargeOnlySchedulingGroup@8
_KeSetTimeAdjustment@4
_KeSetTimer2@24
_KeSetTimer@16
_KeSetTimerEx@20
_KeSetUserHeteroCpuPolicyThread@8
_KeShouldYieldProcessor@0
_KeSignalCallDpcDone@4
_KeSignalCallDpcSynchronize@4
_KeStackAttachProcess@8
_KeStallWhileFrozen@4
_KeStartAllProcessors@0
_KeStartDynamicProcessor@16
_KeStartProfile@4
_KeStartThread@12
_KeStopProfile@4
_KeSubtractAffinityEx@12
_KeSuspendClockTimer@0
_KeSuspendClockTimerSafe@0
_KeSuspendThread@4
_KeSwapDirectoryTableBase@24
_KeSwapProcessOrStack@4
_KeSweepLocalCaches@0
_KeSwitchFrozenProcessor@4
_KeSynchronizeExecution@12
_KeSynchronizeTimeToQpc@8
_KeSynchronizeWithDynamicProcessors@0
_KeSystemFullyCacheCoherent@0
_KeTerminateThread@4
_KeTestAlertThread@4
_KeThawExecution@4
_KeThawProcess@8
_KeTimeOutQueueWaiters@16
_KeTransitionProcessorParkState@4
_KeTryToFreezeThreadStack@8
_KeTryToInsertQueueApc@12
_KeUnmaskInterrupt@12
_KeUnstackDetachProcess@4
_KeUpdateGroupSchedulingConstants@0
_KeUpdateProcessSharedReadyQueueAffinity@4
_KeUpdateThreadHeteroPolicy@4
_KeUpdateThreadSchedulingProperties@12
_KeUpdateThreadTag@8
_KeUpdateTotalCyclesCurrentThread@8
_KeUserModeCallback@20
_KeValidateBugCheckCallbackRecord@12
_KeVdmInsertQueueApc@32
_KeVerifyContextRecord@8
_KeWaitForAlertByThreadId@12
_KeWaitForAllContextSwaps@4
_KeWaitForMultipleObjects@32
_KeWaitForSingleObject@20
_KeWriteProtectPAT@4
_KevSkipVerification@0
_Ki386AdjustEsp0@4
_Ki386AdlibEmulation@12
_Ki386CheckDivideByZeroTrap@4
_Ki386DispatchOpcode@4
_Ki386DispatchOpcodeV86@4
_Ki386EnableCurrentLargePage@8
_Ki386EnableDE@4
_Ki386EnableGlobalPage@4
_Ki386FatalExceptionHandler@16
_Ki386FlushTargetDescriptors@16
_Ki386GetSelectorParameters@16
_Ki386LoadTargetInt21Entry@16
_Ki386LoadTargetLdtr@16
_Ki386VdmDispatchIo@20
_Ki386VdmDispatchStringIo@32
_Ki386VdmEnablePentiumExtentions@4
_Ki386VdmReflectException@4
_Ki386VdmReflectException_A@4
_Ki386VdmSegmentNotPresent@0
_KiAbApplyWakeupBoost@12
_KiAbCompareSnappedEntryState@8
_KiAbCpuBoostOwners@20
_KiAbDeferredProcessingWorker@16
_KiAbDetermineMaxWaiterPriority@8
_KiAbDetermineMinOwnerPriority@8
_KiAbEntryGetCpuPriorityKey@4
_KiAbEntryGetLockedHeadEntry@12
_KiAbEntryRemoveBoosts@8
_KiAbEntryRemoveFromTree@4
_KiAbEntryUpdateOwnerTreePosition@8
_KiAbEntryUpdateWaiterTreePosition@8
_KiAbEntryVerifyFree@8
_KiAbFindWakeupLockEntry@8
_KiAbIoBoostOwners@16
_KiAbOwnerComputeCpuPriorityKey@4
_KiAbProcessLocksWorker@16
_KiAbProcessThreadLocks@28
_KiAbProcessThreadPriorityModification@12
_KiAbQueueAutoBoostDpc@4
_KiAbSetMinimumThreadPriority@20
_KiAbThreadBoostIoPriority@12
_KiAbThreadClearAcquiredLockEntry@12
_KiAbThreadInsertList@12
_KiAbThreadUnboostCpuPriority@8
_KiAbTryDecrementIoWaiterCount@8
_KiAbTryIncrementIoWaiterCount@8
_KiAbWaiterComputeCpuPriorityKey@4
_KiAcquireInterruptConnectLock@12
_KiAcquireReleaseThreadLock@4
_KiAcquireThreadStateLock@12
_KiAcquireTimer2CollectionLockIfInserted@4
_KiAcquireTimer2LockUnlessDisabled@4
_KiAddProcessorToGroupDatabase@8
_KiAddSynchCounters@8
_KiAddThreadToReadyQueue@20
_KiAddThreadToScbQueue@16
_KiAdjustSimultaneousMultiThreadingCharacteristics@0
_KiAdjustTimer2DueTimes@4
_KiAdjustTimerDueTimes@12
_KiAdjustTimersAfterDripsExit@4
_KiAllProcessorsStarted@0
_KiAllocateCpuSetData@4
_KiAltSystemService
_KiAssignAdjustableNodes@16
_KiAssignAllNodesToGroup0@0
_KiAssignFixedNodes@24
_KiAssignSchedulingGroupWeights@12
_KiAttachProcess@20
_KiBalanceSetManagerDeferredRoutine@16
_KiBugCheck2@24
_KiBugCheckDebugBreak@4
_KiBugCheckProgress@4
_KiCalibrateTimeAdjustment@4
_KiCallUserMode@16
_KiCallbackReturn
_KiCancelTimer@8
_KiChainedDispatch@0
_KiChargeSchedulingGroupCycleTime@8
_KiCheckForDuplicateBugCheckCallback@8
_KiCheckForEffectivePriorityChange@8
_KiCheckForKernelApcDelivery@0
_KiCheckStall@8
_KiChooseLowestRankedThread@12
_KiChooseTargetProcessor@16
_KiClearBusyBitInTssDescriptor@4
_KiClearPriorityFloor@12
_KiCommitNodeAssignment@4
_KiCommitThreadWait@20
_KiCompareVarMtrr@0
_KiCompleteKernelInit@12
_KiComputeCpuSetAffinity@4
_KiComputeCpuSetAffinityMask@16
_KiComputeGroupSchedulingRank@12
_KiComputeProcessorDataSize@12
_KiComputeThreadAffinity@4
_KiConfigureCpuSetSchedulingInformation@4
_KiConfigureDynamicProcessor@0
_KiConfigureHeteroProcessorsTarget@16
_KiConfigureProcessorBlock@8
_KiConfigureSchedulingInformation@8
_KiConnectInterrupt@4
_KiConnectSecondaryInterrupt@4
_KiConnectVectorAndInterruptObject@8
_KiContextFromNpxFrame@20
_KiContextToNpxFrame@20
_KiContinue@12
_KiContinuePreviousModeUser@12
_KiCopyCounters@4
_KiCopyCountersWorker@8
_KiCreateCpuSetForProcessor@4
_KiDebugService
_KiDeliverApc@12
_KiDetachProcess@8
_KiDetectAccessBitErrata@4
_KiDisableCacheErrataSource@0
_KiDisconnectInterruptCommon@12
_KiDisconnectInterruptInternal@8
_KiDisconnectSecondaryInterrupt@8
_KiDisconnectSecondaryInterruptInternal@8
_KiDispatchException@20
_KiDispatchInterrupt@4
_KiDispatchPassiveInterrupts@4
_KiDisplayBlueScreen@4
_KiDoesProcessorMatchErrata@8
_KiDpcWatchdog@16
_KiDummyDoubleFaultHandler@0
_KiDummyNmiHandler@0
_KiDumpParameterImages@16
_KiDynamicProcessorAddNotification@24
_KiEmulateAtlThunk@20
_KiEnableFastSyscallReturn@0
_KiEnableGroupScheduling@0
_KiEnableHeadlessBlueScreen@0
_KiEnableNXSupport@0
_KiEnableNpxStateSwitching@0
_KiEnableXSave@0
_KiEndCounterAccumulation@4
_KiEntropyDpcRoutine@16
_KiEspFromTrapFrame@4
_KiEspToTrapFrame@8
_KiEvaluateGroupSchedulingPreemption@16
_KiExceptionExit@0
_KiExecuteDpc@4
_KiExitDispatcher@20
_KiExpandKernelStackAndCalloutOnStackSegment@20
_KiExpandKernelStackAndCalloutSwitchStack@20
_KiExpireTimer2@20
_KiExtendProcessAffinity@8
_KiFastCallEntry
_KiFastReadyThread@4
_KiFatalExceptionHandler@16
_KiFatalFilter@8
_KiFinalizeTimer2Disablement@4
_KiFindFirstAvailableNode@4
_KiFindFirstPassiveInterruptObject@4
_KiFindNextTimerDueTime@16
_KiFlushCacheLines@12
_KiFlushDcache@0
_KiFlushDescriptors@0
_KiFlushIcache@0
_KiFlushQueueApc@8
_KiFlushQueuedDpcsWorker@8
_KiFlushRangeAllCaches@20
_KiFlushReadyLists@12
_KiFlushTargetEntireTb@16
_KiFlushTargetMultipleRangeTb@16
_KiFlushTargetProcessTb@16
_KiFlushTargetSingleTb@16
_KiFlushWriteBuffersTarget@16
_KiForceSymbolReferences@0
_KiForegroundTimerCallback@8
_KiFreezeSingleThread@8
_KiFreezeTargetExecution@8
_KiFxstateRestore@4
_KiFxstateSave@4
_KiGenerateHeteroSets@20
_KiGenericCallDpcWorker@8
_KiGetCacheInformation@4
_KiGetCpuSetData@8
_KiGetCpuVendor@0
_KiGetCurrentGroupCount@0
_KiGetDeepIdleProcessors@8
_KiGetFeatureBits@0
_KiGetInterruptObjectFromSecondaryVector@4
_KiGetInterruptObjectFromVector@4
_KiGetL2L3AssociativityAmd@4
_KiGetNextClockOwner@4
_KiGetNextTimer2ExpirationDueTime@12
_KiGetNextTimerExpirationDueTime@28
_KiGetProcessorInformation@16
_KiGetThreadEffectiveRankNonZero@12
_KiGetTickCount
_KiGetVectorInfo@8
_KiGetXSaveSupportedFeatures@8
_KiGroupSchedulingGenerationEnd@16
_KiGroupSchedulingMoveThread@12
_KiGroupSchedulingQuantumEnd@16
_KiHandleBound@0
_KiHandleNmi@0
_KiHeadlessDisplayString@8
_KiHeteroChooseTargetProcessor@16
_KiHwPolicyFindDriverImage@4
_KiI386PentiumLockErrataFixup@0
_KiInSwapKernelStacks@4
_KiInSwapProcesses@4
_KiInitDynamicProcessorIpi@16
_KiInitMachineDependent@0
_KiInitPrcb@8
_KiInitSystem@0
_KiInitializeCacheErrataSupport@4
_KiInitializeContextThread@20
_KiInitializeDpcList@4
_KiInitializeDynamicProcessor@4
_KiInitializeDynamicProcessorDpc@16
_KiInitializeFatalTSS@20
_KiInitializeGSCookieValue@0
_KiInitializeIdleThread@16
_KiInitializeIdtGates@12
_KiInitializeKernel@24
_KiInitializeMTRR@4
_KiInitializeMachineType@0
_KiInitializeMutant@12
_KiInitializeNXSupport@0
_KiInitializeNxSupportDiscard@0
_KiInitializePAT@0
_KiInitializePcr@32
_KiInitializePrcbContext@8
_KiInitializeProcessor@4
_KiInitializeProcessorState@40
_KiInitializeTRTSS@8
_KiInitializeTimer2Data@0
_KiInitializeUserApc@24
_KiInitializeXSave@8
_KiInsertDeferredPreemptionApc@12
_KiInsertInterruptObjectOrdered@8
_KiInsertQueueDpc@20
_KiInsertSchedulingGroupQueue@12
_KiInsertSecondarySignalList@4
_KiInsertTimer2WithCollectionLockHeld@12
_KiIntRedirectAllocateObject@8
_KiIntRedirectConnnect@12
_KiIntRedirectDisconnect@8
_KiIntRedirectEnable@8
_KiIntRedirectQueueRequestOnProcessor@8
_KiIntSteerAssignCpuSet@12
_KiIntSteerCalculateDistribution@8
_KiIntSteerChooseInitialTargetProcessors@20
_KiIntSteerClearCpuSetAssignment@4
_KiIntSteerComputeCpuSet@8
_KiIntSteerConnect@12
_KiIntSteerDisable@8
_KiIntSteerDistributeInterrupts@0
_KiIntSteerEnable@8
_KiIntSteerEnabled@0
_KiIntSteerEventTraceControlCallback@36
_KiIntSteerGetLineInformation@12
_KiIntSteerInit@0
_KiIntSteerInitPrcb@4
_KiIntSteerLoadCompare
_KiIntSteerLogMask@4
_KiIntSteerLogProc@4
_KiIntSteerLogState@8
_KiIntSteerLogStatus@4
_KiIntSteerSetDestination@8
_KiIntSteerVerifyDestination@8
_KiInterruptDispatch@0
_KiInterruptDispatchCommon@20
_KiInterruptMessageDispatch@8
_KiIntersectFeaturesWithLoader@8
_KiIntersectFeaturesWithPolicy@8
_KiIntersectFeaturesWithTest@4
_KiInvalidateAllCachesTarget@16
_KiInvalidateRangeAllCachesTarget@16
_KiInvokeBugCheckEntryCallbacks@0
_KiInvokeInterruptServiceRoutine@12
_KiIpiGenericCallTarget@16
_KiIpiProcessRequests@8
_KiIpiSendFlushAwakePacket@24
_KiIpiSendPacket@24
_KiIpiSendRequest@24
_KiIpiServiceRoutine@8
_KiIpiUpdateThreadTag@16
_KiIsCommitFailTerminationRequested@4
_KiIsIntelPebsSupported@4
_KiIsInterruptTypeSecondary@4
_KiIsNXSupported@0
_KiIsNextScheduledScbThread@12
_KiIsNodeFull@4
_KiIsXSaveFeatureAllowed@16
_KiLoadFastSyscallMachineSpecificRegisters@0
_KiLoadIopmOffset@16
_KiLoadMTRRTarget@4
_KiLoadPAT@4
_KiLoadPATTarget@16
_KiLockStepExecution@4
_KiMarkMtrrHiberPhase@0
_KiMaskInterruptDpc@16
_KiMaskInterruptInternal@8
_KiMaskSecondaryInterruptInternal@8
_KiMaskToLength@8
_KiMoveApcState@8
_KiMoveScbThreadsToNewReadylist@16
_KiNodeCostSort
_KiNonNumaQueryNodeCapacity@8
_KiNonNumaQueryNodeDistance@12
_KiOutSwapKernelStacks@0
_KiOutSwapProcesses@4
_KiParseLoadOptions@4
_KiPassiveIsrWatchdog@16
_KiPassiveRelease@0
_KiPcToFileHeader@16
_KiPerformGroupConfiguration@4
_KiPollFreezeExecution@0
_KiPrepareReadyThreadForRescheduling@12
_KiPreprocessAccessViolation@12
_KiProcessDisconnectList@4
_KiProcessExpiredTimerList@16
_KiProcessPendingDisconnect@12
_KiProcessPendingForegroundBoosts@16
_KiProcessSecondarySignalList@16
_KiProcessorCallbackNop@8
_KiProcessorStart@0
_KiQuantumEnd@0
_KiQueryProcessorNode@12
_KiRaiseAssertion
_KiRaiseException@20
_KiRaiseSecurityCheckFailure
_KiReadFixedMtrr@4
_KiReadyOutSwappedThreads@8
_KiRecomputeGroupSchedulingRank@12
_KiRemoveProcessorFromGroupDatabase@4
_KiRemoveQueueApc@4
_KiRemoveThreadFromAnyReadyQueue@16
_KiRemoveThreadFromScbQueue@16
_KiRemoveThreadFromSchedulingGroup@4
_KiRemoveTimer2@4
_KiRequestTimer2Expiration@0
_KiRescheduleThreadAfterAffinityChange@24
_KiResetClockInterval@4
_KiRestoreFeatureBits@0
_KiRestoreProcessorControlState@4
_KiRestoreProcessorState@8
_KiRestoreXSaveSupport@0
_KiResumeClockTimer@0
_KiResumeThread@12
_KiRundownMutants@4
_KiSanitizeProfileInterval@4
_KiSaveBootProcessorIdt@0
_KiSaveCurrentEtwTraceBuffer@0
_KiSaveProcessorControlState@4
_KiSaveProcessorDebugState@16
_KiSaveProcessorState@8
_KiScanBugCheckCallbackList@0
_KiScheduleNextForegroundBoost@4
_KiSchedulerApc@12
_KiSchedulerApcNop@20
_KiSchedulerApcRundown@4
_KiSchedulerApcTerminate@20
_KiSegSsFromTrapFrame@4
_KiSegSsToTrapFrame@8
_KiSelectIdealProcessor@12
_KiSelectLowestRankedThread@4
_KiSelectProcessorToPreempt@16
_KiSelectReadyThreadEx@12
_KiSelectThreadFromScbQueue@20
_KiSelectThreadFromSchedulingGroup@12
_KiSendClockInterruptToClockOwner@0
_KiSendFreeze@8
_KiSendThawExecution@4
_KiSetCacheInformationAmd@4
_KiSetCacheInformationIntel@4
_KiSetClockInterval@8
_KiSetClockIntervalToMinimumRequested@0
_KiSetClockTickRate@4
_KiSetDebuggerOwner@4
_KiSetHaltedNmiandDoubleFaultHandler@0
_KiSetHeteroPolicyThread@16
_KiSetIdealNodeProcessByGroup@12
_KiSetIntervalWorker@8
_KiSetIoMap@16
_KiSetPriorityFloor@12
_KiSetProcessorIdle@12
_KiSetProcessorType@0
_KiSetStandardizedCacheInformation@8
_KiSetSystemAffinityThread@16
_KiSetSystemAffinityThreadToProcessor@8
_KiSetSystemTimeDpc@16
_KiSetThreadSchedulingGroup@8
_KiSetTimerEx@24
_KiSetupForInstrumentationReturn@8
_KiSetupTimeIncrement@12
_KiShouldScanSharedReadyQueue@4
_KiShouldSetClockIntervalForHighResolutionTimers@16
_KiShuffleAssignedNodes@16
_KiSignalThreadForApc@12
_KiStackAttachProcess@12
_KiStartDpcThread@4
_KiStartDynamicProcessor@16
_KiStartProfileTarget@4
_KiStartUnexpectedRange
_KiStartWaitAcknowledge@0
_KiStopProfileTarget@4
_KiSuspendClockTimer@0
_KiSuspendThread@8
_KiSwapDirectoryTableBaseTarget@16
_KiSwitchKernelStackAndCallout@16
_KiSynchCounterSetCallback@12
_KiSynchNumaCounterSetCallback@12
_KiSynchronizePassiveInterruptExecution@12
_KiSystemFatalException
_KiSystemService
_KiSystemStartup@4
_KiThawSingleThread@12
_KiThreadStartup@4
_KiTimer2Expiration@16
_KiTimer2IsFullyDisabled@4
_KiTimer2TypeFlagsToEtwFlags@4
_KiTimerExpirationDpc@16
_KiTimerWaitTest@12
_KiTraceCancelTimer2@8
_KiTraceSetTimer2@12
_KiTraceSetTimer@12
_KiTransitionSchedulingGroupGeneration@16
_KiTrap00
_KiTrap01
_KiTrap02
_KiTrap03
_KiTrap04
_KiTrap05
_KiTrap06
_KiTrap07
_KiTrap08
_KiTrap09
_KiTrap0A
_KiTrap0B
_KiTrap0C
_KiTrap0D
_KiTrap0E
_KiTrap0F
_KiTrap10
_KiTrap11
_KiTrap13
_KiTrapFrameToSseFrame@4
_KiTriggerForegroundBoostDpc@16
_KiTryForceEnableNx@0
_KiUncommitNodeAssignment@4
_KiUnexpectedInterrupt
_KiUnexpectedInterrupt0
_KiUnexpectedInterrupt1
_KiUnexpectedInterrupt10
_KiUnexpectedInterrupt100
_KiUnexpectedInterrupt101
_KiUnexpectedInterrupt102
_KiUnexpectedInterrupt103
_KiUnexpectedInterrupt104
_KiUnexpectedInterrupt105
_KiUnexpectedInterrupt106
_KiUnexpectedInterrupt107
_KiUnexpectedInterrupt108
_KiUnexpectedInterrupt109
_KiUnexpectedInterrupt11
_KiUnexpectedInterrupt110
_KiUnexpectedInterrupt111
_KiUnexpectedInterrupt112
_KiUnexpectedInterrupt113
_KiUnexpectedInterrupt114
_KiUnexpectedInterrupt115
_KiUnexpectedInterrupt116
_KiUnexpectedInterrupt117
_KiUnexpectedInterrupt118
_KiUnexpectedInterrupt119
_KiUnexpectedInterrupt12
_KiUnexpectedInterrupt120
_KiUnexpectedInterrupt121
_KiUnexpectedInterrupt122
_KiUnexpectedInterrupt123
_KiUnexpectedInterrupt124
_KiUnexpectedInterrupt125
_KiUnexpectedInterrupt126
_KiUnexpectedInterrupt127
_KiUnexpectedInterrupt128
_KiUnexpectedInterrupt129
_KiUnexpectedInterrupt13
_KiUnexpectedInterrupt130
_KiUnexpectedInterrupt131
_KiUnexpectedInterrupt132
_KiUnexpectedInterrupt133
_KiUnexpectedInterrupt134
_KiUnexpectedInterrupt135
_KiUnexpectedInterrupt136
_KiUnexpectedInterrupt137
_KiUnexpectedInterrupt138
_KiUnexpectedInterrupt139
_KiUnexpectedInterrupt14
_KiUnexpectedInterrupt140
_KiUnexpectedInterrupt141
_KiUnexpectedInterrupt142
_KiUnexpectedInterrupt143
_KiUnexpectedInterrupt144
_KiUnexpectedInterrupt145
_KiUnexpectedInterrupt146
_KiUnexpectedInterrupt147
_KiUnexpectedInterrupt148
_KiUnexpectedInterrupt149
_KiUnexpectedInterrupt15
_KiUnexpectedInterrupt150
_KiUnexpectedInterrupt151
_KiUnexpectedInterrupt152
_KiUnexpectedInterrupt153
_KiUnexpectedInterrupt154
_KiUnexpectedInterrupt155
_KiUnexpectedInterrupt156
_KiUnexpectedInterrupt157
_KiUnexpectedInterrupt158
_KiUnexpectedInterrupt159
_KiUnexpectedInterrupt16
_KiUnexpectedInterrupt160
_KiUnexpectedInterrupt161
_KiUnexpectedInterrupt162
_KiUnexpectedInterrupt163
_KiUnexpectedInterrupt164
_KiUnexpectedInterrupt165
_KiUnexpectedInterrupt166
_KiUnexpectedInterrupt167
_KiUnexpectedInterrupt168
_KiUnexpectedInterrupt169
_KiUnexpectedInterrupt17
_KiUnexpectedInterrupt170
_KiUnexpectedInterrupt171
_KiUnexpectedInterrupt172
_KiUnexpectedInterrupt173
_KiUnexpectedInterrupt174
_KiUnexpectedInterrupt175
_KiUnexpectedInterrupt176
_KiUnexpectedInterrupt177
_KiUnexpectedInterrupt178
_KiUnexpectedInterrupt179
_KiUnexpectedInterrupt18
_KiUnexpectedInterrupt180
_KiUnexpectedInterrupt181
_KiUnexpectedInterrupt182
_KiUnexpectedInterrupt183
_KiUnexpectedInterrupt184
_KiUnexpectedInterrupt185
_KiUnexpectedInterrupt186
_KiUnexpectedInterrupt187
_KiUnexpectedInterrupt188
_KiUnexpectedInterrupt189
_KiUnexpectedInterrupt19
_KiUnexpectedInterrupt190
_KiUnexpectedInterrupt191
_KiUnexpectedInterrupt192
_KiUnexpectedInterrupt193
_KiUnexpectedInterrupt194
_KiUnexpectedInterrupt195
_KiUnexpectedInterrupt196
_KiUnexpectedInterrupt197
_KiUnexpectedInterrupt198
_KiUnexpectedInterrupt199
_KiUnexpectedInterrupt2
_KiUnexpectedInterrupt20
_KiUnexpectedInterrupt200
_KiUnexpectedInterrupt201
_KiUnexpectedInterrupt202
_KiUnexpectedInterrupt203
_KiUnexpectedInterrupt204
_KiUnexpectedInterrupt205
_KiUnexpectedInterrupt206
_KiUnexpectedInterrupt207
_KiUnexpectedInterrupt21
_KiUnexpectedInterrupt22
_KiUnexpectedInterrupt23
_KiUnexpectedInterrupt24
_KiUnexpectedInterrupt25
_KiUnexpectedInterrupt26
_KiUnexpectedInterrupt27
_KiUnexpectedInterrupt28
_KiUnexpectedInterrupt29
_KiUnexpectedInterrupt3
_KiUnexpectedInterrupt30
_KiUnexpectedInterrupt31
_KiUnexpectedInterrupt32
_KiUnexpectedInterrupt33
_KiUnexpectedInterrupt34
_KiUnexpectedInterrupt35
_KiUnexpectedInterrupt36
_KiUnexpectedInterrupt37
_KiUnexpectedInterrupt38
_KiUnexpectedInterrupt39
_KiUnexpectedInterrupt4
_KiUnexpectedInterrupt40
_KiUnexpectedInterrupt41
_KiUnexpectedInterrupt42
_KiUnexpectedInterrupt43
_KiUnexpectedInterrupt44
_KiUnexpectedInterrupt45
_KiUnexpectedInterrupt46
_KiUnexpectedInterrupt47
_KiUnexpectedInterrupt48
_KiUnexpectedInterrupt49
_KiUnexpectedInterrupt5
_KiUnexpectedInterrupt50
_KiUnexpectedInterrupt51
_KiUnexpectedInterrupt52
_KiUnexpectedInterrupt53
_KiUnexpectedInterrupt54
_KiUnexpectedInterrupt55
_KiUnexpectedInterrupt56
_KiUnexpectedInterrupt57
_KiUnexpectedInterrupt58
_KiUnexpectedInterrupt59
_KiUnexpectedInterrupt6
_KiUnexpectedInterrupt60
_KiUnexpectedInterrupt61
_KiUnexpectedInterrupt62
_KiUnexpectedInterrupt63
_KiUnexpectedInterrupt64
_KiUnexpectedInterrupt65
_KiUnexpectedInterrupt66
_KiUnexpectedInterrupt67
_KiUnexpectedInterrupt68
_KiUnexpectedInterrupt69
_KiUnexpectedInterrupt7
_KiUnexpectedInterrupt70
_KiUnexpectedInterrupt71
_KiUnexpectedInterrupt72
_KiUnexpectedInterrupt73
_KiUnexpectedInterrupt74
_KiUnexpectedInterrupt75
_KiUnexpectedInterrupt76
_KiUnexpectedInterrupt77
_KiUnexpectedInterrupt78
_KiUnexpectedInterrupt79
_KiUnexpectedInterrupt8
_KiUnexpectedInterrupt80
_KiUnexpectedInterrupt81
_KiUnexpectedInterrupt82
_KiUnexpectedInterrupt83
_KiUnexpectedInterrupt84
_KiUnexpectedInterrupt85
_KiUnexpectedInterrupt86
_KiUnexpectedInterrupt87
_KiUnexpectedInterrupt88
_KiUnexpectedInterrupt89
_KiUnexpectedInterrupt9
_KiUnexpectedInterrupt90
_KiUnexpectedInterrupt91
_KiUnexpectedInterrupt92
_KiUnexpectedInterrupt93
_KiUnexpectedInterrupt94
_KiUnexpectedInterrupt95
_KiUnexpectedInterrupt96
_KiUnexpectedInterrupt97
_KiUnexpectedInterrupt98
_KiUnexpectedInterrupt99
_KiUnexpectedInterruptTail
_KiUnmarkTimer2Running@4
_KiUnmaskSecondaryInterruptInternal@8
_KiUnstackDetachProcess@8
_KiUpdateChildrenCpuTarget@8
_KiUpdateCpuTargetByRate@8
_KiUpdateCpuTargetByWeight@8
_KiUpdateGlobalCpuSetConfiguration@4
_KiUpdateGroupSchedulingRank@12
_KiUpdateMinimumWeight@12
_KiUpdateNodeAffinitizedFlag@4
_KiUpdateNumberProcessors@4
_KiUpdateNumberProcessorsIpi@4
_KiUpdatePriorityMatrix@8
_KiUpdateProcessorCount@8
_KiUpdateSharedReadyQueueAffinityThread@8
_KiUpdateSystemTime@16
_KiUpdateThreadCpuSets@8
_KiUpdateTimeAssist@12
_KiUpdateTimer2Flags@12
_KiUpdateXSaveSizeAndVolatileFeatures@4
_KiValidateCpuSetMasks@8
_KiWaitForAllObjects@28
_KiWaitForContextSwap@4
_KiWriteFixedMtrr@4
_KitInitialize@4
_KitLogFeatureUsage@12
_KitpInitAitSampleRate@4
_KitpOpenRegKey@12
_KitpReadUlongFromKey@12
_KseAddHardwareId@4
_KseDriverLoadImage@4
_KseDriverScopeInitialize@0
_KseDriverUnloadImage@4
_KseDsCallbackHookAddDevice@8
_KseDsCallbackHookDriverStartIo@8
_KseDsCallbackHookDriverUnload@4
_KseDsCallbackHookIrpDeviceControlFunction@8
_KseDsCallbackHookIrpFunction@8
_KseDsCallbackHookIrpInternalDeviceControlFunction@8
_KseDsCallbackHookIrpPnpFunction@8
_KseDsCallbackHookIrpPowerFunction@8
_KseDsCompletionHookForPowerDevice@12
_KseDsCompletionHookForStartDevice@12
_KseDsCompletionHookForStopDevice@12
_KseDsHookDriverTargeted@20
_KseDsHookDriverUntargeted@4
_KseDsHookExAllocatePool@8
_KseDsHookExAllocatePoolWithTag@12
_KseDsHookExFreePool@4
_KseDsHookExFreePoolWithTag@8
_KseDsHookIoCreateDevice@28
_KseDsHookPoRequestPowerIrp@24
_KseGetIoCallbacks@4
_KseInitialize@8
_KseLookupHardwareId@4
_KseQueryDeviceData@20
_KseQueryDeviceDataList@16
_KseQueryDeviceFlags@12
_KseRegisterShim@12
_KseRegisterShimEx@16
_KseResetDeviceCache@0
_KseSetCompletionHook@16
_KseSetDeviceFlags@16
_KseShimDatabaseBootInitialize@8
_KseShimDatabaseBootRelease@0
_KseShimDatabaseClose@4
_KseShimDatabaseOpen@4
_KseShimDriverIoCallbacks@12
_KseSkipDriverUnloadCallbackHookDriverUnload@4
_KseSkipDriverUnloadHookDriverTargeted@20
_KseSkipDriverUnloadHookDriverUntargeted@4
_KseSkipDriverUnloadInitialize@0
_KseUnregisterShim@12
_KseVersionLieInitialize@0
_KsepApplyShimsToDriver@16
_KsepCacheDeviceEqual@8
_KsepCacheDeviceFree@4
_KsepCacheDeviceHash@4
_KsepCacheDeviceInsertData@20
_KsepCacheDeviceQueryData@8
_KsepCacheHwIdEqual@8
_KsepCacheHwIdFree@4
_KsepCacheHwIdHash@4
_KsepCacheInitialize@16
_KsepCacheInsert@8
_KsepCacheLookup@8
_KsepCacheReset@4
_KsepCacheUninitialize@4
_KsepCompletionSafeWrapper@12
_KsepDbCacheInsertDevice@8
_KsepDbCacheQueryDevice@20
_KsepDbCacheQueryDeviceData@20
_KsepDbCacheQueryDeviceDataList@16
_KsepDbCacheReadDevice@8
_KsepDbFreeDriverShims@8
_KsepDbGetDriverShims@20
_KsepDbGetSdbString@12
_KsepDbGetShimInfo@8
_KsepDbQueryRegistryDeviceData@20
_KsepDbQueryRegistryDeviceDataList@16
_KsepDbReadKData@12
_KsepDbReadKFlag@12
_KsepDebugPrint
_KsepDriverPathTail@8
_KsepDsEventAddDevice@28
_KsepDsEventDataIrp@20
_KsepDsEventDevicePowerCompleted@16
_KsepDsEventDevicePowerIrp@28
_KsepDsEventDriverLoad@20
_KsepDsEventDriverStartIo@12
_KsepDsEventDriverUnload@8
_KsepDsEventIoCreateDevice@24
_KsepDsEventPnpIrp@20
_KsepDsEventPnpStartDevice@16
_KsepDsEventPnpStopDevice@16
_KsepDsEventPoolAllocate@20
_KsepDsEventPoolFree@12
_KsepDsEventRequestPowerIrp@24
_KsepDsEventSystemPowerIrp@28
_KsepEngineGetShimsFromRegistry@16
_KsepEngineInitialize@4
_KsepEngineReadFlags@4
_KsepEngineUninitialize@4
_KsepEvntLogFlagsApplied@20
_KsepEvntLogShimsApplied@12
_KsepGetLoadedModulesList@4
_KsepGetModuleInfoByAddress@16
_KsepGetModuleInfoByName@16
_KsepGetShimCallbacksForDriver@8
_KsepGetShimsForDriver@24
_KsepIsModuleShimmed@12
_KsepIsShimRegistered@16
_KsepLoadShimProvider@4
_KsepLogError
_KsepLogEtwMessage@16
_KsepLogInfo
_KsepMatchInitAcpiOemInfo@12
_KsepMatchInitBiosInfo@4
_KsepMatchInitCpuInfo@4
_KsepMatchInitMachineInfo@8
_KsepPatchDriverImportsTable@8
_KsepPatchImportTableEntry@16
_KsepPoolAllocateNonPaged@4
_KsepPoolAllocatePaged@4
_KsepPoolFreeNonPaged@4
_KsepPoolFreePaged@4
_KsepRegistryCloseKey@4
_KsepRegistryCreateKey@12
_KsepRegistryEnumValue@20
_KsepRegistryOpenKey@12
_KsepRegistryQueryDWORD@12
_KsepRegistryQueryDriverShims@16
_KsepRegistryQueryKeyInformation@12
_KsepRegistryQueryMULTISZ@20
_KsepRegistryQuerySZ@24
_KsepRegistryQueryValue@24
_KsepResolveApplicableShimsForDriver@8
_KsepResolveShimHooks@8
_KsepShimDbChanged@0
_KsepShimDbMapToMemory@4
_KsepShimDbUnmapFromMemory@4
_KsepSkipDriverUnloadEventDriverLoad@20
_KsepSkipDriverUnloadEventDriverUnload@8
_KsepStringAnsiToUnicode@16
_KsepStringConcatenate@16
_KsepStringDuplicate@8
_KsepStringDuplicateUnicode@8
_KsepStringFree@4
_KsepStringSplitMultiString@16
_KsepStringTransform@16
_KsepValidateShimProviderAndData@12
_KxFlushEntireTb@4
_KxWaitForSpinLockAndAcquire@4
_KzInitializeSpinLock@4
_LOCK_ADDRESS_SPACE@8
_LOCK_ADDRESS_SPACE_SHARED@8
_LOCK_HIVE_LOAD@0
_LOCK_PAGE_TABLE_COMMITMENT@8
_LOCK_TRANSACTION_LIST@0
_LZNT1CompressChunk@28
_LZNT1DecompressChunk@20
_LZNT1DecompressChunkNewThread@24
_LZNT1DecompressChunkWorkItem@4
_LZNT1FindMatchMaximum@8
_LZNT1FindMatchStandard@8
_LdrAccessResource@16
_LdrEnumResources@20
_LdrFindResourceDirectory_U@16
_LdrFindResourceEx_U@20
_LdrFindResource_U@16
_LdrInitSecurityCookie@20
_LdrIsResItemExist@16
_LdrLoadAlternateResourceModuleEx@20
_LdrProcessRelocationBlockLongLong@24
_LdrRelocateImage@20
_LdrResFallbackLangList@20
_LdrResFindResource@36
_LdrResFindResourceDirectory@28
_LdrResGetRCConfig@20
_LdrResSearchResource@32
_LdrRscIsTypeExist@16
_LdrUnloadAlternateResourceModule@4
_LdrUnloadAlternateResourceModuleEx@8
_LdrpAccessResourceData@16
_LdrpAccessResourceDataNoMultipleLanguage@16
_LdrpArmProcessRelocation@16
_LdrpCompareResourceNames_U@12
_LdrpFetchAddressOfSecurityCookie@16
_LdrpFindMessageInAlternateModule@20
_LdrpGenericProcessRelocation@16
_LdrpGetAlternateResourceModuleHandleEx@16
_LdrpGetFromMUIMemCache@16
_LdrpGetImageSize@8
_LdrpGetMappingFromCacheEntry@16
_LdrpGetParentLangId@8
_LdrpGetRcConfig@16
_LdrpGetResourceFileName@16
_LdrpInitMuiCrits@8
_LdrpKrnGetDataTableEntry@4
_LdrpLoadResourceFromAlternativeModule@20
_LdrpMapResourceFile@20
_LdrpOpenKey@16
_LdrpQueryValueKey@24
_LdrpResCompareResourceNames@32
_LdrpResGetMappingSize@16
_LdrpResGetResourceDirectory@20
_LdrpResSearchResourceInsideDirectory@52
_LdrpResSearchResourceMappedFile@36
_LdrpSearchResourceSection_U@20
_LdrpSectionTableFromVirtualAddress@24
_LdrpSetAlternateResourceModuleHandle@36
_LdrpThumbProcessRelocation@16
_LdrpVerifyAlternateResourceModule@16
_LocalConvertAclToString@36
_LocalConvertSDToStringSD_Rev1@28
_LocalConvertSidToStringSidW@8
_LocalGetAceCondition@36
_LocalGetStringForControl@12
_LocalGetStringForRelativeAttribute@28
_LocalGetStringForSid@24
_LocalpGetStringForCondition@32
_LockRMLog@4
_LockShutdownExclusive@0
_LockShutdownShared@0
_LogFwInitialize@0
_LogFwReport@0
_LogFwStat@12
_LogFwpRegisterWorker@4
_LookupAccessMaskInTable@12
_LookupAceFlagsInTable@12
_LookupAceTypeInTable@12
_LookupEntryPoint@12
_LookupSidInTable@28
_LpcExitProcess@4
_LpcInitSystem@0
_LpcReplyWaitReplyPort@12
_LpcRequestPort@8
_LpcRequestWaitReplyPort@12
_LpcRequestWaitReplyPortEx@12
_LpcSendWaitReceivePort@28
_LpcpReplyWaitReplyPort@16
_LpcpRequestWaitReplyPort@24
_LsaCallAuthenticationPackage@28
_LsaDeregisterLogonProcess@4
_LsaFreeReturnBuffer@4
_LsaLogonUser@56
_LsaLookupAuthenticationPackage@12
_LsaRegisterLogonProcess@12
_MIDL_user_allocate@4
_MIDL_user_free@4
_MI_CHECK_KERNEL_NOEXECUTE_FAULT@24
_MI_DECREMENT_USED_PTES_BY_HANDLE_CLUSTER@8
_MI_DEREFERENCE_CONTROL_AREA_FILE@8
_MI_FLUSH_CACHE_DUE_TO_ATTRIBUTE_CHANGE@12
_MI_FREE_PAGED_SESSION_POOL_PAGES_LEFT@0
_MI_INCREMENT_USED_PTES_BY_HANDLE_CLUSTER@8
_MI_INITIALIZE_COLOR_BASE@12
_MI_IS_DECAY_PFN@4
_MI_IS_PFN@4
_MI_LOCK_RELOCATIONS_EXCLUSIVE@8
_MI_PAGEFILE_WRITE@20
_MI_REFERENCE_CONTROL_AREA_FILE@4
_MI_REMOVE_LOCKED_PAGE_CHARGE_RETURN_DECREF@4
_MI_SET_PAGING_FILE_INFO@20
_MI_UNLOCK_RELOCATIONS_EXCLUSIVE@8
_MI_UNUSED_SUBSECTIONS_COUNT_REMOVE@4
_MI_VA_IN_SESSION_SPECIAL_POOL@4
_MI_WRITE_VALID_PTE_VOLATILE@8
_MUIBugCheck@4
_MUIInitializeResourceLock@4
_MUIRegistrySystemRoutine@4
_MY_READ_PORT_UCHAR@4
_MY_READ_REGISTER_UCHAR@4
_MY_WRITE_PORT_UCHAR@8
_MY_WRITE_REGISTER_UCHAR@8
_MatchAll@12
_McGenControlCallbackV2@36
_McGenEventRegister@16
_MdlInvariantPostDriverCompletion@8
_MdlInvariantPostProcessing1@12
_MdlInvariantPreProcessing1@12
_MfgInitSystem@4
_MiAbortCombineScan@4
_MiAcquireNonPagedResources@8
_MiAcquireProperVm@8
_MiActOnPte@28
_MiActivePageClaimCandidate@12
_MiAddExpansionNonPagedPool@8
_MiAddFileOnlyPfns@8
_MiAddLoaderHalIoMappings@8
_MiAddLockedPageCharge@8
_MiAddMappedPtes@20
_MiAddMdlTracker@12
_MiAddPhysicalMemory@16
_MiAddPhysicalMemoryChunks@12
_MiAddPhysicalPagesToCrashDump@4
_MiAddPrivateFixupEntryForSystemImage@8
_MiAddRangeToCrashDump@20
_MiAddSecureEntry@20
_MiAddToReservationCluster@24
_MiAddTriageDumpPtes@4
_MiAddViewsForSection@16
_MiAddWorkingSetPage@4
_MiAddWsleToTrimList@16
_MiAdjustCachedStacks@0
_MiAdjustModifiedPageLoad@12
_MiAdjustPteBins@0
_MiAdvanceFaultList@4
_MiAdvanceVadHint@8
_MiAdvanceVadView@8
_MiAgeWorkingSet@16
_MiAllocateAccessLog@4
_MiAllocateAweInfo@0
_MiAllocateChildVads@8
_MiAllocateCombineProto@20
_MiAllocateContiguousMemory@28
_MiAllocateCrcList@8
_MiAllocateDriverPage@0
_MiAllocateDummyPage@0
_MiAllocateFileExtents@8
_MiAllocateFixupVad@4
_MiAllocateImportList@8
_MiAllocateInPageSupport@16
_MiAllocateKernelStackPages@20
_MiAllocateLargeZeroPages@20
_MiAllocateMappedWriterMdls@4
_MiAllocateMdlPagesByLists@20
_MiAllocateMemoryListLocks@0
_MiAllocateModWriterEntry@12
_MiAllocateMostlyContiguous@28
_MiAllocatePagedPoolPages@8
_MiAllocatePagesForMdl@44
_MiAllocatePerSessionProtos@20
_MiAllocatePfnRepurposeLogDispatch@16
_MiAllocatePoolPages@8
_MiAllocateVad@8
_MiAllocateVirtualMemory@36
_MiAllocateWorkingSetSwapSupport@4
_MiAllocateWsle@28
_MiAllocatingNonPagedPoolVa@16
_MiAllowGuardFault@4
_MiAllowProtectionChange@24
_MiAllowWorkingSetExpansion@4
_MiAnyAddressLocked@8
_MiAnyIoNodePagesCached@4
_MiAppendSubsectionChain@12
_MiApplyBytestreamFixup@12
_MiApplyCompressedFixups@16
_MiApplyRawFixups@16
_MiApplyStraddleFixups@24
_MiArbitraryCodeBlocked@4
_MiAreChargesNeededToLockPage@4
_MiAssignInitialPageAttribute@8
_MiAssignNonPagedPoolPtes@16
_MiAttachSession@4
_MiAttachThreadDone@4
_MiAttachToOwningSession@12
_MiAttachTrimmerToSession@4
_MiAttemptCoalesce@12
_MiAttemptPageFileExtension@8
_MiAttemptPageFileReduction@4
_MiAttemptPageFileReductionApc@12
_MiAttemptSectionDelete@12
_MiAweViewInserter@8
_MiAweViewRemover@8
_MiBackSingleImageWithPagefile@4
_MiBackSystemImageWithPagefile@8
_MiBadMemoryLogger@4
_MiBadRefCount@4
_MiBeginProcessClean@8
_MiBoostUnmapPfn@4
_MiBuildForkPageTable@20
_MiBuildForkPte@56
_MiBuildImageControlArea@32
_MiBuildImportsForBootDrivers@0
_MiBuildMappedCluster@12
_MiBuildMdlForMappedFileFault@36
_MiBuildNewCloneDescriptor@16
_MiBuildPagedPool@0
_MiBuildReservationCluster@16
_MiBuildWakeList@8
_MiBytesForFixupVad@4
_MiCacheImageSymbols@4
_MiCanFileBeTruncatedInternal@20
_MiCanFlushMakeProgress@8
_MiCanGrantExecute@8
_MiCanPageMove@4
_MiCanStealKernelStack@8
_MiCancelPhase0Locking@4
_MiCaptureAllWorkingSetAccessBits@8
_MiCaptureAndResetWorkingSetAccessBits@8
_MiCaptureDeleteHierarchy@16
_MiCaptureDirtyBitToPfn@4
_MiCaptureImageExceptionValues@4
_MiCapturePfnVm@20
_MiCaptureProtectionFromLockedProto@4
_MiCaptureProtectionFromProto@4
_MiCaptureUlongPtrArray@12
_MiCaptureWriteWatchDirtyBit@12
_MiCauseOverCommitPopup@4
_MiCfgEliminateZeroPages@12
_MiCfgInitializeProcess@4
_MiCfgMarkValidEntries@28
_MiChangePageAttribute@12
_MiChangePageAttributeBatch@16
_MiChargeCommit@12
_MiChargeForLockedPage@8
_MiChargeForWriteInProgressPage@8
_MiChargeFullProcessCommitment@8
_MiChargePartitionResidentAvailable@12
_MiChargeProcessCommitment@8
_MiChargeProcessPhysicalPages@8
_MiChargeResident@12
_MiChargeSegmentCommit@16
_MiChargeSystemImageCommitment@8
_MiChargeWsles@12
_MiCheckAndUpdatePagingFileMinimum@8
_MiCheckBadSystemProcessAccess@16
_MiCheckCommitReleaseFromVad@20
_MiCheckControlArea@8
_MiCheckDosCalls@8
_MiCheckForConflictingVad@12
_MiCheckForConflictingVadExistence@12
_MiCheckForUserStackOverflow@4
_MiCheckFreeModifiedReservations@4
_MiCheckLargePageOk@4
_MiCheckPageFileMapping@4
_MiCheckPhysicalAddressRange@12
_MiCheckPoolForContiguousPages@24
_MiCheckProtoPtePageState@8
_MiCheckPteForWriteCluster@28
_MiCheckPteRelease@8
_MiCheckPteReserve@8
_MiCheckPurgeAndUpMapCount@4
_MiCheckReservePageFileSpace@12
_MiCheckSecuredImageVad@16
_MiCheckSecuredVad@16
_MiCheckSessionPoolAllocations@0
_MiCheckSpecialPoolSlop@12
_MiCheckSystemTrimEndCriteria@12
_MiCheckTrimUnusedPageFileRegions@4
_MiCheckUserVirtualAddress@16
_MiCheckVirtualAddress@12
_MiCheckWsLimits@20
_MiClaimPhysicalRun@28
_MiCleanCfg@0
_MiCleanEmbryonicProcess@4
_MiCleanPhysicalProcessPages@4
_MiCleanSection@12
_MiCleanVad@4
_MiCleanWorkingSet@4
_MiClearCacheFromNode@4
_MiClearCommitReleaseState@4
_MiClearContainingMapping@4
_MiClearFilePointer@4
_MiClearImports@4
_MiClearNonPagedBitMapBits@16
_MiClearNonPagedPtes@12
_MiClearPageFileHash@8
_MiClearPfnImageVerified@8
_MiClearPteAccessed@24
_MiClearStackOwners@8
_MiClearVadBits@16
_MiCloneCompare@8
_MiCloneNoChange@8
_MiCloneProcessAddressSpace@12
_MiCloneReserveVadCommit@8
_MiCloneVads@20
_MiCloneWriteWatch@8
_MiCollapseRunTopDown@4
_MiCombineAllPhysicalMemory@16
_MiCombineCandidate@8
_MiCombineCompare@8
_MiCombineCompareThread@8
_MiCombineCompareVm@8
_MiCombineIdenticalPages@20
_MiCombinePageSortByHash
_MiCombinePageSortByVa
_MiCombiningInProgress@12
_MiCommitExistingVad@20
_MiCommitPageTablesForVad@12
_MiCommitPagefileBackedSection@36
_MiCommitRequestFailed@8
_MiCommitVadCfgBits@12
_MiCommitmentAvailable@4
_MiComparePageHash@12
_MiComparePages@8
_MiCompleteProtoPteFault@32
_MiCompressImportList@4
_MiCompressRelocations@8
_MiCompressRvaList@28
_MiCompressTbFlushList@4
_MiCompressedRvaListFirst@8
_MiComputeAgeDistribution@8
_MiComputeAgingPercent@4
_MiComputeCommitChargeForZeroPteRange@12
_MiComputeCommitThresholds@4
_MiComputeDataFlushRange@24
_MiComputeDriverProtection@8
_MiComputeFaultCluster@16
_MiComputeFaultNode@20
_MiComputeFlushRange@16
_MiComputeHash64@4
_MiComputeImagePteIndex@8
_MiComputeImageVadCommitCharge@16
_MiComputeNodeMemory@0
_MiComputeOptimalZeroPath@0
_MiComputePageCommitment@20
_MiComputePageHash@8
_MiComputeProcessUserVa@20
_MiComputeSystemTrimCriteria@8
_MiComputeTrimAmount@12
_MiComputeUserWorkingSetSpan@0
_MiComputeWslePagesNeeded@8
_MiComputeZeroClusterMaximum@8
_MiConfigureMemoryInsertion@12
_MiConfigureMemoryRemoval@12
_MiConfirmPageIsZero@8
_MiConstructLoaderEntry@24
_MiContractPagingFiles@4
_MiContractWsSwapPageFile@4
_MiContractWsSwapPageFileWorker@4
_MiConvertAndFlushWsleVas@8
_MiConvertContiguousPages@12
_MiConvertInitialMemoryBlock@8
_MiConvertPrivateToDemandZero@12
_MiConvertPrivateToProto@24
_MiConvertStandbyToProto@28
_MiConvertStaticSubsections@4
_MiConvertToLinkedWsles@4
_MiConvertWsleHash@4
_MiCopyDataPageToImagePage@24
_MiCopyForkedFixupVad@8
_MiCopyFromUntrustedMemory@16
_MiCopyHeaderIfResident@8
_MiCopyKstack@12
_MiCopyLargeVad@8
_MiCopyOnWriteEx@20
_MiCopyPage@16
_MiCopyPfnEntry@8
_MiCopySinglePage@24
_MiCopyToCfgBitMap@32
_MiCopyToUntrustedMemory@16
_MiCopyToUserVa@16
_MiCopyTopLevelMappings@8
_MiCountExistingPageTables@20
_MiCountNonPagedPool@8
_MiCountSharedPages@12
_MiCountSystemImageCommitment@4
_MiCrcStillIntact@16
_MiCreateCloneChain@8
_MiCreateDataFileMap@28
_MiCreateDecayPfn@4
_MiCreateFileOnlyPfns@16
_MiCreateFixupRecord@28
_MiCreateForkWsle@20
_MiCreateForkWsles@0
_MiCreateFreePfns@4
_MiCreateImageFileMap@28
_MiCreateLargePageVad@16
_MiCreateMdl@4
_MiCreateMemoryEvent@8
_MiCreateNewSection@36
_MiCreateNodeLists@4
_MiCreatePageFileSpaceBitmaps@4
_MiCreatePageTablesForPhysicalRange@8
_MiCreatePagefile@32
_MiCreatePagingFile@24
_MiCreatePagingFileMap@20
_MiCreatePebOrTeb@16
_MiCreatePerSessionProtos@8
_MiCreatePfnDatabase@4
_MiCreatePteCopyList@12
_MiCreateRotateView@4
_MiCreateSection@44
_MiCreateSectionForDriver@12
_MiCreateSessionDriverProtos@12
_MiCreateSparsePfnDatabase@4
_MiCreateVadEventBitmap@16
_MiCreateWriteWatchView@12
_MiCreateZeroThreadContext@12
_MiDbgCopyMemory@24
_MiDbgMarkPfnModified@12
_MiDbgReleaseAddress@12
_MiDbgTranslatePhysicalAddress@16
_MiDbgUnTranslatePhysicalAddress@4
_MiDbgWriteCheck@12
_MiDecayPfnFullyInitialized@4
_MiDecommitPages@24
_MiDecreaseAvailablePages@8
_MiDecrementAndInsertStandbyPages@12
_MiDecrementCloneBlockReference@12
_MiDecrementCombinedPte@4
_MiDecrementModifiedWriteCount@8
_MiDecrementSubsectionViewCount@8
_MiDecrementSubsections@12
_MiDeleteAllHashMappings@4
_MiDeleteAllPartialCloneVads@4
_MiDeleteBatch@20
_MiDeleteBootRange@12
_MiDeleteCachedSegment@4
_MiDeleteCachedSubsection@4
_MiDeleteControlArea@4
_MiDeleteControlAreaList@4
_MiDeleteEmptySubsections@4
_MiDeleteExcessWorkingSetPages@12
_MiDeleteFileExtents@16
_MiDeleteFinalPageTables@4
_MiDeleteImageSecurity@4
_MiDeleteKernelStack@8
_MiDeleteKernelStackPages@12
_MiDeleteLeakedSessionPool@0
_MiDeleteLockedTransitionPte@16
_MiDeleteMergedPte@8
_MiDeleteNoBlockStacks@4
_MiDeletePagablePteRange@12
_MiDeletePageDirectoryPages@4
_MiDeletePageFileSectionNodes@4
_MiDeletePageTableHierarchy@8
_MiDeletePageTablesForPhysicalRange@4
_MiDeletePagefile@4
_MiDeletePagingFiles@4
_MiDeleteParentDecayNode@4
_MiDeletePartialCloneVad@8
_MiDeletePartialVad@16
_MiDeletePartitionFromList@4
_MiDeletePartitionResources@4
_MiDeletePerSessionProtos@4
_MiDeletePhysicalProcessPages@4
_MiDeletePhysmemVad@4
_MiDeletePteList@20
_MiDeletePteRange@16
_MiDeletePteRun@20
_MiDeleteRotateAndStopFaults@12
_MiDeleteSegmentPages@4
_MiDeleteSessionAddressSpace@8
_MiDeleteSessionDriverProtos@4
_MiDeleteSessionPdes@8
_MiDeleteSessionPoolRange@16
_MiDeleteSubsection@4
_MiDeleteSystemPagableVm@24
_MiDeleteSystemPte@16
_MiDeleteTransitionPte@8
_MiDeleteVad@8
_MiDeleteVadBitmap@4
_MiDeleteValidSystemPte@20
_MiDeleteVirtualAddresses@20
_MiDeleteZeroThreadContext@8
_MiDeliverPicoExceptionForProbedPage@8
_MiDemoteCombinedPte@8
_MiDemoteLargeFreePage@4
_MiDeprioritizeVARange@16
_MiDeprioritizeVad@12
_MiDerefPageFileSpaceBitmaps@12
_MiDereferenceCombineCrc@4
_MiDereferenceControlArea@4
_MiDereferenceControlAreaBySection@8
_MiDereferenceControlAreaPfn@12
_MiDereferenceControlAreaProbe@4
_MiDereferenceExtendInfo@8
_MiDereferenceImports@4
_MiDereferenceIoPages@12
_MiDereferencePageRuns@4
_MiDereferencePartition@4
_MiDereferencePerSessionProtos@8
_MiDereferenceSegmentThread@4
_MiDereferenceSession@0
_MiDereferenceSessionFinal@0
_MiDereferenceVad@4
_MiDereferenceVadUnsafe@4
_MiDescribePageRun@12
_MiDestroySection@8
_MiDetachProcessFromSession@4
_MiDetachSession@0
_MiDetermineModifiedPageListHead@8
_MiDetermineUserGlobalPteMask@4
_MiDisablePagingOfDriver@4
_MiDiscardTransitionPte@4
_MiDispatchFault@36
_MiDoReplacement@8
_MiDoSingleFixup@12
_MiDoStackCopy@16
_MiDoneWithThisPageGetAnother@16
_MiDrainControlAreaWrites@8
_MiDrainSystemAccessLog@4
_MiDrainZeroLookasides@16
_MiDriverLoadSucceeded@28
_MiDriverPageMustStayResident@8
_MiDummyApcRoutine@20
_MiDuplicateCloneLeaf@20
_MiEmptyAccessLogs@4
_MiEmptyDecayClusterTimers@4
_MiEmptyKernelStackCache@0
_MiEmptyPageAccessLog@4
_MiEmptyPteBins@8
_MiEmptyWorkingSet@12
_MiEmptyWorkingSetHelper@16
_MiEmptyWorkingSetPrivatePagesByVa@4
_MiEmptyWsPrivatePagesCallback@16
_MiEnableFileExtents@12
_MiEnableNewPfns@8
_MiEnablePagingOfDriver@4
_MiEnablePagingTheExecutive@0
_MiEncodeProtoFill@16
_MiEndingOffset@4
_MiEndingOffsetWithLock@4
_MiEnumerateKernelLeafPtes@8
_MiEnumerateLeafPtes@16
_MiExamineHalVa@0
_MiExceptionForMappedVa@4
_MiExchangeWsle@16
_MiExpandFlushMdl@8
_MiExpandNonPagedPool@24
_MiExpandPagedPool@8
_MiExpandPtes@8
_MiExpandSpecialPool@4
_MiExpandSystemCache@0
_MiExpandVadBitMap@4
_MiExpandVadBitMapDown@4
_MiExtendExtentSubsection@4
_MiExtendPageFilesIfNecessary@12
_MiExtendPagingFileMaximum@12
_MiExtendPagingFiles@4
_MiExtendSection@20
_MiExtendWorkingSetSwapPagefile@12
_MiFaultPteIntact@8
_MiFillCombinePage@16
_MiFillCommitReturnInfo@12
_MiFillGapAddresses@12
_MiFillGapPtes@20
_MiFillMapFileInfo@8
_MiFillNoReservationCluster@12
_MiFillPageExtraInfo@12
_MiFillPagedPoolLockedDown@12
_MiFillPerSessionProtos@36
_MiFillPfnGaps@0
_MiFillSessionWorkingSetEntry@8
_MiFinalizeDriverImage@4
_MiFinalizePageAttribute@12
_MiFindActualFaultingPte@4
_MiFindBestOutswapPagefile@8
_MiFindClearBitsAligned@12
_MiFindContiguousMemoryInPool@20
_MiFindContiguousPages@40
_MiFindEmptyAddressRange@24
_MiFindEmptyAddressRangeDown@24
_MiFindEmptyAddressRangeDownTree@24
_MiFindEmptyAddressRangeInTree@24
_MiFindFreePageFileSpace@20
_MiFindLargeNodePages@16
_MiFindLargePageMemory@20
_MiFindLargestLoaderDescriptor@4
_MiFindLastSubsection@8
_MiFindLoaderGap@8
_MiFindNonPagedPoolPages@8
_MiFindNonPagedPoolVa@16
_MiFindPageFileWriteCluster@16
_MiFindPagesForMdl@36
_MiFindRebuildCandidate@24
_MiFindZeroCloneBlock@8
_MiFinishHardFault@20
_MiFinishLastForkPageTable@8
_MiFinishMdlForMappedFileFault@20
_MiFinishPageFileExtension@12
_MiFinishProcessCreate@4
_MiFinishResume@4
_MiFinishVadDeletion@24
_MiFlowThroughInsertNode@8
_MiFlowThroughMaximumIo@4
_MiFlushAcquire@12
_MiFlushAllHintedStorePages@4
_MiFlushAllPages@4
_MiFlushCacheMdl@12
_MiFlushCacheRange@12
_MiFlushComplete@12
_MiFlushControlArea@12
_MiFlushDataSection@4
_MiFlushDirtyBitsToPfn@16
_MiFlushFileOnlyMdl@16
_MiFlushRelease@12
_MiFlushSectionInternal@28
_MiFlushStrongCodeDriverLoadFailures@0
_MiFlushTbAsNeeded@12
_MiFlushTbList@4
_MiFlushTbListEarly@8
_MiForcedTrim@8
_MiFormFullImageName@12
_MiFreeAweInfo@4
_MiFreeBootPageTable@4
_MiFreeCloneDescriptor@8
_MiFreeClonePool@0
_MiFreeCombineBlock@4
_MiFreeCombinePool@4
_MiFreeContiguousPages@12
_MiFreeDriverInitialization@4
_MiFreeEmptyBootPageTable@4
_MiFreeExcessSegments@4
_MiFreeForkMaps@4
_MiFreeInPageSupportBlock@4
_MiFreeInitializationCode@12
_MiFreeLargePageChain@4
_MiFreeLargePageMemory@4
_MiFreeLargePageView@12
_MiFreeLargePages@4
_MiFreeMdlTracker@8
_MiFreeModWriterEntry@8
_MiFreeModifiedReservations@4
_MiFreeOverlappedFlushEntry@4
_MiFreePageFileHashPfns@4
_MiFreePageFileSpaceBitmaps@4
_MiFreePagedPoolPages@12
_MiFreePagesFromMdl@12
_MiFreePartitionId@4
_MiFreePartitionPhysicalPages@4
_MiFreePhysicalView@8
_MiFreePoolPages@12
_MiFreePoolPagesLeft@4
_MiFreePrivateFixupEntryForSystemImage@8
_MiFreeReadListPages@4
_MiFreeRelocations@8
_MiFreeReservationRun@8
_MiFreeReservationRuns@12
_MiFreeRotateView@4
_MiFreeSessionSpaceMap@0
_MiFreeSmallPageFromMdl@8
_MiFreeUnmappedPageTables@8
_MiFreeUnusedSparsePages@0
_MiFreeVadEventBitmap@12
_MiFreeVadEvents@4
_MiFreeVadRange@20
_MiFreeWorkingSetSwapContext@8
_MiFreeWriteWatchView@8
_MiFreeWsleList@12
_MiGatherHiberRange@16
_MiGatherMappedPages@12
_MiGatherPagefilePages@4
_MiGenerateSystemImageNames@24
_MiGetAdditionalExtents@8
_MiGetAvailablePagesBelowPriority@8
_MiGetAvailablePagesForTrimPass@8
_MiGetCcAccessLog@8
_MiGetControlAreaCfg@4
_MiGetControlAreaPartition@4
_MiGetControlAreaPtes@4
_MiGetEffectivePagePriorityThread@4
_MiGetExceptionInfo@12
_MiGetFileHashPage@8
_MiGetFreeOrZeroPage@12
_MiGetHighestPteConsumer@4
_MiGetImageProtection@4
_MiGetInPageSupportBlock@4
_MiGetIndividualPagesToZero@16
_MiGetInstructionPointer@0
_MiGetKernelStackSwapSupport@8
_MiGetLargePageChain@8
_MiGetNextPageTable@24
_MiGetNextPartition@8
_MiGetNextSession@8
_MiGetNodeChannelPageCounts@20
_MiGetNumberOfCachedPtes@4
_MiGetPage@12
_MiGetPageFileSectionForReservation@12
_MiGetPageForHeader@4
_MiGetPageForWriteCluster@32
_MiGetPagePrivilege@12
_MiGetPageProtection@16
_MiGetPfnProtection@8
_MiGetPhysicalAddress@12
_MiGetPrivatePageCount@4
_MiGetProcessPartition@4
_MiGetProtoPteAddress@16
_MiGetPteFromCopyList@12
_MiGetPteMappingPair@8
_MiGetReadyInPageBlock@4
_MiGetSessionIdForVa@4
_MiGetSharedProtos@12
_MiGetSharedProtosAtDpcLevel@12
_MiGetStandbyRepurposed@8
_MiGetSubsectionCharges@8
_MiGetSystemAddressForImage@12
_MiGetSystemPage@4
_MiGetSystemPteStatistics@12
_MiGetSystemRegionIndex@4
_MiGetThreadPartition@4
_MiGetTopLevelPfn@8
_MiGetTopPteAddress@4
_MiGetVadWakeList@8
_MiGetWorkingSetInfo@16
_MiGetWorkingSetInfoEx@16
_MiGetWorkingSetInfoList@16
_MiGetWsAndInsertVad@4
_MiGetWsAndMakePageTablesNx@0
_MiGetZeroedPages@24
_MiHandleDriverNonPagedSections@12
_MiHandleForkTransitionPte@44
_MiHandleInPageError@4
_MiHandleSynchronousFlushError@20
_MiIdentifyPfn@8
_MiIdentifyPfnWrapper@8
_MiImageCantMove@4
_MiImagePagable@8
_MiImagePageOk@8
_MiImageSuitableForSystem@8
_MiImageUnused@12
_MiInPageSingleKernelStack@8
_MiInSwapPageDirectories@12
_MiInSwapSharedWorkingSetWorker@4
_MiInSwapStore@4
_MiInSwapStoreContextDereference@4
_MiInSwapStoreWorker@4
_MiIncludeSharedCommit@4
_MiIncreaseAvailablePages@8
_MiIncreaseCommitLimits@20
_MiIncreaseNonPagedPoolUsage@16
_MiIncrementPageTableLockCheckWrap@4
_MiIncrementPfn@4
_MiIncrementSubsectionViewCount@8
_MiInitMachineDependent@0
_MiInitPerfMemoryFlags@8
_MiInitSystem@8
_MiInitializeApiSets@4
_MiInitializeBlankPfns@20
_MiInitializeBootDefaults@4
_MiInitializeBootLoadedDriverPfns@4
_MiInitializeBootPageDirectoryPages@0
_MiInitializeBootProcess@4
_MiInitializeCacheFlushing@0
_MiInitializeCfg@0
_MiInitializeColorBase@8
_MiInitializeColorBaseSession@4
_MiInitializeColors@0
_MiInitializeCombining@8
_MiInitializeCommitment@4
_MiInitializeDecayPfns@0
_MiInitializeDriverImages@4
_MiInitializeDummyPages@0
_MiInitializeDynamicBitmap@16
_MiInitializeDynamicPfns@12
_MiInitializeDynamicVa@0
_MiInitializeFaultVaListCore@16
_MiInitializeFileExtents@8
_MiInitializeForkMaps@8
_MiInitializeGapFrames@8
_MiInitializeImageHeaderPage@8
_MiInitializeImageProtos@12
_MiInitializeInPageSupport@8
_MiInitializeIoPageNodeArray@4
_MiInitializeKernelStacks@0
_MiInitializeLargeNonPagedPoolLeafFrames@8
_MiInitializeLargePageNodeLists@4
_MiInitializeLoadedModuleList@4
_MiInitializeLockedPagesTracking@4
_MiInitializeMdlPages@24
_MiInitializeMdlPfn@8
_MiInitializeMemoryEvents@4
_MiInitializeMirroring@4
_MiInitializeModifiedWriterParameters@0
_MiInitializeNonPagedPool@0
_MiInitializeNonPagedPoolThresholds@0
_MiInitializeNuma@4
_MiInitializeNumaGraph@4
_MiInitializeNumaRanges@0
_MiInitializePageAccessLogging@12
_MiInitializePageDirectoryPages@12
_MiInitializePageForHeader@8
_MiInitializePagedPoolEvents@0
_MiInitializePartition@8
_MiInitializePartitions@4
_MiInitializePfn@16
_MiInitializePfnForOtherProcess@16
_MiInitializePfnListHead@8
_MiInitializePfnsForValidMappings@4
_MiInitializePrivateFixupBitmap@8
_MiInitializeProbePacketVm@4
_MiInitializeProcessBottomUpEntropy@4
_MiInitializeProcessTopDownEntropy@12
_MiInitializePrototypePtes@12
_MiInitializePteInfo@20
_MiInitializeReadInProgressPfn@24
_MiInitializeRelocations@0
_MiInitializeScrubPacket@12
_MiInitializeSections@4
_MiInitializeSessionIds@0
_MiInitializeSessionPool@0
_MiInitializeSlowPte@12
_MiInitializeSpecialPool@4
_MiInitializeSystemCache@0
_MiInitializeSystemImagePage@12
_MiInitializeSystemPageTable@8
_MiInitializeSystemPtes@0
_MiInitializeSystemSpaceMap@4
_MiInitializeSystemVaRange@12
_MiInitializeSystemWorkingSetList@8
_MiInitializeTbFlushList@12
_MiInitializeTbFlushing@0
_MiInitializeTransitionPfn@8
_MiInitializeTrimCriteria@16
_MiInitializeUnusablePfn@8
_MiInitializeUserNoAccess@8
_MiInitializeVadBitMap@0
_MiInitializeWorkingSetList@4
_MiInitializeWorkingSetManagerParameters@4
_MiInitializeWsSwapping@4
_MiInitializeZeroPagePtes@4
_MiInsertAndUnlockStandbyPages@16
_MiInsertAweInfo@8
_MiInsertBasedSection@4
_MiInsertCachedPte@12
_MiInsertClone@8
_MiInsertDecayClusterTimer@4
_MiInsertInSystemSpace@20
_MiInsertLargePageInFreeOrZeroList@8
_MiInsertLargePageInNodeList@12
_MiInsertNewCombineBlocks@12
_MiInsertNewPartitionInList@4
_MiInsertNewProcess@8
_MiInsertNonPagedPoolOnSlist@8
_MiInsertPageFileInList@4
_MiInsertPageInFreeOrZeroedList@8
_MiInsertPageInList@8
_MiInsertPrivateVad@12
_MiInsertProtectedStandbyPage@8
_MiInsertPteTracker@16
_MiInsertSharedCommitNode@12
_MiInsertSubsectionNode@12
_MiInsertTbFlushEntry@16
_MiInsertUnusedSegment@4
_MiInsertUnusedSubsection@8
_MiInsertVad@8
_MiInsertVadCharges@8
_MiInsertVadEvent@12
_MiInsertViewOfPhysicalSection@8
_MiInsertWsle@12
_MiInvalidateCollidedIos@4
_MiInvalidateHiberPhasePages@16
_MiIoPagesInRun@8
_MiIoPfnCompare@8
_MiIoPfnRangeCompare@8
_MiIoSpaceIsConstant@8
_MiIrpCompletionApcRoutine@12
_MiIsAddressValid@8
_MiIsCfgBitMapPageShared@12
_MiIsFaultPteIntact@12
_MiIsLowestPageTablePage@4
_MiIsNextVaTrimCandidate@16
_MiIsPoolHeader@4
_MiIsProbeActive@12
_MiIsProcessCfgEnabled@0
_MiIsPteDecommittedPage@4
_MiIsPteProtectionCompatible@8
_MiIsRangeFullyCommitted@12
_MiIsRegularMemory@8
_MiIsStrongCodeImagePage@8
_MiIsSubsectionClean@4
_MiIsVaRangeAvailable@16
_MiIsVadEligibleForCommitRelease@4
_MiIssueAsynchronousFlush@32
_MiIssueHardFault@24
_MiIssueHardFaultIo@12
_MiIssueNoPtesBugcheck@4
_MiIssuePageExtendRequest@16
_MiIssuePageExtendRequestNoWait@12
_MiIssueSynchronousFlush@24
_MiJoinBitmapPages@12
_MiJoinPartition@8
_MiJoinSession@4
_MiJumpStack@4
_MiJumpStackTarget@4
_MiLargePageFault@16
_MiLargestSystemVa@0
_MiLdwPopupWorker@4
_MiLeapPrefetch@8
_MiLimitLoaderBlockHighMemory@8
_MiLimitLoaderBlockTotalMemory@8
_MiLoadImportDll@20
_MiLoadUserSymbols@12
_MiLocateAddress@4
_MiLocateCloneAddress@8
_MiLocateCombineBlock@16
_MiLocateExclusiveSecure@4
_MiLocateKernelSections@4
_MiLocatePagefileSubsection@8
_MiLocatePhysicalViewInTree@8
_MiLocateSessionProtosInSubsection@8
_MiLocateSubsectionNode@16
_MiLocateVadEvent@8
_MiLocateWsle@12
_MiLockAddressSpaceToo@8
_MiLockAllMemoryLists@4
_MiLockAndDecrementShareCount@8
_MiLockAndInsertPageInFreeList@4
_MiLockAndSelectSessionAttachProcess@4
_MiLockCode@16
_MiLockControlAreaFileObjectShared@4
_MiLockDownWorkingSet@8
_MiLockDriverMappings@4
_MiLockDynamicMemoryExclusive@8
_MiLockImageSection@16
_MiLockLeafPage@8
_MiLockNestedVad@4
_MiLockNonPagedPoolPte@8
_MiLockPagableImageSection@8
_MiLockPagableSections@8
_MiLockPage@4
_MiLockPageAndSetDirty@8
_MiLockPageTablePage@8
_MiLockPageTableRange@8
_MiLockPagedAddress@4
_MiLockProbePacketWorkingSet@4
_MiLockProtoPage@12
_MiLockProtoPoolPage@8
_MiLockSectionControlArea@12
_MiLockSetPfnPriority@8
_MiLockTrackerCompare@8
_MiLockTransitionLeafPage@8
_MiLockUnlockCommon@28
_MiLockVad@8
_MiLockVadRange@12
_MiLockdownSections@4
_MiLogAllocateWsleEvent@12
_MiLogCombinedPteDelete@4
_MiLogFailedDriverLoad@16
_MiLogKernelStackEvent@12
_MiLogMapFileEvent@8
_MiLogMdlRangeEvent@12
_MiLogMemResetInfo@12
_MiLogNonPagedPoolReleaseEvent@4
_MiLogOutswappedProcessCommitReacquire@16
_MiLogOutswappedProcessCommitRelease@8
_MiLogPageAccess@8
_MiLogPerfMemoryEvent@20
_MiLogPerfMemoryRangeEvent@16
_MiLogRelocationFaults@12
_MiLogRelocationRva@16
_MiLogRemoveWsleEvent@8
_MiLogSectionCreate@8
_MiLogSectionObjectEvent@8
_MiLogStrongCodeDriverLoadFailure@8
_MiLogTrimWs@12
_MiLogVirtualRotateEvent@12
_MiLogWsAging@20
_MiLookupDataTableEntry@8
_MiLookupIoPageNode@4
_MiMakeCombineCandidateClean@8
_MiMakeDriverPagesPrivate@20
_MiMakeHyperRangeAccessible@12
_MiMakeImagePageOk@28
_MiMakeImageReadOnly@4
_MiMakeOutswappedPageResident@20
_MiMakePageBad@8
_MiMakeProtectionMask@4
_MiMakeProtectionPfnCompatible@8
_MiMakeProtoAddressValid@4
_MiMakeProtoLeafValid@12
_MiMakeSpecialPoolPaged@8
_MiMakeSystemAddressValid@20
_MiMakeSystemAddressValidSystemWs@12
_MiMakeSystemCacheRangeValid@16
_MiMakeZeroedPageTableRange@20
_MiMakeZeroedPageTables@16
_MiManageSubsectionView@12
_MiMapArbitraryPage@16
_MiMapCacheExceptionFilter@8
_MiMapChildLargePageVads@8
_MiMapContiguousMemory@20
_MiMapDummyPages@0
_MiMapImageInSystemProcess@16
_MiMapImageInSystemSpace@12
_MiMapLockedPagesInUserSpace@20
_MiMapLockedPagesInUserSpaceHelper@28
_MiMapMdlCommon@16
_MiMapNewPfns@12
_MiMapNewSession@4
_MiMapNewWorkingSetPage@8
_MiMapPageFileHash@20
_MiMapPageInHyperSpaceWorker@12
_MiMapPagesToZero@12
_MiMapProcessExecutable@16
_MiMapSinglePage@12
_MiMapSystemImage@12
_MiMapUserLargePages@12
_MiMapViewInSystemSpace@24
_MiMapViewOfDataSection@56
_MiMapViewOfImageSection@48
_MiMapViewOfPhysicalSection@32
_MiMapViewOfSection@48
_MiMapWithLargePages@20
_MiMapWsMetaPage@8
_MiMapWsleHash@8
_MiMappedPageWriter@4
_MiMappingHasIoReferences@4
_MiMappingHasIoTracker@4
_MiMarkBootGuardPage@4
_MiMarkBootImagesNonPaged@4
_MiMarkBootKernelStack@8
_MiMarkHiberNotCachedPages@16
_MiMarkKernelPageTablePages@0
_MiMarkKernelPageTablesHelper@12
_MiMarkKernelStack@12
_MiMarkLargeNonPagedPool@12
_MiMarkLargePageRange@8
_MiMarkMdlComplete@8
_MiMarkNonPagedHiberPhasePages@16
_MiMarkPageActive@8
_MiMarkPfnVerified@8
_MiMarkPrivateImageCfgBits@8
_MiMarkPrivateOpenCfgBits@16
_MiMarkPteDirty@4
_MiMarkSessionMasterProcess@8
_MiMarkSharedImageCfgBits@8
_MiMaximumCommitmentAvailable@0
_MiMdlPageSort
_MiMergeTbFlushEntryBackwards@16
_MiMirrorNodeLargePages@8
_MiModifiedPageWriter@4
_MiModifiedWriterNoReservationSort
_MiMoveEccPagesToFreeList@8
_MiMoveLargeFreePage@12
_MiNoFaultFound@24
_MiNoPagesLastChance@8
_MiNodeCostSort
_MiNodeFreeZeroPages@12
_MiNumberWsSwapPagefiles@4
_MiObtainFaultCharges@12
_MiObtainFreePages@4
_MiObtainMdlCharges@28
_MiObtainNonPagedPoolCharges@4
_MiObtainPagefileHashes@16
_MiObtainProtoReference@8
_MiObtainReferencedSecureVad@8
_MiObtainReferencedVad@8
_MiObtainRelocationBits@16
_MiObtainSectionForDriver@16
_MiObtainSessionVa@4
_MiObtainSessionVaCharges@4
_MiObtainSystemCacheView@0
_MiObtainSystemVa@8
_MiObtainTransitionPage@20
_MiOffsetToProtos@16
_MiOkToShrinkPageFiles@8
_MiOrderTrimList@8
_MiOutPageSingleKernelStack@12
_MiOutSwapKernelStackPage@8
_MiOutSwapPageDirectoryPages@4
_MiOutSwapPageDirectoryPtes@8
_MiOutSwapWorkingSetCallback@16
_MiOutlawInswaps@4
_MiPaeAllocate@4
_MiPaeAllocatePage@0
_MiPaeFree@4
_MiPaeFreePage@4
_MiPaeInitialize@0
_MiPageAttributeBatchChangeNeeded@8
_MiPageCombiningActive@4
_MiPageFileNoFreeSpace@8
_MiPageHasRelocations@8
_MiPageInRange@16
_MiPageNotZero@8
_MiPageTablesNeeded@12
_MiPagefileCompare@8
_MiPagefileCompareOffset@8
_MiPagefileSectionCompare@8
_MiParseComImage@12
_MiParseImageCfgBits@24
_MiParseImageSectionHeaders@24
_MiPartitionMdlPageSort
_MiPartitionObjectCreate@20
_MiPerSessionProtosCompare@8
_MiPerformCombineScan@12
_MiPerformFixups@24
_MiPerformMemoryChange@20
_MiPfAllocateMdls@12
_MiPfCoalesceAndIssueIOs@12
_MiPfCompleteCoalescedIo@8
_MiPfCompleteInPageSupport@8
_MiPfCompletePrefetchIos@12
_MiPfExecuteReadList@12
_MiPfIssueCoalesceCandidates@12
_MiPfIssueCoalescedSupport@8
_MiPfPrepareReadList@12
_MiPfPrepareSequentialReadList@36
_MiPfPutPagesInTransition@8
_MiPfnCanBecomeDemandZero@8
_MiPfnReferenceCountIsZero@8
_MiPfnShareCountIsZero@8
_MiPfnsWorthTrying@24
_MiPhysicalPoolCheck@32
_MiPhysicalViewCompareVpn@8
_MiPickClusterForMappedFileFault@32
_MiPopFreeWsle@4
_MiPopulateCfgBitMap@20
_MiPopulateWorkingSetFreeList@12
_MiPreInitializeSystemImagePage@4
_MiPrefetchControlArea@28
_MiPrefetchDriverPages@8
_MiPrefetchJumpVad@12
_MiPrefetchNormally@8
_MiPrefetchRestOfCluster@12
_MiPrefetchVirtualMemory@16
_MiPrepareAttachThread@8
_MiPrepareSegmentForDeletion@8
_MiPrepareVadDelete@20
_MiPrivateFixup@28
_MiProbeAndLockComplete@12
_MiProbeAndLockPrepare@28
_MiProbeLeafFrame@4
_MiProbeLockFrame@4
_MiProcessCrcList@28
_MiProcessDeleteOnClose@4
_MiProcessDereferenceList@4
_MiProcessLoadConfigForDriver@8
_MiProcessLoaderEntry@8
_MiProcessWorkingSets@4
_MiProcessWsInSwapFault@4
_MiProcessWsInSwapRanges@12
_MiProcessWsInSwapSupport@8
_MiProtectAweRegion@12
_MiProtectPool@12
_MiProtectPrivateMemory@28
_MiProtectSharedUserPage@0
_MiProtectSystemImage@4
_MiProtectVirtualMemory@24
_MiProtoFault@28
_MiPteBinsNeedTrimming@4
_MiPteNeedsCommitCharge@8
_MiPulseCommitSignal@4
_MiPulseLowAvailableEvent@4
_MiPurgeFileExtentPage@12
_MiPurgeImageSection@4
_MiPurgeLargeZeroNodePages@0
_MiPurgePartitionStandby@8
_MiPurgeSubsection@4
_MiPurgeTransitionList@4
_MiPurgeZeroList@0
_MiPushBadPool@8
_MiPushCombineBlock@24
_MiQueryAddressSpan@12
_MiQueryAddressState@28
_MiQueryPfnUnsafe@20
_MiQueueControlAreaDelete@4
_MiQueuePageAccessLog@4
_MiQueuePageFileExtension@8
_MiQueueSyncModifiedWriterApc@20
_MiQueueWorkingSetRequest@8
_MiRaisedIrqlFault@16
_MiReAcquireCommitFailWorker@4
_MiReAcquireOutSwappedProcessCommit@4
_MiReAllocateWorkingSetSwapSupport@4
_MiReadWriteVirtualMemory@24
_MiReadyFlushMdlToWrite@12
_MiRebuildLargePage@12
_MiRebuildLargePages@4
_MiRecheckCombineVm@12
_MiRecheckVaVm@8
_MiReclaimSystemVa@4
_MiReduceCommitLimits@12
_MiReduceMdl@4
_MiReduceWs@12
_MiRefPageFileSpaceBitmaps@8
_MiReferenceCfgVad@12
_MiReferenceControlArea@20
_MiReferenceControlAreaForCacheManager@12
_MiReferenceControlAreaPfn@12
_MiReferenceFileObjectForMap@4
_MiReferenceInPageFile@8
_MiReferenceIoPages@24
_MiReferencePageForModifiedWrite@8
_MiReferencePagePartition@4
_MiReferencePageRuns@8
_MiReferencePfBackedSection@4
_MiReferenceSubsection@8
_MiReferenceVad@4
_MiRegistryVaSort
_MiReleaseArbitraryPage@4
_MiReleaseControlAreaWaiters@4
_MiReleaseDriverPtes@12
_MiReleaseFileExtentWaiters@4
_MiReleaseFreshPage@4
_MiReleaseImageSection@8
_MiReleaseInPageRefs@4
_MiReleaseNonPagedResources@8
_MiReleaseOutSwapReservations@8
_MiReleaseOutSwappedProcessCommit@4
_MiReleasePageFileInfo@16
_MiReleasePageFileSectionInfo@4
_MiReleasePageFileSpace@16
_MiReleasePageHash@8
_MiReleaseProcessReferenceToSessionDataPage@4
_MiReleasePteCopyList@4
_MiReleasePtes@12
_MiReleaseReadListResources@4
_MiReleaseScrubPacket@4
_MiReleaseSystemCacheView@4
_MiReleaseVadWaiters@4
_MiReleaseWriteInProgressCharges@12
_MiReleaseWsSwapReservationPfn@4
_MiReleaseWsle@16
_MiReleaseZeroingVa@4
_MiRelinkStandbyPage@12
_MiReloadBootLoadedDrivers@4
_MiRelocateAmount@4
_MiRelocateImage@20
_MiRelocateImageAgain@8
_MiRelocateImagePfn@24
_MiRelockProtoPoolPage@8
_MiRememberUnloadedDriver@12
_MiRemoveAnyPage@12
_MiRemoveDecayClusterTimer@4
_MiRemoveEntryWsle@12
_MiRemoveFreePoolMemoryFromDump@4
_MiRemoveFromSystemSpace@12
_MiRemoveImagePageFromSystemWorkingSet@12
_MiRemoveLockedPageChargeAndDecRef@4
_MiRemoveLockedPageFromWorkingSet@16
_MiRemoveLowestPriorityStandbyPage@8
_MiRemoveMappedPtes@8
_MiRemoveMdlPages@8
_MiRemovePhysicalMemory@12
_MiRemovePteTracker@12
_MiRemoveSecureEntry@8
_MiRemoveSharedCommitNode@12
_MiRemoveSingleWsle@8
_MiRemoveSpecialPoolRange@12
_MiRemoveUnusedSegment@4
_MiRemoveUnusedSegments@4
_MiRemoveUnusedSubsection@4
_MiRemoveUserPhysicalPagesVad@4
_MiRemoveVadCharges@8
_MiRemoveVadEvent@8
_MiRemoveViewsFromSection@16
_MiRemoveViewsFromSectionWithPfn@12
_MiRemoveWakeListEntry@8
_MiRemoveWorkingSetPages@4
_MiRemoveWsle@8
_MiRemoveWsleFromFreeList@8
_MiReplaceLockedPage@12
_MiReplacePageOfProtoPool@16
_MiReplacePageTablePage@4
_MiReplaceRotateWithDemandZero@12
_MiReplaceTransitionPage@12
_MiReplaceWorkingSetEntryIfNecessary@8
_MiReplaceWorkingSetEntryLarge@8
_MiReplaceWorkingSetEntrySmall@8
_MiReplaceWsleHash@16
_MiReplenishBitMap@12
_MiReplenishFromNodeLargePages@16
_MiReplenishLocalCommit@16
_MiReplenishNonPagedSlists@20
_MiReplenishPageSlist@16
_MiReplicatePteChange@8
_MiReserveDriverPtes@8
_MiReservePageFileSpace@12
_MiReservePageFileSpaceForPage@16
_MiReservePageHash@4
_MiReservePtes@8
_MiReserveWorkingSetSwapSpace@24
_MiReserveWorkingSetSwapSpaceRuns@24
_MiResetVirtualMemory@16
_MiResidentPagesForSpan@8
_MiResolveDemandZeroFault@28
_MiResolveFileOnlyFault@4
_MiResolveImageReferences@20
_MiResolveMappedFileFault@32
_MiResolvePageFileFault@28
_MiResolvePageTablePage@24
_MiResolveProtoCombine@12
_MiResolveProtoPteFault@32
_MiResolveTransitionFault@32
_MiRestoreTransitionPte@8
_MiRestrictRangeToNode@8
_MiResumeFromHibernate@4
_MiRetardMdl@4
_MiReturnCcAccessLog@8
_MiReturnCommit@8
_MiReturnDriverLoadPages@8
_MiReturnFaultCharges@12
_MiReturnFsDirectPages@8
_MiReturnFullProcessCharges@8
_MiReturnFullProcessCommitment@8
_MiReturnImageBase@4
_MiReturnLargePages@4
_MiReturnNonPagedPoolCharges@4
_MiReturnNonPagedPoolVa@12
_MiReturnPageTablePageCommitment@28
_MiReturnPartitionPagesToParent@4
_MiReturnPartitionResidentAvailable@8
_MiReturnPfnReferenceCount@4
_MiReturnPhysicalPoolPages@4
_MiReturnProcessCommitment@8
_MiReturnProcessVads@4
_MiReturnPteMappingPair@4
_MiReturnResidentAvailable@4
_MiReturnSplitPages@4
_MiReturnSystemImageAddress@8
_MiReturnSystemImageCommitment@8
_MiReturnSystemPtes@16
_MiReturnSystemVa@16
_MiReturnVadQuota@12
_MiReturnWsToExpansionList@8
_MiReuseStandbyPage@4
_MiRevertHiberPhasePages@16
_MiRevertRelocatedImagePfn@16
_MiRevertRelocations@12
_MiRevertValidPte@20
_MiRotateComplete@4
_MiRotateHeadWsle@8
_MiRotatedToFrameBuffer@4
_MiRoundUpToPowerOf2SizeT@4
_MiSanitizePfnProtection@12
_MiScanLeafNonPagedPool@28
_MiScanNonPagedPoolVa@16
_MiScanPagefileSpace@4
_MiScanRelocationPage@24
_MiScrubAweMappedPage@16
_MiScrubLargeMappedPage@16
_MiScrubMemoryWorker@4
_MiScrubNode@4
_MiScrubNodeLargePageList@24
_MiScrubNodeLargePages@12
_MiScrubNonPagedPool@12
_MiScrubPage@12
_MiScrubProcesses@8
_MiSectionClose@16
_MiSectionControlArea@4
_MiSectionCreated@12
_MiSectionDelete@4
_MiSectionInitialization@0
_MiSectionOpen@24
_MiSecureVad@20
_MiSegmentDelete@4
_MiSelectCfgBitMap@12
_MiSelectImageBase@20
_MiSelectSessionAttachProcess@4
_MiSelectSystemImageAddress@8
_MiSelectUserAddress@28
_MiSessionAddProcess@8
_MiSessionCreate@4
_MiSessionCreateInternal@4
_MiSessionImageCompare@8
_MiSessionInitializeWorkingSetList@0
_MiSessionInsertImage@12
_MiSessionLookupImage@4
_MiSessionObjectCreate@0
_MiSessionObjectDelete@4
_MiSessionPoolVector@0
_MiSessionReferenceImage@4
_MiSessionRemoveImage@8
_MiSessionUnlinkProcess@8
_MiSessionUnloadAllImages@0
_MiSessionUpdateImageCharges@4
_MiSessionWsMetaPage@4
_MiSetControlAreaSystemVa@8
_MiSetDeleteOnClose@8
_MiSetImageProtection@16
_MiSetInPagePrefetchPriority@8
_MiSetInPagePriority@12
_MiSetNonPagedPoolNoSteal@8
_MiSetPagesModified@8
_MiSetPagingOfDriver@12
_MiSetPfnBlink@12
_MiSetPfnOwnedAndActive@16
_MiSetPfnTbFlushStamp@12
_MiSetPriorityVaRanges@12
_MiSetProtectionOnSection@32
_MiSetProtectionOnTransitionPte@16
_MiSetReadOnlyOnSectionView@16
_MiSetSystemCodeProtection@16
_MiSetTrimWhileAgingState@8
_MiSetVadBits@4
_MiSetWsleAge@16
_MiSharePages@28
_MiSharedCommitCompare@8
_MiShowBadMapper@8
_MiShutdownSystem@0
_MiSignalLargePageRebuild@4
_MiSignalNonPagedPoolWatchers@0
_MiSimpleAging@4
_MiSlowRotateCopy@12
_MiSmallVaStillMapsFrame@8
_MiSnapDriverRange@24
_MiSnapThunk@20
_MiSnapUnresolvedImport@12
_MiSortPartitionMdls@4
_MiSplitBitmapPages@12
_MiSplitDriverPage@8
_MiSplitPrivatePage@8
_MiSplitReducedCommitClonePage@8
_MiStartZeroPageWorkers@0
_MiStartingOffset@12
_MiStartingOffsetNeedLock@8
_MiStealPage@20
_MiStoreCheckCandidatePage@20
_MiStoreEvictPageFile@4
_MiStoreEvictThread@4
_MiStoreFaultComplete@8
_MiStoreFreeWriteSupport@8
_MiStoreGetWriteSupport@4
_MiStoreLogFullPagefile@0
_MiStoreLogWriteCompleteFailure@4
_MiStoreLogWriteDisabled@4
_MiStoreLogWriteIssueFailure@24
_MiStoreLogWriteIssueRetry@20
_MiStoreMarkLockedPagesModified@4
_MiStoreModifiedWriteCompletePfn@8
_MiStoreModifiedWriteDereference@4
_MiStoreSetEvictPageFile@8
_MiStoreSetPageFileRunEvicted@12
_MiStoreUpdateMemoryConditions@4
_MiStoreUpdatePagefileHash@16
_MiStoreWriteIssue@32
_MiStoreWriteModifiedCompleteApc@20
_MiStoreWriteModifiedPages@4
_MiStrongCodeImage@8
_MiSubsectionCompare@8
_MiSubsectionRequiresCharge@4
_MiSwapHardFaultPage@12
_MiSwapStackPage@20
_MiSwapStackPageNoDpc@12
_MiSwapWslEntries@12
_MiSwitchBaseAddress@16
_MiSwitchKstackPages@8
_MiSwitchToPfns@4
_MiSwitchToTransition@12
_MiSyncCommitSignals@8
_MiSyncSystemPdes@4
_MiSynchronizePageFree@4
_MiSystemFault@24
_MiSystemImageHasPrivateFixups@12
_MiSystemPartitionObjectCreate@0
_MiSystemViewCompareVa@8
_MiSystemWsMetaPage@8
_MiTbFlushSort
_MiTbFlushType@4
_MiTerminateWsle@12
_MiTradeActivePage@16
_MiTransientCombineAddress@8
_MiTranslatePageForCopy@24
_MiTrimAllSystemPagableMemory@8
_MiTrimOrAgeWorkingSet@12
_MiTrimSection@12
_MiTrimSegmentCache@0
_MiTrimSharedPage@12
_MiTrimSharedPageFromViews@20
_MiTrimSingleWsle@8
_MiTrimSystemImagePages@12
_MiTrimThisWsle@12
_MiTrimUnusedPageFileRegionsApc@12
_MiTrimUnusedPageFileRegionsWorker@4
_MiTrimWorkingSet@20
_MiTryLocateWsle@12
_MiTryLockLeafAndContainingPagesAtDpc@12
_MiTryLockLeafPage@8
_MiTryLockProtoPoolPageAtDpc@8
_MiTryLockVad@8
_MiTryUnlinkNodeLargePage@4
_MiUnlinkFreeOrZeroedPage@8
_MiUnlinkNodeLargePage@16
_MiUnlinkNodeLargePageHelper@16
_MiUnlinkPageFromBadList@4
_MiUnlinkPageFromList@8
_MiUnlinkProcessFromSession@4
_MiUnlinkSessionList@4
_MiUnlinkSessionWorkingSet@4
_MiUnlinkWorkingSet@8
_MiUnloadApproved@4
_MiUnloadSystemImage@8
_MiUnlockAllMemoryLists@4
_MiUnlockAndDereferenceVad@4
_MiUnlockCodePage@8
_MiUnlockControlAreaFileObjectShared@4
_MiUnlockDriverCode@4
_MiUnlockDriverMappings@4
_MiUnlockDynamicMemoryExclusive@8
_MiUnlockFlushMdl@12
_MiUnlockImageSection@16
_MiUnlockMdlWritePages@12
_MiUnlockNestedProtoPoolPage@4
_MiUnlockNestedVad@4
_MiUnlockPage@8
_MiUnlockPageTableCharges@12
_MiUnlockPageTableRange@8
_MiUnlockPagedAddress@4
_MiUnlockProbePacketWorkingSet@4
_MiUnlockProtoPoolPage@8
_MiUnlockStoreLockedPages@8
_MiUnlockVa@8
_MiUnlockVad@8
_MiUnlockVadRange@12
_MiUnlockWorkingSetExclusive@8
_MiUnmapFrameBuffer@16
_MiUnmapImageInSystemSpace@4
_MiUnmapLargeDriver@8
_MiUnmapLargePages@12
_MiUnmapLargeUserPages@4
_MiUnmapLockedPagesInUserSpace@8
_MiUnmapPageInHyperSpaceWorker@12
_MiUnmapVad@8
_MiUnmapViewOfSection@12
_MiUnsecureVirtualMemoryAgainstWrites@12
_MiUpControlAreaRefs@4
_MiUpdateAvailableEvents@4
_MiUpdateCfgSystemWideBitmap@12
_MiUpdateCfgSystemWideBitmapWorker@20
_MiUpdateClaimDistribution@8
_MiUpdateForkMaps@24
_MiUpdateLargePagePfns@8
_MiUpdateLargePageSectionPfn@16
_MiUpdateLastSubsectionSize@12
_MiUpdatePageAttributeStamp@4
_MiUpdatePageFileList@8
_MiUpdatePageFileSectionList@8
_MiUpdatePageTableUseCount@8
_MiUpdatePagefilePeakUsage@4
_MiUpdatePagingFileMinimum@8
_MiUpdatePerSessionProto@16
_MiUpdatePfnBackingStore@16
_MiUpdatePfnPriority@12
_MiUpdatePfnPriorityByPte@12
_MiUpdatePfnProtection@12
_MiUpdatePoolLargePages@0
_MiUpdatePrefetchPriority@20
_MiUpdateProcessSharedCommit@8
_MiUpdateReserveClusterInfo@12
_MiUpdateSessionPdeMaster@12
_MiUpdateShareCount@8
_MiUpdateSystemPdes@4
_MiUpdateThunks@16
_MiUpdateUserMappings@4
_MiUpdateVadBits@8
_MiUpdateVadHint@4
_MiUpdateWorkingSetAgeDistribution@12
_MiUpdateWsle@20
_MiUpdateWsleHash@16
_MiUseLargeDriverPage@16
_MiUseLowIoPriorityForModifiedPages@4
_MiVaIsPageFileHash@8
_MiVaRegionSessionSpecialPool@8
_MiVadCompareVpn@8
_MiVadCompareVpnRange@8
_MiVadDeleted@4
_MiVadIsCfgBitmap@4
_MiVadMapsLargeImage@4
_MiVadPureReserve@4
_MiValidCombineProtection@4
_MiValidFault@24
_MiValidVirtualizationFault@12
_MiValidateImagePages@16
_MiValidateImagePfn@28
_MiValidateInPage@4
_MiValidateMemoryRangeEntries@12
_MiValidatePagefilePageHash@4
_MiValidateReservedMapping@8
_MiValidateSectionCreate@20
_MiValidateStrongCodeDriverImage@4
_MiValidateUserCallTarget@8
_MiVerifyImageHeader@16
_MiViewMayContainPage@24
_MiVmCrcCompare@8
_MiVolunteerForTrimFirst@8
_MiWaitForAsynchronousFlushes@4
_MiWaitForCollidedFaultComplete@28
_MiWaitForForkToComplete@8
_MiWaitForFreePage@8
_MiWaitForInPageComplete@20
_MiWaitForPageWriteCompletion@16
_MiWaitForRotateToComplete@8
_MiWaitForSystemCacheViewFlush@4
_MiWaitForVadDeletion@4
_MiWakeModifiedPageWriter@8
_MiWalkVaRange@20
_MiWorkingSetInfoCheckPageTable@20
_MiWorkingSetManager@8
_MiWorkingSetVeryLarge@8
_MiWriteComplete@12
_MiWriteCompletePfn@8
_MiWriteDemandZeroPte@4
_MiWriteLargePde@20
_MiWritePageFileHash@20
_MiWriteProtectSystemImages@0
_MiWriteSharedDemandZeroPte@16
_MiWsSwapPageFileNumber@4
_MiZeroAllPageFiles@0
_MiZeroAndFlushPtes@8
_MiZeroBootMappings@0
_MiZeroCfgSystemWideBitmap@8
_MiZeroCfgSystemWideBitmapWorker@12
_MiZeroFault@32
_MiZeroInParallel@12
_MiZeroInParallelWorker@4
_MiZeroLargePage@8
_MiZeroLargePageThread@4
_MiZeroPageFile@4
_MiZeroPageFileFirstPage@4
_MiZeroPageThread@4
_MiZeroPageWrite@16
_MiZeroPfn@4
_MiZeroPhysicalPage@12
_MiZeroSectionObjectPointer@12
_MigrateOOBELanguageToInstallationLanguage@0
_MmAccessFault@16
_MmAcquireLoadLock@0
_MmAcquireSessionPoolRundown@4
_MmAddPhysicalMemory@8
_MmAddPrivateDataToCrashDump@8
_MmAddRangeToCrashDump@12
_MmAddVerifierSpecialThunks@12
_MmAddVerifierThunks@8
_MmAdjustWorkingSetSize@16
_MmAdjustWorkingSetSizeEx@24
_MmAdvanceMdl@8
_MmAllocateContiguousMemory@12
_MmAllocateContiguousMemorySpecifyCache@32
_MmAllocateContiguousMemorySpecifyCacheNode@36
_MmAllocateContiguousNodeMemory@36
_MmAllocateDumpHibernateResources@4
_MmAllocateIndependentPages@8
_MmAllocateIsrStack@8
_MmAllocateMappingAddress@8
_MmAllocateMdlForIoSpace@12
_MmAllocateNodePagesForMdlEx@40
_MmAllocateNonCachedMemory@4
_MmAllocatePagesForMdl@28
_MmAllocatePagesForMdlEx@36
_MmAllocateSpecialPool@16
_MmAreMdlPagesCached@4
_MmAreMdlPagesLocked@4
_MmAssignProcessToJob@8
_MmAttachSession@8
_MmBackSystemImageWithPagefile@4
_MmBuildMdlForNonPagedPool@4
_MmCallDllInitialize@8
_MmCanFileBeTruncated@8
_MmCanThreadFault@0
_MmChangeImageProtection@16
_MmChangeSectionBackingFile@12
_MmChargeResources@16
_MmCheckCachedPageStates@16
_MmCheckForSafeExecution@16
_MmCheckMapIoSpace@12
_MmCheckMdlPages@4
_MmCleanProcessAddressSpace@4
_MmCombineIdenticalPages@8
_MmCommitSessionMappedView@8
_MmConfigurePrefetchSeekThreshold@4
_MmCopyMemory@24
_MmCopyToCachedPage@20
_MmCopyVirtualMemory@28
_MmCreateCacheManagerSection@16
_MmCreateKernelStack@12
_MmCreateMdl@12
_MmCreateMirror@0
_MmCreatePeb@16
_MmCreateProcessAddressSpace@20
_MmCreateSection@32
_MmCreateSpecialImageSection@20
_MmCreateSystemSection@40
_MmCreateTeb@20
_MmDbgCopyMemory@24
_MmDbgMarkPfnModifiedWorker@0
_MmDeleteKernelStack@8
_MmDeleteProcessAddressSpace@4
_MmDeleteProcessor@4
_MmDeleteTeb@8
_MmDetachSession@8
_MmDeterminePoolType@4
_MmDisableModifiedWriteOfSection@4
_MmDoesFileHaveUserWritableReferences@4
_MmDuplicateMemory@4
_MmEmptyAllWorkingSets@0
_MmEnableModifiedWriteOfSection@4
_MmEnablePAT@0
_MmEnablePeriodicAccessClearing@4
_MmEnableProcessSvm@0
_MmEnableVerifierAllDrivers@0
_MmEnableVerifierForDriver@8
_MmEnforceWorkingSetLimit@8
_MmEnoughMemoryForWrite@0
_MmEnumerateAddressSpaceAndReferenceImages@8
_MmEnumerateBadPages@4
_MmEnumerateSystemImages@8
_MmExtendSection@12
_MmFlushAllFilesystemPages@4
_MmFlushAllPages@0
_MmFlushImageSection@8
_MmFlushSection@24
_MmFlushVirtualMemory@16
_MmForceSectionClosed@8
_MmFreeAccessPfnBuffer@8
_MmFreeBootDriverInitializationCode@0
_MmFreeBootRegistry@0
_MmFreeContiguousMemory@4
_MmFreeContiguousMemorySpecifyCache@12
_MmFreeIndependentPages@8
_MmFreeIsrStack@4
_MmFreeLoaderBlock@4
_MmFreeMappingAddress@8
_MmFreeNonCachedMemory@8
_MmFreePagesFromMdl@4
_MmFreeSpecialPool@4
_MmGetAvailablePages@4
_MmGetAvailablePagesBelowPriority@4
_MmGetCacheAttribute@12
_MmGetChannelInformation@12
_MmGetDefaultPagePriority@0
_MmGetDirectoryFrameFromProcess@4
_MmGetDumpRange@12
_MmGetFileNameForAddress@8
_MmGetFileNameForSection@8
_MmGetFileObjectForSection@4
_MmGetHighestPhysicalPage@4
_MmGetImageBase@12
_MmGetIoSessionState@8
_MmGetMaximumFileSectionSize@0
_MmGetMaximumNonPagedPoolInBytes@0
_MmGetMinWsPagePriority@0
_MmGetNextNode@8
_MmGetNextSession@4
_MmGetNodeChannelRanges@8
_MmGetNumberOfFreeSystemPtes@0
_MmGetNumberOfPhysicalPages@4
_MmGetPageBadStatus@4
_MmGetPageFileForCrashDump@0
_MmGetPageFileInformation@16
_MmGetPagedPoolCommitPointer@0
_MmGetPeakCommitment@4
_MmGetPhysicalAddress@4
_MmGetPhysicalMemoryRanges@0
_MmGetResidentAvailablePages@4
_MmGetSectionInformation@12
_MmGetSectionRange@12
_MmGetSessionById@4
_MmGetSessionCreateTime@4
_MmGetSessionGlobalVA@4
_MmGetSessionId@4
_MmGetSessionIdEx@4
_MmGetSessionLocaleId@0
_MmGetSessionMappedViewInformation@16
_MmGetSessionObjectById@4
_MmGetSessionObjectByProcess@4
_MmGetSessionSchedulingGroup@4
_MmGetSessionSchedulingGroupByProcess@4
_MmGetSharedCommit@0
_MmGetSystemPageCounts@4
_MmGetSystemRoutineAddress@4
_MmGetTotalCommitLimit@4
_MmGetTotalCommittedPages@4
_MmGetVirtualForPhysical@8
_MmGetWorkingSetLeafSize@4
_MmGrowKernelStack@4
_MmGrowKernelStackEx@8
_MmHardFaultBytesRequired@16
_MmIdentifyPhysicalMemory@12
_MmImageSectionPagable@4
_MmInSwapProcess@4
_MmInSwapVirtualAddresses@12
_MmInSwapWorkingSet@4
_MmInitNucleus@4
_MmInitSystem@8
_MmInitSystemDll@0
_MmInitializeHandBuiltProcess2@4
_MmInitializeHandBuiltProcess@4
_MmInitializeMemoryLimits@8
_MmInitializeProcessAddressSpace@20
_MmInitializeProcessor@4
_MmInvalidateDumpAddresses@8
_MmIsAddressValid@4
_MmIsDriverLoadedCurrentSession@4
_MmIsDriverSuspectForVerifier@4
_MmIsDriverVerifying@4
_MmIsDriverVerifyingByAddress@4
_MmIsFileMapped@8
_MmIsFileObjectAPagingFile@4
_MmIsIoSpaceActive@12
_MmIsNonPagedPoolNx@4
_MmIsNonPagedSystemAddressValid@4
_MmIsRecursiveIoFault@0
_MmIsSessionAddress@4
_MmIsSessionInCurrentServerSilo@4
_MmIsSessionLeaderProcess@4
_MmIsSpecialPoolAddress@4
_MmIsThisAnNtAsSystem@0
_MmIsVerifierEnabled@4
_MmIsWriteErrorFatal@12
_MmIssueMemoryListCommand@12
_MmLinkJobProcess@8
_MmLoadSystemImage@24
_MmLocateUnloadedDriver@4
_MmLockLoadedModuleListExclusive@4
_MmLockLoadedModuleListShared@4
_MmLockPagableDataSection@4
_MmLockPagableSectionByHandle@4
_MmLockPreChargedPagedPool@8
_MmLogQueryCombineStats@8
_MmLogSystemShareablePfnInfo@4
_MmLowPowerEpochCallback@16
_MmMapApiSetView@4
_MmMapIoSpace@16
_MmMapIoSpaceEx@16
_MmMapLockedPages@8
_MmMapLockedPagesSpecifyCache@24
_MmMapLockedPagesWithReservedMapping@16
_MmMapMemoryDumpMdl@4
_MmMapMemoryDumpMdlEx@16
_MmMapUserAddressesToPage@12
_MmMapViewInSessionSpace@12
_MmMapViewInSessionSpaceEx@20
_MmMapViewInSystemCache@16
_MmMapViewInSystemSpace@12
_MmMapViewInSystemSpaceEx@20
_MmMapViewOfSection@40
_MmMarkHiberPhase@0
_MmMarkHiberRange@12
_MmMarkImageForHiberPhase@4
_MmMarkPhysicalMemoryAsBad@8
_MmMarkPhysicalMemoryAsGood@8
_MmMdlPageContentsState@8
_MmMdlPagesAreZero@4
_MmNotifyProcessInSwapTrigger@4
_MmObtainChargesToLockPagedPool@8
_MmOutPageKernelStack@4
_MmOutSwapProcess@4
_MmOutSwapVirtualAddresses@16
_MmOutSwapWorkingSet@8
_MmPageEntireDriver@4
_MmPartitionObjectDelete@4
_MmPerfLogSessionRundown@8
_MmPerformMemoryListCommand@4
_MmPrefetchForCacheManager@32
_MmPrefetchPages@8
_MmPrefetchPagesEx@12
_MmPrefetchVirtualAddresses@4
_MmPrefetchVirtualMemory@16
_MmProbeAndLockPages@12
_MmProbeAndLockProcessPages@16
_MmProbeAndLockSelectedPages@16
_MmProcessWorkingSetControl@16
_MmPropagateDirtyBitsToPfn@8
_MmProtectMdlSystemAddress@8
_MmProtectSystemCacheView@12
_MmPurgeSection@16
_MmQueryMemoryListInformation@16
_MmQueryProcessWorkingSetSwapPages@8
_MmQuerySessionWorkingSetInformation@8
_MmQuerySpecialPoolBlockSize@4
_MmQuerySpecialPoolBlockType@4
_MmQuerySystemMemoryInformation@8
_MmQuerySystemSize@0
_MmQuerySystemVaInformation@12
_MmQuerySystemWorkingSetInformation@8
_MmQueryVirtualMemory@28
_MmQueryWorkingSetInformation@24
_MmQuitNextSession@4
_MmRaisePoolQuota@16
_MmReadProcessPageTables@8
_MmReleaseDumpHibernateResources@8
_MmReleaseLoadLock@4
_MmReleaseOpaqueSwapSupport@4
_MmReleaseResourceCharge@12
_MmRelocatePfnList@16
_MmRemoveExecuteGrants@0
_MmRemovePhysicalMemory@8
_MmRemoveSystemCacheFromDump@4
_MmReplaceImportEntry@8
_MmReserveViewInSystemCache@0
_MmResetDriverPaging@4
_MmResourcesAvailable@12
_MmReturnChargesToLockPagedPool@8
_MmReturnPoolQuota@8
_MmRotatePhysicalView@24
_MmScrubMemory@8
_MmSectionToSectionObjectPointers@4
_MmSecureVirtualMemory@12
_MmSecureVirtualMemoryAgainstWrites@12
_MmSessionSetUnloadAddress@4
_MmSetAccessLogging@8
_MmSetAddressRangeModified@8
_MmSetBankedSection@24
_MmSetCommitReleaseEligibility@8
_MmSetHardFaultBehavior@8
_MmSetMemoryPriorityProcess@8
_MmSetMinimumAgeRate@4
_MmSetPageProtection@12
_MmSetPfnListPriorities@8
_MmSetPriorityVaRanges@12
_MmSetSessionLocaleId@4
_MmSetSessionObjectIoEvent@4
_MmSetSystemVaInformation@12
_MmSetTrimWhileAgingState@4
_MmShutdownSystem@4
_MmSizeOfMdl@8
_MmSnapTriageDumpInformation@16
_MmStealTopLevelPage@4
_MmStoreAllocateVirtualMemory@4
_MmStoreChargeResidentAvailableForRead@4
_MmStoreDecommitVirtualMemory@8
_MmStoreFlushAllHintedPages@0
_MmStoreFlushOutstandingEvictions@0
_MmStoreFreeVirtualMemory@4
_MmStoreProbeAndLockPages@4
_MmStoreRegister@8
_MmTriageActiveInLastCrash@4
_MmTrimAllSystemPagableMemory@4
_MmTrimFilePagesFromWorkingSets@0
_MmTrimSection@12
_MmTryIdentifyPage@8
_MmUnloadSystemImage@4
_MmUnlockPagableImageSection@4
_MmUnlockPages@4
_MmUnlockPreChargedPagedPool@8
_MmUnmapIoSpace@8
_MmUnmapLockedPages@8
_MmUnmapReservedMapping@12
_MmUnmapViewInSessionSpace@4
_MmUnmapViewInSystemCache@12
_MmUnmapViewInSystemSpace@4
_MmUnmapViewOfSection@8
_MmUnsecureVirtualMemory@4
_MmUpdateHiberMappings@8
_MmUpdateMdlTracker@12
_MmUpdateOldWorkingSetPages@12
_MmValidateUserCallTarget@8
_MmVerifierTrimMemory@0
_MmVerifyCallbackFunction@4
_MmVirtualAccessFault@12
_MmWaitForCacheManagerPrefetch@4
_MmWaitMultipleForCacheManagerPrefetch@12
_MmWriteTriageInformation@4
_MmWriteUnloadedDriverInformation@4
_MmZeroPageFileAtShutdown@0
_MmZeroPageWrite@16
_MxComputeFreeNodeDescriptorRequirements@8
_MxComputePfnPagesNeeded@8
_MxConvertKernelHal@0
_MxCopyPage@8
_MxCreateFreePfns@4
_MxCreatePfn@16
_MxCreatePfns@16
_MxDescriptorSort
_MxFillPhysicalPage@8
_MxGetNextLargePage@4
_MxGetNextPage@4
_MxGetPhase0Mapping@0
_MxInitializeFreeNodeDescriptors@8
_MxMapPfnRange@12
_MxMapVa@12
_MxMemoryLicense@4
_MxMovePageTables@20
_MxPageAlwaysHot@4
_MxReleaseFreeDescriptor@8
_MxRelocatePageTables@4
_MxSwapPages@8
_MxZeroBootMappings@12
_MxZeroPageTablePfns@16
_NTFastDOSIO@8
_NormBuffer__Append@8
_NormBuffer__AppendAndSortDecomposed@8
_NormBuffer__AppendEx@16
_NormBuffer__Construct@24
_NormBuffer__GetCurrentOutputChar@8
_NormBuffer__GetLastChar@4
_NormBuffer__Insert@12
_NormBuffer__InsertAtBlockedLocation@16
_NormBuffer__IsBlocked@8
_NormBuffer__LastStartBase@4
_NormBuffer__LastStartBasePair@4
_NormBuffer__RecheckStartCombinations@4
_NormBuffer__RemoveCharacter@8
_NormBuffer__ReplaceLastStartBase@16
_NormBuffer__ReplaceLastStartBasePair@16
_NormBuffer__RewindOutputCharacter@4
_NormBuffer__SetLastStart@20
_NormBuffer__SortBeforeSameClass@8
_NormBuffer__VerifyLastStart@4
_NormalizationListEntry_Alloc@0
_NormalizationList__InsertTail@4
_NormalizationList__Lock@0
_NormalizationList__Lookup@4
_NormalizationList__Unlock@0
_Normalization__AppendDecomposedChar@12
_Normalization__CanCombinableCharactersCombine@12
_Normalization__CanCombineWithStartBase@16
_Normalization__CanCombineWithStartFirstPair@20
_Normalization__GetCharacterInfo@16
_Normalization__GetFirstDecomposedCharPlane0@8
_Normalization__GetLastChar@24
_Normalization__GetSecondAndThirdDecomposedCharPlane0@16
_Normalization__GetSecondDecomposedCharPlane0@8
_Normalization__GetThirdAndLastDecomposedCharPlane0@8
_Normalization__GuessBetterCharCount@16
_Normalization__GuessCharCount@16
_Normalization__GuessCharCountBySize@8
_Normalization__IsNormalized@16
_Normalization__LoadClassMapExceptions@4
_Normalization__LoadTables@16
_Normalization__Normalize@24
_Normalization__NormalizeCharacter@16
_Normalization__PageLookup@8
_Normalization__TableLookup@12
_NtAcceptConnectPort@24
_NtAccessCheck@32
_NtAccessCheckAndAuditAlarm@44
_NtAccessCheckByType@44
_NtAccessCheckByTypeAndAuditAlarm@64
_NtAccessCheckByTypeResultList@44
_NtAccessCheckByTypeResultListAndAuditAlarm@64
_NtAccessCheckByTypeResultListAndAuditAlarmByHandle@68
_NtAddAtom@12
_NtAddAtomEx@16
_NtAddBootEntry@8
_NtAddDriverEntry@8
_NtAdjustGroupsToken@24
_NtAdjustPrivilegesToken@24
_NtAdjustTokenClaimsAndDeviceGroups@64
_NtAlertResumeThread@8
_NtAlertThread@4
_NtAlertThreadByThreadId@4
_NtAllocateLocallyUniqueId@4
_NtAllocateReserveObject@12
_NtAllocateUserPhysicalPages@12
_NtAllocateUuids@16
_NtAllocateVirtualMemory@24
_NtAlpcAcceptConnectPort@36
_NtAlpcCancelMessage@12
_NtAlpcConnectPort@44
_NtAlpcConnectPortEx@44
_NtAlpcCreatePort@12
_NtAlpcCreatePortSection@24
_NtAlpcCreateResourceReserve@16
_NtAlpcCreateSectionView@12
_NtAlpcCreateSecurityContext@12
_NtAlpcDeletePortSection@12
_NtAlpcDeleteResourceReserve@12
_NtAlpcDeleteSectionView@12
_NtAlpcDeleteSecurityContext@12
_NtAlpcDisconnectPort@8
_NtAlpcImpersonateClientContainerOfPort@12
_NtAlpcImpersonateClientOfPort@12
_NtAlpcOpenSenderProcess@24
_NtAlpcOpenSenderThread@24
_NtAlpcQueryInformation@20
_NtAlpcQueryInformationMessage@24
_NtAlpcRevokeSecurityContext@12
_NtAlpcSendWaitReceivePort@32
_NtAlpcSetInformation@16
_NtApphelpCacheControl@8
_NtAreMappedFilesTheSame@8
_NtAssignProcessToJobObject@8
_NtAssociateWaitCompletionPacket@32
_NtCallbackReturn@12
_NtCancelIoFile@8
_NtCancelIoFileEx@12
_NtCancelSynchronousIoFile@12
_NtCancelTimer2@8
_NtCancelTimer@8
_NtCancelWaitCompletionPacket@8
_NtClearEvent@4
_NtClose@4
_NtCloseObjectAuditAlarm@12
_NtCompactKeys@8
_NtCompareObjects@8
_NtCompareTokens@12
_NtCompleteConnectPort@4
_NtCompressKey@4
_NtConnectPort@32
_NtContinue@8
_NtCreateDebugObject@16
_NtCreateDirectoryObject@12
_NtCreateDirectoryObjectEx@20
_NtCreateEvent@20
_NtCreateEventPair@12
_NtCreateFile@44
_NtCreateIRTimer@8
_NtCreateIoCompletion@16
_NtCreateJobObject@12
_NtCreateJobSet@12
_NtCreateKey@28
_NtCreateKeyTransacted@32
_NtCreateKeyTransacted_Stub@32
_NtCreateKeyedEvent@16
_NtCreateLowBoxToken@36
_NtCreateMailslotFile@32
_NtCreateMutant@16
_NtCreateNamedPipeFile@56
_NtCreatePagingFile@16
_NtCreatePartition@20
_NtCreatePort@20
_NtCreatePrivateNamespace@16
_NtCreateProcess@32
_NtCreateProcessEx@36
_NtCreateProfile@36
_NtCreateProfileEx@40
_NtCreateSection@28
_NtCreateSemaphore@20
_NtCreateSymbolicLinkObject@16
_NtCreateThread@32
_NtCreateThreadEx@44
_NtCreateTimer2@20
_NtCreateTimer@16
_NtCreateToken@52
_NtCreateTokenEx@68
_NtCreateUserProcess@44
_NtCreateWaitCompletionPacket@12
_NtCreateWaitablePort@20
_NtCreateWnfStateName@28
_NtCreateWorkerFactory@40
_NtDebugActiveProcess@8
_NtDebugContinue@12
_NtDelayExecution@8
_NtDeleteAtom@4
_NtDeleteBootEntry@4
_NtDeleteDriverEntry@4
_NtDeleteFile@4
_NtDeleteKey@4
_NtDeleteObjectAuditAlarm@12
_NtDeletePrivateNamespace@4
_NtDeleteValueKey@8
_NtDeleteWnfStateData@8
_NtDeleteWnfStateName@4
_NtDeviceIoControlFile@40
_NtDisableLastKnownGood@0
_NtDisplayString@4
_NtDrawText@4
_NtDuplicateObject@28
_NtDuplicateToken@24
_NtEnableLastKnownGood@0
_NtEnumerateBootEntries@8
_NtEnumerateDriverEntries@8
_NtEnumerateKey@24
_NtEnumerateSystemEnvironmentValuesEx@12
_NtEnumerateValueKey@24
_NtExtendSection@8
_NtFilterBootOption@20
_NtFilterToken@24
_NtFilterTokenEx@56
_NtFindAtom@12
_NtFlushBuffersFile@8
_NtFlushBuffersFileEx@20
_NtFlushInstallUILanguage@8
_NtFlushInstructionCache@12
_NtFlushKey@4
_NtFlushProcessWriteBuffers@0
_NtFlushVirtualMemory@16
_NtFlushWriteBuffer@0
_NtFreeUserPhysicalPages@12
_NtFreeVirtualMemory@16
_NtFreezeRegistry@4
_NtFsControlFile@40
_NtGetCachedSigningLevel@24
_NtGetCompleteWnfStateSubscription@24
_NtGetContextThread@8
_NtGetCurrentProcessorNumber@0
_NtGetCurrentProcessorNumberEx@4
_NtGetDevicePowerState@8
_NtGetEnvironmentVariableEx@20
_NtGetMUIRegistryInfo@12
_NtGetNextProcess@20
_NtGetNextThread@24
_NtGetNlsSectionPtr@20
_NtGetWriteWatch@28
_NtImpersonateAnonymousToken@4
_NtImpersonateClientOfPort@8
_NtImpersonateThread@12
_NtInitializeNlsFiles@12
_NtInitializeRegistry@4
_NtInitiatePowerAction@16
_NtIsProcessInJob@8
_NtIsSystemResumeAutomatic@0
_NtIsUILanguageComitted@0
_NtListenPort@8
_NtLoadDriver@4
_NtLoadKey2@12
_NtLoadKey@8
_NtLoadKeyEx@32
_NtLockFile@40
_NtLockProductActivationKeys@8
_NtLockRegistryKey@4
_NtLockVirtualMemory@16
_NtMakePermanentObject@4
_NtMakeTemporaryObject@4
_NtManagePartition@20
_NtMapCMFModule@24
_NtMapUserPhysicalPages@12
_NtMapUserPhysicalPagesScatter@12
_NtMapViewOfSection@40
_NtModifyBootEntry@4
_NtModifyDriverEntry@4
_NtNotifyChangeDirectoryFile@36
_NtNotifyChangeKey@40
_NtNotifyChangeMultipleKeys@48
_NtNotifyChangeSession@32
_NtOpenDirectoryObject@12
_NtOpenEvent@12
_NtOpenEventPair@12
_NtOpenFile@24
_NtOpenIoCompletion@12
_NtOpenJobObject@12
_NtOpenKey@12
_NtOpenKeyEx@16
_NtOpenKeyTransacted@16
_NtOpenKeyTransactedEx@20
_NtOpenKeyTransacted_Stub@16
_NtOpenKeyedEvent@12
_NtOpenMutant@12
_NtOpenObjectAuditAlarm@48
_NtOpenPartition@12
_NtOpenPrivateNamespace@16
_NtOpenProcess@16
_NtOpenProcessToken@12
_NtOpenProcessTokenEx@16
_NtOpenSection@12
_NtOpenSemaphore@12
_NtOpenSession@12
_NtOpenSymbolicLinkObject@12
_NtOpenThread@16
_NtOpenThreadToken@16
_NtOpenThreadTokenEx@20
_NtOpenTimer@12
_NtPlugPlayControl@12
_NtPowerInformation@20
_NtPrivilegeCheck@12
_NtPrivilegeObjectAuditAlarm@24
_NtPrivilegedServiceAuditAlarm@20
_NtProtectVirtualMemory@20
_NtPulseEvent@8
_NtQueryAttributesFile@8
_NtQueryBootEntryOrder@8
_NtQueryBootOptions@8
_NtQueryDebugFilterState@8
_NtQueryDefaultLocale@8
_NtQueryDefaultUILanguage@4
_NtQueryDirectoryFile@44
_NtQueryDirectoryObject@28
_NtQueryDriverEntryOrder@8
_NtQueryEaFile@36
_NtQueryEnvironmentVariableInfoEx@16
_NtQueryEvent@20
_NtQueryFullAttributesFile@8
_NtQueryInformationAtom@20
_NtQueryInformationFile@20
_NtQueryInformationJobObject@20
_NtQueryInformationPort@20
_NtQueryInformationProcess@20
_NtQueryInformationThread@20
_NtQueryInformationToken@20
_NtQueryInformationWorkerFactory@20
_NtQueryInstallUILanguage@4
_NtQueryIntervalProfile@8
_NtQueryIoCompletion@20
_NtQueryKey@20
_NtQueryLicenseValue@20
_NtQueryMultipleValueKey@24
_NtQueryMutant@20
_NtQueryObject@20
_NtQueryOpenSubKeys@8
_NtQueryOpenSubKeysEx@16
_NtQueryPerformanceCounter@8
_NtQueryPortInformationProcess@0
_NtQueryQuotaInformationFile@36
_NtQuerySection@20
_NtQuerySecurityAttributesToken@24
_NtQuerySecurityObject@20
_NtQuerySemaphore@20
_NtQuerySymbolicLinkObject@12
_NtQuerySystemEnvironmentValue@16
_NtQuerySystemEnvironmentValueEx@20
_NtQuerySystemInformation@16
_NtQuerySystemInformationEx@24
_NtQuerySystemTime@4
_NtQueryTimer@20
_NtQueryTimerResolution@12
_NtQueryValueKey@24
_NtQueryVirtualMemory@24
_NtQueryVolumeInformationFile@20
_NtQueryWnfStateData@24
_NtQueryWnfStateNameInformation@20
_NtQueueApcThread@20
_NtQueueApcThreadEx@24
_NtRaiseException@12
_NtRaiseHardError@24
_NtReadFile@36
_NtReadFileScatter@36
_NtReadRequestData@24
_NtReadVirtualMemory@20
_NtRegisterThreadTerminatePort@4
_NtReleaseKeyedEvent@16
_NtReleaseMutant@8
_NtReleaseSemaphore@12
_NtReleaseWorkerFactoryWorker@4
_NtRemoveIoCompletion@20
_NtRemoveIoCompletionEx@24
_NtRemoveProcessDebug@8
_NtRenameKey@8
_NtReplaceKey@12
_NtReplacePartitionUnit@12
_NtReplyPort@8
_NtReplyWaitReceivePort@16
_NtReplyWaitReceivePortEx@20
_NtReplyWaitReplyPort@8
_NtRequestPort@8
_NtRequestWaitReplyPort@12
_NtResetEvent@8
_NtResetWriteWatch@12
_NtRestoreKey@12
_NtResumeProcess@4
_NtResumeThread@8
_NtRevertContainerImpersonation@0
_NtSaveKey@8
_NtSaveKeyEx@12
_NtSaveMergedKeys@12
_NtSecureConnectPort@36
_NtSerializeBoot@0
_NtSetBootEntryOrder@8
_NtSetBootOptions@8
_NtSetCachedSigningLevel@20
_NtSetContextThread@8
_NtSetDebugFilterState@12
_NtSetDefaultHardErrorPort@4
_NtSetDefaultLocale@8
_NtSetDefaultUILanguage@4
_NtSetDriverEntryOrder@8
_NtSetEaFile@16
_NtSetEvent@8
_NtSetEventBoostPriority@4
_NtSetHighEventPair@4
_NtSetHighWaitLowEventPair@4
_NtSetIRTimer@8
_NtSetInformationDebugObject@20
_NtSetInformationFile@20
_NtSetInformationJobObject@16
_NtSetInformationKey@16
_NtSetInformationObject@16
_NtSetInformationProcess@16
_NtSetInformationSymbolicLink@16
_NtSetInformationThread@16
_NtSetInformationToken@16
_NtSetInformationVirtualMemory@24
_NtSetInformationWorkerFactory@16
_NtSetIntervalProfile@8
_NtSetIoCompletion@20
_NtSetIoCompletionEx@24
_NtSetLdtEntries@24
_NtSetLowEventPair@4
_NtSetLowWaitHighEventPair@4
_NtSetQuotaInformationFile@16
_NtSetSecurityObject@12
_NtSetSystemEnvironmentValue@8
_NtSetSystemEnvironmentValueEx@20
_NtSetSystemInformation@12
_NtSetSystemPowerState@12
_NtSetSystemTime@8
_NtSetThreadExecutionState@8
_NtSetTimer2@16
_NtSetTimer@28
_NtSetTimerEx@16
_NtSetTimerResolution@12
_NtSetUuidSeed@4
_NtSetValueKey@24
_NtSetVolumeInformationFile@20
_NtSetWnfProcessNotificationEvent@4
_NtShutdownSystem@4
_NtShutdownWorkerFactory@8
_NtSignalAndWaitForSingleObject@16
_NtStartProfile@4
_NtStopProfile@4
_NtSubscribeWnfStateChange@16
_NtSuspendProcess@4
_NtSuspendThread@8
_NtSystemDebugControl@24
_NtTerminateJobObject@8
_NtTerminateProcess@8
_NtTerminateThread@8
_NtTestAlert@0
_NtThawRegistry@0
_NtTraceControl@24
_NtTraceEvent@16
_NtTranslateFilePath@16
_NtUmsThreadYield@4
_NtUnloadDriver@4
_NtUnloadKey2@8
_NtUnloadKey@4
_NtUnloadKeyEx@8
_NtUnlockFile@20
_NtUnlockVirtualMemory@16
_NtUnmapViewOfSection@8
_NtUnmapViewOfSectionEx@12
_NtUnsubscribeWnfStateChange@4
_NtUpdateWnfStateData@28
_NtVdmControl@8
_NtWaitForAlertByThreadId@8
_NtWaitForDebugEvent@16
_NtWaitForKeyedEvent@16
_NtWaitForMultipleObjects32@20
_NtWaitForMultipleObjects@20
_NtWaitForSingleObject@12
_NtWaitForWorkViaWorkerFactory@20
_NtWaitHighEventPair@4
_NtWaitLowEventPair@4
_NtWorkerFactoryWorkerReady@4
_NtWriteFile@36
_NtWriteFileGather@36
_NtWriteRequestData@24
_NtWriteVirtualMemory@20
_NtYieldExecution@0
_NtosSecureKernelImportBugcheck@0
_ObAdjustSecurityQuota@8
_ObAssignObjectSecurityDescriptor@12
_ObAssignSecurity@16
_ObAuditInheritedHandleProcedure@16
_ObCaptureObjectStateForDuplication@24
_ObCheckActiveHandles@4
_ObCheckCreateObjectAccess@28
_ObCheckObjectAccess@20
_ObCloseHandle@8
_ObCloseHandleTableEntry@24
_ObCompleteObjectDuplication@20
_ObCreateObject@36
_ObCreateObjectEx@40
_ObCreateObjectType@16
_ObCreateObjectTypeEx@20
_ObDeassignSecurity@4
_ObDeleteCapturedInsertInfo@4
_ObDereferenceDeviceMap@4
_ObDereferenceObject@4
_ObDereferenceObjectDeferDelete@4
_ObDereferenceObjectDeferDeleteWithTag@8
_ObDereferenceProcessHandleTable@4
_ObDereferenceSecurityDescriptor@8
_ObDestroyHandleRevocationBlock@4
_ObDisableEtwReferenceTrace@0
_ObDrainDeferredObjectDeletion@0
_ObDuplicateObject@32
_ObEnableEtwReferenceTrace@0
_ObEnumerateObjectsByType@12
_ObFindHandleForObject@20
_ObGetFilterVersion@0
_ObGetHandleInformation@12
_ObGetHandleInformationEx@12
_ObGetObjectInformation@16
_ObGetObjectSecurity@12
_ObGetObjectType@4
_ObGetProcessHandleCount@8
_ObGetRootDirectoryNameByPointer@8
_ObHandleRevocationBlockAddObject@8
_ObInheritObjectHandle@16
_ObInitProcess@16
_ObInitServerSilo@4
_ObInitSystem@0
_ObInitializeProcessor@4
_ObInsertObject@24
_ObInsertObjectEx@28
_ObIsDosDeviceLocallyMapped@8
_ObIsKernelHandle@4
_ObKillProcess@4
_ObLogSecurityDescriptor@12
_ObMakeTemporaryObject@4
_ObNormalizeHandleValue@4
_ObOpenObjectByName@28
_ObOpenObjectByPointer@28
_ObOpenObjectByPointerWithTag@32
_ObQueryDeviceMapInformation@12
_ObQueryHandleEntryInformation@8
_ObQueryNameInfo@4
_ObQueryNameString@16
_ObQueryNameStringMode@20
_ObQueryObjectAuditingByHandle@8
_ObQueryRefTraceInformation@12
_ObQuerySecurityDescriptorInfo@20
_ObQuerySecurityObject@20
_ObQueryTypeInfo@16
_ObQueryTypeName@16
_ObReferenceFileObjectForWrite@16
_ObReferenceObjectByHandle@24
_ObReferenceObjectByHandleWithTag@28
_ObReferenceObjectByName@32
_ObReferenceObjectByNameEx@28
_ObReferenceObjectByPointer@16
_ObReferenceObjectByPointerWithTag@20
_ObReferenceProcessHandleTable@4
_ObReferenceSecurityDescriptor@8
_ObRegisterCallbacks@8
_ObReleaseDuplicateInfo@4
_ObReleaseObjectSecurity@8
_ObRevokeHandles@4
_ObSetCurrentProcessDeviceMap@0
_ObSetDeviceMap@8
_ObSetDirectoryDeviceMap@8
_ObSetHandleAttributes@12
_ObSetRefTraceInformation@8
_ObSetSecurityDescriptorInfo@24
_ObSetSecurityObjectByPointer@12
_ObSetSiloRootDirectoryByPointer@12
_ObShutdownServerSilo@8
_ObShutdownSystem@4
_ObUnRegisterCallbacks@4
_ObWaitForMultipleObjects@28
_ObWaitForSingleObject@20
_ObpAdjustAccessMask@4
_ObpAdjustCreatorAccessState@16
_ObpAllocateAndQuerySecurityDescriptorInfo@12
_ObpAllocateObject@28
_ObpAllocateTypeIndex@4
_ObpAssignSecurity@24
_ObpAuditObjectAccess@20
_ObpCallPostOperationCallbacks@8
_ObpCallPreOperationCallbacks@12
_ObpCaptureBoundaryDescriptor@8
_ObpCaptureHandleInformation@24
_ObpCaptureHandleInformationEx@24
_ObpCaptureObjectCreateInformation@24
_ObpCaptureObjectName@16
_ObpChargeQuotaForObject@12
_ObpCheckDuplicateEntries@4
_ObpCheckObjectReference@20
_ObpCheckTraverseAccess@24
_ObpCloseDirectoryObject@16
_ObpCloseHandle@8
_ObpCompareEntryLevel1@8
_ObpCompareEntryLevel2@8
_ObpCompareNamespaceEntry@8
_ObpCreateCacheEntry@16
_ObpCreateDirectoryObject@20
_ObpCreateDosDevicesDirectory@0
_ObpCreateHandle@40
_ObpCreateSymbolicLinkName@4
_ObpCreateTypeArray@4
_ObpDecrementHandleCount@8
_ObpDeferObjectDeletion@4
_ObpDeferPushRefDerefInfo@24
_ObpDeleteDirectoryEntry@4
_ObpDeleteDirectoryObject@4
_ObpDeleteNameCheck@4
_ObpDeleteSymbolicLink@4
_ObpDeleteSymbolicLinkName@4
_ObpDeregisterObject@4
_ObpDestroyStackAndObjectTables@12
_ObpDestroyTypeArray@4
_ObpEnumFindHandleProcedure@16
_ObpFreeDosDevicesProtection@4
_ObpFreeWorkItemBlock@4
_ObpGetDosDevicesProtection@4
_ObpGetObjectRefInfo@8
_ObpGetObjectSecurity@16
_ObpGetShadowDirectory@4
_ObpGetTraceIndex@4
_ObpGrantAccess@24
_ObpHandleRevocationBlockRemoveInsertedObject@16
_ObpHandleRevocationBlockRemoveObject@4
_ObpHashBoundaryFunction@8
_ObpIncrementHandleCountEx@28
_ObpInitInfoBlockOffsets@0
_ObpInitSecurityDescriptorCache@0
_ObpInitStackAndObjectTables@0
_ObpInitStackTrace@0
_ObpInitializeNamespaceTable@4
_ObpInsertCallbackByAltitude@8
_ObpInsertDirectoryEntry@12
_ObpInsertHandleCount@4
_ObpInsertOrLocateNamedObject@28
_ObpIsObjectPoolTagTraced@4
_ObpIsUnsecureName@8
_ObpLockHandleDataBaseEntry@12
_ObpLookupDirectoryEntry@20
_ObpLookupDirectoryUsingHash@16
_ObpLookupNamespaceEntry@8
_ObpLookupObjectName@44
_ObpParseSymbolicLink@40
_ObpPostInterceptHandleCreate@20
_ObpPostInterceptHandleDuplicate@20
_ObpPreInterceptHandleDuplicate@24
_ObpProcessRemoveObjectDpcWorker@16
_ObpProcessRemoveObjectQueue@4
_ObpPushRefDerefInfo@24
_ObpPushStackInfo@16
_ObpPushStackInfoQueue@4
_ObpReferenceDeviceMap@4
_ObpReferenceProcessObjectByHandle@32
_ObpReferenceSecurityDescriptor@4
_ObpRefillWorkItemFreeList@0
_ObpRegisterObject@4
_ObpRegisterPrivateNamespace@4
_ObpReleaseHandleInfo@12
_ObpRemoveNamespaceFromTable@4
_ObpRemoveObjectRoutine@8
_ObpSetObjectAuditInfo@8
_ObpShutdownCloseHandleProcedure@16
_ObpStartRuntimeStackTrace@4
_ObpStopRuntimeStackTrace@0
_ObpUnlockHandleDatabaseEntry@8
_ObpVerifyAccessToBoundaryEntry@8
_ObpVerifyCreatorAccessCheck@4
_OpenGlobalizationUserSettingsKey@20
_PcwAddInstance@20
_PcwCloseInstance@4
_PcwCreateInstance@20
_PcwRegister@8
_PcwUnregister@4
_PdcPoBlockSessionSwitch@8
_PdcPoControlInput@8
_PdcPoControlMonitor@8
_PdcPoCsEnterExitReason@8
_PdcPoCurrentPdcPhase@8
_PdcPoIdleScanEnabled@0
_PdcPoLowPower@4
_PdcPoPerfOverride@0
_PdcPoPpmApplyProfile@4
_PdcPoPpmRegisterProfiles@8
_PdcPoPpmResetProfile@8
_PdcPoRecordButton@0
_PdcPoReportButton@8
_PdcPoReportLidState@4
_PdcPoResiliencyClient@8
_PdcPoSetPowerAction@20
_PdcPoSetPowerSettingValue@12
_PdcPoVerifyActionPolicy@4
_PdcPoVerifyPowerState@8
_PdcPoVerifyProcessIntegrity@4
_PerfDiagInitialize@0
_PerfDiagpBootSystemProxyCallback@36
_PerfDiagpBootUserProxyCallback@36
_PerfDiagpInitializeLoggerInfo@8
_PerfDiagpIsTracingAllowed@0
_PerfDiagpProxyWorker@4
_PerfDiagpRequestState@4
_PerfDiagpRestartCKCL@4
_PerfDiagpSaveActiveDCLLogFileName@0
_PerfDiagpSecondaryLogonProxyCallback@36
_PerfDiagpShutdownProxyCallback@36
_PerfDiagpUpdateCKCLEnableFlags@8
_PerfInfoLogVirtualAlloc@16
_PerfInfoLogVirtualFree@16
_PerfLogImageLoad@12
_PfCalculateProcessHash@8
_PfCheckDeprioritizeFile@12
_PfCheckDeprioritizeImage@4
_PfFbBufferListAllocate@12
_PfFbBufferListAllocateTemporary@8
_PfFbBufferListCleanup@4
_PfFbBufferListFlushStandby@4
_PfFbBufferListInitialize@12
_PfFbBufferListInsertInFree@20
_PfFbBufferListShutdown@4
_PfFbBufferListUpdateMax@8
_PfFbLogEntryComplete@12
_PfFbLogEntryReserve@16
_PfFileInfoNotify@4
_PfFillVolumeInfoForVolume@12
_PfGenerateTrace@8
_PfGetCompletedTrace@16
_PfHardFaultLog@8
_PfHardFaultRecord@28
_PfInitializeSuperfetch@0
_PfIoPowerEventNotify@12
_PfLogDeleteHelper@16
_PfLogEvent@16
_PfLogFileDataAccess@24
_PfLogForegroundProcess@4
_PfMetadataRecordIsEqual@12
_PfPowerActionNotify@12
_PfPrefetchRequestPrepareForVerify@12
_PfPrefetchRequestVerify@8
_PfPrefetchRequestVerifyPath@12
_PfPrefetchRequestVerifyRanges@16
_PfProcessCreateNotification@8
_PfProcessExitNotification@4
_PfQuerySuperfetchInformation@20
_PfRequestRangeCheck@20
_PfSetSuperfetchInformation@16
_PfSnActivateTrace@4
_PfSnActiveTraceGetNext@4
_PfSnAddProcessTrace@8
_PfSnAllocateEnablePrefetcherTimer@4
_PfSnAppLaunchScenarioControl@8
_PfSnArrayGrow@20
_PfSnAsyncContextCleanup@4
_PfSnAsyncContextInitialize@16
_PfSnAsyncPrefetchStep@12
_PfSnAsyncPrefetchWorker@4
_PfSnBeginAppLaunch@12
_PfSnBeginBootPhase@4
_PfSnBeginScenario@16
_PfSnBeginTrace@24
_PfSnBuildDumpFromTrace@8
_PfSnBuildScenarioEventDescriptors@16
_PfSnCancelTraceTimer@4
_PfSnCaptureParamBlockString@12
_PfSnCheckActionsNeeded@20
_PfSnCheckLoggingForThread@12
_PfSnCheckModernApp@8
_PfSnCheckScenario@8
_PfSnCleanupPrefetchHeader@4
_PfSnCleanupPrefetchSectionInfo@12
_PfSnCleanupTrace@4
_PfSnDeactivateTrace@4
_PfSnDetermineEnablePrefetcher@0
_PfSnEnablePrefetcherTimerRoutine@16
_PfSnEndProcessTrace@12
_PfSnEndTrace@4
_PfSnEndTraceWorkerThreadRoutine@4
_PfSnFailProcessTrace@4
_PfSnFindImageFileName@8
_PfSnFindPrefetchVolumeInfoInList@12
_PfSnFindString@8
_PfSnGetCompletedTrace@12
_PfSnGetFileInformation@8
_PfSnGetFirstPrefetchPhase@8
_PfSnGetPrefetchInstructions@12
_PfSnGetSectionObject@40
_PfSnGetUnsafeProcessParameters@0
_PfSnHashUnsafeUnicodeString@8
_PfSnInitializePrefetchHeader@4
_PfSnInitializePrefetcher@0
_PfSnIsHostingApplication@4
_PfSnIsSectionPrefetchedAfterPhase@12
_PfSnIsVolumeMounted@12
_PfSnLogAsyncWorker@8
_PfSnLogEndTrace@4
_PfSnLogGetReadListsStart@8
_PfSnLogGetReadListsStop@4
_PfSnLogHelper@12
_PfSnLogOpenVolumesForPrefetch@8
_PfSnLogPageFault@16
_PfSnLogPageFaultCommon@24
_PfSnLogPrefetchMetadata@12
_PfSnLogPrefetchSectionsStart@16
_PfSnLogPrefetchSectionsStop@24
_PfSnLogScenarioDecision@32
_PfSnLogStreamCreate@4
_PfSnLogStreamDelete@8
_PfSnLogVolumeCreate@4
_PfSnNameQueryWorker@4
_PfSnNameRemove@8
_PfSnNameRemoveAll@4
_PfSnOpenVolumesForPrefetch@8
_PfSnOperationProcess@4
_PfSnParametersRead@4
_PfSnParametersSetDefaults@4
_PfSnParametersVerify@4
_PfSnParsePrefetchParam@8
_PfSnPopulateReadList@4
_PfSnPowerBoost@8
_PfSnPowerBoostDpc@16
_PfSnPowerBoostUpdate@4
_PfSnPowerBoostWorker@4
_PfSnPreallocatePrefetchHeader@4
_PfSnPrefetchCacheCtxInitialize@4
_PfSnPrefetchCacheCtxStart@4
_PfSnPrefetchCacheEntryGet@16
_PfSnPrefetchCacheEntryUpdate@4
_PfSnPrefetchFileMetadata@24
_PfSnPrefetchMetadata@8
_PfSnPrefetchScenario@8
_PfSnPrefetchSections@20
_PfSnPrefetchSectionsCleanup@16
_PfSnQueryPrefetcherInformation@20
_PfSnQueryVolumeInfo@20
_PfSnQueueEnablePrefetcherTimer@4
_PfSnReferenceProcessTrace@4
_PfSnRemoveProcessTrace@4
_PfSnScanCommandLine@8
_PfSnScenarioAlloc@4
_PfSnScenarioFree@4
_PfSnSectionInfoCleanupWorkItem@4
_PfSnSetPrefetcherInformation@16
_PfSnStartTraceTimer@4
_PfSnTraceBufferAllocate@0
_PfSnTraceGetLogEntry@12
_PfSnTraceTimerRoutine@16
_PfSnTracingStateDpcRoutine@16
_PfSnTracingStateExWorkerRoutine@4
_PfSnUpdatePrefetcherFlags@8
_PfSnVolumeCheckIsSdBus@8
_PfSnVolumeCheckSeekPenalty@8
_PfSnVolumeKeyQuery@12
_PfSnVolumeNodeInitialize@4
_PfTAccessTracingCleanup@12
_PfTAccessTracingInitialize@12
_PfTAccessTracingStart@12
_PfTAllocateBuffers@16
_PfTCleanup@8
_PfTCleanupBuffers@4
_PfTCreateTraceDump@4
_PfTFreeBufferList@4
_PfTFreeTraceDump@4
_PfTFullEventListAdd@4
_PfTGenerateTrace@0
_PfTGetFreeBuffer@4
_PfTInitialize@12
_PfTLbInitialize@12
_PfTLoggingWorker@4
_PfTReplaceCurrentBuffer@4
_PfTSetTraceWorkerPriority@4
_PfTSetTracingPriority@4
_PfTStart@12
_PfTTraceListAdd@4
_PfTTraceListTrim@12
_PfVerifyScenarioBuffer@12
_PfVerifyScenarioId@4
_PfVerifyTraceBuffer@12
_PfVolumeSupportedForPrefetch@4
_PfpAvailablePagesForPrefetch@8
_PfpCopyEvent@4
_PfpCopyUserPfnPrioRequest@24
_PfpCreateEvent@12
_PfpDeprioritizeOldPagesInWs@8
_PfpEventHandleFullBuffer@4
_PfpEventHandleOutOfBuffers@4
_PfpFileBuildReadList@16
_PfpFileBuildReadSupport@20
_PfpFileCheckAttributesForPrefetch@4
_PfpFileSetupObjectAttributes@24
_PfpFlushBuffers@0
_PfpFlushEventBuffers@0
_PfpGetPageListCount@12
_PfpGetParameter@20
_PfpLogApplicationEvent@12
_PfpLogEventRequest@4
_PfpLogPageAccess@20
_PfpLogScenarioEvent@20
_PfpMemoryListQuery@12
_PfpMemoryRangesQuery@12
_PfpOpenHandleClose@8
_PfpOpenHandleCreate@32
_PfpOpenHandleInitialize@4
_PfpParametersInitialize@4
_PfpParametersPropagate@4
_PfpParametersRead@4
_PfpParametersVerify@4
_PfpParametersWatcher@4
_PfpPfnPrioRequest@12
_PfpPowerActionDpcRoutine@16
_PfpPowerActionStartScenarioTracing@4
_PfpPrefetchDirectoryStream@24
_PfpPrefetchEntireDirectory@24
_PfpPrefetchFiles@8
_PfpPrefetchFilesTrickle@4
_PfpPrefetchPrivatePages@4
_PfpPrefetchRequest@8
_PfpPrefetchRequestPatchOffsets@4
_PfpPrefetchRequestPerform@4
_PfpPrefetchSharedCleanup@4
_PfpPrefetchSharedConflictNotify@8
_PfpPrefetchSharedStart@4
_PfpPrefetchVolumesCleanup@4
_PfpPrivSourceAdd@8
_PfpPrivSourceEnum@12
_PfpProcessScenarioPhase@8
_PfpQueryFileExtentsRequest@12
_PfpQueryGpuUtilization@12
_PfpQueryScenarioInformation@12
_PfpReadSupportCleanup@8
_PfpReadSupportInitialize@4
_PfpRepurposeNameLoggingTrace@4
_PfpReturnAccessBuffer@4
_PfpRpCHashAddEntries@20
_PfpRpCHashDeleteEntries@20
_PfpRpCHashEmpty@12
_PfpRpCHashGrow@16
_PfpRpControlRequest@8
_PfpRpControlRequestCopy@20
_PfpRpControlRequestPerform@8
_PfpRpControlRequestReset@8
_PfpRpControlRequestUpdate@8
_PfpRpControlRequestVerify@4
_PfpRpFileKeyUpdate@12
_PfpRpInitialize@4
_PfpRpRehashIfNeeded@12
_PfpRpShutdown@4
_PfpRpStart@4
_PfpScenCtxInitialize@4
_PfpScenCtxPrefetchAbortSet@20
_PfpScenCtxPrefetchStateSet@16
_PfpScenCtxPrefetchWait@16
_PfpScenCtxQueryScenarioInformation@8
_PfpScenCtxScenarioSet@16
_PfpScenCtxServiceThreadSet@8
_PfpScenCtxStart@4
_PfpSectInfoHandleFullBuffer@4
_PfpSectInfoHandleOutOfBuffers@4
_PfpServiceMainThreadBoost@8
_PfpServiceMainThreadBoostPrep@8
_PfpServiceMainThreadUnboost@4
_PfpSetBaseTime@8
_PfpSetParameter@20
_PfpSourceBuildVaArray@8
_PfpSourceGetPrefetchSupport@8
_PfpStartLoggingHardFaultEvents@0
_PfpUpdateRepurposedByPrefetch@8
_PfpVirtualQuery@12
_PfpVolumeOpenAndVerify@12
_PfpVolumePrefetchMetadata@8
_PfxFindPrefix@8
_PfxInitialize@4
_PfxInsertPrefix@12
_PfxRemovePrefix@8
_Phase1Initialization@4
_Phase1InitializationDiscard@4
_Phase1InitializationIoReady@8
_PiAllocateDeviceObjectList@8
_PiAuAllocateAndInitializeSid@12
_PiAuCheckClientInteractive@4
_PiAuCheckTokenMembership@8
_PiAuCreateLocalSystemSecurityObject@4
_PiAuCreateSecurityObjects@0
_PiAuCreateStandardSecurityObject@4
_PiAuCreateUserSids@4
_PiAuDoesClientHaveAccess@4
_PiAuDoesClientHavePrivilege@4
_PiAuFreeUserSids@4
_PiAuIsLocalSystem@8
_PiAuVerifyAccessToObject@20
_PiAuditStartedDevice@4
_PiBuildDeviceNodeInstancePath@16
_PiCMCaptureCreateDeviceInputData@16
_PiCMCaptureDeviceListInputData@16
_PiCMCaptureEnumerateInputData@16
_PiCMCaptureInterfaceAliasInputData@16
_PiCMCaptureInterfaceListInputData@16
_PiCMCaptureObjectInputData@16
_PiCMCaptureProblemInputData@16
_PiCMCapturePropertyInputData@16
_PiCMCaptureRegisterInterfaceInputData@16
_PiCMCaptureRegistryInputData@16
_PiCMCaptureRegistryPropertyInputData@16
_PiCMConvertDeviceKeyType@8
_PiCMConvertDeviceListFilters@8
_PiCMConvertRegistryProperty@8
_PiCMCreateDevice@24
_PiCMCreateObject@24
_PiCMDeleteClassKey@24
_PiCMDeleteDevice@24
_PiCMDeleteDeviceInterfaceKey@24
_PiCMDeleteDeviceKey@24
_PiCMDeleteObject@24
_PiCMDeviceAction@24
_PiCMDispatch@8
_PiCMDuplicateRegistryHandle@20
_PiCMEnumerateSubKeys@24
_PiCMFastIoDeviceDispatch@36
_PiCMGenerateDeviceInstance@16
_PiCMGetDeviceDepth@24
_PiCMGetDeviceIdList@24
_PiCMGetDeviceInterfaceAlias@24
_PiCMGetDeviceInterfaceList@24
_PiCMGetDeviceStatus@24
_PiCMGetObjectList@24
_PiCMGetObjectProperty@24
_PiCMGetObjectPropertyKeys@24
_PiCMGetRegistryProperty@24
_PiCMGetRelatedDeviceInstance@24
_PiCMHandleIoctl@28
_PiCMMandatoryFilterCallback@16
_PiCMOpenClassKey@24
_PiCMOpenDeviceInterfaceKey@24
_PiCMOpenDeviceKey@24
_PiCMOpenObjectKey@24
_PiCMQueryRemove@24
_PiCMRegisterDeviceInterface@24
_PiCMReleaseObjectInputData@8
_PiCMReleasePropertyInputData@8
_PiCMReleaseRegistryInputData@8
_PiCMReleaseRegistryPropertyInputData@8
_PiCMReturnBasicResultData@20
_PiCMReturnBufferResultData@36
_PiCMReturnDepthResultData@24
_PiCMReturnHandleResultData@24
_PiCMReturnStatusResultData@32
_PiCMSetDeviceProblem@24
_PiCMSetObjectProperty@24
_PiCMSetProblem@12
_PiCMSetRegistryProperty@24
_PiCMUnregisterDeviceInterface@24
_PiCMValidateDeviceInstance@24
_PiClearDeviceObjectList@4
_PiCollapseEnumRequests@4
_PiCollapseRebalanceRequests@4
_PiCompareDDBCacheEntries@12
_PiConfigureDevice@4
_PiControlCopyUserModeCallersBuffer@24
_PiControlGetDeviceDepth@16
_PiControlGetDeviceInterfaceEnabled@16
_PiControlGetDevicePowerData@20
_PiControlGetDeviceStack@16
_PiControlGetPropertyData@16
_PiControlGetRelatedDevice@16
_PiControlGetSetDeviceStatus@16
_PiControlGetUserFlagsFromDeviceNode@8
_PiControlMakeUserModeCallersCopy@24
_PiControlQueryAndRemoveDevice@16
_PiControlQueryConflictList@16
_PiControlQueryDeviceRelations@16
_PiControlStartDevice@16
_PiCreateDeviceInstanceKey@12
_PiCreateDriverSwDeviceCallback@16
_PiCreateDriverSwDevices@4
_PiDaDispatch@8
_PiDaDriverEntry@8
_PiDaFastIoDispatch@36
_PiDaInit@0
_PiDcAllocateGenericTableEntry@8
_PiDcCompareDevPropKeys@12
_PiDcContainerRequiresConfiguration@4
_PiDcFreeGenericTableEntry@8
_PiDcGenerateConfigNotificationIfContainerRequiresConfiguration@4
_PiDcHandleContainerEvent@4
_PiDcHandleCustomDeviceEvent@4
_PiDcHandleDeviceEvent@4
_PiDcHandleObjectEvent@4
_PiDcHandleSystemFirmwareUpdate@0
_PiDcInit@4
_PiDcInitUpdateProperties@0
_PiDcResetChildDeviceContainerCallback@12
_PiDcResetChildDeviceContainers@8
_PiDcUpdateDeviceContainerMembership@12
_PiDeferSetInterfaceState@8
_PiDevCfgAppendMultiSz@16
_PiDevCfgBuildDriverConfigurationId@8
_PiDevCfgBuildDriverNodeStrongName@16
_PiDevCfgBuildIndirectString@16
_PiDevCfgCheckDeviceNeedsUpdate@8
_PiDevCfgClearDeviceMigrationNode@8
_PiDevCfgConfigureDevice@20
_PiDevCfgConfigureDeviceDriver@20
_PiDevCfgConfigureDeviceDriverConfiguration@24
_PiDevCfgConfigureDeviceInterface@12
_PiDevCfgConfigureDeviceInterfaceCallback@16
_PiDevCfgConfigureDeviceInterfaces@12
_PiDevCfgConfigureDeviceKeyCallback@24
_PiDevCfgConfigureDeviceKeys@24
_PiDevCfgConfigureDeviceLocation@16
_PiDevCfgConfigureSoftwareDevices@8
_PiDevCfgConvertPropertyFromValue@24
_PiDevCfgCopyDeviceKey@28
_PiDevCfgCopyDeviceKeys@16
_PiDevCfgCopyObjectProperties@28
_PiDevCfgCopyVariableData@8
_PiDevCfgEnforceDevicePolicy@12
_PiDevCfgEnumDeviceKeys@28
_PiDevCfgFindDeviceDriver@12
_PiDevCfgFindDeviceMigrationNode@20
_PiDevCfgFreeDeviceContext@4
_PiDevCfgFreeDeviceMigrationNode@4
_PiDevCfgFreeDriverNode@4
_PiDevCfgFreeMigrationContext@4
_PiDevCfgFreeResolveContext@4
_PiDevCfgFreeVariable@4
_PiDevCfgGetDriverPackageId@8
_PiDevCfgGetKeySecurityDescriptor@8
_PiDevCfgInitDeviceCallback@12
_PiDevCfgInitDeviceContext@12
_PiDevCfgInitMigrationContext@12
_PiDevCfgInitResolveContext@12
_PiDevCfgLogDeviceConfigured@16
_PiDevCfgLogDeviceMigrated@12
_PiDevCfgLogDeviceStarted@4
_PiDevCfgMakeServiceBootStart@4
_PiDevCfgMigrateDevice@24
_PiDevCfgOpenDeviceMigrationKey@12
_PiDevCfgOpenDriverConfiguration@12
_PiDevCfgProcessDevice@12
_PiDevCfgProcessDeviceCallback@8
_PiDevCfgQueryDeviceMigrationNode@12
_PiDevCfgQueryDriverConfiguration@4
_PiDevCfgQueryDriverNode@24
_PiDevCfgQueryDriverVersionValueCallback@24
_PiDevCfgQueryIncludedDriverConfigurations@4
_PiDevCfgQueryIncludedDriverNode@20
_PiDevCfgQueryObjectProperties@24
_PiDevCfgQueryPolicyEnabled@12
_PiDevCfgQueryPolicyStringList@12
_PiDevCfgQueryResolveValue@16
_PiDevCfgRequestDriverConfigurations@8
_PiDevCfgResetDeviceDriverSettings@20
_PiDevCfgResetDeviceKeyCallback@24
_PiDevCfgResetDeviceKeys@12
_PiDevCfgResolveDeviceDependencies@8
_PiDevCfgResolveDriverDependencies@8
_PiDevCfgResolveMultiSzValue@32
_PiDevCfgResolveVariable@12
_PiDevCfgResolveVariableConstant@12
_PiDevCfgResolveVariableDeviceProperty@12
_PiDevCfgResolveVariableExpression@12
_PiDevCfgResolveVariableFormatString@12
_PiDevCfgResolveVariableGenerateGuid@12
_PiDevCfgResolveVariableKeyCopy@12
_PiDevCfgResolveVariableKeyHandle@12
_PiDevCfgResolveVariableKeyValue@12
_PiDevCfgResolveVariableSwitchCase@12
_PiDevCfgSetDeviceRegProp@28
_PiDevCfgSetObjectProperty@44
_PiDevCfgVerifyDeviceAllowed@8
_PiDevCfgVerifyFeatureScore@12
_PiDevCfgVerifyService@12
_PiDeviceDependencyInit@0
_PiDeviceRegistration@12
_PiDeviceRelationType@4
_PiDmAddCacheReferenceForObject@12
_PiDmAllocateGenericTableEntry@8
_PiDmCacheDataDecode@20
_PiDmCacheDataEncode@24
_PiDmCacheDataFree@4
_PiDmCmObjectMatchCallback@12
_PiDmCompareObjects@12
_PiDmEnumObjectsWithCallback@12
_PiDmFreeGenericTableEntry@8
_PiDmGetCacheKeys@12
_PiDmGetCachedKeyIndex@12
_PiDmGetCmObjectConstraintListFromCache@28
_PiDmGetCmObjectListFromCache@24
_PiDmGetObject@12
_PiDmGetObjectConstraintList@28
_PiDmGetObjectCount@4
_PiDmGetObjectList@24
_PiDmGetObjectListCallback@12
_PiDmGetObjectManagerForObjectType@4
_PiDmGetReferencedObjectFromProperty@28
_PiDmInit@0
_PiDmInitializeComparisonObject@12
_PiDmListAddList@16
_PiDmListAddObject@16
_PiDmListAddObjectWorker@20
_PiDmListEnumObjectsWithCallback@16
_PiDmListInit@4
_PiDmListInitEnumCallback@12
_PiDmListIsObjectInList@12
_PiDmListRemoveList@16
_PiDmListRemoveObject@16
_PiDmListRemoveObjectWorker@20
_PiDmListUpdateAggregationCountWorker@12
_PiDmLookupObject@8
_PiDmObjectCreate@12
_PiDmObjectGetAggregatedBooleanPropertyData@36
_PiDmObjectGetCachedCmProperty@28
_PiDmObjectGetCachedObjectProperty@36
_PiDmObjectGetCachedObjectPropertyData@32
_PiDmObjectGetCachedObjectReference@20
_PiDmObjectIsEnumerable@4
_PiDmObjectManagerInit@8
_PiDmObjectManagerPopulate@4
_PiDmObjectProcessPropertyChange@24
_PiDmObjectRelease@4
_PiDmObjectUpdateCachedCmProperty@28
_PiDmObjectUpdateCachedObjectProperty@32
_PiDmPnpObjectMatchCallback@12
_PiDmRemoveCacheReferenceForObject@12
_PiDqActionDataCreate@16
_PiDqActionDataFree@4
_PiDqActionDataGetAllPropertiesInAllLanguages@28
_PiDqActionDataGetAllPropertiesInBestLanguage@32
_PiDqActionDataGetChangedProperties@40
_PiDqActionDataGetRequestedProperties@36
_PiDqAllocateGenericTableEntry@8
_PiDqCompareAddresses@12
_PiDqConvertObjectTypeToString@8
_PiDqConvertQueryFlagsToString@16
_PiDqConvertQueryTypeToString@8
_PiDqDeleteUserObject@12
_PiDqDeleteUserObjectFromLoadedHives@8
_PiDqDispatch@8
_PiDqEnumQueryObjectsCallback@12
_PiDqFreeGenericTableEntry@8
_PiDqGetObjectManagerForPnpObjectType@4
_PiDqGetPnpObjectType@4
_PiDqGetRelativeObjectRegPath@12
_PiDqGrowPropertyArray@12
_PiDqInit@0
_PiDqIrpCancel@8
_PiDqIrpComplete@16
_PiDqIrpPropertySet@4
_PiDqIrpQueryCreate@4
_PiDqIrpQueryGetResult@4
_PiDqObjectActionQueueEntryCreate@8
_PiDqObjectManagerEnumerateAndRegisterQuery@8
_PiDqObjectManagerHandleObjectEvent@8
_PiDqObjectManagerInit@8
_PiDqObjectManagerMakeInconsistent@4
_PiDqObjectManagerServiceActionQueue@4
_PiDqObjectManagerUnregisterQuery@8
_PiDqOpenObjectRegKey@36
_PiDqOpenUserObjectRegKey@32
_PiDqPnPGetObjectProperty@28
_PiDqPnPGetObjectPropertyInBestLocale@28
_PiDqPnPGetObjectPropertyKeys@24
_PiDqPnPGetObjectPropertyLocales@20
_PiDqPropertyCallback@20
_PiDqQueryActionQueueEntryCreate@16
_PiDqQueryActionQueueEntryFree@4
_PiDqQueryAddObjectToResultSet@8
_PiDqQueryAppendActionEntry@8
_PiDqQueryApplyObjectEvent@8
_PiDqQueryCompletePendedIrp@4
_PiDqQueryCreate@8
_PiDqQueryDeleteObjectFromResultSet@8
_PiDqQueryEnumObject@8
_PiDqQueryEvaluateFilter@12
_PiDqQueryFreeActiveData@4
_PiDqQueryGetNextIoctlInfo@16
_PiDqQueryGetObjectManager@4
_PiDqQueryLock@4
_PiDqQueryRelease@4
_PiDqQuerySerializeActionQueue@20
_PiDqQueryUnlock@4
_PiDqQueryValidateQueryData@4
_PiDqSameUserHive@12
_PiDqSerializationAlloc@12
_PiDqSerializationWrite@12
_PiDrvDbCreateNode@20
_PiDrvDbDestroyNode@4
_PiDrvDbInit@4
_PiDrvDbLoadHive@12
_PiDrvDbLoadNode@8
_PiDrvDbLoadNodeWorkerCallback@4
_PiDrvDbNodeActionCallback@24
_PiDrvDbRegisterNode@16
_PiDrvDbUnloadHive@8
_PiDrvDbUnloadNode@8
_PiDrvDbUnloadNodeDpcRoutine@16
_PiDrvDbUnloadNodeReset@4
_PiDrvDbUnloadNodeWaitWorkerCallback@4
_PiDrvDbUnloadNodeWorkerCallback@4
_PiEnumerateDependentListEntry@12
_PiEnumerateProviderListEntry@12
_PiFindDevInstMatch@20
_PiForEachDriverQueryRoutine@16
_PiGetDefaultMessageString@12
_PiGetDependentList@4
_PiGetDeviceDepth@8
_PiGetDeviceRegProperty@24
_PiGetDeviceRegistryProperty@24
_PiGetProviderList@4
_PiGetRelatedDevice@16
_PiHotSwapGetDefaultBusRemovalPolicy@8
_PiHotSwapGetDetachableNode@8
_PiInitCacheGroupInformation@0
_PiInitReleaseCachedGroupInformation@0
_PiInitializeDDBCache@0
_PiInitializeDevice@4
_PiIrpQueryRemoveDevice@8
_PiIsDriverBlocked@20
_PiLastGoodCopyKeyContents@12
_PiLastGoodRevertCopyCallback@16
_PiLastGoodRevertLastKnownDirectory@8
_PiListEntryToDependencyEdge@8
_PiLookupInDDB@16
_PiLookupInDDBCache@16
_PiMarkDeviceTreeForReenumeration@8
_PiMarkDeviceTreeForReenumerationWorker@8
_PiNormalizeDeviceText@8
_PiPagePathSetState@8
_PiPnpAddDeviceToPdoDeviceListEnumContext@8
_PiPnpFreePdoDeviceList@4
_PiPnpPdoDeviceListEnumCallback@8
_PiPnpRtlApplyMandatoryDeviceContainerFilters@20
_PiPnpRtlApplyMandatoryDeviceContainerFiltersCallback@12
_PiPnpRtlApplyMandatoryDeviceFilters@20
_PiPnpRtlApplyMandatoryDeviceInterfaceFilters@20
_PiPnpRtlApplyMandatoryFilters@24
_PiPnpRtlBeginOperation@4
_PiPnpRtlCacheObjectBaseKey@16
_PiPnpRtlCmActionCallback@24
_PiPnpRtlEndOperation@4
_PiPnpRtlEnsureObjectCached@8
_PiPnpRtlEnumDevicesInContainerCallback@12
_PiPnpRtlEnumeratorFilterCallback@16
_PiPnpRtlFreeContainerRemoveInfo@4
_PiPnpRtlFreeInstallerClassChangeInfo@4
_PiPnpRtlFreeInterfaceDeleteInfo@4
_PiPnpRtlGatherContainerRemoveInfo@12
_PiPnpRtlGatherDeviceDeleteInfo@8
_PiPnpRtlGatherInstallerClassChangeInfo@12
_PiPnpRtlGatherInterfaceDeleteInfo@8
_PiPnpRtlGetCurrentOperation@4
_PiPnpRtlGetDeviceInterfaceEnabled@16
_PiPnpRtlGetDeviceNtPropertyRoutine@28
_PiPnpRtlGetDeviceRelatedDeviceRoutine@28
_PiPnpRtlGetDeviceRelationsList@28
_PiPnpRtlGetDeviceStatus@24
_PiPnpRtlGetFilteredDeviceInterfaceList@4
_PiPnpRtlGetFilteredDeviceList@4
_PiPnpRtlInit@4
_PiPnpRtlInterfaceFilterCallback@16
_PiPnpRtlIsDeviceEnumerableForUser@20
_PiPnpRtlIsDeviceValidForSession@20
_PiPnpRtlObjectActionCallback@24
_PiPnpRtlObjectEventCallback@20
_PiPnpRtlObjectEventCompareObjects@12
_PiPnpRtlObjectEventCreate@16
_PiPnpRtlObjectEventDispatch@4
_PiPnpRtlObjectEventRelease@4
_PiPnpRtlObjectEventWorker@20
_PiPnpRtlOperationAllocateGenericTableEntry@8
_PiPnpRtlOperationFreeGenericTableEntry@8
_PiPnpRtlPdoRaiseNtPlugPlayPropertyChangeEvent@8
_PiPnpRtlServiceFilterCallback@16
_PiPnpRtlSetDeviceRegProperty@32
_PiPnpRtlSetObjectProperty@40
_PiProcessAddBootDevices@4
_PiProcessClearDeviceProblem@4
_PiProcessDriverInstance@12
_PiProcessHaltDevice@4
_PiProcessNewDeviceNode@4
_PiProcessQueryDeviceState@4
_PiProcessReenumeration@4
_PiProcessRequeryDeviceState@4
_PiProcessResourceRequirementsChanged@4
_PiProcessSetDeviceProblem@4
_PiProcessStartSystemDevices@4
_PiProfileUpdateDeviceTree@0
_PiProfileUpdateDeviceTreeCallback@8
_PiProfileUpdateDeviceTreeWorker@4
_PiQueryAndAllocateBootResources@4
_PiQueryDeviceRelations@16
_PiQueryPowerDependencyRelations@4
_PiQueryPowerRelations@8
_PiQueryRemovableDeviceOverride@16
_PiQueryResourceRequirements@4
_PiQueueDeviceRequest@20
_PiRearrangeDeviceInstances@12
_PiRebalanceOptOut@4
_PiResetProblemDevicesWorker@8
_PiRestartDevice@4
_PiSwAddPdoAssociation@12
_PiSwAllocateGenericTableEntry@8
_PiSwBusRelationAdd@8
_PiSwBusRelationRemove@4
_PiSwBusRelationsCompareInstancePath@12
_PiSwCloseDecendents@4
_PiSwCloseDevice@4
_PiSwCompleteCreate@4
_PiSwDestroyDeviceObject@4
_PiSwDeviceCompareObjects@12
_PiSwDeviceCreate@4
_PiSwDeviceDereference@4
_PiSwDeviceFindInterfaceEntry@8
_PiSwDeviceFree@4
_PiSwDeviceInterfaceSetState@12
_PiSwDeviceInterfacesUpdateState@8
_PiSwDeviceMakeCompatibleIds@8
_PiSwDispatch@8
_PiSwDoesCreateChangesRequireReEnum@8
_PiSwFindBusRelations@4
_PiSwFindChildren@4
_PiSwFindPdoAssociation@12
_PiSwFindSwDevice@4
_PiSwFreeGenericTableEntry@8
_PiSwFreeInterfaceList@4
_PiSwGetChildPdo@8
_PiSwInit@0
_PiSwInstanceInfoFree@4
_PiSwInstanceInfoInit@8
_PiSwInterfaceCreate@16
_PiSwInterfaceFree@4
_PiSwIrpCancelStartCreate@8
_PiSwIrpCleanup@4
_PiSwIrpGetLifetime@4
_PiSwIrpInterfacePropertySet@4
_PiSwIrpInterfaceRegister@4
_PiSwIrpInterfaceSetState@4
_PiSwIrpPropertySet@4
_PiSwIrpSetLifetime@4
_PiSwIrpStartCreate@4
_PiSwIrpStartCreateWorker@8
_PiSwIsValidPnpId@8
_PiSwMakePdoInactive@4
_PiSwPdoAssociationFree@4
_PiSwPdoDriverEntry@8
_PiSwPdoPnPDispatch@8
_PiSwPnPInfoFree@4
_PiSwPnPInfoInit@8
_PiSwProcessParentRemoveIrp@4
_PiSwProcessParentStartIrp@4
_PiSwProcessRemove@8
_PiSwPropertySet@16
_PiSwQueuedCreateInfoCreate@8
_PiSwQueuedCreateInfoFree@4
_PiSwRemovePdoAssociation@8
_PiSwStartCreate@52
_PiSwStopDestroy@12
_PiSwUnassociateDeviceObject@4
_PiSwUpdateArrayProperties@16
_PiSwValidateCreateData@4
_PiSwValidatePropertyArray@8
_PiUEventApplyAdditionalFilters@8
_PiUEventBroadcastDevnodesChangedEvent@4
_PiUEventBroadcastEventWorker@4
_PiUEventBroadcastHardwareProfilesChangedEvent@8
_PiUEventBroadcastPortsChangedEvent@12
_PiUEventBroadcastVolumesChangedEvent@4
_PiUEventCacheObjectProperties@4
_PiUEventCoalesceBroadcastEvents@4
_PiUEventCopyEventData@12
_PiUEventDequeuePendingEventWorker@12
_PiUEventDereferenceEventEntry@4
_PiUEventDeviceNeedsInstall@8
_PiUEventDispatch@8
_PiUEventEstimateRequiredClientBufferSize@4
_PiUEventFreeClientRegistrationContext@8
_PiUEventFreeEventEntry@4
_PiUEventGetDeviceInstanceIdFromUserHandle@12
_PiUEventHandleGetEvent@20
_PiUEventHandleIoctl@4
_PiUEventHandleRegistration@20
_PiUEventHandleUnregisterClient@4
_PiUEventHandleVetoEvent@20
_PiUEventHashGuidIntoBucket@4
_PiUEventHashStringIntoBucket@4
_PiUEventInit@4
_PiUEventInitClientRegistrationContext@0
_PiUEventInitializeVeto@4
_PiUEventIsDeviceEventVetoable@4
_PiUEventMetaNotificationCallback@24
_PiUEventMovePendingEventToSynchronousQueue@8
_PiUEventNotifyClient@8
_PiUEventNotifyClientPendingEvent@4
_PiUEventNotifyDeviceInstanceChange@4
_PiUEventNotifyDeviceInstancePropertyChange@4
_PiUEventNotifyDeviceInterfaceChange@4
_PiUEventNotifyTargetDeviceChange@4
_PiUEventNotifyUserMode@4
_PiUEventProcessBroadcastNotifications@4
_PiUEventProcessEventWorker@4
_PiUEventProcessNotifyEventEntry@4
_PiUEventQueueBroadcastEventEntry@4
_PiUEventQueuePendingEvent@8
_PiUEventReferenceEventEntry@4
_PiUEventSendDeviceInstallNotification@4
_PiUEventSendDeviceInterfaceArrivalETWEvent@8
_PiUEventShouldQueueEvent@4
_PiUpdateDriverDBCache@20
_PiValidatePowerRelations@4
_PipAddBindingId@8
_PipAddDependencyEdgeBetweenNodes@12
_PipAddDependentsToRebuildPowerRelationsQueue@4
_PipAddDevicesToBootDriver@4
_PipAddDevicesToBootDriverWorker@12
_PipAddRequestToEdge@8
_PipAddtoRebuildPowerRelationsQueue@4
_PipAllocateDeviceNode@8
_PipApplyFunctionToServiceInstances@28
_PipAreDriversLoaded@4
_PipAreDriversLoadedWorker@8
_PipAttemptDependentStart@4
_PipAttemptDependentsStart@4
_PipCallDriverAddDevice@8
_PipCallDriverAddDeviceQueryRoutine@20
_PipCallbackHasDeviceOverrides@8
_PipCanEnableInterfaces@4
_PipChangeDeviceObjectFromRegistryProperties@20
_PipCheckComputerSupported@4
_PipCheckDependencies@4
_PipCheckForDenyExecute@4
_PipCheckForUnsatisfiedDependencies@8
_PipCheckSystemFirmwareUpdated@4
_PipCheckValidNewDependencyEdge@8
_PipClearDevNodeFlags@8
_PipClearDevNodeProblem@4
_PipClearDevNodeUserFlags@8
_PipCommitPendingOsExtensionResource@16
_PipCommitPendingService@16
_PipConvertResolutionsToReservations@4
_PipCreateComputerId@16
_PipCreateDependencyNode@4
_PipCreateEntry@4
_PipCreateNewDependencyEdge@12
_PipDeleteAllDependencyRelations@4
_PipDeleteBindingId@8
_PipDeleteBindingIds@4
_PipDeleteDependencyNode@4
_PipDependencyCopyEdge@8
_PipDependencyGraphDepthFirstSearch@16
_PipDereferenceDependencyNode@4
_PipDeviceObjectListAdd@16
_PipDeviceObjectListElementAt@20
_PipDeviceObjectListIndexOf@16
_PipDeviceObjectListRemove@8
_PipDeviceRemovalCheckDeviceNodeState@12
_PipEnumerateCompleted@4
_PipEnumerateDevice@12
_PipFindDependencyNodePath@16
_PipFindDeviceOverrideEntry@16
_PipForAllChildDeviceNodes@12
_PipForAllDeviceNodesCallback@8
_PipForDeviceNodeSubtree@12
_PipFreeBindingId@4
_PipFreeBindingRequestEntry@4
_PipFreeDependencyEdge@8
_PipFreeGroupTree@4
_PipGenerateContainerID@20
_PipGetDriverTagPriority@4
_PipGetRegistryDwordWithFallback@24
_PipGetRegistrySecurityWithFallback@20
_PipGrowDeviceObjectList@4
_PipHardwareConfigActivateService@4
_PipHardwareConfigClearStartOverrideCallback@16
_PipHardwareConfigClearStartOverrides@4
_PipHardwareConfigExists@8
_PipHardwareConfigGetIndex@8
_PipHardwareConfigGetLastUseTime@8
_PipHardwareConfigInit@4
_PipHardwareConfigOpenKey@12
_PipHardwareConfigTriggerRespecialize@4
_PipInitComputerIds@4
_PipInitDeviceOverrideCache@0
_PipInitializeCoreDriversAndElam@4
_PipInitializeCoreDriversByGroup@8
_PipInitializeDriverDependentDLLs@8
_PipInitializeEarlyLaunchDrivers@4
_PipInsertDriverList@8
_PipIsDevNodeDNStarted@4
_PipIsDevNodeEffectivelyRemoved@4
_PipIsDeviceInDeviceObjectList@12
_PipIsDeviceReadyForPowerRelations@4
_PipIsProblemReadonly@8
_PipIsProviderStarted@4
_PipLinkDeviceObjectAndDependencyNode@8
_PipLookupGroupName@8
_PipMakeGloballyUniqueId@12
_PipMergeDependencyEdgeList@12
_PipMergeDependencyEdges@8
_PipMergeDependencyNodes@8
_PipMergeDependencyTypes@8
_PipMigratePnpState@0
_PipMigrateResetDeviceCallback@16
_PipMoveListEntries@8
_PipNotifyDependenciesChanged@8
_PipNotifyDeviceDependencyList@8
_PipOpenServiceEnumKeys@20
_PipPendingServicesFilter@16
_PipPnPDriverEntry@8
_PipProcessDevNodeTree@28
_PipProcessEnumeratedChildDevice@8
_PipProcessPendingObjects@20
_PipProcessPendingOsExtensionResources@0
_PipProcessPendingServices@0
_PipProcessRebuildPowerRelationsQueue@0
_PipProcessRestartPhase1@12
_PipProcessRestartPhase2@4
_PipProcessStartPhase1@12
_PipProcessStartPhase2@4
_PipProcessStartPhase3@8
_PipQueryBindingResolution@4
_PipReferenceDependencyNode@4
_PipRemoveDevicesInRelationList@4
_PipRestoreDevNodeState@4
_PipServiceInstanceToDeviceInstance@24
_PipSetDependency@8
_PipSetDevNodeFlags@8
_PipSetDevNodeProblem@12
_PipSetDevNodeState@12
_PipSetDevNodeUserFlags@8
_PipSmBiosFindStruct@16
_PipSmBiosGetString@20
_PipSortDeviceObjectList@4
_PipSortDevicesByOrdinal
_PipUnlinkDeviceObjectAndDependencyNode@8
_PipUnloadEarlyLaunchDrivers@4
_PipVisitDeviceObjectListEntry@12
_PlugPlayGetDeviceProperty@24
_PlugPlayGetDeviceRelations@24
_PlugPlayGetDeviceStatus@20
_PlugPlayGetRelatedDevice@24
_PnpAcquireDependencyRelationsLock@4
_PnpAddVetoInformation@12
_PnpAllocateCriticalMemory@16
_PnpAllocateDeviceInstancePath@8
_PnpAllocateGenericTableEntry@8
_PnpAllocateMultiSZ@16
_PnpAllocatePWSTR@16
_PnpAllocateResources@16
_PnpAssignResourcesToDevices@12
_PnpAsynchronousCall@16
_PnpBootDeviceWait@12
_PnpBootPhaseComplete@0
_PnpBugcheckPowerTimeout@4
_PnpBuildCmResourceList@8
_PnpBuildCmResourceLists@12
_PnpBuildRemovalRelationList@20
_PnpBuildUnsafeRemovalDeviceList@12
_PnpBusTypeGuidGet@8
_PnpBusTypeGuidGetIndex@4
_PnpBusTypeGuidInitialize@0
_PnpCallAddDevice@16
_PnpCallDriverQueryServiceHelper@32
_PnpCancelRemoveLockedDeviceNode@4
_PnpCancelRemoveOnHungDevices@20
_PnpCancelStopDeviceNode@4
_PnpCancelStopDeviceSubtree@4
_PnpChainDereferenceComplete@8
_PnpCheckDeviceIdsChanged@24
_PnpCheckDriverDependencies@12
_PnpCheckForActiveDependencies@8
_PnpCheckPossibleBootStartDriver@4
_PnpCleanupDeviceRegistryValues@4
_PnpCmResourcesToIoResources@12
_PnpCollectOpenHandles@12
_PnpCollectOpenHandlesCallBack@20
_PnpCompareGuid@8
_PnpCompareInstancePath@12
_PnpCompareInterruptInformation@12
_PnpCompareMultiSz@12
_PnpCompareResourceRequestPriority
_PnpCompileDeviceInstancePaths@20
_PnpCompleteDeviceEvent@8
_PnpCompleteSystemStartProcess@0
_PnpCompletionRoutine@12
_PnpConcatPWSTR
_PnpConcatenateUnicodeStrings@12
_PnpConvertDevpropcompkeyArrayToString@20
_PnpCopyDevProperty@12
_PnpCopyDevPropertyArray@20
_PnpCopyDeviceInstancePath@8
_PnpCreateDeviceEventEntry@4
_PnpDeferNotification@4
_PnpDelayedRemoveWorker@4
_PnpDeleteDeviceInterfaces@4
_PnpDeleteLockedDeviceNode@20
_PnpDeleteLockedDeviceNodes@28
_PnpDequeuePendingSurpriseRemoval@4
_PnpDereferenceNotify@4
_PnpDetermineResourceListSize@4
_PnpDeviceActionWorker@4
_PnpDeviceCompletionProcessCompletedRequest@4
_PnpDeviceCompletionProcessCompletedRequests@12
_PnpDeviceCompletionQueueAddDispatchedRequest@8
_PnpDeviceCompletionQueueDispatchedEntryCompleted@8
_PnpDeviceCompletionQueueGetCompletedRequest@4
_PnpDeviceCompletionQueueInitialize@4
_PnpDeviceCompletionQueueIsEmpty@4
_PnpDeviceCompletionQueueRemoveCompletedRequest@8
_PnpDeviceCompletionRequestCreate@12
_PnpDeviceCompletionRequestDestroy@4
_PnpDeviceCompletionRoutine@12
_PnpDeviceEventWorker@4
_PnpDeviceObjectFromDeviceInstance@4
_PnpDeviceObjectToDeviceInstance@12
_PnpDiagInitialize@0
_PnpDiagRundownForEachDevice@8
_PnpDiagRundownParentPdoForEachDevice@8
_PnpDiagRundownRegisterCallback@36
_PnpDiagnosticCompletionRoutine@12
_PnpDisableDevice@8
_PnpDisableDeviceInterfaces@4
_PnpDisableUserModeNotifications@8
_PnpDoPolicyCheck@8
_PnpDriverLoadingFailed@8
_PnpDriverStarted@12
_PnpEarlyLaunchHasCallbacksRegistered@0
_PnpEarlyLaunchImageNotificationPostProcess@20
_PnpEarlyLaunchImageNotificationPreProcess@20
_PnpEarlyLaunchStatusNotificationPreProcess@20
_PnpFilterResourceRequirementsList@16
_PnpFinalizeVetoedRemove@12
_PnpFindAlternateStringData@16
_PnpFindBestConfiguration@12
_PnpFindBestConfigurationWorker@16
_PnpFindMountableDevice@4
_PnpFindRebalanceCandidates@20
_PnpFixupID@20
_PnpFreeDevProperty@8
_PnpFreeDevPropertyArray@12
_PnpFreeDeviceInstancePath@4
_PnpFreeGenericTableEntry@8
_PnpFreeInterruptInformation@4
_PnpFreeResourceRequirementsForAssignTable@8
_PnpFreeUnicodeStringList@8
_PnpFreeVetoInformation@4
_PnpGenerateDeviceIdsHash@12
_PnpGetCallerSessionId@4
_PnpGetDeviceDependencyList@20
_PnpGetDeviceInstanceCsConfigFlags@12
_PnpGetDeviceInstancePropertyData@32
_PnpGetDeviceInstanceRegistryValue@20
_PnpGetDeviceInterfacePropertyData@32
_PnpGetDeviceLocationStrings@12
_PnpGetDevicePropertyData@32
_PnpGetDeviceResourcesFromRegistry@20
_PnpGetInterruptInformation@16
_PnpGetMultiSzLength@12
_PnpGetObjectProperty@44
_PnpGetRelatedTargetDevice@8
_PnpGetResourceRequirementsForAssignTable@12
_PnpGetServiceStartType@12
_PnpGetStableSystemBootTime@4
_PnpGetSystemPdoList@8
_PnpHandleEnumerateHandlesAgainstDeviceObject@12
_PnpHandleEnumerateHandlesAgainstPdoStack@12
_PnpHandleProcessWalkWorker@16
_PnpHardwareConfigCreateBootDriverFlags@8
_PnpInitializeBootStartDriver@36
_PnpInitializeDeviceActions@0
_PnpInitializeDeviceEvents@0
_PnpInitializeDeviceReferenceTable@0
_PnpInitializeLegacyBusInformationTable@0
_PnpInitializeNotification@0
_PnpInitializeNotifyEntry@24
_PnpInitializeProcessor@4
_PnpInitializeSessionId@12
_PnpInitializeTargetDeviceRemoveEvent@48
_PnpInsertEventInQueue@4
_PnpInvalidateRelationsInList@16
_PnpIrpDeviceEnumerated@4
_PnpIrpQueryID@12
_PnpIsAnyDeviceInUse@12
_PnpIsAnyDeviceInstanceEnabled@8
_PnpIsBeingRemovedSafely@8
_PnpIsChainDereferenced@20
_PnpIsDeviceInstanceEnabled@12
_PnpIsDuplicateDevice@16
_PnpIsLegacyDriver@4
_PnpIsNullGuid@4
_PnpIsNullGuidString@4
_PnpIsRangeWithin@8
_PnpIsSafeToExamineUserModeTeb@0
_PnpIsValidGuidString@4
_PnpLoadBootFilterDriver@16
_PnpLockDeviceActionQueue@0
_PnpLockMountableDevice@4
_PnpLogActionQueueEvent@12
_PnpLogDuplicateDevice@8
_PnpLogEvent@20
_PnpLogVetoInformation@8
_PnpLookupArbitersNewResources@24
_PnpMapDeviceObjectToDeviceInstance@8
_PnpMarkDeviceForRemove@12
_PnpMarkHalDeviceNode@0
_PnpMergeFilteredResourceRequirementsList@12
_PnpNeedToReleaseBootResources@12
_PnpNewDeviceNodeDependencyCheck@4
_PnpNotifyDeviceClassChange@12
_PnpNotifyDriverCallback@12
_PnpNotifyEarlyLaunchImageLoad@8
_PnpNotifyEarlyLaunchStatusUpdate@4
_PnpNotifyHwProfileChange@12
_PnpNotifyTargetDeviceChange@16
_PnpNotifyUserModeDeviceRemoval@20
_PnpOpenFirstMatchingSubKey@24
_PnpOrphanNotification@4
_PnpPrepareDriverLoading@20
_PnpProcessAssignResources@12
_PnpProcessAssignResourcesWorker@8
_PnpProcessCompletedEject@4
_PnpProcessCustomDeviceEvent@4
_PnpProcessDeferredRegistrations@0
_PnpProcessDependencyRelations@24
_PnpProcessQueryRemoveAndEject@4
_PnpProcessRebalance@4
_PnpProcessRelation@24
_PnpProcessTargetDeviceEvent@4
_PnpProfileUpdateHardwareProfile@4
_PnpQueryAndSaveDeviceNodeCapabilities@4
_PnpQueryBusInformation@4
_PnpQueryDeviceRelations@16
_PnpQueryDeviceText@16
_PnpQueryID@16
_PnpQueryInterface@24
_PnpQueryRebalance@24
_PnpQueryRebalanceWorker@24
_PnpQueryRemoveLockedDeviceNode@16
_PnpQueryStopDeviceNode@8
_PnpQueuePendingEject@4
_PnpQueuePendingSurpriseRemoval@16
_PnpQueueQueryAndRemoveEvent@24
_PnpReadDeviceConfiguration@16
_PnpReallocateResources@4
_PnpRebalance@16
_PnpRegMultiSzToUnicodeStrings@12
_PnpRegSzToString@16
_PnpReleaseBootResourcesForFilteredRequirements@4
_PnpReleaseDependencyRelationsLock@0
_PnpReleaseResourcesInternal@4
_PnpRemoveDeviceActionRequests@4
_PnpRemoveEventFromQueue@4
_PnpRemoveLockedDeviceNode@8
_PnpReplacePartitionUnit@4
_PnpReportTargetDeviceChangeAsyncWorker@4
_PnpRequestDeviceAction@24
_PnpRequestDeviceEjectExWorker@4
_PnpRequestDeviceRemoval@16
_PnpRequestDeviceRemovalWorker@20
_PnpRequestHwProfileChangeNotification@16
_PnpResizeTargetDeviceBlock@8
_PnpRestartDeviceNode@4
_PnpRestoreResourcesInternal@4
_PnpSaveDeviceCapabilities@12
_PnpSelectFirstConfiguration@16
_PnpSerializeBoot@0
_PnpSetBlockedDriverEvent@4
_PnpSetCustomTargetEvent@24
_PnpSetDeviceClassChange@12
_PnpSetDeviceInstancePropertyChangeEvent@4
_PnpSetDeviceInstancePropertyChangeEventFromDeviceInstance@4
_PnpSetDeviceInstanceRemovalEvent@4
_PnpSetDeviceInstanceStartedEvent@4
_PnpSetDeviceInstanceStartedEventFromDeviceInstance@4
_PnpSetDeviceInterfacePropertyData@28
_PnpSetDevicePropertyData@28
_PnpSetDeviceRemovalSafe@12
_PnpSetHwProfileChangeEvent@20
_PnpSetInterruptInformation@12
_PnpSetInvalidIDEvent@4
_PnpSetPlugPlayEvent@8
_PnpSetPowerVetoEvent@24
_PnpSetRegistryDword@12
_PnpSetRegistryRequirementsList@12
_PnpSetRegistryResourceList@12
_PnpSetTargetDeviceRemove@52
_PnpShutdownDevices@0
_PnpStartDevice@12
_PnpStartDeviceNode@12
_PnpStartedDeviceNodeDependencyCheck@4
_PnpStopDeviceSubtree@4
_PnpStringFromGuid@12
_PnpSurpriseRemoveLockedDeviceNode@8
_PnpSurpriseRemovedDeviceNodeDependencyCheck@4
_PnpSynchronizeDeviceEventQueue@0
_PnpTraceClearDevNodeProblem@16
_PnpTraceDeviceConfig@44
_PnpTraceDeviceRemoveProcessVeto@12
_PnpTraceSetDevNodeProblem@24
_PnpTraceStartDevice@12
_PnpUnicodeStringToWstr@12
_PnpUnicodeStringToWstrFree@8
_PnpUnlinkDeviceRemovalRelations@12
_PnpUnloadAttachedDriver@4
_PnpUnlockDeviceActionQueue@0
_PnpUnlockMountableDevice@4
_PnpUnregisterPlugPlayNotification@8
_PnpUpdateExtensionFlags@20
_PnpValidateMultiSz@8
_PnpWaitForDevicesToStart@0
_PnpWaitForEmptyDeviceActionQueue@0
_PnpWaitForEmptyDeviceEventQueue@0
_PnprAddDeviceResources@8
_PnprAddMemoryResources@8
_PnprAddProcessorResources@16
_PnprAllocateMappingReserves@12
_PnprCollectResources@8
_PnprCompleteWake@0
_PnprCopyReservedMapping@0
_PnprEndMirroring@4
_PnprFreeMappingReserve@4
_PnprGetMillisecondCounter@4
_PnprGetPageDestination@12
_PnprGetPluginDriverImagePath@4
_PnprGetStackLimits@8
_PnprIdentifyUnits@16
_PnprInitializeMappingReserve@8
_PnprInitiateReplaceOperation@0
_PnprIsMemoryDevice@8
_PnprIsProcessorDevice@16
_PnprLegacyDeviceDriversPresent@0
_PnprLoadPluginDriver@8
_PnprLockPagesForReplace@0
_PnprLogFailureEvent@12
_PnprLogStartEvent@8
_PnprLogSuccessEvent@0
_PnprMapPhysicalPages@20
_PnprMapTargetSparePhysicalPages@28
_PnprMarkOrMirrorPages@20
_PnprMirrorMarkedPages@0
_PnprMirrorPhysicalMemory@16
_PnprMmAddRange@20
_PnprMmConstruct@8
_PnprMmFree@4
_PnprQueryReplaceFeatures@8
_PnprQuiesce@0
_PnprQuiesceDevices@4
_PnprQuiesceProcessorDpc@16
_PnprQuiesceProcessors@0
_PnprQuiesceWorker@4
_PnprRecopyAddress@8
_PnprRecopyMappingReserve@4
_PnprRecopyMirrorPages@0
_PnprReplaceStart@0
_PnprStartMirroring@0
_PnprSwap@0
_PnprSwapFinalize@0
_PnprUnlockPagesForReplace@0
_PnprWakeDevices@4
_PnprWakeProcessors@0
_PoAddThermalTriageData@0
_PoAllProcessorsDeepIdle@0
_PoBlockConsoleSwitch@4
_PoBroadcastSystemState@4
_PoCallDriver@8
_PoCancelDeviceNotify@4
_PoCaptureReasonContext@24
_PoClearBroadcast@0
_PoClearPowerRequest@8
_PoClearPowerRequestInternal@8
_PoClearPowerRequestInternalDeferred@12
_PoClearTransitionMarker@0
_PoCpuIdledSinceLastCallImprecise@8
_PoCreatePowerRequest@12
_PoCreateThermalRequest@20
_PoDeletePowerRequest@4
_PoDeleteThermalRequest@4
_PoDestroyReasonContext@4
_PoDeviceAcquireIrp@12
_PoDeviceReleaseIrp@12
_PoDiagCaptureUsermodeStack@0
_PoDiagFreeUsermodeStack@4
_PoDiagTraceDeviceRundown@16
_PoDisableSleepStates@12
_PoEndDeviceBusy@4
_PoEndPartitionReplace@8
_PoEndPowerStateTasks@4
_PoEnergyEstimationEnabled@0
_PoExecutePerfCheck@0
_PoFxAbandonDevice@4
_PoFxActivateComponent@12
_PoFxActivateDevice@4
_PoFxActivateDeviceForSystemTransition@4
_PoFxCompleteDevicePowerNotRequired@4
_PoFxCompleteIdleCondition@8
_PoFxCompleteIdleState@8
_PoFxEnableDStateReporting@4
_PoFxIdleComponent@12
_PoFxIdleDevice@4
_PoFxInitPowerManagement@0
_PoFxIssueComponentPerfStateChange@20
_PoFxIssueComponentPerfStateChangeMultiple@24
_PoFxNotifySurprisePowerOn@4
_PoFxPlatformRequestHandler@4
_PoFxPowerControl@28
_PoFxPowerOnCrashdumpDevice@8
_PoFxPrepareDevice@8
_PoFxProcessorNotification@12
_PoFxQueryCurrentComponentPerfState@20
_PoFxRegisterComponentPerfStates@28
_PoFxRegisterCoreDevice@12
_PoFxRegisterCrashdumpDevice@4
_PoFxRegisterDebugger@0
_PoFxRegisterDevice@12
_PoFxRegisterPlugin@8
_PoFxRegisterPluginEx@16
_PoFxRegisterPrimaryDevice@12
_PoFxReportDevicePoweredOn@4
_PoFxSendSystemLatencyUpdate@0
_PoFxSetComponentLatency@16
_PoFxSetComponentResidency@16
_PoFxSetComponentWake@12
_PoFxSetDeviceIdleTimeout@12
_PoFxStartDevicePowerManagement@4
_PoFxSystemLatencyNotify@8
_PoFxUnregisterDevice@4
_PoGetFrequencyBucket@4
_PoGetIdleTimes@12
_PoGetLightestSystemStateForEject@16
_PoGetPerfStateAndParkingInfo@16
_PoGetProcessorIdleAccounting@4
_PoGetRequester@12
_PoGetSystemWake@4
_PoGetThermalRequestSupport@8
_PoHandleIrp@8
_PoInitDriverServices@0
_PoInitHiberServices@4
_PoInitSystem@8
_PoInitializeBroadcast@0
_PoInitiateProcessorWake@4
_PoIssueCoalescingNotification@12
_PoLatencySensitivityHint@4
_PoNotifySystemTimeSet@12
_PoPowerOffMonitor@0
_PoQueryWatchdogTime@8
_PoQueueShutdownWorkItem@4
_PoReenableSleepStates@4
_PoRegisterCoalescingCallback@16
_PoRegisterDeviceForIdleDetection@16
_PoRegisterDeviceNotify@24
_PoRegisterPowerSettingCallback@20
_PoRegisterSystemState@8
_PoRequestPowerIrp@24
_PoRequestShutdownEvent@4
_PoRundownSystemTimer@20
_PoRundownThread@4
_PoSetDeviceBusyEx@4
_PoSetFixedWakeSource@4
_PoSetHiberRange@20
_PoSetPowerRequest@8
_PoSetPowerRequestInternal@8
_PoSetPowerState@12
_PoSetSystemState@4
_PoSetSystemWake@4
_PoSetThermalActiveCooling@8
_PoSetThermalPassiveCooling@8
_PoSetUserPresent@4
_PoShutdownBugCheck@24
_PoStartDeviceBusy@4
_PoStartNextPowerIrp@4
_PoStartPartitionReplace@8
_PoStartPowerStateTasks@4
_PoStoreDiagnosticContext@16
_PoStoreRequester@16
_PoThermalCounterSetCallback@12
_PoTraceDynamicTickDisabled@0
_PoTraceSystemTimerResolution@8
_PoTraceSystemTimerResolutionKernel@8
_PoTraceSystemTimerResolutionUpdate@4
_PoUnblockConsoleSwitch@8
_PoUnregisterCoalescingCallback@4
_PoUnregisterPowerSettingCallback@4
_PoUnregisterSystemState@4
_PoUserShutdownCancelled@0
_PoUserShutdownInitiated@0
_PoVolumeDevice@4
_PopAccumulateNonActivatedCpuTime@12
_PopAcquireAdaptiveLock@4
_PopAcquireAwaymodeLock@0
_PopAcquireCoolingInterface@4
_PopAcquirePolicyLock@0
_PopAcquirePowerRequestPushLock@4
_PopAcquireTransitionLock@0
_PopAcquireUmpoPushLock@4
_PopAcquireWakeSourceSpinLock@4
_PopActionRetrieveInitialState@16
_PopAdaptivePowerSettingCallback@16
_PopAddPagesToCompressedPageSet@28
_PopAdjustHiberFile@4
_PopAdvanceSystemPowerState@16
_PopAllocateHiberContext@0
_PopAllocateIrp@44
_PopAllocateOwnMemory@12
_PopAllocatePages@4
_PopAllowAwayModeSettingCallback@16
_PopAoacExecutionRequiredPowerRequest@8
_PopApplyAdminPolicy@8
_PopApplyLegacyPowerRequestFlags@12
_PopApplyPolicy@16
_PopArePowerSettingsEqual@12
_PopAssociateThermalRequest@12
_PopAudioAccountingCallback@4
_PopAwayModePowerRequest@8
_PopAwayModeUserPresenceDpc@16
_PopBatteryAdd@4
_PopBatteryAlarmPowerSettingCallback@16
_PopBatteryApplyCompositeState@8
_PopBatteryCapacityToRate@12
_PopBatteryCheckTrigger@4
_PopBatteryCheckTriggerAllBatteries@8
_PopBatteryDeviceState@8
_PopBatteryEstimatesSpoiled@0
_PopBatteryEtwCallback@36
_PopBatteryEtwInit@0
_PopBatteryInit@0
_PopBatteryInitialize@4
_PopBatteryIrpComplete@12
_PopBatteryQueryEstimatedTime@8
_PopBatteryQueryStatus@8
_PopBatteryQueueWork@4
_PopBatteryReadTag@4
_PopBatteryRefreshStatus@0
_PopBatteryRemove@4
_PopBatteryTracePercentageRemaining@16
_PopBatteryTraceSystemBatteryStatus@4
_PopBatteryUpdateAlarms@8
_PopBatteryUpdateCompositeInformation@0
_PopBatteryUpdateCurrentState@0
_PopBatteryWaitTag@4
_PopBatteryWakeDpc@16
_PopBatteryWakeTimerDpc@8
_PopBatteryWorker@4
_PopBcdClearPendingResume@4
_PopBcdClose@4
_PopBcdEstablishResumeObject@8
_PopBcdReadElement@16
_PopBcdRegenerateResumeObject@12
_PopBcdSetDefaultResumeObjectElements@16
_PopBcdSetPendingResume@16
_PopBcdSetupResumeObject@12
_PopBootLoaderSiData@8
_PopBootLoaderSiDataProcess@0
_PopBootLoaderTraceCopyPfnList@8
_PopBootLoaderTraceEtwEvents@8
_PopBootLoaderTraceProcess@0
_PopBroadcastSessionInfo@12
_PopBuildDeviceNotifyList@4
_PopBuildDeviceNotifyListWatchdog@16
_PopBuildMemoryImageHeader@8
_PopCalculateCsSummary@8
_PopCalculateHiberFileSize@8
_PopCalculateIdleInformation@4
_PopCalculateTotalHwDripsResidency@24
_PopCallPowerSettingCallback@8
_PopCancelDripsWatchdog@0
_PopCapabilityCheck@4
_PopCaptureReasonContext@16
_PopCaptureTimeOnProcZero@0
_PopChangeCapability@8
_PopCheckAndHandleThermalConditions@4
_PopCheckConsoleTimeouts@0
_PopCheckDisabledReason@8
_PopCheckDisabledState@4
_PopCheckExecutionRequiredPowerRequests@4
_PopCheckForAbnormalReset@0
_PopCheckForDeepSleep@0
_PopCheckForIdleness@16
_PopCheckForUpgradeInProgress@0
_PopCheckForWork@0
_PopCheckPowerSourceAfterRtcWakeCancel@0
_PopCheckPowerSourceAfterRtcWakeInitialize@0
_PopCheckPowerSourceAfterRtcWakeSet@0
_PopCheckPowerSourceAfterRtcWakeTimerCallback@8
_PopCheckPowerSourceAfterRtcWakeTimerWorker@4
_PopCheckResiliencyScenarios@0
_PopCheckShutdownMarker@4
_PopCheckSkipTick@0
_PopCheckTestsigningEnabled@0
_PopCheckThermalPolicy@20
_PopCleanCoolingExtension@4
_PopClearHiberFileSignature@0
_PopClearSleepMarker@0
_PopClearSpecialRequest@8
_PopCloneRange@16
_PopClosePowerRequestObject@16
_PopCoalescingActivate@4
_PopCoalescingCallback@12
_PopCoalescingCheck@16
_PopCoalescingEnforce@4
_PopCoalescingInitialize@0
_PopCoalescingNotify@0
_PopCoalescingPowerSettingCallback@16
_PopCoalescingSetTimer@0
_PopCoalesingTimerDpcCallback@16
_PopCompareActions@8
_PopCompleteAction@8
_PopCompressCallback@4
_PopComputeCounterShifts@16
_PopComputeDerivedHiberStats@16
_PopComputeTimeout@12
_PopComputeWatchdogTimeout@4
_PopConfigureHeteroProcessors@4
_PopConnectToPolicyDevice@8
_PopConnectedStandbyComplianceChecks@0
_PopConnectedStandbyCompliantNic@0
_PopConnectedStandbySettingCallback@16
_PopConsoleLockPowerSettingCallback@16
_PopConsoleSessionActiveInput@12
_PopConsoleSessionPassiveInput@12
_PopControlDeepSleep@4
_PopCoolingExtensionPnpNotification@8
_PopCoolingTelemetryWorker@0
_PopCopyWakeSource@12
_PopCountDataAsProduced@24
_PopCreateDumpMdl@16
_PopCreateDynamicIrpWorker@4
_PopCreateHiberFile@8
_PopCreateHiberFileSecurityDescriptor@0
_PopCreateKernelPowerRequest@8
_PopCreateNotificationName@4
_PopCreatePowerRequestObject@8
_PopCreatePowerThread@8
_PopCreateUserPowerRequest@12
_PopCriticalShutdown@4
_PopCsStateChanged@4
_PopCurrentPowerState@4
_PopCurrentPowerStatePrecise@4
_PopDeactiveThermalRequest@4
_PopDecompressCallback@4
_PopDecompressHiberBlocks@20
_PopDeepSleepEnabled@0
_PopDeepSleepPhaseEngaged@0
_PopDeepSleepPowerSettingCallback@16
_PopDefaultPolicy@4
_PopDelayedPowerRequestClearDpc@16
_PopDeleteHiberFile@4
_PopDeletePowerRequestObject@4
_PopDequeueQuerySetIrp@4
_PopDereferenceWakeInfos@8
_PopDeviceConstraintsEnforced@0
_PopDeviceIdleCompletion@20
_PopDeviceIdlePolicySettingCallback@16
_PopDiagDeviceRundownWorker@4
_PopDiagGetDriverName@12
_PopDiagInitialize@0
_PopDiagNextSleepStudySession@8
_PopDiagSleepStudyInitialize@0
_PopDiagSnapPassiveHistogram@8
_PopDiagTraceAbnormalReset@4
_PopDiagTraceAcDcStateChange@4
_PopDiagTraceAppPowerMessage@4
_PopDiagTraceAppPowerMessageEnd@4
_PopDiagTraceConsoleDisplayState@4
_PopDiagTraceControlCallback@36
_PopDiagTraceCoolingExtension@8
_PopDiagTraceCoolingExtensionActiveUpdate@4
_PopDiagTraceCoolingExtensionPassiveUpdate@4
_PopDiagTraceCoolingExtensionRemove@4
_PopDiagTraceCsConsumption@4
_PopDiagTraceCsDripsWatchdog@36
_PopDiagTraceCsDripsWatchdogPerfTrack@28
_PopDiagTraceCsEnterReason@4
_PopDiagTraceCsExitReason@4
_PopDiagTraceCsFanPerfTrack@8
_PopDiagTraceDebuggerTransitionRequirements@12
_PopDiagTraceDeviceAcquireIrp@8
_PopDiagTraceDeviceIdleCheck@12
_PopDiagTraceDeviceReleaseIrp@8
_PopDiagTraceDeviceVerboseRundown@4
_PopDiagTraceDevicesLevel@16
_PopDiagTraceDevicesSuspend@12
_PopDiagTraceDevicesWakeEnd@0
_PopDiagTraceDirtyTransition@20
_PopDiagTraceDiskIdleCheck@12
_PopDiagTraceDisplayTimeout@12
_PopDiagTraceDriverVeto@8
_PopDiagTraceDynamicTickStatusRundown@0
_PopDiagTraceEsState@8
_PopDiagTraceEventNoPayload@4
_PopDiagTraceFirmwareS3Stats@0
_PopDiagTraceFxComponentAccounting@16
_PopDiagTraceFxComponentIdleConstraints@16
_PopDiagTraceFxComponentIdleState@12
_PopDiagTraceFxComponentLogicalCondition@12
_PopDiagTraceFxComponentRegistration@28
_PopDiagTraceFxComponentWake@12
_PopDiagTraceFxDeviceAccounting@12
_PopDiagTraceFxDeviceIdleConstraints@12
_PopDiagTraceFxDevicePowerRequirement@12
_PopDiagTraceFxDevicePowerState@8
_PopDiagTraceFxDevicePowered@4
_PopDiagTraceFxDevicePreparation@16
_PopDiagTraceFxDeviceRegistration@32
_PopDiagTraceFxDeviceStartPowerManagement@4
_PopDiagTraceFxDeviceUnregistration@4
_PopDiagTraceFxPerfNominalChange@20
_PopDiagTraceFxPerfRegistration@16
_PopDiagTraceFxPerfRequest@12
_PopDiagTraceFxPerfRequestComplete@8
_PopDiagTraceFxPerfRequestProgress@8
_PopDiagTraceFxPerfSetRegistration@60
_PopDiagTraceFxPluginRegistration@16
_PopDiagTraceFxRundown@0
_PopDiagTraceHiberStats@0
_PopDiagTraceHibernateErrorStatus@4
_PopDiagTraceIdleCheck@16
_PopDiagTraceIdleResiliencyEnd@12
_PopDiagTraceIdleResiliencyStart@20
_PopDiagTraceIllegalProcessorThrottle@16
_PopDiagTraceInputTimeout@12
_PopDiagTraceIoCoalescingDiskIdle@4
_PopDiagTraceIoCoalescingFlush@0
_PopDiagTraceIoCoalescingOff@0
_PopDiagTraceIoCoalescingOn@16
_PopDiagTraceIrpFinish@4
_PopDiagTraceIrpStart@8
_PopDiagTraceKernelQueriesAllowed@4
_PopDiagTraceMtrrError@0
_PopDiagTracePassiveCooling@20
_PopDiagTracePerfTrackData@4
_PopDiagTracePlatformRoleRundown@0
_PopDiagTracePolicyChange@24
_PopDiagTracePostSleepNotification@12
_PopDiagTracePowerRequestChange@4
_PopDiagTracePowerRequestClose@4
_PopDiagTracePowerRequestCreate@8
_PopDiagTracePowerSetting@16
_PopDiagTracePowerSettingStart@16
_PopDiagTracePowerSettingStop@8
_PopDiagTracePowerTransitionEnd@4
_PopDiagTracePowerTransitionStart@8
_PopDiagTracePowerTransitionTime@0
_PopDiagTracePreSleepNotification@16
_PopDiagTraceProcessorThrottleDurationPerfTrack@8
_PopDiagTraceProcessorThrottlePerfTrack@8
_PopDiagTraceRegisterSystemState@8
_PopDiagTraceServiceNotification@4
_PopDiagTraceSessionDisplayStateChange@16
_PopDiagTraceSessionState@12
_PopDiagTraceSessionStates@12
_PopDiagTraceSetSystemState@4
_PopDiagTraceSetThreadExecutionState@8
_PopDiagTraceShutdownAction@12
_PopDiagTraceSkipTick@8
_PopDiagTraceSleepStudyBlocker@8
_PopDiagTraceSleepStudyBlockerData@8
_PopDiagTraceSleepStudyStart@0
_PopDiagTraceSleepStudyStop@0
_PopDiagTraceSystemLatencyUpdate@8
_PopDiagTraceThermalOverthrottleState@8
_PopDiagTraceThermalRequest@8
_PopDiagTraceThermalRequestActiveUpdate@4
_PopDiagTraceThermalRequestPassiveUpdate@4
_PopDiagTraceThermalRequestRemove@4
_PopDiagTraceThermalStandbyState@8
_PopDiagTraceThermalStateChange@12
_PopDiagTraceThermalZoneEnumeration@8
_PopDiagTraceThermalZoneRundown@28
_PopDiagTraceThermalZoneThrottleDurationPerfTrack@8
_PopDiagTraceThermalZoneThrottlePerfTrack@12
_PopDiagTraceTripPointExceeded@16
_PopDiagTraceUsermodeThermalEvent@4
_PopDiagTraceUsermodeTripPointExceeded@16
_PopDiagTraceZeroHiberFile@0
_PopDiagTraceZeroHiberFileEnd@0
_PopDiagTraceZoneCriticalTripPointExceeded@8
_PopDiagTraceZoneS4TripPointExceeded@8
_PopDisablePowerExecutionRequest@8
_PopDiscardRange@16
_PopDisconnectedStandbyEnabled@4
_PopDisksRegisteredForIdle@0
_PopDispatchAcDcCallback@4
_PopDispatchCallback@4
_PopDispatchCallout@4
_PopDispatchFullWake@4
_PopDispatchNotifications@4
_PopDispatchNotificationsToList@4
_PopDispatchPowerSettingCallbacks@4
_PopDispatchQuerySetIrp@4
_PopDispatchShutdownEvent@4
_PopDispatchStateCallout@8
_PopDispatchSuperfetchNotification@8
_PopDripsWatchdogTakeAction@8
_PopDripsWatchdogTimerCallbackRoutine@8
_PopDripsWatchdogWorkerRoutine@4
_PopEnableExecutionRequiredPowerRequests@4
_PopEnableHiberFile@8
_PopEnableIrpWatchdog@4
_PopEnablePowerExecutionRequest@4
_PopEndMirroring@4
_PopEnforceDeepSleep@4
_PopEnforceResiliencyScenarios@4
_PopEnlargeHiberFile@4
_PopEsBatteryStatusChanged@4
_PopEsBrightnessSettingCallback@16
_PopEsEnterSleepShutdown@0
_PopEsExitSleep@0
_PopEsGetState@0
_PopEsInit@0
_PopEsPowerSettingBatteryThresholdCallback@16
_PopEsUpdateSetting@0
_PopEsUpdateState@4
_PopEsWnfSubscriptionOverrideCallback@24
_PopEsWorker@4
_PopEstimateChargeTime@0
_PopEvaluateGlobalUserStatus@0
_PopEventCalloutDispatch@8
_PopExecuteOnTargetProcessors@16
_PopExecutePowerAction@20
_PopExecuteProcessorCallback@16
_PopExecutionRequiredPowerRequest@8
_PopExecutionRequiredSettingCallback@16
_PopExecutionRequiredTimeoutCallback@16
_PopExtendConnectionState@4
_PopFanAdd@4
_PopFanEndCsFanPeriod@0
_PopFanIrpComplete@12
_PopFanRemove@4
_PopFanReportBootStartDevices@0
_PopFanUpdateCsState@4
_PopFanUpdateRunningState@4
_PopFanWorker@4
_PopFastS4Check@0
_PopFilterCapabilities@8
_PopFinalizeDeviceWakeSource@4
_PopFinalizeWakeInfo@4
_PopFindNextSystemPowerState@12
_PopFindPowerSettingConfiguration@8
_PopFireThermalWmiEvent@4
_PopFlushAndHold@8
_PopFlushVolumeWorker@4
_PopFlushVolumes@4
_PopForceCompleteSleepStudySession@4
_PopFreeHiberContext@0
_PopFreeIrp@4
_PopFreeRegistration@4
_PopFreeSessionState@4
_PopFreeSessionStateInList@8
_PopFreeWakeInfo@4
_PopFreeWakeSource@4
_PopFxAcpiDispatchNotification@4
_PopFxAcpiForwardNotification@20
_PopFxAcpiForwardPepAcpiNotifyRequest@8
_PopFxAcpiForwardPepWorkRequest@8
_PopFxAcpiForwardRequestCommon@8
_PopFxAcpiPrepareDevice@16
_PopFxAcpiRegisterDevice@20
_PopFxAcpiUnregisterDevice@8
_PopFxAcpiValidateParameters@4
_PopFxActivateComponent@16
_PopFxActivateComponentWorker@16
_PopFxActivateDevice@8
_PopFxActivateDevicesForSx@4
_PopFxAddRefDevice@4
_PopFxAllocatePowerIrp@32
_PopFxArmResidentTimer@4
_PopFxAssignDeviceToDevNode@8
_PopFxBugCheck@16
_PopFxCaptureDeviceAccounting@0
_PopFxChildDeviceActive@8
_PopFxCompleteComponentActivation@12
_PopFxCompleteComponentPerfState@16
_PopFxCompleteDevicePowerRequired@8
_PopFxComponentPerfWork@4
_PopFxComponentWork@4
_PopFxConvertV1Components@8
_PopFxCreateDeviceCommon@20
_PopFxCreateEmergencyWorkerThread@4
_PopFxDebuggerPowerCriticalTransitionCallback@12
_PopFxDeliverDevicePowerRequired@8
_PopFxDestroyDeviceCommon@4
_PopFxDestroyDeviceDpm@8
_PopFxDeviceAccountingWatchdog@16
_PopFxDeviceWork@4
_PopFxDuplicateUniqueId@8
_PopFxEmergencyWorker@4
_PopFxEnablePlatformStates@4
_PopFxEnableWorkOrderWatchdog@4
_PopFxFindAcpiDeviceByUniqueId@8
_PopFxFindAndReferenceAcpiDevice@4
_PopFxFindDeviceAndAllocateUniqueId@8
_PopFxFreeUniqueId@4
_PopFxGenerateSocSubsystemGuid@12
_PopFxGetLatencyLimitWithoutResiliency@0
_PopFxIdleComponent@16
_PopFxIdleDevicesFromSx@4
_PopFxIdleTimeoutDpcRoutine@16
_PopFxIdleWorker@12
_PopFxIdleWorkerTail@12
_PopFxIncrementDeviceSleepCount@4
_PopFxInitializeSocSubsystemStaticInfo@8
_PopFxInsertAcpiDevice@12
_PopFxInsertDevice@12
_PopFxIssueComponentPerfStateChanges@24
_PopFxLockDevice@8
_PopFxLogSocSubsystemBlockingTimes@12
_PopFxLogSocSubsystemMetadata@12
_PopFxLookupSocSubsystemsByPlatformIdleState@4
_PopFxLowPowerEpochCallback@16
_PopFxPauseDeviceAccounting@0
_PopFxPepPerfInfoFree@4
_PopFxPepPerfInfoQuery@12
_PopFxPlatformIdleVeto@16
_PopFxPlatformRegisterInterface@8
_PopFxPluginWork@4
_PopFxPrepareDevicesForShutdown@0
_PopFxProcessWork@8
_PopFxProcessorIdleVeto@16
_PopFxQueryBiosDeviceName@8
_PopFxQueryCurrentComponentPerfState@24
_PopFxQueueWorkOrder@16
_PopFxRegisterComponentPerfStates@28
_PopFxRegisterDevice@32
_PopFxRegisterDeviceWithPep@16
_PopFxRegisterDeviceWorker@40
_PopFxRegisterPluginEx@16
_PopFxReleaseAcpiRefDevice@8
_PopFxReleasePowerIrp@4
_PopFxRemoveAcpiDevice@8
_PopFxRemoveDevice@8
_PopFxRequestCommon@8
_PopFxRequestWorker@4
_PopFxResetSocSubsystemAccounting@8
_PopFxResidentTimeoutDpcRoutine@16
_PopFxResidentTimeoutRoutine@4
_PopFxResumeDeviceAccounting@0
_PopFxScheduleDeviceIdleTimer@4
_PopFxSetDeviceAccountingCsPlatformState@4
_PopFxStartDeviceAccounting@0
_PopFxStopDeviceAccounting@0
_PopFxTraceDeviceRegistration@8
_PopFxTracePerfRegistration@8
_PopFxTransitionCriticalResource@12
_PopFxUnregisterDevice@4
_PopFxUnregisterDeviceOrWait@4
_PopFxUpdateComponentAccountingEnhanced@16
_PopFxUpdateComponentPerfStateNominalChange@16
_PopFxUpdateDeviceAccountingEnhanced@12
_PopFxUpdateDeviceIdleTimer@4
_PopFxUpdatePlatformIdleState@12
_PopFxUpdateProcessorIdleState@12
_PopFxValidateReturnedUnicodeString@12
_PopFxVerifyDependencies@12
_PopFxWorkOrderWatchdog@16
_PopGenerateMdl@4
_PopGenerateScratchMdl@8
_PopGenerateUnHibernatedMdl@8
_PopGetBitlockerKeyLocation@4
_PopGetConsoleDisplayRequestCount@0
_PopGetCurrentWakeInfos@4
_PopGetDischargeStartStatus@0
_PopGetDisplayTimeout@4
_PopGetDope@4
_PopGetHiberFlags@0
_PopGetHwConfigurationSignature@0
_PopGetIdleTimesCallback@12
_PopGetIoLocation@16
_PopGetLegacyPowerRequestFlags@12
_PopGetListHead@4
_PopGetLockConsoleTimeout@4
_PopGetNextTable@24
_PopGetPolicyDeviceObject@8
_PopGetPolicyWorker@4
_PopGetPowerRequestListInfo@8
_PopGetPowerSettingValue@24
_PopGetRangeCount@4
_PopGetReasonListByReasonCode@4
_PopGetRemainingHibernateRangeDataSize@4
_PopGetSessionId@0
_PopGetSettingNotificationName@8
_PopGetSettingValue@12
_PopGetWakeSource@8
_PopGracefulShutdown@4
_PopHaltDeviceIdle@0
_PopHandleNextState@8
_PopHandleWakeSources@0
_PopHardDiskPowerSettingCallback@16
_PopHiberCheckForDebugBreak@0
_PopHiberCheckResume@0
_PopHiberChecksumHiberFileData@24
_PopHiberEarlyCleanup@4
_PopHiberInitializeResources@4
_PopHiberPeekRangeTable@12
_PopHiberReadChecksums@4
_PopIdleAoAcDozeS4TimerCallback@8
_PopIdleAoAcDozeToS4@4
_PopIdleArmAoAcDozeS4Timer@0
_PopIdleCheckForUserInput@0
_PopIdleInitAoAcDozeS4Timer@0
_PopIdleIsDozeS4Enabled@4
_PopIgnoreBatteryStatusChange@0
_PopInitPlatformSettings@0
_PopInitSIdle@0
_PopInitShutdownList@0
_PopInitSystemSleeperThread@8
_PopInitializeAdpm@0
_PopInitializeHeteroProcessors@0
_PopInitializeIrpWorkers@0
_PopInitializePowerPolicySimulate@0
_PopInitializePowerSettingCallbacks@0
_PopInitializePowerSettings@0
_PopInitializeTimer@24
_PopInitilizeAcDcSettings@0
_PopInputDisabled@12
_PopInsertPowerRequestObject@8
_PopIntSteerSetMode@16
_PopIntSteerSetPerProcTrigger@16
_PopIntSteerSetTimeUnparkTrigger@16
_PopInterruptSteeringEnabled@0
_PopInvokeStateHandlerTargetProcessor@16
_PopInvokeSystemStateHandler@8
_PopIrpWatchdog@16
_PopIrpWatchdogBugcheck@4
_PopIrpWorker@4
_PopIrpWorkerControl@4
_PopIssueActionRequest@16
_PopIssueCoalescingNotification@4
_PopIssueNextState@12
_PopLazySensorActiveInput@8
_PopLoadResumeContext@4
_PopLockGetDoDevicePowerState@4
_PopLogDisabledSleepReason@0
_PopLogNotifyDevice@12
_PopLogSleepDisabled@16
_PopLoggingInformation@8
_PopMapInternalActionToIrpAction@12
_PopMarkComponentsBootPhase@4
_PopMarkHiberPhase@4
_PopMarshalSettingValues@16
_PopMirrorPhysicalMemory@16
_PopMonitorAlpcCallback@12
_PopMonitorInvocation@4
_PopMonitorProcessBrightnessAction@8
_PopMonitorProcessLoop@0
_PopMoveList@8
_PopNewProcessorCallback@12
_PopNewWakeInfo@0
_PopNewWakeSource@4
_PopNotifyBrightnessChangesWorker@4
_PopNotifyCallbacksPreSleep@0
_PopNotifyConsoleUserPresent@12
_PopNotifyDevice@8
_PopNotifyPolicyDevice@8
_PopNotifySessionDisplayRequired@8
_PopNotifyTelemetryOsState@20
_PopOkayToQueueNextWorkItem@4
_PopOpenKey@12
_PopOpenPowerKey@4
_PopOrphanCoolingExtension@4
_PopPdcCallback@4
_PopPdcCsDeviceNotification@4
_PopPdcInvocation@8
_PopPdcRegister@8
_PopPdcScreenOff@4
_PopPdcUpdateDeviceCompliance@0
_PopPepArmIdleTimer@4
_PopPepAttemptAcitivityPromotion@20
_PopPepCancelActivities@12
_PopPepCancelActivityRange@20
_PopPepCompleteActivity@12
_PopPepCompleteComponentActiveActivity@8
_PopPepCompleteComponentIdleState@8
_PopPepCompleteComponentIdleStateChangeActivity@8
_PopPepCompleteDevicePowerOnActivity@8
_PopPepCompleteVoidActivity@8
_PopPepComponentActive@16
_PopPepComponentGetLatencyIdleState@12
_PopPepComponentGetResidencyIdleState@12
_PopPepComponentGetWork@12
_PopPepComponentSetLatency@16
_PopPepComponentSetResidency@16
_PopPepComponentSetWakeHint@12
_PopPepCountReadyActivities@12
_PopPepDeviceDState@16
_PopPepDeviceStarted@4
_PopPepDeviceWaitWake@8
_PopPepEntry@0
_PopPepGetComponentPreferedIdleState@4
_PopPepGetComponentVetoMasks@16
_PopPepGetDevicePlatformStateDependents@8
_PopPepGetDeviceVetoMasks@8
_PopPepGetMinimumComponentIdleState@16
_PopPepGetMinimumDevicePowerState@12
_PopPepGetReadyActivityType@12
_PopPepIdleTimeoutDpcRoutine@16
_PopPepIdleTimeoutRoutine@4
_PopPepInitializeDebuggerMasks@8
_PopPepInitializeVetoMasks@8
_PopPepInsertDevice@8
_PopPepLockActivityLink@20
_PopPepPlatformStateRegistered@4
_PopPepPowerControlRequest@28
_PopPepProcessEvent@24
_PopPepPromoteActivities@12
_PopPepRegisterComponentPerfStates@16
_PopPepRegisterDevice@20
_PopPepReleaseActivityLink@16
_PopPepRemoveDevice@4
_PopPepRequestWork@8
_PopPepResetDeviceAccountingLevel@0
_PopPepShouldActivityWait@20
_PopPepStartActivity@24
_PopPepStartComponentActivatingActivity@12
_PopPepStartComponentIdleStateChangeActivity@12
_PopPepStartDevicePowerOffActivity@12
_PopPepStartDevicePowerOnActivity@12
_PopPepStartDeviceUnregisterActivity@12
_PopPepStartVoidActivity@12
_PopPepSurprisePowerOn@4
_PopPepTriggerActivity@16
_PopPepTriggerComponentActivatingActivity@12
_PopPepTriggerComponentActiveActivity@12
_PopPepTriggerComponentIdleStateChangeActivity@12
_PopPepTriggerVoidActivity@12
_PopPepTryPowerDownComponent@8
_PopPepTryPowerDownDevice@8
_PopPepTryPowerUpComponent@8
_PopPepUnregisterDevice@4
_PopPepUpdateConstraints@12
_PopPepUpdateIdleState@12
_PopPepUpdateIdleStateRefCount@12
_PopPepVerifyActivities@12
_PopPepWaitForDeviceRelease@4
_PopPepWork@4
_PopPerfBoostPowerRequest@8
_PopPluginAbandonDevice@8
_PopPluginAcpiNotificationStrict@12
_PopPluginComponentActive@16
_PopPluginComponentIdleState@16
_PopPluginDevicePower@12
_PopPluginInitializeSocSubsystemStaticInfo@8
_PopPluginNotifyActive@12
_PopPluginNotifyIdleState@16
_PopPluginPrepareDevice@8
_PopPluginQueryComponentPerfCapabilities@12
_PopPluginQueryComponentPerfSet@32
_PopPluginQueryComponentPerfSetName@20
_PopPluginQueryComponentPerfStates@16
_PopPluginQueryCurrentComponentPerfState@12
_PopPluginQuerySocSubsystemBlockingTime@12
_PopPluginQuerySocSubsystemCount@8
_PopPluginQuerySocSubsystemMetadata@12
_PopPluginRegisterComponentPerfStates@12
_PopPluginRegisterCrashdumpDevice@12
_PopPluginRegisterDevice@24
_PopPluginRequestComponentIdleConstraints@16
_PopPluginRequestComponentPerfState@20
_PopPluginRequestDebuggerTransitionRequirements@12
_PopPluginRequestDeviceIdleConstraints@12
_PopPluginRequestPowerControl@28
_PopPluginResetSocSubsystemAccounting@8
_PopPluginUnregisterDevice@8
_PopPoCoalescinCallback@12
_PopPolicyDeviceRemove@4
_PopPolicyDeviceTargetChange@8
_PopPolicySystemIdle@0
_PopPolicyTimeChange@0
_PopPolicyWorkerAction@0
_PopPolicyWorkerActionPromote@0
_PopPolicyWorkerNotify@0
_PopPolicyWorkerThread@4
_PopPowerActionString@4
_PopPowerButtonSettingCallback@16
_PopPowerInformationInternal@28
_PopPowerRequestActionInfo@4
_PopPowerRequestAllocate@8
_PopPowerRequestCallbackWorker@4
_PopPowerRequestCleanUp@4
_PopPowerRequestCompare@12
_PopPowerRequestCreateInfo@12
_PopPowerRequestDeleteEntryById@4
_PopPowerRequestDeleteEntryNoLock@4
_PopPowerRequestExecuteCallbacks@12
_PopPowerRequestFindEntryById@4
_PopPowerRequestFree@8
_PopPowerRequestInit@0
_PopPowerRequestInsertElementNoLock@4
_PopPowerRequestOverrideInitialize@0
_PopPowerTransitionTimesInMs@20
_PopPpmHeteroPolicyCallback@16
_PopPreallocateHibernateMemory@0
_PopPrepChildWake@8
_PopPrepareIoctl@24
_PopPrintEx
_PopPrintUserActivityPresence@4
_PopProcessNotifyLegacyEventResponse@4
_PopProcessPowerRequestOverrideQueryResponse@4
_PopProcessWakeSourceWork@12
_PopProcessorIdleSelectNotification@8
_PopProcessorInformation@16
_PopProcessorParkMaskNotification@8
_PopProcessorParkNotification@8
_PopProcessorQueryCoordiantedDependencyNotification@8
_PopProcessorQueryPlatformStateNotification@12
_PopProcessorSetPep@4
_PopPromoteActionFlag@20
_PopPropogateCoolingChange@4
_PopPublishDischargeStart@4
_PopQpcTimeInMs@8
_PopQueueBatteryStatusTimeout@0
_PopQueuePowerRequestCallbacks@8
_PopQueueQuerySetIrp@4
_PopQueueTargetDpc@8
_PopQueueWorkItem@8
_PopReadHiberbootGroupPolicy@4
_PopReadHiberbootPolicy@4
_PopReadProducerConsumerBuffer@24
_PopReadShutdownPolicy@0
_PopReadSystemAwayModePolicy@0
_PopReadyChildWake@12
_PopReadyParentSleep@12
_PopRecalculateCBTriggerLevels@4
_PopRecordPowerButton@0
_PopRegisterClient@4
_PopRegisterCoolingExtensionProtection@4
_PopRegisterEnergyEstimation@8
_PopReleaseAdaptiveLock@0
_PopReleaseAwaymodeLock@0
_PopReleasePolicyLock@0
_PopReleasePowerRequestPushLock@0
_PopReleaseTransitionLock@0
_PopReleaseUmpoPushLock@0
_PopReleaseWakeSourceSpinLock@4
_PopRemoteSessionActiveInput@12
_PopRemoveReasonRecordByReasonCode@4
_PopRequestCompletion@12
_PopRequestPowerIrp@28
_PopRequestRead@12
_PopRequestShutdownWait@4
_PopRequestWrite@12
_PopResetActionDefaults@0
_PopResetCBTriggers@4
_PopResetCurrentPolicies@0
_PopResetIdleTime@4
_PopResetRangeEnum@4
_PopResizeHiberFile@12
_PopRestoreHiberContext@4
_PopResumeApps@4
_PopResumeDeviceIdle@0
_PopResumeServices@4
_PopRtcWakeSettingCallback@16
_PopRunMaximumIrpWorkers@0
_PopRunNormalIrpWorkers@0
_PopRundownPowerSettings@0
_PopRundownThermalRequests@0
_PopS0LowPowerIdleInfo@4
_PopSafeCopyUnicodeString@16
_PopSanityCheckHiberFile@20
_PopSaveHiberContext@4
_PopSaveHiberContextWrapper@4
_PopSaveHibernateEnabled@0
_PopScanIdleList@0
_PopSendSessionInfo@16
_PopSensorActiveInput@4
_PopSessionClosed@4
_PopSessionConnected@12
_PopSessionConnectionChange@12
_PopSessionCreated@4
_PopSessionDisconnected@8
_PopSessionInputChange@12
_PopSessionWinlogonNotification@8
_PopSetAwayModeStatus@4
_PopSetBootPhaseRange@16
_PopSetDevicesSystemState@0
_PopSetDisplayStatus@4
_PopSetDripsWatchdog@0
_PopSetGlobalUserStatus@8
_PopSetHiberFileMcb@8
_PopSetHiberFileSize@8
_PopSetHiberFileType@8
_PopSetLastReferenceTime@0
_PopSetNewPolicyValue@4
_PopSetNotificationWork@4
_PopSetPowerSettingValue@20
_PopSetPowerSettingValueAcDc@12
_PopSetRange@20
_PopSetSessionDisplayStatus@12
_PopSetSessionUserStatus@8
_PopSetShutdownMarker@0
_PopSetSleepMarker@4
_PopSetSpecialRequest@12
_PopSetSystemAwayMode@4
_PopSetSystemState@8
_PopSetWin32kInputTimeout@8
_PopSetupAudioEventNotification@0
_PopSetupFullScrenVideoNotification@0
_PopSetupHighPerfPowerRequest@0
_PopSetupSleepNotifies@4
_PopShutdownHandler@20
_PopShutdownSystem@4
_PopSleepDeviceList@8
_PopSleepPowerSettingCallback@16
_PopSnapStandbyNetworkingState@0
_PopSpoilBatteryEstimate@8
_PopSpoilEstimatesOnPowerStateTransitionWorker@4
_PopSqmAddToStream@16
_PopSqmBatteryUpdate@16
_PopSqmCreateDwordStreamEntry@8
_PopSqmFanEnumeration@0
_PopSqmThermalCriticalEvent@12
_PopSqmThermalCriticalShutdown@4
_PopSqmThermalHibernate@4
_PopSqmThermalUsermodeEvent@20
_PopSqmThermalZoneEnumeration@40
_PopStartMirroring@0
_PopStateIsSessionSpecific@4
_PopSuspendApps@4
_PopSuspendResumeInvocation@4
_PopSuspendResumePdc@4
_PopSuspendServices@4
_PopSwitchForcedShutdownSettingCallback@16
_PopSystemIrpCompletion@12
_PopSystemRequiredCallback@8
_PopSystemRequiredSet@4
_PopSystemStateString@4
_PopThermalCsEntry@4
_PopThermalCsExit@0
_PopThermalHandlePreviousShutdown@0
_PopThermalInit@0
_PopThermalIrpComplete@12
_PopThermalPowerSettingCallback@16
_PopThermalProcessUsermodeEvent@4
_PopThermalReadCounters@16
_PopThermalStandbyEndTracking@4
_PopThermalStandbyNotify@4
_PopThermalSxEntry@0
_PopThermalSxExit@4
_PopThermalTelemetryCallback@8
_PopThermalTelemetryWorker@4
_PopThermalTraceRundownEvents@0
_PopThermalUpdatePassiveTimeTracking@8
_PopThermalUpdateTelemetryClientCount@4
_PopThermalWorker@4
_PopThermalWriteShutdownToRegistry@0
_PopThermalZoneAdd@4
_PopThermalZoneDpc@16
_PopThermalZoneRemove@4
_PopThermalZoneUpdateCoolingPolicy@0
_PopTimeoutWakeTracking@4
_PopTimestampTargetProcessor@16
_PopTraceCr3Tripped@0
_PopTraceEsSetting@12
_PopTraceEsState@32
_PopTracePowerReconfig@0
_PopTracePowerSettingChange@16
_PopTraceSystemIdleS0LowPowerDoze@4
_PopTraceSystemIdleTimeReset@8
_PopTraceSystemIdleTimeoutInitialization@24
_PopTraceSystemIdleUpdate@44
_PopTraceThermalRequestPassiveHistogram@4
_PopTraceThermalStandbyComplete@12
_PopTraceThermalStandbyInitiated@4
_PopTraceThermalZonePassiveHistogram@4
_PopTransitionTelemetryOsState@8
_PopTransitionToSleep@4
_PopTranslateDependencyArray@24
_PopTriggerDiagTraceAoAcCapability@4
_PopUmpoInitializeChannel@0
_PopUmpoInitializeMonitorChannel@0
_PopUmpoMessageCallback@12
_PopUmpoProcessMessage@8
_PopUmpoProcessMessages@0
_PopUmpoProcessPowerMessage@4
_PopUmpoSendBrightness@8
_PopUmpoSendHotKey@4
_PopUmpoSendLegacyEvent@8
_PopUmpoSendPowerMessage@8
_PopUmpoSendPowerRequestOverrideCleanup@4
_PopUmpoSendPowerRequestOverrideQuery@4
_PopUmpoSendReapplyBrightnessSettings@0
_PopUnlinkWakeSources@4
_PopUnlockAfterSleepWorker@4
_PopUnregisterPowerSettingCallback@4
_PopUpdateConsoleDisplayState@4
_PopUpdateDiskIdleTimeoutSetting@0
_PopUpdateOverThrottledCount@8
_PopUpdateSingleProcessHeteroPolicies@8
_PopUpdateSingleThreadHeteroPolicies@12
_PopUpdateTimeouts@12
_PopUpdateWakeSource@4
_PopUpdateWakeSourceWorker@4
_PopUserIsAdmin@0
_PopUserPresentOverride@4
_PopUserPresentSet@4
_PopUserPresentSetWorker@4
_PopUserShutdownCancelled@4
_PopUserShutdownDelayDpcCallback@16
_PopUserShutdownDelayWorkerCallback@4
_PopValidateContextMembership@4
_PopValidateExistingHiberFile@12
_PopValidateHiberFileSize@12
_PopValidatePowerSettingData@12
_PopValidateRTCWake@4
_PopValidateServiceNotification@8
_PopVerifyPowerActionPolicy@4
_PopVerifySystemPowerPolicy@8
_PopVerifySystemPowerState@8
_PopVideoBrightnessCapableSettingCallback@16
_PopVideoPowerSettingCallback@16
_PopWakeDeviceList@8
_PopWakeInfoDereference@4
_PopWakeInfoReference@4
_PopWakeSourceGetDeviceProperty@12
_PopWakeSourceInit@0
_PopWakeSourceIsChild@8
_PopWakeSourceIsParent@8
_PopWakeSourceSize@4
_PopWakeSourceTimeoutDpc@16
_PopWakeSourceTimeoutWorker@4
_PopWdiTimerCallback@16
_PopWdiTimerWorkerThread@4
_PopWiFiInStandbyCallback@16
_PopWin32kPowerSettingCallback@16
_PopWnfAudioCallback@24
_PopWnfFullscreenVideoCallback@24
_PopWriteChecksumPages@4
_PopWriteHeaderPages@8
_PopWriteHiberPages@16
_PopWriteImageHeader@20
_PopZeroHiberFile@8
_PotentialNewSymbol@4
_PpCheckInDriverDatabase@24
_PpCreateLegacyDeviceIds@12
_PpDevCfgCheckDeviceNeedsUpdate@12
_PpDevCfgInit@0
_PpDevCfgProcessDevice@12
_PpDevCfgProcessDeviceClass@4
_PpDevCfgProcessDeviceExtensions@4
_PpDevCfgProcessDeviceReset@4
_PpDevCfgProcessDevices@0
_PpDevCfgTraceDeviceStart@4
_PpDevNodeInsertIntoTree@8
_PpDevNodeLockTree@4
_PpDevNodeRemoveFromTree@4
_PpDevNodeUnlockTree@4
_PpDeviceRegistration@16
_PpForEachDeviceInstanceDriver@12
_PpHotSwapGetDevnodeRemovalPolicy@12
_PpHotSwapInitRemovalPolicy@4
_PpHotSwapUpdateRemovalPolicy@4
_PpInitGetGroupOrderIndex@4
_PpInitSystem@0
_PpInitializeBootDDB@8
_PpIrpQueryBusInformation@8
_PpIrpQueryCapabilities@8
_PpIrpQueryResourceRequirements@8
_PpLastGoodDeleteFilesCallback@16
_PpLastGoodDoBootProcessing@0
_PpMarkDeviceStackExtensionFlag@12
_PpPagePathAssign@4
_PpProcessClearProblem@4
_PpProfileBeginHardwareProfileTransition@4
_PpProfileCancelHardwareProfileTransition@0
_PpProfileCancelTransitioningDock@8
_PpProfileCommitTransitioningDock@8
_PpProfileIncludeInHardwareProfileTransition@8
_PpProfileInit@0
_PpProfileMarkAllTransitioningDocksEjected@0
_PpProfileQueryHardwareProfileChange@16
_PpReleaseBootDDB@0
_PpResetProblemDevices@8
_PpSystemHiveLimitCallback@8
_PpmAcquireLock@4
_PpmAllocWmiEvent@12
_PpmAllocateQueryTable@4
_PpmApplyIdlePolicy@4
_PpmApplyIdlePolicyChanges@12
_PpmApplyProfile@4
_PpmBeginHighPerfRequest@0
_PpmBeginProfileAccumulation@12
_PpmCapturePerformanceDistribution@20
_PpmCapturePerformanceDistributionCallback@12
_PpmCheckAcquireProcessorPerformance@0
_PpmCheckAdjustNextPerfCheck@0
_PpmCheckApplyParkConstraints@0
_PpmCheckApplyPerfConstraints@4
_PpmCheckApplyResetNotification@0
_PpmCheckArmPeriod@4
_PpmCheckComputeEnergy@0
_PpmCheckComputeHeteroResponse@0
_PpmCheckCoordinatedStateInitiator@12
_PpmCheckCustomRun@4
_PpmCheckIdleVeto@4
_PpmCheckInit@0
_PpmCheckInitProcessors@4
_PpmCheckMaintainArtificialDomain@0
_PpmCheckMakeupSkippedChecks@0
_PpmCheckPeriodicStart@16
_PpmCheckPreConditionsForDeepSleep@4
_PpmCheckReInit@0
_PpmCheckRecordAllUtility@0
_PpmCheckReportComplete@0
_PpmCheckReset@12
_PpmCheckRun@16
_PpmCheckSnapAllUtility@0
_PpmCheckStart@4
_PpmClaimCoordinatedIdleState@4
_PpmClearExitLatencySamplingPercentage@0
_PpmClearSimulatedIdle@4
_PpmClearSimulatedLoad@4
_PpmCompareAndApplyPolicySettings@12
_PpmContinueActiveTimeAccumulation@12
_PpmConvertTime@24
_PpmConvertTimeFrom@16
_PpmConvertTimeTo@16
_PpmDeepestHardwareIdleState@4
_PpmDisableProfile@4
_PpmEnableCoordinatedIdleStates@8
_PpmEnableProfile@4
_PpmEnableWmiInterface@0
_PpmEndHighPerfRequest@4
_PpmEndProfileAccumulation@12
_PpmEnterCoordinatedIdleState@4
_PpmEstimateIdleDuration@40
_PpmEventBiosCapChange@8
_PpmEventCoreParkingStateChange@8
_PpmEventDomainPerfStateChange@4
_PpmEventIdleDurationExpiration@4
_PpmEventIdleStateChange@8
_PpmEventInitialize@0
_PpmEventLPICoreParking@8
_PpmEventParkNodeCapChange@16
_PpmEventParkNodePreference@28
_PpmEventPerfState@24
_PpmEventPlatformVetoRequest@12
_PpmEventPlatformVetoRundown@0
_PpmEventProcessorPerfStateChange@8
_PpmEventProcessorVetoRequest@16
_PpmEventProcessorVetoRundown@4
_PpmEventStaticPolicyRundown@0
_PpmEventThermalCapChange@8
_PpmEventTraceAccountingBucketIntervalsRundown@0
_PpmEventTraceControlCallback@36
_PpmEventTraceCoordinatedIdleStates@0
_PpmEventTraceCoreParkingSelection@24
_PpmEventTraceDripsAccountingSnapshot@8
_PpmEventTraceExpectedUtility@4
_PpmEventTraceFailedPerfCheckStart@8
_PpmEventTraceHeteroDistributeUtility@12
_PpmEventTraceHeteroResponse@28
_PpmEventTraceLPIState@0
_PpmEventTraceMakeupPerfCheck@0
_PpmEventTraceParkNodeRundown@4
_PpmEventTracePerfCheckStop@0
_PpmEventTracePlatformIdleAccounting@0
_PpmEventTracePpmProfileStatusRundown@0
_PpmEventTraceProcessorIdle@4
_PpmEventTraceProcessorIdleAccounting@12
_PpmEventTraceProcessorPerformance@4
_PpmEventTraceProfileChange@8
_PpmEventTraceProfileEnable@8
_PpmEventTraceProfileSetting@32
_PpmEventVetoReasonRundown@0
_PpmExitCoordinatedIdleState@8
_PpmFireWmiEvent@16
_PpmGetIdleGenerationCounter@4
_PpmGetPlatformIdleDurationHint@0
_PpmGetPlatformSelectionVetoCounts@12
_PpmGetPolicyAction@8
_PpmGetThroughputInfoCallback@12
_PpmHeteroComputeRelativePerformance@0
_PpmHeteroDistributeUtility@0
_PpmHeteroUtilityGreaterThanOrEqualThreshold@28
_PpmHvConsiderNative@0
_PpmHvGetRuntimesForProcessor@12
_PpmIdleCheckCoordinatedDependencies@40
_PpmIdleCheckCoordinatedDependency@36
_PpmIdleCheckCoordinatedProcessorDependency@16
_PpmIdleCheckCoordinatedStateEligibility@32
_PpmIdleCheckProcessorStateEligibility@28
_PpmIdleCompleteExitLatencyTrace@36
_PpmIdleDurationExpiration@16
_PpmIdleGetCIndexForState@4
_PpmIdleInitializeConcurrency@8
_PpmIdleInstallConcurrency@12
_PpmIdleInstallDefaultStates@12
_PpmIdleLockProcessor@4
_PpmIdleRecheckCoordinatedIdleMask@12
_PpmIdleRegisterDefaultStates@0
_PpmIdleRemoveConcurrency@12
_PpmIdleRemoveVetoBias@0
_PpmIdleRollbackCoordinatedSelection@8
_PpmIdleSelectCoordinatedProcessorDependency@28
_PpmIdleSelectStates@28
_PpmIdleSnapConcurrency@16
_PpmIdleSnapConcurrencyIdleTime@12
_PpmIdleTransitionStall@4
_PpmIdleUnlockProcessor@4
_PpmIdleUpdateConcurrency@20
_PpmIdleUpdateCoordinatedDependencies@4
_PpmIdleUpdateHvStates@4
_PpmIdleUpdatePlatformDependencies@4
_PpmIdleUpdateSelectionStatistics@12
_PpmIdleUsingStateSelection@0
_PpmIdleWaitForDependentTransitions@4
_PpmInfoAcquireLocks@4
_PpmInfoAdjustSetting@24
_PpmInfoApplySettingUpdate@4
_PpmInfoConfigComparer
_PpmInfoRegisterCallbacks@0
_PpmInfoReleaseLocks@4
_PpmInfoTraceProfileSettings@0
_PpmInfoWriteData@20
_PpmInitCoreParkingPolicy@0
_PpmInitHeteroPolicy@0
_PpmInitIdlePolicy@0
_PpmInitIllegalThrottleLogging@0
_PpmInitPolicyConfiguration@0
_PpmInstallCoordinatedIdleStates@4
_PpmInstallFeedbackCounters@8
_PpmInstallNewIdleDomains@12
_PpmInstallNewIdleStates@12
_PpmInstallPlatformIdleStates@4
_PpmMediaBufferingWorker@4
_PpmParkApplyForcedMask@4
_PpmParkApplyPolicy@0
_PpmParkCalculateCoreParkingMask@0
_PpmParkCalculateUnparkCount@0
_PpmParkChooseCoresToUnpark@36
_PpmParkClearForcedMask@4
_PpmParkCompleteMakeup@0
_PpmParkComputeDiff@0
_PpmParkDistributeUtility@0
_PpmParkFindOverUtilizedProcessors@8
_PpmParkMaximumCoresParked@0
_PpmParkParkingAvailable@0
_PpmParkRecordNodeStatistics@4
_PpmParkRegisterParking@0
_PpmParkReportMask@0
_PpmParkReportParkedCore@4
_PpmParkReportParkedCores@0
_PpmParkReportUnparkedCore@4
_PpmParkReportUnparkedCores@0
_PpmParkSetLpiCap@12
_PpmParkSnapNodeIdleTime@12
_PpmParkSnapNodeStatistics@0
_PpmParkSteerInterrupts@0
_PpmParkUpdateConcurrencyTracking@4
_PpmPdcNotifyMediaBufferingUpdate@4
_PpmPerfAction@16
_PpmPerfApplyCapsAndFloors@16
_PpmPerfApplyDomainState@4
_PpmPerfApplyDomainStates@0
_PpmPerfApplyLatencyHint@4
_PpmPerfApplyLatencyHints@0
_PpmPerfApplyProcessorState@8
_PpmPerfApplyProcessorStates@0
_PpmPerfCalculateMinMaxStates@4
_PpmPerfCommitPerformance@0
_PpmPerfComputePerfReductionTolerance@4
_PpmPerfControlExecuteAction@4
_PpmPerfFeedbackCounterRead@12
_PpmPerfForceDomainStates@0
_PpmPerfGetCurrentFrequency@4
_PpmPerfGetCurrentState@24
_PpmPerfInitialize@0
_PpmPerfIsLatencyBoostActive@0
_PpmPerfLatencySensitivityHintWorker@4
_PpmPerfMinimumPerfReached@0
_PpmPerfProcCapFloorSettingCallback@16
_PpmPerfQueueAction@8
_PpmPerfReApplyStates@0
_PpmPerfReadFeedback@0
_PpmPerfRecordUtility@8
_PpmPerfRegisterHvCap@4
_PpmPerfRegisterHvPerfStateCounters@4
_PpmPerfRegisterHvStates@4
_PpmPerfRegisterNativePerfStates@4
_PpmPerfResetHistory@4
_PpmPerfResetHistoryAll@0
_PpmPerfResizeHistory@4
_PpmPerfResizeHistoryAll@0
_PpmPerfSelectDomainState@4
_PpmPerfSelectDomainStates@0
_PpmPerfSelectProcessorState@4
_PpmPerfSelectProcessorStates@0
_PpmPerfSnapUtility@4
_PpmPerfUpdateDomains@4
_PpmPolicyNameToGuid@8
_PpmPostProcessMediaBuffering@0
_PpmProcessSettingsFromQueryTable@12
_PpmProfileAcDcUpdate@0
_PpmQueryPlatformStateResidency@8
_PpmQueryTime@0
_PpmReapplyIdlePolicy@0
_PpmReapplyPerfPolicy@4
_PpmRegisterPerfCap@4
_PpmRegisterPerfStates@8
_PpmRegisterProfiles@8
_PpmRegisterSpmSettings@4
_PpmRegisterVetoList@4
_PpmReleaseLock@4
_PpmRemoveIdleStates@12
_PpmResetDripsAccountingSnapshot@0
_PpmResetIdleAccounting@4
_PpmResetIdlePolicy@4
_PpmResetInterruptRate@12
_PpmResetPerfEngineForProcessor@4
_PpmResetPerfTimes@4
_PpmResetPerformanceAccumulation@4
_PpmResetPlatformIdleAccounting@4
_PpmResetProcessorIdleAccounting@12
_PpmScaleIdleStateValues@4
_PpmSetExitLatencySamplingPercentage@4
_PpmSetPlatformIdleDurationHint@8
_PpmSetProfilePolicySetting@20
_PpmSetSimulatedIdle@4
_PpmSetSimulatedLoad@4
_PpmSnapDripsAccountingSnapshot@0
_PpmSnapPerformanceAccumulation@20
_PpmStartIllegalProcessorThrottleLogging@12
_PpmStopIllegalProcessorThrottleLogging@12
_PpmTestAndLockProcessor@12
_PpmTraceExitLatency@24
_PpmTracePerfIdleRundown@12
_PpmTranslateIdleAccounting@12
_PpmTranslatePlatformIdleAccounting@8
_PpmTryAcquireLock@4
_PpmUnlockProcessors@8
_PpmUpdateDeepSleepPlatformIdleState@4
_PpmUpdateIdleContext@8
_PpmUpdateIdleDomains@4
_PpmUpdateIdleStates@4
_PpmUpdateIdleStatesInplace@12
_PpmUpdateIdleVeto@12
_PpmUpdateNoopFunction@12
_PpmUpdatePerformanceFeedback@20
_PpmUpdatePlatformIdleAccounting@12
_PpmUpdatePlatformIdleVeto@4
_PpmUpdateProcessorIdleAccounting@4
_PpmUpdateProcessorIdleVeto@4
_PpmUpdateProcessorPolicy@4
_PpmUpdateProcessorPolicyCallback@12
_PpmUpdateTimeAccumulation@16
_PpmUtilityComparer
_PpmWmiDispatch@24
_PpmWmiFireIdleAccountingEvent@12
_PpmWmiGetAllData@24
_PpmWmiIdleAccountingProcedure@16
_PpmWmiIdleAccountingWork@4
_PpmWmiInit@0
_PpmWmiRegisterInfo@20
_ProbeForRead@12
_ProbeForWrite@12
_ProducerConsumerBufferComplete@16
_ProducerConsumerCopyFromContextBuffer@16
_ProducerConsumerCopyToContextBuffer@16
_ProducerGetBuffer@16
_PromoteNode@4
_PropertyEval@32
_Ps386GetVdmIoHandler@16
_PsAcquireProcessExitSynchronization@4
_PsAllocateMonitorContextServerSilo@12
_PsAssignImpersonationToken@8
_PsAssignProcessToJobObject@8
_PsAttachSiloToCurrentThread@4
_PsBoostThreadIo@8
_PsBoostThreadIoEx@16
_PsBootPhaseComplete@0
_PsCallImageNotifyRoutines@16
_PsCaptureExceptionPort@4
_PsCaptureUserProcessParameters@8
_PsChangeQuantumTable@8
_PsChargePoolQuota@12
_PsChargeProcessNonPagedPoolQuota@8
_PsChargeProcessPagedPoolQuota@8
_PsChargeProcessPoolQuota@12
_PsChargeProcessQuota@12
_PsChargeProcessWakeCounter@16
_PsChargeSharedPoolQuota@12
_PsConvertToGuiThread@0
_PsCreateSystemThread@28
_PsCreateSystemThreadEx@36
_PsDeleteMonitorContextServerSilo@4
_PsDereferenceImpersonationToken@4
_PsDereferenceKernelStack@4
_PsDereferenceMonitorContextServerSilo@4
_PsDereferencePrimaryToken@4
_PsDetachSiloFromCurrentThread@4
_PsDisableImpersonation@8
_PsEnforceExecutionLimits@0
_PsEnterPriorityRegion@0
_PsEnumProcessThreads@12
_PsEnumProcesses@8
_PsEqualCurrentServerSilo@4
_PsEqualCurrentSilo@4
_PsEstablishWin32Callouts@4
_PsFreezeProcess@8
_PsGetAllocatedFullProcessImageName@8
_PsGetBaseTrapFrame@8
_PsGetContextThread@12
_PsGetCurrentProcess@0
_PsGetCurrentProcessId@0
_PsGetCurrentProcessSessionId@0
_PsGetCurrentProcessWin32Process@0
_PsGetCurrentServerSilo@0
_PsGetCurrentServerSiloGlobals@0
_PsGetCurrentSilo@0
_PsGetCurrentThread@0
_PsGetCurrentThreadId@0
_PsGetCurrentThreadPreviousMode@0
_PsGetCurrentThreadProcess@0
_PsGetCurrentThreadProcessId@0
_PsGetCurrentThreadStackBase@0
_PsGetCurrentThreadStackLimit@0
_PsGetCurrentThreadTeb@0
_PsGetCurrentThreadWin32Thread@0
_PsGetCurrentThreadWin32ThreadAndEnterCriticalRegion@4
_PsGetDefaultWsMaximum@0
_PsGetEffectiveContainerId@12
_PsGetJobEffectiveFreezeCount@4
_PsGetJobLock@4
_PsGetJobProperty@8
_PsGetJobSessionId@4
_PsGetJobUIRestrictionsClass@4
_PsGetMonitorContextServerSilo@12
_PsGetNextProcess@4
_PsGetNextProcessThread@8
_PsGetProcessCommonJob@8
_PsGetProcessCreateTimeQuadPart@4
_PsGetProcessDebugPort@4
_PsGetProcessDeepFreezeStats@8
_PsGetProcessExitProcessCalled@4
_PsGetProcessExitStatus@4
_PsGetProcessExitTime@0
_PsGetProcessId@4
_PsGetProcessImageFileName@4
_PsGetProcessInheritedFromUniqueProcessId@4
_PsGetProcessJob@4
_PsGetProcessPeb@4
_PsGetProcessPriorityClass@4
_PsGetProcessProtection@4
_PsGetProcessSectionBaseAddress@4
_PsGetProcessSecurityPort@4
_PsGetProcessServerSilo@4
_PsGetProcessSessionId@4
_PsGetProcessSessionIdEx@4
_PsGetProcessSignatureLevel@8
_PsGetProcessSilo@4
_PsGetProcessWin32Process@4
_PsGetProcessWin32WindowStation@4
_PsGetServerSiloDefaultCompartmentId@4
_PsGetServerSiloGlobals@4
_PsGetServerSiloServiceSessionId@4
_PsGetServerSiloState@4
_PsGetSiloObject@12
_PsGetSiloObjectByPointer@12
_PsGetSiloObjectFromJob@12
_PsGetThreadCreateTime@4
_PsGetThreadExitStatus@4
_PsGetThreadFreezeCount@4
_PsGetThreadHardErrorsAreDisabled@4
_PsGetThreadId@4
_PsGetThreadProcess@4
_PsGetThreadProcessId@4
_PsGetThreadProperty@12
_PsGetThreadSessionId@4
_PsGetThreadTeb@4
_PsGetThreadWin32Thread@4
_PsGetVersion@16
_PsImpersonateClient@20
_PsImpersonateContainerOfProcess@4
_PsImpersonateContainerOfThread@4
_PsInitSystem@8
_PsInitializeFullProcessImageName@4
_PsInitializeQuotaSystem@4
_PsInsertSiloObject@12
_PsInsertSiloObjectByPointer@12
_PsInsertSiloObjectFromJob@12
_PsInsertVirtualizedTimer@12
_PsInvokeWin32Callout@16
_PsIsCurrentThreadInServerSilo@0
_PsIsCurrentThreadPrefetching@0
_PsIsDiskCountersEnabled@0
_PsIsDpcActive@0
_PsIsHostSilo@4
_PsIsProcessBeingDebugged@4
_PsIsProcessInAppSilo@4
_PsIsProcessInSilo@8
_PsIsProtectedProcess@4
_PsIsProtectedProcessLight@4
_PsIsSiloInSilo@8
_PsIsSystemProcess@4
_PsIsSystemThread@4
_PsIsSystemWideMitigationOptionSet@12
_PsIsThreadImpersonating@4
_PsIsThreadInSilo@8
_PsIsThreadTerminating@4
_PsLeavePriorityRegion@0
_PsLocateSystemDlls@0
_PsLookupProcessByProcessId@8
_PsLookupProcessThreadByCid@12
_PsLookupThreadByThreadId@8
_PsMapSystemDlls@8
_PsOpenProcess@24
_PsOpenThread@24
_PsPicoWalkUserStack@8
_PsQueryCpuQuotaInformation@16
_PsQueryFullProcessImageName@16
_PsQueryProcessAttributesByToken@12
_PsQueryProcessCommandLine@20
_PsQueryProcessEnergyValues@8
_PsQueryProcessExceptionFlags@12
_PsQueryRuntimeProcess@8
_PsQuerySectionSignatureInformation@8
_PsQueryStatisticsProcess@8
_PsQuerySystemDllInfo@4
_PsQueryTotalCycleTimeProcess@8
_PsQuitNextProcess@4
_PsReferenceEffectiveToken@20
_PsReferenceImpersonationToken@16
_PsReferenceImpersonationTokenEx@24
_PsReferenceKernelStack@4
_PsReferenceMonitorContextServerSilo@4
_PsReferencePrimaryToken@4
_PsReferenceProcessFilePointer@8
_PsRegisterMonitorServerSilo@16
_PsRegisterPicoProvider@8
_PsReleaseProcessExitSynchronization@4
_PsReleaseProcessWakeCounter@8
_PsRemoveCreateThreadNotifyRoutine@4
_PsRemoveLoadImageNotifyRoutine@4
_PsRemoveSiloObject@8
_PsRemoveSiloObjectByPointer@8
_PsRemoveSiloObjectFromJob@8
_PsRemoveVirtualizedTimer@8
_PsReportProcessMemoryLimitViolation@0
_PsRestoreImpersonation@8
_PsResumeProcess@4
_PsResumeThread@8
_PsReturnPoolQuota@12
_PsReturnProcessNonPagedPoolQuota@8
_PsReturnProcessPageFileQuota@8
_PsReturnProcessPagedPoolQuota@8
_PsReturnProcessQuota@12
_PsReturnSharedPoolQuota@12
_PsRevertThreadToSelf@4
_PsRevertToSelf@0
_PsRevertToUserPagePriorityThread@8
_PsRootSiloInformation@12
_PsSetContextThread@12
_PsSetCpuQuotaInformation@12
_PsSetCreateProcessNotifyRoutine@8
_PsSetCreateProcessNotifyRoutineEx@8
_PsSetCreateThreadNotifyRoutine@4
_PsSetCreateThreadNotifyRoutineEx@8
_PsSetCurrentThreadPrefetching@4
_PsSetJobProperty@12
_PsSetLdtEntries@24
_PsSetLegoNotifyRoutine@4
_PsSetLoadImageNotifyRoutine@4
_PsSetMonitorContextServerSilo@20
_PsSetProcessFaultInformation@8
_PsSetProcessHandleTracingInformation@8
_PsSetProcessLdtInfo@8
_PsSetProcessPriorityByClass@8
_PsSetProcessPriorityClass@8
_PsSetProcessSecurityPort@8
_PsSetProcessTelemetryAppState@8
_PsSetProcessWin32Process@12
_PsSetProcessWindowStation@8
_PsSetSiloObjectRootDirectoryByPointer@8
_PsSetSiloObjectServerPropertyByPointer@8
_PsSetSystemPagePriorityThread@8
_PsSetThreadHardErrorsAreDisabled@8
_PsSetThreadProperty@12
_PsSetThreadWin32Thread@12
_PsShutdownSystem@0
_PsStartMonitorServerSilo@4
_PsSuspendProcess@4
_PsSuspendThread@8
_PsSwapImpersonationToken@12
_PsSwapProcessWorkingSet@8
_PsTerminateAllProcessesInSilo@8
_PsTerminateProcess@8
_PsTerminateServerSilo@8
_PsTerminateSystemThread@4
_PsThawProcess@8
_PsTransferProcessQuotaToSharedQuota@12
_PsUnregisterMonitorServerSilo@4
_PsUpdateActiveProcessAffinity@0
_PsUpdateComponentPower@16
_PsUpdateDiskCounters@32
_PsWaitForAllProcesses@0
_PsWatchWorkingSet@12
_PsWrapApcWow64Thread@8
_Psp386CreateVdmIoListHead@4
_Psp386GetVdmIoHandler@8
_Psp386InsertVdmIoHandlerBlock@8
_Psp386InstallIoHandler@16
_Psp386RemoveIoHandler@12
_PspAddProcessToJobChain@16
_PspAddProcessToSilo@8
_PspAddProcessToWorkingSetChangeList@4
_PspAdjustContextForInstrumentation@8
_PspAdjustKeepAliveCountProcess@16
_PspAllocateAndQueryNotificationChannel@12
_PspAllocateMonitorContextArrayServerSilo@8
_PspAllocateProcess@52
_PspAllocateRateControl@4
_PspAllocateThread@48
_PspApplyIFEOPerfOptions@12
_PspApplyJobLimitsToProcess@8
_PspApplyMitigationOptions@24
_PspApplyWorkingSetLimits@8
_PspApplyWorkingSetLimitsToProcess@4
_PspAssignPrimaryToken@16
_PspAssignProcessQuotaBlock@12
_PspAssignProcessToJob@12
_PspAssignProcessToJobList@16
_PspAssociateCompletionPortCallback@8
_PspAttachSession@12
_PspBoostJobIoPriorityCallback@8
_PspBuildCreateProcessContext@16
_PspCallJobHierarchyCallbacks@24
_PspCaptureAndValidateUnicodeString@8
_PspCaptureCreateInfo@12
_PspCaptureProcessParameters@12
_PspCaptureUserProcessParameters@12
_PspCatchCriticalBreak@12
_PspChangeJobMemoryUsageByProcess@16
_PspChangeProcessExecutionState@4
_PspChargeJobWakeCounter@32
_PspCheckConditionalWakeCharge@12
_PspCheckForInvalidAccessByProtection@12
_PspCheckJobAccessState@8
_PspClearProcessThreadCidRefs@12
_PspComputeQuantum@8
_PspComputeQuantumAndPriority@16
_PspComputeReportWakeFilter@16
_PspConvertJobLimitViolationToV1@8
_PspConvertJobLimitViolationToV2@8
_PspConvertJobNotificationLimitFromV1@8
_PspConvertJobNotificationLimitFromV2@8
_PspConvertJobNotificationLimitToV1@8
_PspConvertJobNotificationLimitToV2@8
_PspCopyAndFixupParameters@12
_PspCopyUnicodeString@12
_PspCreateLdt@16
_PspCreateMinimalProcess@20
_PspCreateObjectHandle@12
_PspCreatePicoProcess@8
_PspCreatePicoThread@8
_PspCreateProcess@32
_PspCreateSilo@4
_PspCreateThread@52
_PspCreateUserProcessEcp@8
_PspDecodeMitigationExecuteOptions@8
_PspDeferredWorkerRoutine@4
_PspDeleteCreateProcessContext@4
_PspDeleteKernelStack@12
_PspDeleteThreadSecurity@4
_PspDereferenceMonitorContextServerSilo@4
_PspDereferenceMonitorServerSilo@4
_PspDereferenceQuotaBlock@4
_PspDereferenceSiloObject@4
_PspDfssConfigurationChangeHandler@4
_PspEmptyPropertySet@4
_PspEnableProcessTimerVirtualization@8
_PspEnableProcessWakeCounters@8
_PspEnableTimerVirtualization@8
_PspEnableWakeCounters@8
_PspEnforceLimits@4
_PspEnforceLimitsJobPostCallback@8
_PspEnforceLimitsJobPreCallback@8
_PspEnforceLimitsProcessCallback@8
_PspEnumJobsAndProcessesInJobHierarchy@24
_PspEstablishJobHierarchy@12
_PspEvaluateAndNotifyEmptyJob@12
_PspExecuteJobFreezeThawCallback@8
_PspExitProcess@8
_PspExitThread@4
_PspExpandLimit@16
_PspExpandQuota@20
_PspFindPropertySetEntry@8
_PspFoldProcessAccountingIntoJob@12
_PspFreeMonitorContextServerSilo@4
_PspFreeRateControl@8
_PspFreezeJobTree@8
_PspFreezeProcessWorker@8
_PspGetContext@12
_PspGetContextThreadInternal@20
_PspGetEffectiveNoWakeCharge@12
_PspGetJobAssignmentDisposition@12
_PspGetJobLockHierarchyForAssignment@16
_PspGetJobLockHierarchyForDeletion@8
_PspGetJobProperty@12
_PspGetNextChildJob@8
_PspGetNextJob@4
_PspGetNextJobProcess@16
_PspGetPicoProcessContext@4
_PspGetPicoThreadContext@4
_PspGetPreviousProcessThread@8
_PspGetProcessAccountingInformation@8
_PspGetProcessInJobHierarchyCallback@8
_PspGetProperty@12
_PspGetRateControlHeaderPtr@8
_PspGetRateControlJobFlag@8
_PspGetRateControlSize@4
_PspGetServerSiloForSilo@4
_PspGetSetContextSpecialApc@20
_PspGetStandardHandleList@8
_PspGetThreadServerSilo@4
_PspHandleTableWalker@16
_PspHardenMitigationOptions@4
_PspImplicitAssignProcessToJob@12
_PspInheritMitigationOptions@16
_PspInheritQuota@8
_PspInitPhase0@4
_PspInitPhase2@4
_PspInitializeCallbacks@0
_PspInitializeJobStructures@0
_PspInitializeNetRateControl@0
_PspInitializeProcessSecurity@20
_PspInitializeProtectedProcessParameters@0
_PspInitializeQuotaBlock@12
_PspInitializeQuotaExpansionDescriptor@24
_PspInitializeServerSiloDeferred@4
_PspInitializeSiloStructures@0
_PspInitializeSystemDlls@0
_PspInitializeThunkContext@0
_PspInsertExpansionEntry@8
_PspInsertProcess@32
_PspInsertProperty@12
_PspInsertThread@44
_PspIoMiniPacketCallbackRoutine@8
_PspIoRateControlProcessCallback@8
_PspIsDescriptorValid@4
_PspIsDfssEnabled@0
_PspIsProcessInJob@8
_PspJobClose@16
_PspJobCycleTimeNotificationDpcRoutine@16
_PspJobDelete@4
_PspJobNotificationWorker@4
_PspJobTimeLimitsWork@4
_PspLimitViolationRateControlToleranceLimitField@8
_PspLocateInPEManifest@8
_PspLockJobChain@8
_PspLockJobsAndProcessExclusive@12
_PspLookupProcessQuotaBlock@16
_PspMapSystemDll@16
_PspModifyAncestorBits@12
_PspNetRateControlDispatch@4
_PspNotificationLimitRateControlToleranceField@8
_PspNotificationLimitRateControlToleranceIntervalField@8
_PspNotificationPacketCallback@8
_PspNotifyEmptyJobsInJobChain@4
_PspNotifyProcessBackgroundTransition@8
_PspNotifySeverSiloDeletion@4
_PspPointerDereferenceMonitorServerSilo@4
_PspPrepareSystemDllInitBlock@8
_PspProcessClose@16
_PspProcessDelete@4
_PspProcessOpen@24
_PspProcessRundownWorker@4
_PspProcessRundownWorkerSingle@4
_PspQueryDescriptorThread@16
_PspQueryJobHierarchyAccountingInformation@8
_PspQueryJobHierarchyInterferenceCount@8
_PspQueryJobHierarchyProcessIdList@16
_PspQueryLastCallThread@16
_PspQueryLdtInformation@16
_PspQueryPooledQuotaLimits@20
_PspQueryProcessAccountingInformationCallback@8
_PspQueryProcessIdListCallback@8
_PspQueryProcessInterferenceCountCallback@8
_PspQueryQuotaLimits@24
_PspQueryRateControlHistory@20
_PspQueryWorkingSetWatch@24
_PspQueueApcSpecialApc@20
_PspRateControlLimitFlag@4
_PspReadDfssConfigurationValues@0
_PspReadIFEOMitigationOptions@8
_PspReadIFEONodeOptions@12
_PspReadIFEOPerfOptions@8
_PspReadUserQuotaLimits@12
_PspReaper@4
_PspReferenceCidTableEntry@8
_PspReferenceJobSilo@8
_PspReferenceMonitorServerSilo@4
_PspReferenceSiloObject@4
_PspReferenceTokenForNewProcess@16
_PspReleaseReturnedQuota@8
_PspRemoveCpuRateControl@4
_PspRemoveProcessFromJobChain@16
_PspRemoveProcessFromSilo@8
_PspRemoveProperty@12
_PspRemoveQuotaBlock@4
_PspRemoveRateControl@20
_PspRequestDeferredJobNotification@8
_PspRundownProcess@4
_PspRundownSingleProcess@8
_PspSafeReferenceQuotaBlock@4
_PspSanitizeResourceLimits@8
_PspScheduleEnforcementWorker@4
_PspSelectNodeForProcess@0
_PspSendJobNotification@16
_PspSendNoWakeChargeLimitNotification@4
_PspSendProcessNotificationToJobChain@16
_PspSendReliableJobNotification@8
_PspSendWakeNotification@24
_PspServerSiloDelete@4
_PspSetAffinityLimitCallback@8
_PspSetBackgroundJobTree@8
_PspSetContextThreadInternal@20
_PspSetCpuRateControlJobPostCallback@8
_PspSetCpuRateControlJobPreCallback@8
_PspSetCreateProcessNotifyRoutine@12
_PspSetCreateThreadNotifyRoutine@8
_PspSetEffectiveJobLimits@8
_PspSetEffectiveLimit@8
_PspSetEffectiveRateControlJob@12
_PspSetFileHandleFlow@16
_PspSetJobBackgroundCountCallback@8
_PspSetJobFreezeCountCallback@8
_PspSetJobLimitsJobPostCallback@8
_PspSetJobLimitsJobPreCallback@8
_PspSetJobLimitsProcessCallback@8
_PspSetJobNotificationCountCallback@8
_PspSetJobRateControl@24
_PspSetJobTimeLimitCallback@8
_PspSetLdtInformation@12
_PspSetLdtSize@12
_PspSetNetRateControl@16
_PspSetPicoThreadDescriptorBase@8
_PspSetProcessAffinitySafe@20
_PspSetProcessBackgroundCountCallback@8
_PspSetProcessFreezeStateCallback@8
_PspSetProcessIoHandlers@12
_PspSetProcessPriorityClass@16
_PspSetProcessSchedulingGroup@8
_PspSetPropertyHelper@12
_PspSetQuotaLimits@16
_PspSetRateControlJobPreCallback@8
_PspSetRateControlProcessCallback@8
_PspSetupUserProcessAddressSpace@16
_PspShutdownServerSilos@4
_PspSiloClose@16
_PspSiloDelete@4
_PspSinglePrivCheck@16
_PspSinglePrivCheckAudit@12
_PspSortHandleList
_PspStartMonitorDeferred@4
_PspSubtractAccountingValues@8
_PspSwapSystemDll@4
_PspSystemThreadStartup@8
_PspTerminateAllProcessesInJobHierarchy@12
_PspTerminateAllThreads@16
_PspTerminateProcess@16
_PspTerminateProcessesJobCallback@8
_PspTerminateServerSiloDeferred@4
_PspTerminateThreadByPointer@12
_PspThreadDelete@4
_PspThreadOpen@24
_PspUnlinkJobProcess@8
_PspUnlockJobChain@8
_PspUnlockJobsAndProcessExclusive@12
_PspUnregisterMonitorDeferred@4
_PspUpdateCreateInfo@12
_PspUpdateJobPeakProcessMemory@8
_PspUpdateSharedReadyQueueAffinityProcessCallback@8
_PspUpdateSingleProcessAffinity@12
_PspUserApcReserveKernelRoutine@20
_PspUserApcReserveRundownRoutine@4
_PspUserThreadStartup@8
_PspValidateEnvironmentBlock@8
_PspValidateJobAffinityState@8
_PspValidateJobLimitsDuringAssignment@8
_PspValidateMitigationOptions@16
_PspValidateThread@4
_PspWaitForUsermodeExit@4
_PspWritePebAffinityInfo@8
_PspWriteTebImpersonationInfo@8
_PushPmInterrupt@16
_PushRmInterrupt@16
_READ_REGISTER_BUFFER_UCHAR@12
_READ_REGISTER_BUFFER_ULONG@12
_READ_REGISTER_BUFFER_USHORT@12
_READ_REGISTER_UCHAR@4
_READ_REGISTER_ULONG@4
_READ_REGISTER_USHORT@4
_RaiseException@16
_RamdiskStart@4
_RaspAddCacheEntry@8
_RaspAllocateMemory@8
_RaspAntiAlias@20
_RaspClearCache@4
_RaspConvertDeltas@4
_RaspCreatePointList@12
_RaspCreateSegmentList@24
_RaspDestroyCachedBitmap@4
_RaspDestroySegmentList@12
_RaspFreeMemory@8
_RaspGetCacheEntry@24
_RaspGetCompositeGlyphList@32
_RaspGetSegmentDirection@4
_RaspGetUnscaledGlyphData@20
_RaspGetXExtent@24
_RaspInitializeCompositeGlyphData@40
_RaspInitializeGlyphData@16
_RaspInterpolatePoint@12
_RaspLoadBearings@16
_RaspLoadCompositeGlyphData@20
_RaspLoadEmptyGlyph@8
_RaspLoadGlyphData@20
_RaspMapCharacterCodeToGlyphIndex@12
_RaspMapGlyphIndexToLocation@12
_RaspRasterize@36
_RaspRectangleCreate@16
_RaspRectangleDestroy@8
_RaspScale@8
_RaspScaleCoordinates@8
_RaspScanConvert@32
_RaspTestIntersection@16
_RawCheckForDeleteVolume@4
_RawCleanup@12
_RawCleanupVcb@4
_RawClose@12
_RawCompletionRoutine@12
_RawComputeFileSystemInformationChecksum@4
_RawCreate@12
_RawDeleteVcb@4
_RawDispatch@8
_RawFileSystemControl@12
_RawInitialize@8
_RawInitializeVcb@12
_RawInitiateDeleteVolume@12
_RawMountVolume@4
_RawPerformDevIoCtrl@36
_RawQueryFileSystemInformation@12
_RawQueryFsAttributeInfo@12
_RawQueryFsDeviceInfo@16
_RawQueryFsSizeInfo@16
_RawQueryFsVolumeInfo@16
_RawQueryInformation@12
_RawQueryVolumeInformation@12
_RawReadWriteDeviceControl@12
_RawScanDeletedList@0
_RawSetInformation@12
_RawShutdown@8
_RawUnload@4
_RawUserFsCtrl@12
_RawVerifyVolume@8
_RealPredecessor@4
_RealSuccessor@4
_RebalanceNode@4
_ReferenceVacbLevel@20
_RemoveListEntryPte@8
_RemoveListHeadPte@4
_ResFwBackgroundTransition@4
_ResFwConfigureDisplayStringResources@4
_ResFwFindMessage@4
_ResFwFreeContext@4
_ResFwGetContext@4
_ResFwpPageInBackground@0
_ResFwpPageOutBackground@0
_RotBarInit@0
_RotBarUpdate@0
_RtlAbsoluteToSelfRelativeSD@12
_RtlAcquirePrivilege@16
_RtlAddAccessAllowedAce@16
_RtlAddAccessAllowedAceEx@20
_RtlAddAccessAllowedObjectAce@28
_RtlAddAccessDeniedAceEx@20
_RtlAddAccessDeniedObjectAce@28
_RtlAddAce@20
_RtlAddAtomToAtomTable@12
_RtlAddAtomToAtomTableEx@16
_RtlAddAuditAccessAce@24
_RtlAddAuditAccessAceEx@28
_RtlAddAuditAccessObjectAce@36
_RtlAddMandatoryAce@24
_RtlAddProcessTrustLabelAce@24
_RtlAddRange@36
_RtlAddResourceAttributeAce@28
_RtlAddressInSectionTable@12
_RtlAllocateHeap@12
_RtlAnsiCharToUnicodeChar@4
_RtlAnsiStringToUnicodeString@12
_RtlAppendAsciizToString@8
_RtlAppendStringToString@8
_RtlAppendUnicodeStringToString@8
_RtlAppendUnicodeToString@8
_RtlAreAllAccessesGranted@8
_RtlAreAnyAccessesGranted@8
_RtlAreBitsClear@12
_RtlAreBitsSet@12
_RtlAreNamesEqual@16
_RtlAssert@16
_RtlAvlInsertNodeEx@16
_RtlAvlRemoveNode@8
_RtlBackoff@4
_RtlBeginReadTickLock@4
_RtlCapabilityCheck@12
_RtlCaptureContext@4
_RtlCaptureStackBackTrace@16
_RtlCharToInteger@12
_RtlCheckPortableOperatingSystem@4
_RtlCheckRegistryKey@8
_RtlCheckTokenCapability@12
_RtlCheckTokenMembership@12
_RtlCheckTokenMembershipEx@16
_RtlClearAllBits@4
_RtlClearBit@8
_RtlClearBits@12
_RtlCmDecodeMemIoResource@8
_RtlCmEncodeMemIoResource@24
_RtlCompareAltitudes@8
_RtlCompareMemory@12
_RtlCompareMemoryUlong@12
_RtlCompareString@12
_RtlCompareUnicodeString@12
_RtlCompareUnicodeStrings@20
_RtlCompressBuffer@32
_RtlCompressBufferLZNT1@32
_RtlCompressBufferProgress@40
_RtlCompressBufferXpressHuff@32
_RtlCompressBufferXpressHuffMax@36
_RtlCompressBufferXpressHuffStandard@36
_RtlCompressBufferXpressLz@32
_RtlCompressBufferXpressLzMax@36
_RtlCompressBufferXpressLzStandard@36
_RtlCompressChunks@28
_RtlCompressWorkSpaceSizeLZNT1@12
_RtlCompressWorkSpaceSizeXpressHuff@12
_RtlCompressWorkSpaceSizeXpressLz@12
_RtlComputeCrc32@12
_RtlComputeLfnChecksum@4
_RtlContractHashTable@4
_RtlControlStackTraceDataBase@12
_RtlConvertLuidToUlonglong@4
_RtlConvertSidToUnicodeString@12
_RtlCopyBitMap@12
_RtlCopyLuid@8
_RtlCopyLuidAndAttributesArray@12
_RtlCopyMemoryNonTemporal@12
_RtlCopyRangeList@8
_RtlCopySid@12
_RtlCopySidAndAttributesArray@28
_RtlCopyString@8
_RtlCopyUnicodeString@8
_RtlCrc32@12
_RtlCrc64@16
_RtlCreateAcl@12
_RtlCreateAtomTable@8
_RtlCreateAtomTableEx@12
_RtlCreateHashTable@12
_RtlCreateHashTableEx@16
_RtlCreateHeap@24
_RtlCreateRegistryKey@8
_RtlCreateSecurityDescriptor@8
_RtlCreateSecurityDescriptorRelative@8
_RtlCreateSystemVolumeInformationFolder@4
_RtlCreateUnicodeString@8
_RtlCreateUnicodeStringFromAsciiz@8
_RtlCreateUserProcess@40
_RtlCreateUserStack@24
_RtlCreateUserThread@40
_RtlCultureNameToLCID@8
_RtlCustomCPToUnicodeN@24
_RtlCutoverTimeToSystemTime@16
_RtlDecompressBuffer@24
_RtlDecompressBufferEx2@32
_RtlDecompressBufferEx@28
_RtlDecompressBufferLZNT1@28
_RtlDecompressBufferProgress@40
_RtlDecompressBufferXpressHuff@28
_RtlDecompressBufferXpressHuffProgress@36
_RtlDecompressBufferXpressLz@28
_RtlDecompressBufferXpressLzProgress@32
_RtlDecompressChunks@28
_RtlDecompressFragment@32
_RtlDecompressFragmentEx@36
_RtlDecompressFragmentLZNT1@32
_RtlDecompressFragmentNS@32
_RtlDelete@4
_RtlDeleteAce@8
_RtlDeleteAtomFromAtomTable@8
_RtlDeleteElementGenericTable@8
_RtlDeleteElementGenericTableAvl@8
_RtlDeleteElementGenericTableAvlEx@8
_RtlDeleteHashTable@4
_RtlDeleteNoSplay@8
_RtlDeleteOwnersRanges@8
_RtlDeleteRange@24
_RtlDeleteRegistryValue@12
_RtlDereferenceAtomTable@4
_RtlDeriveCapabilitySidsFromName@12
_RtlDescribeChunk@20
_RtlDescribeChunkLZNT1@16
_RtlDescribeChunkNS@16
_RtlDestroyAtomTable@4
_RtlDestroyHeap@4
_RtlDestroyLowBoxAtoms@8
_RtlDispatchException@8
_RtlDissectName@16
_RtlDoesNameContainWildCards@4
_RtlDowncaseUnicodeChar@4
_RtlDowncaseUnicodeString@12
_RtlDuplicateUnicodeString@12
_RtlEmptyAtomTable@8
_RtlEndEnumerationHashTable@8
_RtlEndStrongEnumerationHashTable@8
_RtlEndWeakEnumerationHashTable@8
_RtlEnlargedUnsignedDivide@16
_RtlEnoughStackSpaceForStackCapture@0
_RtlEnumerateBoundaryDescriptorEntries@12
_RtlEnumerateEntryHashTable@8
_RtlEnumerateGenericTable@8
_RtlEnumerateGenericTableAvl@8
_RtlEnumerateGenericTableLikeADirectory@28
_RtlEnumerateGenericTableWithoutSplaying@8
_RtlEnumerateGenericTableWithoutSplayingAvl@8
_RtlEqualLuid@8
_RtlEqualPrefixSid@8
_RtlEqualSid@8
_RtlEqualString@12
_RtlEqualUnicodeString@12
_RtlEqualWnfChangeStamps@8
_RtlEthernetAddressToStringA@8
_RtlEthernetAddressToStringW@8
_RtlEthernetStringToAddressA@12
_RtlEthernetStringToAddressW@12
_RtlExpandHashTable@4
_RtlExtendedIntegerMultiply@12
_RtlExtendedLargeIntegerDivide@16
_RtlExtendedMagicDivide@20
_RtlExtractBitMap@16
_RtlFileMapFree@4
_RtlFileMapInitializeByNtPath@8
_RtlFileMapMapView@8
_RtlFillMemory@12
_RtlFillMemoryUlong@12
_RtlFillMemoryUlonglong@16
_RtlFindAceBySid@12
_RtlFindAceByType@12
_RtlFindClearBits@12
_RtlFindClearBitsAndSet@12
_RtlFindClearRuns@16
_RtlFindClosestEncodableLength@12
_RtlFindExportedRoutineByName@8
_RtlFindFirstRunClear@8
_RtlFindLastBackwardRunClear@12
_RtlFindLeastSignificantBit@8
_RtlFindLongestRunClear@8
_RtlFindLongestRunClearCapped@12
_RtlFindMessage@20
_RtlFindMessageInTable@12
_RtlFindMostSignificantBit@8
_RtlFindNextAlignedForwardRunClear@16
_RtlFindNextForwardRunClear@12
_RtlFindNextForwardRunClearCapped@16
_RtlFindRange@56
_RtlFindSetBits@12
_RtlFindSetBitsAndClear@12
_RtlFindUnicodePrefix@12
_RtlFirstFreeAce@8
_RtlFnToFxFrame@8
_RtlFormatCurrentUserKeyPath@4
_RtlFormatMessage@36
_RtlFormatMessageEx@40
_RtlFreeAnsiString@4
_RtlFreeHeap@12
_RtlFreeOemString@4
_RtlFreeRangeList@4
_RtlFreeUnicodeString@4
_RtlFxToFnFrame@8
_RtlGUIDFromString@8
_RtlGenerate8dot3Name@16
_RtlGenerateClass5Guid@16
_RtlGenerateQpcToIncrementConstants@8
_RtlGetAce@12
_RtlGetAppContainerNamedObjectPath@16
_RtlGetAppContainerParent@8
_RtlGetAppContainerSidType@8
_RtlGetCallersAddress@8
_RtlGetCompressionWorkSpaceSize@12
_RtlGetControlSecurityDescriptor@12
_RtlGetDaclSecurityDescriptor@16
_RtlGetDefaultCodePage@8
_RtlGetElementGenericTable@8
_RtlGetElementGenericTableAvl@8
_RtlGetEnabledExtendedFeatures@8
_RtlGetExtendedContextLength@8
_RtlGetFirstRange@12
_RtlGetGroupSecurityDescriptor@12
_RtlGetIntegerAtom@8
_RtlGetInterruptTimePrecise@4
_RtlGetLastRange@12
_RtlGetNextEntryHashTable@8
_RtlGetNextRange@12
_RtlGetNtGlobalFlags@0
_RtlGetNtProductType@4
_RtlGetOwnerSecurityDescriptor@12
_RtlGetProductInfo@20
_RtlGetSaclSecurityDescriptor@16
_RtlGetSetBootStatusData@24
_RtlGetSystemTimePrecise@0
_RtlGetThreadLangIdByIndex@16
_RtlGetVersion@4
_RtlGuardIsValidStackPointer@4
_RtlHashUnicodeString@16
_RtlIdentifierAuthoritySid@4
_RtlIdnToAscii@20
_RtlIdnToNameprepUnicode@20
_RtlIdnToUnicode@20
_RtlImageDirectoryEntryToData@16
_RtlImageNtHeader@4
_RtlImageNtHeaderEx@20
_RtlImpersonateSelfEx@12
_RtlInitAnsiString@8
_RtlInitAnsiStringEx@8
_RtlInitCodePageTable@8
_RtlInitEnumerationHashTable@8
_RtlInitNlsTables@16
_RtlInitString@8
_RtlInitStringEx@8
_RtlInitStrongEnumerationHashTable@8
_RtlInitUnicodeString@8
_RtlInitUnicodeStringEx@8
_RtlInitWeakEnumerationHashTable@8
_RtlInitializeBitMap@12
_RtlInitializeCompression@0
_RtlInitializeExceptionLog@4
_RtlInitializeExtendedContext@12
_RtlInitializeGenericTable@20
_RtlInitializeGenericTableAvl@20
_RtlInitializeRangeList@4
_RtlInitializeRangeListPackage@0
_RtlInitializeSid@12
_RtlInitializeSidEx
_RtlInitializeUnicodePrefix@4
_RtlInsertElementGenericTable@16
_RtlInsertElementGenericTableAvl@16
_RtlInsertElementGenericTableFull@24
_RtlInsertElementGenericTableFullAvl@24
_RtlInsertEntryHashTable@16
_RtlInsertUnicodePrefix@12
_RtlInt64ToUnicodeString@16
_RtlIntegerToChar@16
_RtlIntegerToUnicode@16
_RtlIntegerToUnicodeString@12
_RtlInterlockedClearBitRun@12
_RtlInterlockedSetBitRun@12
_RtlInterlockedSetClearRun@12
_RtlInvertRangeList@8
_RtlInvertRangeListEx@20
_RtlIoDecodeMemIoResource@16
_RtlIoEncodeMemIoResource@40
_RtlIpv4AddressToStringA@8
_RtlIpv4AddressToStringExA@16
_RtlIpv4AddressToStringExW@16
_RtlIpv4AddressToStringW@8
_RtlIpv4StringToAddressA@16
_RtlIpv4StringToAddressExA@16
_RtlIpv4StringToAddressExW@16
_RtlIpv4StringToAddressW@16
_RtlIpv6AddressToStringA@8
_RtlIpv6AddressToStringExA@20
_RtlIpv6AddressToStringExW@20
_RtlIpv6AddressToStringW@8
_RtlIpv6StringToAddressA@12
_RtlIpv6StringToAddressExA@16
_RtlIpv6StringToAddressExW@16
_RtlIpv6StringToAddressW@12
_RtlIsCapabilitySid@4
_RtlIsGenericTableEmpty@4
_RtlIsGenericTableEmptyAvl@4
_RtlIsMultiSessionSku@0
_RtlIsNameInExpression@16
_RtlIsNameLegalDOS8Dot3@12
_RtlIsNormalizedString@16
_RtlIsNtDdiVersionAvailable@4
_RtlIsPackageSid@4
_RtlIsParentOfChildAppContainer@8
_RtlIsRangeAvailable@40
_RtlIsSandboxedToken@8
_RtlIsServicePackVersionInstalled@4
_RtlIsUntrustedObject@12
_RtlIsValidHandler@12
_RtlIsValidOemCharacter@4
_RtlIsValidProcessTrustLabelSid@4
_RtlLCIDToCultureName@8
_RtlLargeIntegerAdd@16
_RtlLargeIntegerArithmeticShift@12
_RtlLargeIntegerDivide@20
_RtlLargeIntegerNegate@8
_RtlLargeIntegerShiftLeft@12
_RtlLargeIntegerShiftRight@12
_RtlLargeIntegerSubtract@16
_RtlLargeIntegerToChar@16
_RtlLargeIntegerToUnicode@16
_RtlLengthRequiredSid@4
_RtlLengthSecurityDescriptor@4
_RtlLengthSid@4
_RtlLengthSidAsUnicodeString@8
_RtlLoadString@32
_RtlLocalTimeToSystemTime@8
_RtlLocateLegacyContext@8
_RtlLockBootStatusData@4
_RtlLogStackBackTraceEx@4
_RtlLookupAtomInAtomTable@12
_RtlLookupElementGenericTable@8
_RtlLookupElementGenericTableAvl@8
_RtlLookupElementGenericTableFull@16
_RtlLookupElementGenericTableFullAvl@16
_RtlLookupEntryHashTable@12
_RtlLookupFirstMatchingElementGenericTableAvl@12
_RtlMakeSelfRelativeSD@12
_RtlMapGenericMask@8
_RtlMapSecurityErrorToNtStatus@4
_RtlMarkHiberPhase@0
_RtlMergeBitMaps@8
_RtlMergeRangeLists@16
_RtlMoveMemory@12
_RtlMultiByteToUnicodeN@20
_RtlMultiByteToUnicodeSize@12
_RtlNextUnicodePrefix@8
_RtlNormalizeString@20
_RtlNtStatusToDosError@4
_RtlNtStatusToDosErrorNoTeb@4
_RtlNumberGenericTableElements@4
_RtlNumberGenericTableElementsAvl@4
_RtlNumberOfClearBits@4
_RtlNumberOfClearBitsInRange@12
_RtlNumberOfSetBits@4
_RtlNumberOfSetBitsInRange@12
_RtlNumberOfSetBitsUlongPtr@4
_RtlOemStringToCountedUnicodeString@12
_RtlOemStringToUnicodeString@12
_RtlOemToUnicodeN@20
_RtlOpenCurrentUser@8
_RtlOsDeploymentState@4
_RtlOwnerAcesPresent@4
_RtlPcToFileHeader@8
_RtlPcToFileName@8
_RtlPcToFilePath@8
_RtlPinAtomInAtomTable@8
_RtlPrefixString@12
_RtlPrefixUnicodeString@12
_RtlQueryAtomInAtomTable@24
_RtlQueryAtomsInAtomTable@16
_RtlQueryDynamicTimeZoneInformation@4
_RtlQueryElevationFlags@4
_RtlQueryImageFileExecutionOptions@28
_RtlQueryImageFileKeyOption@24
_RtlQueryInformationAcl@16
_RtlQueryModuleInformation@12
_RtlQueryPackageClaims@28
_RtlQueryPackageIdentity@24
_RtlQueryPackageIdentityEx@28
_RtlQueryRegistryValues@20
_RtlQueryRegistryValuesEx@20
_RtlQueryTimeZoneInformation@4
_RtlQueryValidationRunlevel@4
_RtlRaiseException@4
_RtlRaiseStatus@4
_RtlRandom@4
_RtlRandomEx@4
_RtlRbInsertNodeEx@16
_RtlRbRemoveNode@8
_RtlRbReplaceNode@12
_RtlRealPredecessor@4
_RtlRealSuccessor@4
_RtlReleasePrivilege@4
_RtlRemoveEntryHashTable@12
_RtlRemoveUnicodePrefix@8
_RtlReplaceSidInSd@16
_RtlReserveChunk@20
_RtlReserveChunkLZNT1@16
_RtlReserveChunkNS@16
_RtlResetRtlTranslations@4
_RtlRunOnceBeginInitialize@12
_RtlRunOnceComplete@12
_RtlRunOnceExecuteOnce@16
_RtlRunOnceInitialize@4
_RtlSIZETAdd@12
_RtlScrubMemory@8
_RtlSecondsSince1970ToTime@8
_RtlSecondsSince1980ToTime@8
_RtlSectionTableFromVirtualAddress@12
_RtlSelfRelativeToAbsoluteSD2@8
_RtlSelfRelativeToAbsoluteSD@44
_RtlSetActiveTimeBias@4
_RtlSetAllBits@4
_RtlSetBit@8
_RtlSetBits@12
_RtlSetControlSecurityDescriptor@12
_RtlSetDaclSecurityDescriptor@16
_RtlSetDynamicTimeZoneInformation@4
_RtlSetGroupSecurityDescriptor@12
_RtlSetOwnerSecurityDescriptor@12
_RtlSetPortableOperatingSystem@4
_RtlSetSaclSecurityDescriptor@16
_RtlSetTimeZoneInformation@4
_RtlSidDominates@12
_RtlSidDominatesForTrust@12
_RtlSidHashInitialize@12
_RtlSidHashLookup@8
_RtlSizeHeap@12
_RtlSizeTAdd@12
_RtlSparseBitmapCtxAllocateArray@4
_RtlSparseBitmapCtxAllocateRange@8
_RtlSparseBitmapCtxInitializeRange@8
_RtlSparseBitmapCtxPrepareBits@20
_RtlSparseBitmapCtxStart@8
_RtlSplay@4
_RtlStackTraceHashFunction@8
_RtlStdInitializeStackDatabase@16
_RtlStdLogStackTrace@8
_RtlStdReleaseStackTrace@8
_RtlStringCbCatExA@24
_RtlStringCbCatW@12
_RtlStringCbCopyA@12
_RtlStringCbCopyExA@24
_RtlStringCbCopyExW@24
_RtlStringCbCopyNA@16
_RtlStringCbCopyNExW@28
_RtlStringCbCopyNW@16
_RtlStringCbCopyUnicodeString@12
_RtlStringCbCopyW@12
_RtlStringCbLengthA@12
_RtlStringCbLengthW@12
_RtlStringCbPrintfA
_RtlStringCbPrintfExA
_RtlStringCbPrintfExW
_RtlStringCbPrintfW
_RtlStringCbVPrintfA@16
_RtlStringCchCatExW@24
_RtlStringCchCatNW@16
_RtlStringCchCatW@12
_RtlStringCchCopyA@12
_RtlStringCchCopyExW@24
_RtlStringCchCopyNExW@28
_RtlStringCchCopyNW@16
_RtlStringCchCopyW@12
_RtlStringCchLengthW@12
_RtlStringCchPrintfA
_RtlStringCchPrintfExW
_RtlStringCchPrintfW
_RtlStringFromGUID@8
_RtlStringFromGUIDEx@12
_RtlStronglyEnumerateEntryHashTable@8
_RtlSubAuthorityCountSid@4
_RtlSubAuthoritySid@8
_RtlSubtreePredecessor@4
_RtlSubtreeSuccessor@4
_RtlSuffixUnicodeString@12
_RtlSystemTimeToLocalTime@8
_RtlTestBit@8
_RtlTestProtectedAccess@8
_RtlTimeFieldsToTime@8
_RtlTimeToElapsedTimeFields@8
_RtlTimeToSecondsSince1970@8
_RtlTimeToSecondsSince1980@8
_RtlTimeToTimeFields@8
_RtlTraceDatabaseAdd@16
_RtlTraceDatabaseCreate@20
_RtlTraceDatabaseDestroy@4
_RtlTraceDatabaseEnumerate@12
_RtlTraceDatabaseFind@16
_RtlTraceDatabaseLock@4
_RtlTraceDatabaseUnlock@4
_RtlTraceDatabaseValidate@4
_RtlTryEndReadTickLock@12
_RtlUIntAdd@12
_RtlUIntPtrAdd@12
_RtlULongAdd@12
_RtlULongLongAdd@20
_RtlULongLongMult@20
_RtlULongLongSub@20
_RtlULongLongToUInt@12
_RtlULongLongToULong@12
_RtlULongPtrAdd@12
_RtlULongPtrSub@12
_RtlULongSub@12
_RtlUShortAdd@12
_RtlUTF8ToUnicodeN@20
_RtlUnicodeStringCbCopyStringN@12
_RtlUnicodeStringCopyStringEx@16
_RtlUnicodeStringPrintf
_RtlUnicodeStringPrintfEx
_RtlUnicodeStringToAnsiString@12
_RtlUnicodeStringToCountedOemString@12
_RtlUnicodeStringToInt64@16
_RtlUnicodeStringToInteger@12
_RtlUnicodeStringToOemString@12
_RtlUnicodeToCustomCPN@24
_RtlUnicodeToMultiByteN@20
_RtlUnicodeToMultiByteSize@12
_RtlUnicodeToOemN@20
_RtlUnicodeToUTF8N@20
_RtlUnlockBootStatusData@4
_RtlUnwind@16
_RtlUpcaseUnicodeChar@4
_RtlUpcaseUnicodeString@12
_RtlUpcaseUnicodeStringToAnsiString@12
_RtlUpcaseUnicodeStringToCountedOemString@12
_RtlUpcaseUnicodeStringToOemString@12
_RtlUpcaseUnicodeToCustomCPN@24
_RtlUpcaseUnicodeToMultiByteN@20
_RtlUpcaseUnicodeToOemN@20
_RtlUpperChar@4
_RtlUpperString@8
_RtlValidAcl@4
_RtlValidProcessProtection@4
_RtlValidRelativeSecurityDescriptor@12
_RtlValidSecurityDescriptor@4
_RtlValidSid@4
_RtlValidateUnicodeString@8
_RtlVerifyVersionInfo@16
_RtlWalkFrameChain@12
_RtlWeaklyEnumerateEntryHashTable@8
_RtlWriteAcquireTickLock@4
_RtlWriteRegistryValue@24
_RtlWriteReleaseTickLock@4
_RtlWriteTryAcquireTickLock@4
_RtlXRestore@12
_RtlXSave@12
_RtlZeroHeap@8
_RtlZeroMemory@8
_RtlpAddIntersectingRanges@16
_RtlpAddKnownAce@24
_RtlpAddKnownObjectAce@32
_RtlpAddRange@12
_RtlpAddToMergedRange@12
_RtlpAllocDeallocQueryBuffer@16
_RtlpAllocateAtom@8
_RtlpAllocateAtomTableEntry@12
_RtlpAllocateHeapInternal@12
_RtlpAllocateHeapRaiseException@4
_RtlpAllocateSecondLevelDir@0
_RtlpAllocateSecondLevelDirUsingFreeList@0
_RtlpAllowsLowBoxAccess@4
_RtlpAnalyzeHeapFailure@12
_RtlpApplyAclToObject@8
_RtlpAtomMapAtomToHandleEntry@8
_RtlpCallQueryRegistryRoutine@28
_RtlpCaptureContext@4
_RtlpCheckDynamicTimeZoneInformation@8
_RtlpCoalesceFreeBlocks@16
_RtlpCombineAcls@28
_RtlpCompareAces@16
_RtlpCompareKnownAces@16
_RtlpCompareKnownObjectAces@16
_RtlpComputeCrcInternal@20
_RtlpComputeFraction@12
_RtlpComputeMergedAcl2@44
_RtlpComputeMergedAcl@40
_RtlpConvertAbsoluteToRelativeSecurityAttribute@12
_RtlpConvertToMergedRange@4
_RtlpCopyAces@56
_RtlpCopyBitMapTailToHead@16
_RtlpCopyEffectiveAce@64
_RtlpCopyExtendedContext@24
_RtlpCopyLegacyContextAmd64@16
_RtlpCopyLegacyContextArm64@16
_RtlpCopyLegacyContextArm@16
_RtlpCopyLegacyContextX86@16
_RtlpCopyRangeListEntry@4
_RtlpCopyXStateChunk@20
_RtlpCountLeadingZeroes32@4
_RtlpCreateHashTable@16
_RtlpCreateHeapEncoding@4
_RtlpCreateRangeListEntry@28
_RtlpCreateServerAcl@20
_RtlpCreateUCREntry@24
_RtlpCreateUserProcess@44
_RtlpCreateUserThreadEx@44
_RtlpDeCommitFreeBlock@16
_RtlpDeleteData@12
_RtlpDeleteFromMergedRange@8
_RtlpDeleteRangeListEntry@4
_RtlpDereferenceAtom@12
_RtlpDidUnicodeToOemWork@8
_RtlpExecuteHandlerForException@20
_RtlpExecuteHandlerForUnwind@20
_RtlpExtendHeap@8
_RtlpFillMemoryRandomDown@20
_RtlpFillMemoryRandomInvertedDown@20
_RtlpFillMemoryRandomInvertedUp@20
_RtlpFillMemoryRandomUp@20
_RtlpFillMemoryWithInverseStride@20
_RtlpFillMemoryWithStride@20
_RtlpFilterSacl@16
_RtlpFindAndCommitPages@8
_RtlpFindEntry@8
_RtlpFindRegTziForCurrentYear@12
_RtlpFreeAllAtom@8
_RtlpFreeAtom@4
_RtlpFreeHandleForAtom@8
_RtlpFreeHeapInternal@12
_RtlpFreeRangeListEntry@4
_RtlpGenerateInheritAcl@60
_RtlpGenerateInheritedAce@56
_RtlpGenericBasicInverseCoupling@8
_RtlpGenericBasicMATSPlus@8
_RtlpGenericBasicStride6@8
_RtlpGenericInverseCouplingWorker@16
_RtlpGenericMATSPlusWorker@16
_RtlpGenericRandomPatternWorker@8
_RtlpGenericStrideWorker@20
_RtlpGetBucketIndex@8
_RtlpGetChainHead@8
_RtlpGetDynamicTimeZoneInfoHandle@8
_RtlpGetLegacyContextLength@12
_RtlpGetNameFromLangInfoNode@12
_RtlpGetNormalization@8
_RtlpGetRegistrationHead@0
_RtlpGetRegistryHandle@16
_RtlpGetStackLimits@8
_RtlpGetWindowsPolicy@16
_RtlpGuidPresentInGuidList@12
_RtlpHashStringToAtom@28
_RtlpHeapAddListEntry@24
_RtlpHeapExceptionFilter@8
_RtlpHeapFindListLookupEntry@20
_RtlpHeapGenerateRandomValue64@0
_RtlpHeapHandleError@4
_RtlpHeapListCompare@16
_RtlpHeapLogRangeCreate@12
_RtlpHeapLogRangeDestroy@4
_RtlpHeapLogRangeRelease@12
_RtlpHeapLogRangeReserve@12
_RtlpHeapRemoveListEntry@24
_RtlpHpAllocWithExceptionProtection@12
_RtlpHpFreeWithExceptionProtection@12
_RtlpImageDirectoryEntryToData32@24
_RtlpImageDirectoryEntryToData64@24
_RtlpImageDirectoryEntryToDataEx@20
_RtlpInheritAcl2@72
_RtlpInitNlsFileName@20
_RtlpInitNlsSectionName@20
_RtlpInitializeHandleTableForAtomTable@4
_RtlpInitializeHeapSegment@32
_RtlpInitializeLockAtomTable@4
_RtlpInitializeStackTraceDatabase@12
_RtlpInsertFreeBlock@12
_RtlpInsertStringAtom@8
_RtlpIsALicensedLIPLanguage@8
_RtlpIsALicensedRegularLanguage@8
_RtlpIsDuplicateAce@8
_RtlpIsNameInExpressionPrivate@16
_RtlpIsRangeAvailable@44
_RtlpIsValidExceptionChain@16
_RtlpLangNameInMultiSzString@8
_RtlpLoadInstallLanguageFallback@12
_RtlpLoadLanguageConfigList@12
_RtlpLoadPolicyLanguageSpec@16
_RtlpLocateRelatedBlocks@8
_RtlpLockAtomTable@4
_RtlpLogExceptionDispatch@8
_RtlpLogExceptionHandler@16
_RtlpLogHeapAllocateEvent@16
_RtlpLogHeapCommit@16
_RtlpLogHeapContractEvent@28
_RtlpLogHeapCreateEvent@20
_RtlpLogHeapDecommit@16
_RtlpLogHeapDestroyEvent@8
_RtlpLogHeapExtendEvent@20
_RtlpLogHeapFailure@24
_RtlpLogHeapFreeEvent@12
_RtlpLookupLowBox@12
_RtlpLookupOrCreateLowBox@12
_RtlpMakeXpressCallback@12
_RtlpMuiRegAddAlternateCodePage@8
_RtlpMuiRegAddLanguageByName@24
_RtlpMuiRegConfigListAddLanguage@12
_RtlpMuiRegConfigMatchesInstalled@28
_RtlpMuiRegConfigNodePopulate@16
_RtlpMuiRegCreateKernelRegistryInfo@28
_RtlpMuiRegCreateLanguageConfigList@4
_RtlpMuiRegCreateLanguages@4
_RtlpMuiRegCreateRegistryInfo@0
_RtlpMuiRegCreateStringPool@8
_RtlpMuiRegFreeRegistryInfo@8
_RtlpMuiRegGetInstalledLangInfoIndex@16
_RtlpMuiRegGetInstalledLanguageIndex@16
_RtlpMuiRegGetInstalledLanguageIndexByLangId@16
_RtlpMuiRegGetInstalledLanguageIndexByName@16
_RtlpMuiRegGetLangInfoIndex@8
_RtlpMuiRegGetLanguageSpec@20
_RtlpMuiRegGetOrAddLangInfo@12
_RtlpMuiRegGetOrAddString@16
_RtlpMuiRegGetOrAddStringToPool@16
_RtlpMuiRegGetStringIndexInPool@8
_RtlpMuiRegGrowLanguageConfigList@8
_RtlpMuiRegGrowLanguages@8
_RtlpMuiRegGrowStringPool@16
_RtlpMuiRegLangInfoMatchesSpec@16
_RtlpMuiRegLoadLicInformation@4
_RtlpMuiRegLoadRegistryInfo@8
_RtlpMuiRegResizeLanguageConfigList@8
_RtlpMuiRegResizeLanguages@8
_RtlpMuiRegResizeStringPool@16
_RtlpMuiRegValidateConfigNode@8
_RtlpNameprepAsciiWorker@24
_RtlpNewSecurityObject@40
_RtlpNormalizeStringWorker@20
_RtlpOpenImageFileOptionsKey@12
_RtlpOpenThreadToken@8
_RtlpOwnerAcesPresent@8
_RtlpPopulateContext@12
_RtlpPopulateLanguageConfigList@12
_RtlpPopulateListIndex@8
_RtlpProcessIFEOKeyFilter@12
_RtlpQueryLowBoxId@0
_RtlpQueryPackageIdentityAttributes@16
_RtlpQueryRegistryDirect@16
_RtlpQueryRegistryValues@24
_RtlpQuerySecurityDescriptor@36
_RtlpQueryTimeZoneInformationWorker@8
_RtlpQueryTimeZoneKeyNameRoutine@24
_RtlpReadExtendedContext@24
_RtlpReadExtendedContextLayout@20
_RtlpReferenceAtom@8
_RtlpRegTziFormatToTzi@8
_RtlpRunOnceWaitForInit@8
_RtlpSampleLFGRng@4
_RtlpSanitizeContextFlags@8
_RtlpSecondLevelDirFreeUsingFreeList@4
_RtlpSeedGlfsr@0
_RtlpSetSecurityObject@32
_RtlpSetTimeZoneInformationWorker@8
_RtlpSizeHeapInternal@12
_RtlpSparseBitmapCtxAppendNextRangeToRun@24
_RtlpSparseBitmapCtxCheckRangeArray@8
_RtlpSparseBitmapCtxCountRangeBits@20
_RtlpSparseBitmapCtxFindNextBitInternal@16
_RtlpSparseBitmapCtxFindRunsFromNullRange@32
_RtlpSparseBitmapCtxFindRunsFromRange@36
_RtlpSparseBitmapCtxFindRunsInternal@32
_RtlpSparseBitmapCtxLockExclusive@8
_RtlpSparseBitmapCtxLockShared@8
_RtlpSparseBitmapCtxPrepareRanges@24
_RtlpSparseBitmapCtxUpdateBitRanges@36
_RtlpSparseBitmapCtxUpdateBits@32
_RtlpSpreadBits@20
_RtlpStdExtendLowerWatermark@8
_RtlpStdExtendUpperWatermark@8
_RtlpStdGetRecordedStackTraceIndex@8
_RtlpStdGetSpaceForTrace@8
_RtlpStdLogCapturedStackTrace@12
_RtlpSysVolCheckOwnerAndSecurity@8
_RtlpSysVolCreateSecurityDescriptor@8
_RtlpSysVolTakeOwnership@4
_RtlpSystemTimeToTimeFields@8
_RtlpTerminateCurrentProcess@4
_RtlpTestAndFillMemoryDown@16
_RtlpTestAndFillMemoryRandomUp@20
_RtlpTestAndFillMemoryUp@16
_RtlpTestMemory@12
_RtlpTestMemoryRandomDown@20
_RtlpTestMemoryRandomUp@20
_RtlpTestMemoryWithStride@20
_RtlpTraceDatabaseAcquireLock@4
_RtlpTraceDatabaseAllocate@12
_RtlpTraceDatabaseInitializeLock@4
_RtlpTraceDatabaseInternalAdd@16
_RtlpTraceDatabaseInternalFind@16
_RtlpTraceDatabaseReleaseLock@4
_RtlpTreeDoubleRotateNodes@16
_RtlpUnlinkHandler@4
_RtlpUnlockAtomTable@4
_RtlpUpcaseUnicodeStringPrivate@12
_RtlpUpdateDynamicTimeZones@4
_RtlpValidAttribute@4
_RtlpValidAttributeAce@4
_RtlpValidAttributeInfo@4
_RtlpValidCompoundAce@4
_RtlpValidObjectAce@4
_RtlpValidRelativeAttribute@8
_RtlpValidTrustSubjectContext@16
_RtlpValidateAsciiStd3AndLength@16
_RtlpValidateContextFlags@8
_RtlpValidateKeyTrust@8
_RtlpValidateSDOffsetAndSize@16
_RtlpValidateSidBuffer@8
_RtlpVerCompare@20
_RtlpVerGetConditionMask@12
_RtlpWriteExtendedContext@20
_RtlpxLookupFunctionTable@8
_RtlxAnsiStringToUnicodeSize@4
_RtlxOemStringToUnicodeSize@4
_RtlxUnicodeStringToAnsiSize@4
_RtlxUnicodeStringToOemSize@4
_RunLengthEncode@8
_SUBTRACT_MAP_REGISTERS@8
_SdbCloseDatabaseRead@4
_SdbFindFirstNamedTag@20
_SdbFindFirstStringIndexedTag@20
_SdbFindFirstTag@12
_SdbFindNextStringIndexedTag@8
_SdbFindNextTag@12
_SdbGetAppPatchDirEx@16
_SdbGetBinaryTagData@8
_SdbGetDatabaseID@8
_SdbGetDatabaseMatch@20
_SdbGetDatabaseMatchEx@28
_SdbGetEntryFlags@8
_SdbGetFirstChild@8
_SdbGetIndex@16
_SdbGetNextChild@12
_SdbGetStringTagPtr@8
_SdbGetTagDataSize@8
_SdbGetTagFromTagID@8
_SdbInitDatabaseInMemory@8
_SdbMakeIndexKeyFromStringEx@8
_SdbOpenDatabaseEx@16
_SdbQueryDataEx@28
_SdbQueryDataExTagID@28
_SdbReadBinaryTag@16
_SdbReadDWORDTag@12
_SdbReadEntryInformation@12
_SdbReadGUIDTag@24
_SdbReadQWORDTag@16
_SdbReadWORDTag@12
_SdbReleaseDatabase@4
_SdbResolveDatabase@20
_SdbTagIDToTagRef@16
_SdbTagRefToTagID@16
_SdbpBinarySearchFirst@20
_SdbpBinarySearchUnique@20
_SdbpCheckAllAttributes@20
_SdbpCheckAttribute@20
_SdbpCheckExe@32
_SdbpCheckForMatch@24
_SdbpCheckFromVersion@16
_SdbpCheckKObject@28
_SdbpCheckMatchingDevice@28
_SdbpCheckMatchingFiles@28
_SdbpCheckMatchingRegistry@28
_SdbpCheckMatchingRegistryEntry@40
_SdbpCheckMatchingText@28
_SdbpCheckMatchingTextEntry@36
_SdbpCheckPackageAttributes@28
_SdbpCheckRuntimePlatform@28
_SdbpCheckRuntimePlatformV2@28
_SdbpCheckUptoVersion@16
_SdbpCheckVersion@16
_SdbpCloseLocalDatabaseEx@12
_SdbpCreateSearchDBContext@20
_SdbpCreateSearchPathPartsFromPath@8
_SdbpFindFirstIndexedWildCardTag@20
_SdbpFindLocalDatabaseByPDB@16
_SdbpFindMatcher@16
_SdbpFindMatchingName@12
_SdbpFindNextIndexedWildCardTag@8
_SdbpFindNextNamedTag@20
_SdbpFreePackageAttributes@4
_SdbpGetDeviceDWORD@12
_SdbpGetExeEntryFlags@12
_SdbpGetFirstIndexedRecord@20
_SdbpGetIndex@12
_SdbpGetMappedStringFromTable@8
_SdbpGetMappedTagData@8
_SdbpGetMatchingTextAttributes@28
_SdbpGetNextIndexedRecord@12
_SdbpGetNextTagId@8
_SdbpGetProcessHistory@12
_SdbpGetRegistryMatchingAttributes@40
_SdbpGetStandardDatabasePath@20
_SdbpGetTagHeadSize@8
_SdbpInitializeMatchers@4
_SdbpInitializeSearchDBContext@4
_SdbpKeyToAnsiString@12
_SdbpMatchDeviceDWORD@24
_SdbpMatchDeviceString@16
_SdbpMatchList@28
_SdbpMatchOne@28
_SdbpMatchOsVersion@8
_SdbpOpenDatabaseInMemory@8
_SdbpOpenLocalDatabaseEx@20
_SdbpQueryAppCompatFlagsByExeID@16
_SdbpReadMappedData@16
_SdbpReadStringRef@8
_SdbpReadTagData@16
_SdbpReleaseSearchDBContext@4
_SdbpRemoveSDBLookupEntry@8
_SdbpResolveMatchingFile@24
_SdbpScanIndexes@4
_SdbpSearchDB@24
_SddlFilterSacl@16
_SddlpAlloc@12
_SddlpFreeUuidString@4
_SddlpReAlloc@20
_SddlpUuidToString@8
_SeAccessCheck@40
_SeAccessCheckByType@48
_SeAccessCheckEx@24
_SeAccessCheckFromState@40
_SeAccessCheckFromStateEx@40
_SeAccessCheckWithHint@44
_SeAdjustAccessStateForTrustLabel@12
_SeAdjustObjectAppContainerSecurity@20
_SeAdtRegistryValueChangedAuditAlarm@32
_SeAppendPrivileges@8
_SeAssignPrimaryToken@8
_SeAssignSecurity@28
_SeAssignSecurityEx2@40
_SeAssignSecurityEx@36
_SeAssignWorldSecurityDescriptor@12
_SeAuditBootConfiguration@4
_SeAuditHandleCreation@12
_SeAuditHandleDuplication@16
_SeAuditHardLinkCreation@12
_SeAuditHardLinkCreationWithTransaction@16
_SeAuditHeaderRequired@4
_SeAuditPlugAndPlay@16
_SeAuditProcessCreation@8
_SeAuditProcessExit@8
_SeAuditSystemTimeChange@16
_SeAuditTransactionStateChange@12
_SeAuditingAnyFileEventsWithContext@8
_SeAuditingAnyFileEventsWithContextEx@12
_SeAuditingFileEvents@8
_SeAuditingFileEventsWithContext@12
_SeAuditingFileEventsWithContextEx@16
_SeAuditingFileOrGlobalEvents@12
_SeAuditingHardLinkEvents@8
_SeAuditingHardLinkEventsWithContext@12
_SeCaptureAcl@32
_SeCaptureAtomTableCallout@0
_SeCaptureLuidAndAttributesArray@36
_SeCaptureObjectAttributeSecurityDescriptorPresent@12
_SeCaptureObjectTypeList@16
_SeCaptureSecurityDescriptor@20
_SeCaptureSecurityQos@16
_SeCaptureSid@28
_SeCaptureSidAndAttributesArray@36
_SeCaptureSubjectContext@4
_SeCaptureSubjectContextEx@12
_SeCaptureUnicodeStringStructures@16
_SeCheckAuditPrivilege@8
_SeCheckPrivilegedObject@20
_SeClearLearningModeObjectInformation@0
_SeCloseObjectAuditAlarm@12
_SeCloseObjectAuditAlarmForNonObObject@16
_SeCodeIntegrityInitializePolicy@4
_SeCodeIntegrityQueryInformation@12
_SeCompareSigningLevels@8
_SeCompareSigningLevelsForAuditableProcess@16
_SeComputeAutoInheritByObjectType@12
_SeComputeAutoInheritByObjectTypeEx@20
_SeComputeCreatorDeniedRights@16
_SeComputeQuotaInformationSize@8
_SeConvertSecurityDescriptorToStringSecurityDescriptor@20
_SeCopyClientToken@24
_SeCreateAccessState@16
_SeCreateAccessStateEx@24
_SeCreateClientSecurity@16
_SeCreateClientSecurityEx@16
_SeCreateClientSecurityFromSubjectContext@16
_SeCreateClientSecurityFromSubjectContextEx@16
_SeDeassignPrimaryToken@4
_SeDeassignSecurity@4
_SeDefaultObjectMethod@36
_SeDeleteAccessState@4
_SeDeleteObjectAuditAlarm@8
_SeDeleteObjectAuditAlarmWithTransaction@12
_SeEtwEnableCallback@36
_SeExamineGlobalSacl@28
_SeExamineSacl@28
_SeExchangePrimaryToken@12
_SeFastTraverseCheck@16
_SeFilterToken@24
_SeFreeCapturedObjectTypeList@4
_SeFreePrivileges@4
_SeGetCachedSigningLevel@24
_SeGetImageRequiredSigningLevel@20
_SeGetLinkedToken@12
_SeGetLogonSessionToken@12
_SeGetStrongImageReference@8
_SeGetTokenControlInformation@8
_SeGetTokenDeviceMap@8
_SeImpersonateClient@8
_SeImpersonateClientEx@8
_SeInitServerSilo@4
_SeInitSystem@0
_SeIsAppContainerOrIdentifyLevelContext@8
_SeIsParentOfChildAppContainer@12
_SeIsSecureBootDebugPolicyPresent@0
_SeIsSystemContext@8
_SeIsTokenAssignableToProcess@8
_SeLocateProcessImageName@8
_SeLockSubjectContext@4
_SeLogAccessFailure@28
_SeMakeAnonymousLogonToken@0
_SeMakeAnonymousLogonTokenNoEveryone@0
_SeMakeSystemToken@0
_SeMarkLogonSessionForTerminationNotification@4
_SeMarkLogonSessionForTerminationNotificationEx@8
_SeMaximumAuditMask@16
_SeMaximumAuditMaskFromGlobalSacl@16
_SeObjectCreateSaclAccessBits@4
_SeObjectReferenceAuditAlarm@32
_SeOpenObjectAuditAlarm@36
_SeOpenObjectAuditAlarmForNonObObject@44
_SeOpenObjectAuditAlarmWithTransaction@40
_SeOpenObjectForDeleteAuditAlarm@36
_SeOpenObjectForDeleteAuditAlarmWithTransaction@40
_SeOperationAuditAlarm@28
_SePrivilegeCheck@12
_SePrivilegeObjectAuditAlarm@24
_SePrivilegePolicyCheck@24
_SePrivilegedServiceAuditAlarm@16
_SeQueryAuthenticationIdToken@8
_SeQueryHSTIResults@12
_SeQueryInformationToken@12
_SeQueryMandatoryPolicyToken@8
_SeQuerySecureBootPolicyValue@24
_SeQuerySecurityAccessMask@8
_SeQuerySecurityAttributesToken@24
_SeQuerySecurityDescriptorInfo@16
_SeQueryServerSiloToken@8
_SeQuerySessionIdToken@8
_SeQuerySessionIdTokenEx@12
_SeQuerySigningPolicy@28
_SeQuerySigningPolicyWorker@28
_SeQueryTokenTrustLink@4
_SeQueryTokenTrustSid@4
_SeQueryTrustedPlatformModuleInformation@12
_SeQueryUserSidToken@16
_SeRegisterCodeIntegritySigningInformation@28
_SeRegisterElamCertResources@16
_SeRegisterImageVerificationCallback@24
_SeRegisterLogonSessionTerminatedRoutine@4
_SeRegisterLogonSessionTerminatedRoutineEx@4
_SeRegisterObjectTypeMandatoryPolicy@8
_SeReleaseAcl@12
_SeReleaseImageValidationContext@4
_SeReleaseLuidAndAttributesArray@12
_SeReleaseSecurityDescriptor@12
_SeReleaseSid@12
_SeReleaseSidAndAttributesArray@12
_SeReleaseSubjectContext@4
_SeReleaseUnicodeStringStructures@8
_SeReportSecurityEvent@16
_SeReportSecurityEventWithSubCategory@20
_SeRmInitPhase1@0
_SeRmReferenceFindCapName@12
_SeSecureBootQueryInformation@16
_SeSecureBootRegisterPolicy@8
_SeSecurityAttributePresent@8
_SeSecurityDescriptorChangedAuditAlarm@52
_SeSetAccessStateGenericMapping@8
_SeSetAuditParameter@16
_SeSetImageBaseAddress@8
_SeSetLearningModeObjectInformation@4
_SeSetMandatoryPolicyToken@8
_SeSetPrivateNameSpaceToken@8
_SeSetSecurityAccessMask@8
_SeSetSecurityAttributesToken@16
_SeSetSecurityAttributesTokenEx@28
_SeSetSecurityDescriptorInfo@24
_SeSetSecurityDescriptorInfoEx@28
_SeSetSessionIdToken@8
_SeSetTokenTrustLink@8
_SeSetVirtualizationToken@8
_SeShouldCheckForAccessRightsFromParent@12
_SeShutdownServerSilo@8
_SeSinglePrivilegeCheck@12
_SeSrpAccessCheck@24
_SeSubProcessToken@24
_SeSystemIntegrityRegisterPolicy@8
_SeTokenCanImpersonate@16
_SeTokenDefaultDaclChangedAuditAlarm@20
_SeTokenFromAccessInformation@16
_SeTokenImpersonationLevel@4
_SeTokenIsAdmin@4
_SeTokenIsElevated@8
_SeTokenIsRestricted@4
_SeTokenIsWriteRestricted@4
_SeTokenType@4
_SeUnlockSubjectContext@4
_SeUnregisterImageVerificationCallback@4
_SeUnregisterLogonSessionTerminatedRoutine@4
_SeUnregisterLogonSessionTerminatedRoutineEx@4
_SeValidSecurityDescriptor@8
_SeValidateDynamicCodePages@20
_SeValidateFileAsImageType@12
_SeValidateImageData@28
_SeValidateImageHeader@36
_SeValidateSecurityQos@4
_SepAccessCheck@76
_SepAccessCheckAndAuditAlarm@68
_SepAccessCheckEx@84
_SepAddLuidToIndexEntry@8
_SepAdjustGroups@40
_SepAdjustPrivileges@36
_SepAdtAuditObjectAccessWithContext@28
_SepAdtAuditPrivilegeUseWithContext@20
_SepAdtAuditThisEventByCategoryWithContext@12
_SepAdtAuditThisEventWithContext@16
_SepAdtAuditablePrivilege@8
_SepAdtCheckPrivilegeForSensitivity@12
_SepAdtClassifyObjectIntoSubCategory@16
_SepAdtCloseObjectAuditAlarm@20
_SepAdtCopyToLsaSharedMemory@16
_SepAdtDeleteObjectAuditAlarm@24
_SepAdtDetermineInsertQueue@4
_SepAdtGenerateDiscardAudit@4
_SepAdtIncorporatePerUserPolicy@20
_SepAdtInitLsaDeadEventForNonPagedList@4
_SepAdtInitializeAuditingOptions@0
_SepAdtInitializeBounds@0
_SepAdtInitializeCrashOnFail@0
_SepAdtInitializePrivilegeAuditing@0
_SepAdtLogAuditFailureEvent@8
_SepAdtLogAuditRecord@4
_SepAdtMarshallAuditRecord@16
_SepAdtObjectReferenceAuditAlarm@16
_SepAdtOpenEtwReadyEvent@4
_SepAdtOpenObjectAuditAlarm@76
_SepAdtOpenObjectForDeleteAuditAlarm@52
_SepAdtOpenRegAndSetupNotification@16
_SepAdtPrivilegeObjectAuditAlarm@40
_SepAdtPrivilegedServiceAuditAlarm@28
_SepAdtRegNotificationCallback@4
_SepAdtSecurityDescriptorChangedAuditAlarm@36
_SepAdtStagingEvent@48
_SepAdtUserRightAdjusted@24
_SepAppContainerAceProtectionApplies@4
_SepAppendAceToTokenDefaultDacl@8
_SepAppendAceToTokenObjectAcl@12
_SepAppendAdminAceToTokenAcl@4
_SepAppendDefaultDacl@8
_SepAppendPrimaryGroup@8
_SepAssemblePrivileges@20
_SepAuditAssignPrimaryToken@8
_SepAuditFailed@4
_SepAuditFailedRaisedIrql@4
_SepAuditTypeList@24
_SepAuditingEnabledForSubcategory@12
_SepAuditingForSubCategory@8
_SepBlockAccessForLogonSession@4
_SepBuildCapPolicyTable@8
_SepBuildCapeSecurityDescriptor@12
_SepBuildDaclWithAllApplicationPackageSid@12
_SepBuildDefaultCap@4
_SepBuildDefaultCape@4
_SepBuildObjectSecurityDescriptor@16
_SepCaptureAuditPolicy@28
_SepCaptureFqbnArray@16
_SepCaptureHandles@12
_SepCaptureInt64Array@16
_SepCaptureOctetStringArray@16
_SepCaptureTokenSecurityAttributesAndOperationsInformation@12
_SepCaptureTokenSecurityAttributesInformation@16
_SepCaptureTokenSecurityOperations@16
_SepCaptureUnicodeStringArray@16
_SepCheckAcl@8
_SepCheckAndCopySelfRelativeSD@16
_SepCheckCapabilities@20
_SepCheckCreateLowBox@4
_SepCheckForAllAppPackagesAceRemoval@16
_SepCleanSingletonEntry@4
_SepCleanupLUIDDeviceMapDirectory@8
_SepCommonAccessCheckEx@28
_SepCompareClaimAttributes@8
_SepCompareSidAndAttributeArrays@16
_SepCompareSidValuesBlocks@8
_SepComputeSidSignature@4
_SepConcatenatePrivileges@12
_SepConstrainByMandatory@24
_SepConstrainByTrust@28
_SepConvertToOwnTokenClaims@4
_SepConvertTokenPrivileges@8
_SepConvertTokenPrivilegesToLuidAndAttributes@8
_SepCopyClientTokenAndSetSilo@16
_SepCopyObjectTypeList@12
_SepCopyTokenAccessInformation@60
_SepCopyTokenIntegrity@8
_SepCreateAccessStateFromSubjectContext@20
_SepCreateClaimAttributes@20
_SepCreateClientSecurityEx@44
_SepCreateImpersonationTokenDacl@12
_SepCreateLogonSessionTrack@4
_SepCreateSidValuesBlock@24
_SepCreateToken@76
_SepCreateTokenEx@96
_SepDeReferenceLogonSession@8
_SepDeReferenceSharedSidEntries@8
_SepDeleteAccessState@4
_SepDeleteClaimAttributes@4
_SepDeleteLogonSessionClaims@4
_SepDeleteLogonSessionSidValues@4
_SepDeleteLogonSessionTrack@8
_SepDeleteSessionLowboxEntries@0
_SepDeleteTokenClaims@4
_SepDeleteTokenUserAndGroups@4
_SepDeleteUnreferencedLogonSessionsInSilo@4
_SepDereferenceLowBoxHandlesEntry@8
_SepDereferenceLowBoxNumberEntry@8
_SepDereferenceLowBoxObjects@8
_SepDereferenceLuidToIndexEntry@4
_SepDereferenceSidValuesBlock@12
_SepDetermineGlobalTableCheckNeededForQuery@12
_SepDuplicateClaimAttributes@8
_SepDuplicateSid@8
_SepDuplicateToken@32
_SepDuplicateTokenClaims@8
_SepDuplicateTokenUserAndGroups@8
_SepEnableUMCIBySIPolicy@0
_SepEqualAsciiWideStringCaseInSensitive@8
_SepExamineGlobalSaclEx@52
_SepExamineSaclEx@52
_SepExpandDynamic@8
_SepExpandSingletonArrays@0
_SepFilterPrivilegeAudits@8
_SepFilterToken@44
_SepFindMatchingLowBoxHandlesEntry@12
_SepFindMatchingLowBoxNumberEntries@20
_SepFindMatchingLowBoxNumberEntry@12
_SepFindMatchingLuidEntry@12
_SepFindSharedSidEntry@4
_SepFlattenAcl@16
_SepFreeCapturedTokenSecurityAttributesInformation@4
_SepFreeDefaultDacl@4
_SepFreePrimaryGroup@4
_SepFreeResourceInfo@4
_SepFreeTokenCapabilities@4
_SepGetAnonymousToken@8
_SepGetCurrentLogLevel@0
_SepGetDefaultsSubjectContext@32
_SepGetLearningModeObjectInformation@4
_SepGetLogonSessionAccountInfo@16
_SepGetLowBoxHandlesEntry@12
_SepGetLowBoxNumberEntry@12
_SepGetProcUniqueLuidAndIndexFromAttributeInfo@12
_SepGetProcUniqueLuidAndIndexFromToken@12
_SepGetProcessTrustLabelAce@4
_SepGetScopedPolicySid@4
_SepGetSidManagementActionName@8
_SepGetSidValuesDump@8
_SepGetSingletonEntryFromIndexNumber@4
_SepGetTokenAccessInformationBufferSize@52
_SepGetTokenSessionMapEntry@12
_SepHasAllAppPackagesPresent@16
_SepIdAssignableAsGroup@8
_SepIdAssignableAsOwner@8
_SepImageVerificationCallbackPreProcess@20
_SepImageVerificationCallbackWorker@4
_SepInformFileSystemsOfDeletedLogon@8
_SepInformLsaOfDeletedLogon@12
_SepInitProcessAuditSd@0
_SepInitQuerySigningPolicyExt@12
_SepInitSingletonEntry@12
_SepInitSystemDacls@0
_SepInitializationPhase0@0
_SepInitializationPhase1@0
_SepInitializeAuthorizationCallbacks@0
_SepInitializeCodeIntegrity@0
_SepInitializeDebugOptions@0
_SepInitializeLowBoxNumberTable@4
_SepInitializeSessionLowboxStructures@0
_SepInitializeSharedSidMap@0
_SepInitializeSingletonAttributesStructures@0
_SepInitializeWorkList@0
_SepInsertOrReferenceSharedSidEntries@12
_SepInternalFillNoAttribs@12
_SepInternalQuerySecurityAttributesTokenEx@28
_SepInternalSetSecurityAttributesToken@20
_SepIsAclEqual@8
_SepIsChildTokenByPointer@8
_SepIsImageInMinTcbList@32
_SepIsImpersonationAllowedDueToCapability@8
_SepIsLockedDown@4
_SepIsMinTCB@24
_SepIsNgenImage@4
_SepIsOptionPresent@8
_SepIsParentOfChildAppContainer@12
_SepIsRemovableStorageDevice@4
_SepIsSiblingTokenByPointer@8
_SepIsSidEqual@8
_SepIsUmciDisabled@0
_SepLengthSidAndAttributesArray@12
_SepLinkLogonSessions@12
_SepLoadNgenLocations@0
_SepLocateTokenIntegrity@4
_SepLocateTokenTrustLevel@4
_SepLogTokenSidManagement@20
_SepMakeTokenEffectiveOnly@4
_SepMandatoryIntegrityCheck@24
_SepMandatorySubProcessToken@16
_SepMandatoryToDiscretionary@8
_SepMaximumAccessCheck@52
_SepMaximumAccessCheckEx@56
_SepMergeObjectTypeListAccesses@12
_SepModifyTokenPolicyCounter@8
_SepNormalAccessCheck@52
_SepNormalAccessCheckEx@56
_SepNotifyFileSystems@4
_SepParseElamCertResources@8
_SepPotentialGlobalTableAttribute@4
_SepPrivilegeCheck@20
_SepProbeAndCaptureString_U@8
_SepQueryNameString@8
_SepQueryTypeString@8
_SepQueueWorkItem@12
_SepReadAndInsertCaps@12
_SepReadAndPopulateCapes@16
_SepReadSingleCap@20
_SepReconcileTrustSidWithProcessProtection@16
_SepRefDerefLuidToIndexEntryIfNecessary@8
_SepReferenceLogonSession@8
_SepReferenceLogonSessionSilo@12
_SepReferenceLowBoxObjects@12
_SepReferenceLuidToIndexEntry@4
_SepReferenceTokenByHandle@24
_SepRegOpenKey@12
_SepRegQueryDwordValue@12
_SepRegQueryValue@20
_SepReleaseAuditPolicy@12
_SepReleaseTokenSecurityAttributesAndOperationsInformation@8
_SepRemoveAceFromTokenDefaultDacl@8
_SepRemoveDisabledGroupsAndPrivileges@24
_SepRmAddLogonSessionInfoWrkr@8
_SepRmCallLsa@4
_SepRmCapPoolExpand@8
_SepRmCapUpdateWrkr@8
_SepRmCleanupRmLsaState@4
_SepRmCommandServerThread@4
_SepRmCreateLogonSessionWrkr@8
_SepRmDbInitialization@0
_SepRmDeleteLogonSessionWrkr@8
_SepRmDereferenceCapTable@4
_SepRmDestroyCapTable@4
_SepRmDispatchDataToLsa@4
_SepRmFetchGlobalSacl@12
_SepRmGlobalSaclFind@16
_SepRmGlobalSaclSetWrkr@8
_SepRmInteractiveLogoffLogonSessionCompletedWrkr@8
_SepRmInteractiveLogoffLogonSessionWrkr@8
_SepRmLsaConnectRequest@4
_SepRmProcessCreationCommandLineAuditSettingsWrkr@8
_SepRmReferenceCapTable@0
_SepRmReferenceFindCap@8
_SepRmServerSiloCreateNotify@4
_SepRmServerSiloTerminateNotify@8
_SepRmSetAuditEventWrkr@8
_SepRmVerifyLsaProtectionLevel@4
_SepSDContainsAttributeACE@4
_SepScheduleImageVerificationCallbacks@8
_SepSecureBootBuildRules@0
_SepSecureBootCheckForUpdates@0
_SepSecureBootCorrectBcd@0
_SepSecureBootFilterBootOptionDelete@4
_SepSecureBootFindMatchingRegistryRule@12
_SepSecureBootGetPolicyDefaultValue@16
_SepSecureBootGetPolicyValueByRef@16
_SepSecureBootGetQWordPolicyValue@8
_SepSecureBootHasPermission@0
_SepSecureBootSetRegistryKey@4
_SepSecureBootUpdateBcdDataForRule@8
_SepSecureBootValidateBcdDataAgainstBcdRule@12
_SepSecurityDescriptorStrictLength@4
_SepSetAuditInfoForObjectType@44
_SepSetLogonSessionToken@4
_SepSetProcessUniqueAttribute@4
_SepSetServerSiloToken@8
_SepSetSingletonEntry@12
_SepSetSqmObjectName@12
_SepSetSystemPaths@0
_SepSetTokenCapabilities@16
_SepSetTokenClaims@20
_SepSetTokenLowboxHandles@16
_SepSetTokenLowboxNumber@8
_SepSetTokenPackage@8
_SepSetTokenTrust@8
_SepSetTokenUserAndGroups@20
_SepSetTrustLevelForProcessToken@12
_SepSidFromProcessProtection@4
_SepSidInSidAndAttributes@16
_SepSidInToken@24
_SepSidInTokenSidHash@24
_SepSqmInformation@4
_SepStopReferencingLogonSession@4
_SepTokenDeleteMethod@4
_SepTokenFromAccessInformation@8
_SepTokenInitialization@0
_SepTokenIsOwner@12
_SepTrustLevelCheck@28
_SepTrustToDiscretionary@8
_SepUpdateLogonSessionTrack@4
_SepUpdateSiloInClientSecurity@8
_SepValidLabelSubjectContext@12
_SepValidOwnerSubjectContext@12
_SepValidTrustSubjectContext@12
_SepValidateAndCopyGlobalEntry@8
_SepValidateCAPID@4
_SepVariableInitialization@0
_SetFailureLocation@20
_SetVacb@20
_SiDisambiguateSystemDevice@8
_SiGetBiosSystemDisk@4
_SiGetBiosSystemPartition@4
_SiGetDefaultSystemDisk@8
_SiGetDefaultSystemPartition@8
_SiGetDeviceNumberInformation@12
_SiGetDiskPartitionInformation@8
_SiGetDriveLayoutInformation@8
_SiGetEfiSystemDevice@12
_SiGetEspFromFirmware@8
_SiGetFirmwareBootDeviceName@8
_SiGetFirmwareBootDeviceNameFromRegistry@4
_SiGetFirmwareType@0
_SiGetRegistryValue@24
_SiGetSystemDeviceName@16
_SiGetSystemDisk@8
_SiGetSystemPartition@8
_SiIsValidDiskDevice@8
_SiIsWinPEBoot@0
_SiIsWinPeHardDiskZeroUfdBoot@0
_SiIssueSynchronousIoctl@24
_SiOpenArcNameObject@8
_SiOpenRegistryKey@16
_SiQuerySystemPartitionInformation@12
_SiTranslateSymbolicLink@8
_SiValidateSystemPartition@16
_SimplifyFilter@16
_SkIsSecureKernel@0
_SkippingWhichBP@8
_SmAcquireReleaseCharges@12
_SmAcquireReleaseResAvailForRead@12
_SmAlloc@8
_SmArrayGrow@16
_SmCalcIoWorkItemSize@12
_SmCrAuthDecrypt@32
_SmCrAuthEncrypt@32
_SmCrEncCleanup@4
_SmCrEncInitialize@4
_SmCrEncStart@16
_SmCrGenRandom@8
_SmCreateEvent@8
_SmDecompressBuffer@24
_SmEtwEnableCallback@36
_SmEtwLogRegionOp@28
_SmEtwLogStoreCorruption@24
_SmEtwLogStoreOp@32
_SmEtwLogStoreStateChange@16
_SmFirstTimeInit@4
_SmFpAllocate@20
_SmFpCleanup@4
_SmFpFree@16
_SmFpInitialize@4
_SmFpPreAllocate@12
_SmFree@4
_SmGetRegistrationInfo@8
_SmGlobalsInitialize@4
_SmInitSystem@4
_SmIoRequestComplete@16
_SmIssueIo@24
_SmKmAllocateMdlForLock@4
_SmKmEtwAppendObjectName@8
_SmKmEtwAppendProductName@8
_SmKmEtwLogGlobalStats@8
_SmKmEtwLogStoreChange@12
_SmKmEtwLogStoreRundown@8
_SmKmEtwLogStoreStats@12
_SmKmFileInfoCleanup@4
_SmKmFileInfoDuplicate@8
_SmKmFileInfoGetPath@12
_SmKmFileInfoInit@4
_SmKmFreeMdlForLock@4
_SmKmGenericCompletion@12
_SmKmGetCacheStatsBucketIndex@8
_SmKmGetStoreList@8
_SmKmInitialize@8
_SmKmIsVolumeIoPossible@8
_SmKmIssueIo@20
_SmKmIssueVolumeIo@20
_SmKmKeyGenGenerate@16
_SmKmKeyGenKeyDelete@8
_SmKmKeyGenKeyFind@8
_SmKmKeyGenLoadKey@12
_SmKmKeyGenNewKey@12
_SmKmKeyGenStart@8
_SmKmRegParamsLoad@4
_SmKmSendDeviceControl@28
_SmKmSendUsageNotification@12
_SmKmSqmAddToStream@20
_SmKmStoreAdd@16
_SmKmStoreCreatePrepare@16
_SmKmStoreDelete@16
_SmKmStoreDeleteWhenEmpty@12
_SmKmStoreDeleteWhenEmptyWorker@4
_SmKmStoreFileCreate@44
_SmKmStoreFileCreateForIoType@20
_SmKmStoreFileDelete@4
_SmKmStoreFileGetExtents@40
_SmKmStoreFileMakeSecurityDescriptor@8
_SmKmStoreFileOpenVolume@12
_SmKmStoreFileWriteHeader@16
_SmKmStoreHelperCheckWaitCommand@8
_SmKmStoreHelperCleanup@4
_SmKmStoreHelperCommandCleanup@12
_SmKmStoreHelperCommandProcess@12
_SmKmStoreHelperInitialize@4
_SmKmStoreHelperSendCommand@16
_SmKmStoreHelperStart@4
_SmKmStoreHelperWaitForCommand@16
_SmKmStoreHelperWorker@4
_SmKmStoreTerminateWorker@4
_SmKmUnlockMdl@12
_SmKmVirtualLockContextIncreaseWsMin@12
_SmKmVirtualLockCtxLockMemory@12
_SmKmVirtualLockCtxMemoryUnlocked@8
_SmKmVolumeQueryUniqueId@16
_SmMapPage@8
_SmPageEvict@8
_SmPageRead@16
_SmPerformStoreSwapOperation@8
_SmProcessConfigRequest@12
_SmProcessCreateNotification@8
_SmProcessCreateRequest@16
_SmProcessDeleteRequest@16
_SmProcessEmptyRequest@16
_SmProcessGlobalCacheStatsRequest@16
_SmProcessListRequest@20
_SmProcessListRequestExtended@8
_SmProcessQueryStoreStats@12
_SmProcessRegistrationRequest@16
_SmProcessResizeRequest@16
_SmProcessStatsRequest@20
_SmProcessStoreMemoryPriorityRequest@12
_SmQueryRegistry@4
_SmQueryStoreCommitUsage@8
_SmQueryStoreInformation@20
_SmRegistrationCtxInitialize@4
_SmRegistrationCtxStart@4
_SmRegistrationInfoFill@12
_SmRereferenceProcessObject@16
_SmSanitizeString@8
_SmSetStoreInformation@16
_SmSetThreadPagePriority@8
_SmSetThreadSystemPagePriority@12
_SmStoreCompressionStart@0
_SmStoreCompressionStop@4
_SmStoreCreate@12
_SmStoreDelete@8
_SmStoreExistsForProcess@4
_SmStorePhysicalRequestIssue@24
_SmStoreResize@20
_SmStoreSetProcessVaRanges@8
_SmSwapStore@4
_SmUniqueIdParseProductName@12
_SmUpdateMemoryCondition@4
_SmUpdateStoreContext@12
_SmWaitForSyncIo@4
_SmWdDPC@16
_SmWdInitialize@8
_SmWdProcessStore@4
_SmWdStartMonitoring@4
_SmWdStopMonitoring@4
_SmWdWorkItemMarkBusy@8
_SmWdWorkItemRegister@16
_SmWdWorkItemUpdate@16
_SmWdWritesApcRoutine@20
_SmWdWritesApcRundown@4
_SmcCacheAdd@12
_SmcCacheCleanup@8
_SmcCacheCreatePrepare@4
_SmcCacheDelete@8
_SmcCacheInitialize@4
_SmcCacheManagerInitialize@4
_SmcCacheManagerStart@8
_SmcCacheReference@8
_SmcCacheRemove@8
_SmcCacheStart@12
_SmcGetCacheList@8
_SmcGetCacheStats@8
_SmcProcessCreateRequest@16
_SmcProcessDeleteRequest@16
_SmcProcessListRequest@20
_SmcProcessResizeRequest@16
_SmcProcessStatsRequest@20
_SmcProcessStoreCreateRequest@16
_SmcProcessStoreDeleteRequest@16
_SmcStoreCreate@20
_SmcStoreDelete@16
_SmcStoreEntryFind@12
_SmcStorePlacementGet@12
_SmcStoreResize@8
_SmcStoreSlotAbort@12
_SmcStoreSlotCommit@16
_SmcStoreSlotReserve@12
_SmcVolumePnpNotification@8
_SmpCacheStatsCopy@12
_SmpDirtyStoreCreate@16
_SmpFpAllocateResource@8
_SmpFpReleaseResource@12
_SmpFpWaitForResource@12
_SmpKeyedStoreCreate@12
_SmpKeyedStoreDeleteInitiate@12
_SmpKeyedStoreEntryGet@16
_SmpKeyedStoreReference@16
_SmpKeyedStoreSetVaRanges@16
_SmpPageWrite@28
_SmpProcessQueryStoreStats@8
_SmpSystemStoreCreate@0
_SmpUtilsGetControlDevice@12
_StEtaCheckForRefresh@16
_StEtaCleanup@4
_StEtaInitialize@4
_StEtaIoComplete@16
_StEtaIoStart@16
_StEtaIoTimeout@20
_StEtaStart@12
_StEtaStartRefresh@12
_StIoCountsMovePeriod@12
_StLcBucketLocate@12
_StLcBucketsCombine@16
_StLcBucketsCopy@16
_StLcInitialize@12
_StRtlIoStorInfoSetNvCachePriority@8
_StartFirstUserProcess@0
_StringCbCatW@12
_StringCbCopyNW@16
_StringCbLengthW@12
_StringCchPrintfExW
_StringCchPrintfW
_StringListContains@16
_StringListElementSubstringMatch@20
_SubstringMatch@16
_SwapContext@0
_SwapSplayLinks@8
_SymNumFor@4
_SyspartDirectGetSystemDisk@12
_SyspartDirectGetSystemPartition@12
_SyspartGetSystemPartition@12
_Template_hzr0@24
_Template_hzr0qqhzr4@40
_Template_j@20
_Template_jq@24
_Template_jzt@28
_Template_p@20
_Template_pqzzzzzzz@52
_Template_pz@24
_Template_q@20
_Template_qz@24
_Template_qzq@28
_Template_xxxqq@48
_Template_xxxqqqq@56
_Template_z@20
_Template_zjqq@32
_Template_zq@24
_Template_zzjzxtq@48
_Template_zzjzzzqq@48
_Template_zzjzzztzqzztq@68
_Template_zzt@28
_TraceDataRecordCallInfo@12
_TraceLoggingProviderEnabled@16
_TraceLoggingRegisterEx@12
_TraitsCompare@8
_TriageGetBugcheckData@24
_TriageGetDriverCount@8
_TriageGetLoaderEntry@8
_TriageGetMmInformation@4
_TriagepGetPageSize@4
_TriagepVerifyDump@4
_TryLockShutdownShared@0
_TxtpAddCacheEntry@16
_TxtpClearCache@4
_TxtpDestroyCacheEntry@4
_TxtpGetCacheEntry@12
_TxtpJustifyRectangle@12
_ULongAddStringSize@12
_ULongLongToULong@12
_UNLOCK_ADDRESS_SPACE@8
_UNLOCK_ADDRESS_SPACE_SHARED@8
_UNLOCK_ADDRESS_SPACE_SHARED_UNORDERED@8
_UNLOCK_ADDRESS_SPACE_UNORDERED@8
_UNLOCK_HIVE_LOAD@0
_UNLOCK_PAGE_TABLE_COMMITMENT@8
_UNLOCK_TRANSACTION_LIST@0
_UnlockRMLog@4
_UnlockShutdown@0
_VERIFY_BUFFER_LOCKED@4
_VF_ASSERT_IRQL@4
_VF_ASSERT_MAX_IRQL@4
_VF_FIND_BUFFER@8
_VF_FIND_DEVICE_INFORMATION_AND_REMOVE@4
_VF_FIND_INACTIVE_ADAPTER_AND_REMOVE@4
_VF_MARK_FOR_DEFERRED_REMOVE@4
_VF_UNMARK_SCATTER_GATHER_LIST@8
_ValidFilter@8
_ValidateRegistrLangType@4
_ValidateStd3Range@4
_VdmCallStringIoHandler@32
_VdmCheckPMCliTimeStamp@0
_VdmClearPMCliTimeStamp@0
_VdmConvertToLinearAddress@8
_VdmDispatchBop@4
_VdmDispatchException@28
_VdmDispatchIRQ13@4
_VdmDispatchInterrupts@8
_VdmDispatchIoToHandler@24
_VdmDispatchOpcodeV86_try@4
_VdmDispatchOpcode_try@4
_VdmDispatchPageFault@12
_VdmDispatchStringIoToHandler@28
_VdmDispatchUnalignedIoToHandler@24
_VdmEndExecution@8
_VdmFetchBop1@4
_VdmFetchBop4@4
_VdmFetchULONG@4
_VdmPrinterStatus@12
_VdmPrinterWriteData@12
_VdmRundownDpcs@4
_VdmSetPMCliTimeStamp@4
_VdmSwapContexts@12
_VdmTibPass1@12
_VdmTraceEvent@16
_VdmpDelayIntApcRoutine@20
_VdmpDelayIntDpcRoutine@16
_VdmpDelayInterrupt@4
_VdmpDispatchableIntPending@4
_VdmpEnterIcaLock@8
_VdmpExceptionHandler@4
_VdmpFlushPrinterWriteData@4
_VdmpGetVdmTib@4
_VdmpIcaAccept@8
_VdmpIcaScan@8
_VdmpInitialize@4
_VdmpIsThreadTerminating@4
_VdmpLeaveIcaLock@4
_VdmpPreInitialize@0
_VdmpPrinterDirectIoClose@4
_VdmpPrinterInitialize@4
_VdmpQueryVdmProcess@4
_VdmpQueueIntApcRoutine@20
_VdmpQueueIntNopRoutine@12
_VdmpQueueIntNormalRoutine@12
_VdmpQueueInterrupt@4
_VdmpRestartDelayedInterrupts@4
_VdmpRundownRoutine@4
_VdmpStartExecution@0
_VeAllocatePoolWithTagPriority@20
_VerSetConditionMask@16
_VerifierBugCheckIfAppropriate@20
_VerifierCcWaitForCurrentLazyWriterActivity@0
_VerifierCmRegisterCallback@12
_VerifierCmRegisterCallbackEx@24
_VerifierCmUnRegisterCallback@8
_VerifierDbgBreakPointWithStatus@4
_VerifierEtwRegister@16
_VerifierEtwRegisterClassicProvider@20
_VerifierEtwUnregister@8
_VerifierExAcquireResourceExclusiveLite@8
_VerifierExAcquireResourceExclusiveLiteNoReboot@8
_VerifierExAcquireResourceSharedLite@8
_VerifierExAcquireResourceSharedLiteNoReboot@8
_VerifierExAcquireSharedStarveExclusive@8
_VerifierExAcquireSharedStarveExclusiveNoReboot@8
_VerifierExAcquireSharedWaitForExclusive@8
_VerifierExAcquireSharedWaitForExclusiveNoReboot@8
_VerifierExAllocateCacheAwareRundownProtection@8
_VerifierExAllocatePool@8
_VerifierExAllocatePoolEx@16
_VerifierExAllocatePoolWithQuota@8
_VerifierExAllocatePoolWithQuotaTag@12
_VerifierExAllocatePoolWithTag@12
_VerifierExAllocatePoolWithTagPriority@16
_VerifierExConvertExclusiveToSharedLite@4
_VerifierExCreateCallback@16
_VerifierExDeleteLookasideListEx@4
_VerifierExDeleteNPagedLookasideList@4
_VerifierExDeletePagedLookasideList@4
_VerifierExDeleteResourceLite@4
_VerifierExEnterCriticalRegionAndAcquireResourceExclusive@4
_VerifierExEnterCriticalRegionAndAcquireResourceExclusiveNoReboot@4
_VerifierExEnterCriticalRegionAndAcquireResourceShared@4
_VerifierExEnterCriticalRegionAndAcquireResourceSharedNoReboot@4
_VerifierExEnterCriticalRegionAndAcquireSharedWaitForExclusive@4
_VerifierExEnterPriorityRegionAndAcquireResourceExclusive@4
_VerifierExEnterPriorityRegionAndAcquireResourceExclusiveNoReboot@4
_VerifierExEnterPriorityRegionAndAcquireResourceShared@4
_VerifierExEnterPriorityRegionAndAcquireResourceSharedNoReboot@4
_VerifierExFreePool@4
_VerifierExFreePoolEx@8
_VerifierExFreePoolWithTag@8
_VerifierExGetExclusiveWaiterCount@4
_VerifierExGetSharedWaiterCount@4
_VerifierExInitializeLookasideListEx@32
_VerifierExInitializeNPagedLookasideList@28
_VerifierExInitializePagedLookasideList@28
_VerifierExInitializeResourceLite@4
_VerifierExInterlockedAddLargeInteger@16
_VerifierExIsProcessorFeaturePresent@4
_VerifierExIsResourceAcquiredExclusiveLite@4
_VerifierExIsResourceAcquiredSharedLite@4
_VerifierExRaiseAccessViolation@0
_VerifierExRaiseDatatypeMisalignment@0
_VerifierExRaiseStatus@4
_VerifierExRegisterCallback@12
_VerifierExReinitializeResourceLite@4
_VerifierExReleaseResourceForThreadLite@8
_VerifierExReleaseResourceForThreadLiteNoReboot@8
_VerifierExSetResourceOwnerPointer@8
_VerifierExSetResourceOwnerPointerEx@12
_VerifierExSetTimerResolution@8
_VerifierExUnregisterCallback@4
_VerifierExUuidCreate@4
_VerifierFreeTrackedPool@16
_VerifierFsRtlAllocateFileLock@8
_VerifierFsRtlAreNamesEqual@16
_VerifierFsRtlBalanceReads@4
_VerifierFsRtlCancellableWaitForMultipleObjects@24
_VerifierFsRtlCancellableWaitForSingleObject@12
_VerifierFsRtlCheckLockForReadAccess@8
_VerifierFsRtlCheckLockForWriteAccess@8
_VerifierFsRtlCopyWrite@32
_VerifierFsRtlDeregisterUncProvider@4
_VerifierFsRtlDissectName@16
_VerifierFsRtlDoesNameContainWildCards@4
_VerifierFsRtlFastCheckLockForRead@24
_VerifierFsRtlFastCheckLockForWrite@24
_VerifierFsRtlFastUnlockAll@16
_VerifierFsRtlFastUnlockAllByKey@20
_VerifierFsRtlFastUnlockSingle@32
_VerifierFsRtlFreeFileLock@4
_VerifierFsRtlGetFileSize@8
_VerifierFsRtlGetNextFileLock@8
_VerifierFsRtlIncrementCcFastReadNoWait@0
_VerifierFsRtlIncrementCcFastReadWait@0
_VerifierFsRtlInitializeFileLock@12
_VerifierFsRtlIsNameInExpression@16
_VerifierFsRtlMdlReadCompleteDev@12
_VerifierFsRtlMdlWriteCompleteDev@16
_VerifierFsRtlNotifyFilterChangeDirectory@44
_VerifierFsRtlNotifyFilterReportChange@40
_VerifierFsRtlNotifyFullChangeDirectory@40
_VerifierFsRtlNotifyFullReportChange@36
_VerifierFsRtlPrivateLock@48
_VerifierFsRtlProcessFileLock@12
_VerifierFsRtlRegisterUncProvider@12
_VerifierFsRtlRegisterUncProviderEx@16
_VerifierFsRtlRemoveDotsFromPath@12
_VerifierFsRtlUninitializeFileLock@4
_VerifierFsRtlValidateReparsePointBuffer@8
_VerifierHalGetInterruptVector@24
_VerifierInitSystem@4
_VerifierIoAcquireCancelSpinLock@4
_VerifierIoAcquireRemoveLockEx@20
_VerifierIoAcquireVpbSpinLock@4
_VerifierIoAllocateController@16
_VerifierIoAllocateDriverObjectExtension@16
_VerifierIoAllocateErrorLogEntry@8
_VerifierIoAllocateIrp@8
_VerifierIoAllocateMdl@20
_VerifierIoAllocateWorkItem@4
_VerifierIoAttachDevice@12
_VerifierIoAttachDeviceToDeviceStack@8
_VerifierIoAttachDeviceToDeviceStackSafe@12
_VerifierIoCancelIrp@4
_VerifierIoCheckShareAccess@20
_VerifierIoConnectInterrupt@44
_VerifierIoConnectInterruptEx@4
_VerifierIoCreateController@4
_VerifierIoCreateDevice@28
_VerifierIoCreateFile@56
_VerifierIoCreateNotificationEvent@8
_VerifierIoCreateSymbolicLink@8
_VerifierIoCreateSynchronizationEvent@8
_VerifierIoCreateUnprotectedSymbolicLink@8
_VerifierIoDeleteController@4
_VerifierIoDeleteDevice@4
_VerifierIoDeleteSymbolicLink@4
_VerifierIoDetachDevice@4
_VerifierIoDisconnectInterrupt@4
_VerifierIoDisconnectInterruptEx@4
_VerifierIoFreeController@4
_VerifierIoFreeIrp@4
_VerifierIoFreeMdl@4
_VerifierIoGetAttachedDeviceReference@4
_VerifierIoGetConfigurationInformation@0
_VerifierIoGetDeviceInterfaceAlias@12
_VerifierIoGetDeviceInterfaces@16
_VerifierIoGetDeviceNumaNode@8
_VerifierIoGetDeviceObjectPointer@16
_VerifierIoGetDeviceProperty@20
_VerifierIoGetDevicePropertyData@32
_VerifierIoGetDeviceToVerify@4
_VerifierIoGetFileObjectGenericMapping@0
_VerifierIoGetInitialStack@0
_VerifierIoInitializeIrp@12
_VerifierIoInitializeRemoveLockEx@20
_VerifierIoInitializeWorkItem@8
_VerifierIoInvalidateDeviceRelations@8
_VerifierIoIsWdmVersionAvailable@8
_VerifierIoOpenDeviceInterfaceRegistryKey@12
_VerifierIoOpenDeviceRegistryKey@16
_VerifierIoRaiseHardError@12
_VerifierIoRaiseInformationalHardError@12
_VerifierIoReadPartitionTableEx@8
_VerifierIoRegisterBootDriverReinitialization@12
_VerifierIoRegisterDeviceInterface@16
_VerifierIoRegisterDriverReinitialization@12
_VerifierIoRegisterLastChanceShutdownNotification@4
_VerifierIoRegisterPlugPlayNotification@28
_VerifierIoRegisterShutdownNotification@4
_VerifierIoReleaseCancelSpinLock@4
_VerifierIoReleaseRemoveLockAndWaitEx@12
_VerifierIoReleaseRemoveLockEx@12
_VerifierIoReleaseVpbSpinLock@4
_VerifierIoRemoveShareAccess@8
_VerifierIoReplacePartitionUnit@12
_VerifierIoReportDetectedDevice@32
_VerifierIoReportTargetDeviceChange@8
_VerifierIoReportTargetDeviceChangeAsynchronous@16
_VerifierIoReuseIrp@8
_VerifierIoSetCompletionRoutineEx@28
_VerifierIoSetDeviceInterfaceState@8
_VerifierIoSetDevicePropertyData@28
_VerifierIoSetDeviceToVerify@8
_VerifierIoSetPartitionInformationEx@12
_VerifierIoSetShareAccess@16
_VerifierIoSetStartIoAttributes@12
_VerifierIoStartNextPacket@8
_VerifierIoUnregisterPlugPlayNotification@4
_VerifierIoUnregisterPlugPlayNotificationEx@4
_VerifierIoUnregisterShutdownNotification@4
_VerifierIoUpdateShareAccess@8
_VerifierIoVolumeDeviceToDosName@8
_VerifierIoWMIAllocateInstanceIds@12
_VerifierIoWMIRegistrationControl@8
_VerifierIoWMIWriteEvent@4
_VerifierIoWriteErrorLogEntry@4
_VerifierIoWritePartitionTableEx@8
_VerifierKeAcquireInterruptSpinLock@4
_VerifierKeAreAllApcsDisabled@0
_VerifierKeAreApcsDisabled@0
_VerifierKeCancelTimer@4
_VerifierKeClearEvent@4
_VerifierKeDelayExecutionThread@12
_VerifierKeDeregisterNmiCallback@4
_VerifierKeEnterCriticalRegion@0
_VerifierKeEnterGuardedRegion@0
_VerifierKeFlushQueuedDpcs@0
_VerifierKeInitializeDeviceQueue@4
_VerifierKeInitializeEvent@12
_VerifierKeInitializeMutant@8
_VerifierKeInitializeMutantNoReboot@8
_VerifierKeInitializeMutex@8
_VerifierKeInitializeMutexNoReboot@8
_VerifierKeInitializeSemaphore@12
_VerifierKeInitializeSpinLock@4
_VerifierKeInitializeSpinLockNoReboot@4
_VerifierKeInitializeTimer@4
_VerifierKeInitializeTimerEx@8
_VerifierKeInsertByKeyDeviceQueue@12
_VerifierKeInsertDeviceQueue@8
_VerifierKeInsertHeadQueue@8
_VerifierKeInsertQueue@8
_VerifierKeIsApcRunningThread@4
_VerifierKeIsExecutingLegacyDpc@0
_VerifierKeLeaveCriticalRegion@0
_VerifierKeLeaveGuardedRegion@0
_VerifierKeLowerIrql@4
_VerifierKePulseEvent@12
_VerifierKeQueryActiveProcessors@0
_VerifierKeQueryPriorityThread@4
_VerifierKeQueryRuntimeThread@8
_VerifierKeRaiseIrql@8
_VerifierKeRaiseIrqlToDpcLevel@0
_VerifierKeReadStateEvent@4
_VerifierKeReadStateMutex@4
_VerifierKeReadStateSemaphore@4
_VerifierKeReadStateTimer@4
_VerifierKeRegisterNmiCallback@8
_VerifierKeReleaseInterruptSpinLock@8
_VerifierKeReleaseMutant@16
_VerifierKeReleaseMutantNoReboot@16
_VerifierKeReleaseMutex@8
_VerifierKeReleaseMutexNoReboot@8
_VerifierKeReleaseSemaphore@16
_VerifierKeRemoveByKeyDeviceQueue@8
_VerifierKeRemoveDeviceQueue@4
_VerifierKeRemoveEntryDeviceQueue@8
_VerifierKeRemoveQueue@12
_VerifierKeResetEvent@4
_VerifierKeRevertToUserAffinityThreadEx@4
_VerifierKeSaveFloatingPointState@4
_VerifierKeSetEvent@12
_VerifierKeSetSystemAffinityThread@4
_VerifierKeSetSystemGroupAffinityThread@8
_VerifierKeSetTimer@16
_VerifierKeSetTimerEx@20
_VerifierKeSynchronizeExecution@12
_VerifierKeWaitForMultipleObjects@32
_VerifierKeWaitForMultipleObjectsNoReboot@32
_VerifierKeWaitForSingleObject@20
_VerifierKeWaitForSingleObjectNoReboot@20
_VerifierMmAddPhysicalMemory@8
_VerifierMmAllocateContiguousMemory@12
_VerifierMmAllocateContiguousMemorySpecifyCache@32
_VerifierMmAllocateContiguousMemorySpecifyCacheNode@36
_VerifierMmAllocateContiguousNodeMemory@36
_VerifierMmAllocateMappingAddress@8
_VerifierMmAllocateNodePagesForMdlEx@40
_VerifierMmAllocateNonCachedMemory@4
_VerifierMmAllocatePagesForMdl@28
_VerifierMmAllocatePagesForMdlEx@36
_VerifierMmBuildMdlForNonPagedPool@4
_VerifierMmCreateMdl@12
_VerifierMmCreateMirror@0
_VerifierMmCreateSection@32
_VerifierMmDoesFileHaveUserWritableReferences@4
_VerifierMmFreeContiguousMemory@4
_VerifierMmFreeContiguousMemorySpecifyCache@12
_VerifierMmFreeNonCachedMemory@8
_VerifierMmFreePagesFromMdl@4
_VerifierMmGetPhysicalMemoryRanges@0
_VerifierMmGetSystemRoutineAddress@4
_VerifierMmLockPagableDataSection@4
_VerifierMmLockPagableSectionByHandle@4
_VerifierMmMapIoSpace@16
_VerifierMmMapLockedPages@8
_VerifierMmMapLockedPagesSpecifyCache@24
_VerifierMmMapLockedPagesWithReservedMapping@16
_VerifierMmMapViewOfSection@40
_VerifierMmPageEntireDriver@4
_VerifierMmPrefetchPages@8
_VerifierMmProbeAndLockPages@12
_VerifierMmProbeAndLockProcessPages@16
_VerifierMmProtectMdlSystemAddress@8
_VerifierMmRemovePhysicalMemory@8
_VerifierMmResetDriverPaging@4
_VerifierMmSecureVirtualMemory@12
_VerifierMmUnlockPagableImageSection@4
_VerifierMmUnlockPages@4
_VerifierMmUnmapIoSpace@8
_VerifierMmUnmapLockedPages@8
_VerifierMmUnsecureVirtualMemory@4
_VerifierNtCreateFile@44
_VerifierNtCreateSection@28
_VerifierNtLockFile@40
_VerifierNtMapViewOfSection@40
_VerifierNtReadFile@36
_VerifierNtUnlockFile@20
_VerifierNtWriteFile@36
_VerifierObGetObjectSecurity@12
_VerifierObReferenceObjectByHandle@24
_VerifierObReferenceObjectByHandleWithTag@28
_VerifierObReferenceObjectByPointer@16
_VerifierObReferenceObjectByPointerWithTag@20
_VerifierObReleaseObjectSecurity@8
_VerifierPoCallDriver@8
_VerifierPoFxActivateComponent@12
_VerifierPoFxCompleteDevicePowerNotRequired@4
_VerifierPoFxCompleteIdleCondition@8
_VerifierPoFxCompleteIdleState@8
_VerifierPoFxIdleComponent@12
_VerifierPoFxNotifySurprisePowerOn@4
_VerifierPoFxPowerControl@28
_VerifierPoFxRegisterDevice@12
_VerifierPoFxReportDevicePoweredOn@4
_VerifierPoFxSetComponentLatency@16
_VerifierPoFxSetComponentResidency@16
_VerifierPoFxSetComponentWake@12
_VerifierPoFxSetDeviceIdleTimeout@12
_VerifierPoFxStartDevicePowerManagement@4
_VerifierPoFxUnregisterDevice@4
_VerifierPoRequestPowerIrp@24
_VerifierPortExAllocatePoolWithQuotaTag@16
_VerifierPortExAllocatePoolWithTagPriority@20
_VerifierPortIoAllocateIrp@12
_VerifierPortIoAllocateMdl@24
_VerifierPortIoAllocateWorkItem@8
_VerifierPortKeAcquireSpinLock@12
_VerifierPortKeAcquireSpinLockNoXdv@12
_VerifierPortKeReleaseSpinLock@12
_VerifierPortKeReleaseSpinLockNoXdv@12
_VerifierProbeForRead@12
_VerifierProbeForWrite@12
_VerifierPsAssignImpersonationToken@8
_VerifierPsCreateSystemThread@28
_VerifierPsDereferenceImpersonationToken@4
_VerifierPsDereferencePrimaryToken@4
_VerifierPsDisableImpersonation@8
_VerifierPsGetVersion@16
_VerifierPsImpersonateClient@20
_VerifierPsReferenceImpersonationToken@16
_VerifierPsReferencePrimaryToken@4
_VerifierPsRemoveLoadImageNotifyRoutine@4
_VerifierPsRestoreImpersonation@8
_VerifierPsRevertToSelf@0
_VerifierPsSetCreateProcessNotifyRoutine@8
_VerifierPsSetCreateProcessNotifyRoutineEx@8
_VerifierPsSetCreateThreadNotifyRoutine@4
_VerifierPsSetLoadImageNotifyRoutine@4
_VerifierPsTerminateSystemThread@4
_VerifierRtlAnsiStringToUnicodeString@12
_VerifierRtlCompareUnicodeString@12
_VerifierRtlCreateUnicodeString@8
_VerifierRtlDeleteRegistryValue@12
_VerifierRtlDowncaseUnicodeChar@4
_VerifierRtlDowncaseUnicodeString@12
_VerifierRtlDuplicateUnicodeString@12
_VerifierRtlEqualUnicodeString@12
_VerifierRtlFreeUnicodeString@4
_VerifierRtlGUIDFromString@8
_VerifierRtlGenerateClass5Guid@16
_VerifierRtlHashUnicodeString@16
_VerifierRtlOemStringToCountedUnicodeString@12
_VerifierRtlOemStringToUnicodeString@12
_VerifierRtlStringFromGUID@8
_VerifierRtlUTF8ToUnicodeN@20
_VerifierRtlUnicodeStringToAnsiString@12
_VerifierRtlUnicodeStringToCountedOemString@12
_VerifierRtlUnicodeStringToOemString@12
_VerifierRtlUnicodeToUTF8N@20
_VerifierRtlUpcaseUnicodeChar@4
_VerifierRtlUpcaseUnicodeString@12
_VerifierRtlUpcaseUnicodeStringToAnsiString@12
_VerifierRtlUpcaseUnicodeStringToCountedOemString@12
_VerifierRtlUpcaseUnicodeStringToOemString@12
_VerifierRtlxAnsiStringToUnicodeSize@4
_VerifierRtlxUnicodeStringToAnsiSize@4
_VerifierSeAccessCheck@40
_VerifierSeAssignSecurity@28
_VerifierSeAssignSecurityEx@36
_VerifierSeDeassignSecurity@4
_VerifierSeLockSubjectContext@4
_VerifierSeReleaseSubjectContext@4
_VerifierSeSinglePrivilegeCheck@12
_VerifierSeUnlockSubjectContext@4
_VerifierSeValidSecurityDescriptor@8
_VerifierZwAllocateLocallyUniqueId@4
_VerifierZwClose@4
_VerifierZwCommitComplete@8
_VerifierZwCommitTransaction@8
_VerifierZwCreateKeyTransacted@32
_VerifierZwCreateResourceManager@28
_VerifierZwDeleteKey@4
_VerifierZwEnumerateTransactionObject@20
_VerifierZwFlushBuffersFile@8
_VerifierZwFlushKey@4
_VerifierZwGetNotificationResourceManager@28
_VerifierZwLockFile@40
_VerifierZwMakeTemporaryObject@4
_VerifierZwOpenKeyEx@16
_VerifierZwOpenKeyTransacted@16
_VerifierZwOpenKeyTransactedEx@20
_VerifierZwOpenResourceManager@20
_VerifierZwPrePrepareComplete@8
_VerifierZwQueryInformationResourceManager@20
_VerifierZwQueryQuotaInformationFile@36
_VerifierZwReadOnlyEnlistment@8
_VerifierZwRecoverEnlistment@8
_VerifierZwRecoverTransactionManager@4
_VerifierZwRenameKey@8
_VerifierZwRollbackComplete@8
_VerifierZwRollbackTransaction@8
_VerifierZwSetInformationResourceManager@16
_VerifierZwSetInformationToken@16
_VerifierZwSetQuotaInformationFile@16
_VerifierZwSetTimerEx@16
_VerifierZwTerminateProcess@8
_VerifierZwUnlockFile@20
_VerifierZwUnmapViewOfSection@8
_Verifiermemcpy
_VfAddVerifierEntry@4
_VfAfterCallDriver@12
_VfAllocateAdapterChannel@20
_VfAllocateAdapterChannelEx@32
_VfAllocateCommonBuffer@16
_VfAllocateCommonBufferEx@24
_VfAllocateCrashDumpRegisters@8
_VfAllocateDomainCommonBuffer@36
_VfAvlCleanupLockContext@4
_VfAvlDeleteTreeNode@16
_VfAvlEnumerateNodes@16
_VfAvlInitializeLockContext@8
_VfAvlInitializeTree@16
_VfAvlInsertReservedTreeNode@12
_VfAvlLookupTreeNode@16
_VfAvlReserveNode@12
_VfBeforeCallDriver@12
_VfBugCheckNoStackUsage@0
_VfBugcheckLogWorkaround@12
_VfBuildMdlFromScatterGatherList@16
_VfBuildScatterGatherList@40
_VfBuildScatterGatherListEx@64
_VfCalculateScatterGatherListSize@24
_VfCancelAdapterChannel@12
_VfCancelMappedTransfer@8
_VfCheckForLookaside@8
_VfCheckForResource@8
_VfCheckImageCompliance@4
_VfCheckNxPagePriority@8
_VfCheckNxPageProtection@8
_VfCheckNxPoolType@12
_VfCheckPagePriority@8
_VfCheckPageProtection@8
_VfCheckPoolType@12
_VfCheckUserHandle@4
_VfConfigureAdapterChannel@12
_VfCtxHookAndConnectInterruptEx@4
_VfCtxInit@0
_VfCtxUnhookAndDisconnectInterruptEx@4
_VfDdiExposeWmiObjects@0
_VfDeadlockAcquireResource@20
_VfDeadlockAfterCallDriver@4
_VfDeadlockBeforeCallDriver@4
_VfDeadlockDeleteMemoryRange@8
_VfDeadlockInitialize@8
_VfDeadlockInitializeResource@16
_VfDeadlockReleaseResource@16
_VfDevObjAdjustFdoForVerifierFilters@4
_VfDevObjIsDeviceRemoved@4
_VfDevObjMarkDeviceRemoved@4
_VfDevObjPostAddDevice@20
_VfDevObjPreAddDevice@16
_VfDevObjWMIRegistrationControl@8
_VfDisableCodeIntegrityBreaks@0
_VfDisableHalVerifier@0
_VfDriverEnableVerifier@12
_VfDriverEnableVerifierForAll@0
_VfDriverInitStarting@0
_VfDriverInitSuccess@8
_VfDriverLoadBootDrivers@4
_VfDriverLoadImage@16
_VfDriverLock@0
_VfDriverUnloadImage@4
_VfDriverUnlock@0
_VfErrorReleaseTriageInformation@0
_VfErrorReport7@16
_VfErrorReport8@12
_VfErrorStoreTriageInformation@20
_VfFailDeviceNode
_VfFailDriver
_VfFailSystemBIOS
_VfFastIoCheckState@8
_VfFastIoSnapState@0
_VfFaultsInitPhase0@0
_VfFaultsInjectPoolAllocationFailure@4
_VfFaultsInjectResourceFailure@4
_VfFaultsIsSystemSufficientlyBooted@0
_VfFaultsSetParameters@4
_VfFillAllocatePagesForMdl@12
_VfFillAllocatedMemory@8
_VfFilterAttach@8
_VfFlushAdapterBuffers@24
_VfFlushAdapterBuffersEx@28
_VfFlushDmaBuffer@12
_VfFreeAdapterChannel@4
_VfFreeAdapterObject@8
_VfFreeCapturedUnicodeString@4
_VfFreeCommonBuffer@24
_VfFreeMapRegisters@12
_VfFreeMemoryNotification@8
_VfFreePoolNotification@8
_VfGetDmaAdapter@12
_VfGetDmaAdapterInfo@8
_VfGetDmaAlignment@4
_VfGetDmaDomain@4
_VfGetDmaTransferInfo@28
_VfGetHookAddressForOriginal@4
_VfGetScatterGatherList@32
_VfGetScatterGatherListEx@56
_VfGetVerifierInformation@16
_VfGetVerifierInformationEx@4
_VfHalAllocateMapRegisters@16
_VfHalDeleteDevice@4
_VfHalVerifierInitialize@0
_VfInitBootDriversLoaded@4
_VfInitPickCurrentRandomTarget@0
_VfInitSetVerifyDriverTargets@8
_VfInitSystemNoRebootNeeded@8
_VfInitVerifierComponents@12
_VfInitializeBranchTracing@0
_VfInitializeDmaTransferContext@8
_VfInsertContext@4
_VfIoAllocateIrp1@20
_VfIoAllocateIrp2@12
_VfIoCallbacksInit@0
_VfIoCompletionCheckState@8
_VfIoDeleteDevice@8
_VfIoDetachDevice@8
_VfIoFreeIrp@8
_VfIoInitializeIrp@12
_VfIrpAllocateCallDriverData@8
_VfIrpDatabaseCheckExFreePool@4
_VfIrpDatabaseEntryDereference@8
_VfIrpDatabaseEntryFindAndLock@4
_VfIrpDatabaseEntryInsertAndLock@12
_VfIrpDatabaseEntryReleaseLock@4
_VfIrpDatabaseInit@0
_VfIrpLogDeleteDeviceLogs@4
_VfIrpLogInit@0
_VfIrpLogLockDatabase@4
_VfIrpLogRecordEvent@12
_VfIrpLogRetrieveWmiData@24
_VfIrpLogUnlockDatabase@4
_VfIrpSendSynchronousIrp@28
_VfIrpWatermark@8
_VfIsPCIBus@4
_VfIsVerificationEnabled@8
_VfIsVerificationEnabledForImage@4
_VfIsVerifierEnabled@0
_VfIsVerifierExtensionEnabled@0
_VfJoinDmaDomain@8
_VfKeCheckForChanges@4
_VfKeInsertQueueDpc@12
_VfKeIrqlTransitionReserveLogEntry@8
_VfKeRemoveQueueDpc@4
_VfLeaveDmaDomain@4
_VfLegacyGetAdapter@8
_VfLookasideInitializeInternalNPagedList@28
_VfMajorRegisterHandlers@52
_VfMapTransfer@24
_VfMapTransferEx@48
_VfNotifyOfHibernate@4
_VfNotifyVerifierExtensions@8
_VfNotifyVerifierOfEvent@4
_VfObjectContextInit@0
_VfPacketCreateAndLock@4
_VfPendingCheckForChanges@4
_VfPendingFinishLogging@4
_VfPendingInitPhase1@0
_VfPendingMoreProcessingRequired@20
_VfPendingStartLogging@4
_VfPoolCheckForLeaks@8
_VfPoolDelayFreeIfPossible@8
_VfPoolInitPhase0@0
_VfPoolInitPhase1@0
_VfProbeAndCaptureUnicodeString@12
_VfProbeAndCaptureUnicodeStringBuffer@8
_VfPutDmaAdapter@4
_VfPutScatterGatherList@12
_VfQueryDeviceContext@8
_VfQueryDispatchTable@8
_VfQueryDriverContext@8
_VfQueryIrpContext@8
_VfQueryThreadContext@8
_VfRandomGetNumber@8
_VfReadDmaCounter@4
_VfRemLockDeleteMemoryRange@8
_VfRemLockReportBadReleaseAndWaitTag@12
_VfRemLockReportBadReleaseTag@8
_VfRemoveContext@4
_VfRemoveVerifierEntry@4
_VfReportIssueWithOptions@24
_VfSessionDataInit@0
_VfSetIoBuildRequest@4
_VfSetVerifierInformation@12
_VfSetVerifierInformationEx@4
_VfSetVerifierRunningMode@4
_VfSettingsApplyMiscellaneousChecks@4
_VfSettingsCheckForChanges@16
_VfSettingsMiscellaneousChecksInitPhase1@0
_VfShutdownScheduleWatchdog@0
_VfStartBranchTracing@0
_VfStopBranchTracing@0
_VfSuspectDriversAdd@4
_VfSuspectDriversAllocateEntry@4
_VfSuspectDriversGetVerifierInformation@20
_VfSuspectDriversInsert@4
_VfSuspectDriversIsLoaded@4
_VfSuspectDriversLoadCallback@16
_VfSuspectDriversParseRegistryString@0
_VfSuspectDriversRemove@4
_VfSuspectDriversUnloadCallback@4
_VfSuspectExcludedDriversAllocateEntry@8
_VfTargetDriversAdd@12
_VfTargetDriversEnableVerifier@8
_VfTargetDriversGetCounters@12
_VfTargetDriversGetNode@4
_VfTargetDriversGetVerifierData@4
_VfTargetDriversGetZeroCounters@8
_VfTargetDriversInit@0
_VfTargetDriversIsEnabled@4
_VfTargetDriversRemove@4
_VfTargetEtwRegister@12
_VfTargetEtwUnregister@12
_VfTargetWMIRegistrationControl@12
_VfThunkAddDriverThunks@12
_VfThunkAddSpecialDriverThunks@16
_VfThunkAddTargetNotify@4
_VfThunkAdjustExportAddressIfHooked@8
_VfThunkApplyDriverAddedThunks@4
_VfThunkApplyMandatoryThunks@8
_VfThunkApplyThunks@8
_VfThunkFindExportAddressAllTables@4
_VfThunkInit@0
_VfThunkRemoveTargetNotify@4
_VfTriageActionTaken@0
_VfTriageAddDrivers@4
_VfTriageSystem@4
_VfUtilAddressRangeAdd@12
_VfUtilAddressRangeFit@12
_VfUtilAddressRangeRemove@12
_VfUtilAddressRangeRemoveCheckEmpty@12
_VfUtilClearOneBootSettings@0
_VfUtilDbgPrint
_VfUtilEqualUnicodeString@8
_VfUtilFreePoolCheckIRQL@4
_VfUtilFreePoolDispatchLevel@4
_VfUtilIsLocalSystem@4
_VfUtilPrintCheckinString@4
_VfUtilSynchronizationObjectSanityChecks@8
_VfWdCheckForSettingsChange@4
_VfWdInit@0
_VfWdSetCancelTimeout@4
_VfXdvDriverCaptureIoCallbacks@12
_VfXdvExcludeParseRegistryString@0
_VfZwAccessCheckAndAuditAlarm@44
_VfZwAddBootEntry@8
_VfZwAddDriverEntry@8
_VfZwAdjustPrivilegesToken@24
_VfZwAllocateVirtualMemory@24
_VfZwAlpcAcceptConnectPort@36
_VfZwAlpcConnectPort@44
_VfZwAlpcCreatePort@12
_VfZwAlpcCreatePortSection@24
_VfZwAlpcCreateResourceReserve@16
_VfZwAlpcCreateSectionView@12
_VfZwAlpcCreateSecurityContext@12
_VfZwAlpcQueryInformation@20
_VfZwAlpcSendWaitReceivePort@32
_VfZwAlpcSetInformation@16
_VfZwCancelIoFile@8
_VfZwCancelTimer@8
_VfZwCloseObjectAuditAlarm@12
_VfZwCommitEnlistment@8
_VfZwConnectPort@32
_VfZwCreateDirectoryObject@12
_VfZwCreateEnlistment@32
_VfZwCreateEvent@20
_VfZwCreateFile@44
_VfZwCreateJobObject@12
_VfZwCreateKey@28
_VfZwCreateSection@28
_VfZwCreateSymbolicLinkObject@16
_VfZwCreateTimer@16
_VfZwCreateTransaction@40
_VfZwCreateTransactionManager@24
_VfZwDeleteBootEntry@4
_VfZwDeleteFile@4
_VfZwDeleteValueKey@8
_VfZwDeviceIoControlFile@40
_VfZwDisplayString@4
_VfZwDuplicateObject@28
_VfZwDuplicateToken@24
_VfZwEnumerateBootEntries@8
_VfZwEnumerateDriverEntries@8
_VfZwEnumerateKey@24
_VfZwEnumerateValueKey@24
_VfZwFlushInstructionCache@12
_VfZwFlushVirtualMemory@16
_VfZwFreeVirtualMemory@16
_VfZwFsControlFile@40
_VfZwLoadDriver@4
_VfZwLoadKey@8
_VfZwMapViewOfSection@40
_VfZwModifyBootEntry@4
_VfZwModifyDriverEntry@4
_VfZwNotifyChangeKey@40
_VfZwOpenDirectoryObject@12
_VfZwOpenEnlistment@20
_VfZwOpenEvent@12
_VfZwOpenFile@24
_VfZwOpenJobObject@12
_VfZwOpenKey@12
_VfZwOpenProcess@16
_VfZwOpenProcessToken@12
_VfZwOpenProcessTokenEx@16
_VfZwOpenSection@12
_VfZwOpenSymbolicLinkObject@12
_VfZwOpenThread@16
_VfZwOpenThreadToken@16
_VfZwOpenThreadTokenEx@20
_VfZwOpenTimer@12
_VfZwOpenTransaction@20
_VfZwOpenTransactionManager@24
_VfZwPowerInformation@20
_VfZwPrePrepareEnlistment@8
_VfZwPrepareComplete@8
_VfZwPrepareEnlistment@8
_VfZwProtectVirtualMemory@20
_VfZwPulseEvent@8
_VfZwQueryBootEntryOrder@8
_VfZwQueryBootOptions@8
_VfZwQueryDefaultLocale@8
_VfZwQueryDefaultUILanguage@4
_VfZwQueryDirectoryFile@44
_VfZwQueryDirectoryObject@28
_VfZwQueryDriverEntryOrder@8
_VfZwQueryEaFile@36
_VfZwQueryFullAttributesFile@8
_VfZwQueryInformationEnlistment@20
_VfZwQueryInformationFile@20
_VfZwQueryInformationJobObject@20
_VfZwQueryInformationProcess@20
_VfZwQueryInformationThread@20
_VfZwQueryInformationToken@20
_VfZwQueryInformationTransaction@20
_VfZwQueryInformationTransactionManager@20
_VfZwQueryInstallUILanguage@4
_VfZwQueryKey@20
_VfZwQueryLicenseValue@20
_VfZwQueryObject@20
_VfZwQuerySection@20
_VfZwQuerySecurityObject@20
_VfZwQuerySymbolicLinkObject@12
_VfZwQuerySystemInformation@16
_VfZwQueryValueKey@24
_VfZwQueryVolumeInformationFile@20
_VfZwReadFile@36
_VfZwRemoveIoCompletionEx@24
_VfZwReplaceKey@12
_VfZwRequestWaitReplyPort@12
_VfZwResetEvent@8
_VfZwRestoreKey@12
_VfZwRollbackEnlistment@8
_VfZwSetBootEntryOrder@8
_VfZwSetBootOptions@8
_VfZwSetDriverEntryOrder@8
_VfZwSetEaFile@16
_VfZwSetEvent@8
_VfZwSetInformationEnlistment@16
_VfZwSetInformationFile@20
_VfZwSetInformationJobObject@16
_VfZwSetInformationObject@16
_VfZwSetInformationProcess@16
_VfZwSetInformationThread@16
_VfZwSetInformationTransaction@16
_VfZwSetSecurityObject@12
_VfZwSetSystemInformation@12
_VfZwSetSystemTime@8
_VfZwSetTimer@28
_VfZwSetValueKey@24
_VfZwSetVolumeInformationFile@20
_VfZwTranslateFilePath@16
_VfZwUnloadDriver@4
_VfZwUnloadKey@4
_VfZwWaitForMultipleObjects@20
_VfZwWaitForSingleObject@12
_VfZwWriteFile@36
_VhdiGetDiskParameters@16
_VhdiGetPartitionNumber@12
_VhdiGetVolumeNumber@16
_VhdiInitializeBootDisk@12
_VhdiMountVhdFile@4
_VhdiQueryVolumeVhdFilePath@4
_VhdiVerifyBootDisk@4
_ViAdapterCallback@16
_ViAllocateContextTable@4
_ViAllocateContiguousMemory@4
_ViAllocateFromContiguousMemory@8
_ViAllocateMapRegisterFile@8
_ViAllocateMapRegistersFromFile@20
_ViAvlAcquireTableLockAtDpcLevel@8
_ViAvlAcquireTableLockAtDpcLevelSafe@8
_ViAvlAllocateNode@8
_ViAvlCompareNode@12
_ViAvlReleaseTableLockFromDpcLevel@8
_ViAvlTableIndex@8
_ViCheckAdapterBuffers@4
_ViCheckMdlLength@16
_ViCheckPadding@16
_ViCheckTag@16
_ViCiPreprocessOptions@24
_ViCommonBufferCalculatePadding@12
_ViCopyBackModifiedBuffer@20
_ViCopyDeviceDescription@12
_ViCreateProcessCallback@12
_ViCreateProcessCallbackInternal@8
_ViCtxAllocateIsrContext@12
_ViCtxAllocateXStateContexts@4
_ViCtxCaptureInitialIsrState@4
_ViCtxCheckAndReleaseIsrState@8
_ViCtxEqualExtendedState@12
_ViCtxGetPrivateConnectParameters@12
_ViCtxIsr@8
_ViCtxIsrMessageBased@12
_ViCtxSetPrivateConnectParameters@12
_ViDdiBuildWmiRegInfoData@8
_ViDdiDispatchWmi@8
_ViDdiDispatchWmiQueryAllData@8
_ViDdiDispatchWmiRegInfoEx@8
_ViDdiDriverEntry@8
_ViDeadlockAddParticipant@4
_ViDeadlockAddResource@24
_ViDeadlockAddThread@8
_ViDeadlockAllocate@4
_ViDeadlockAnalyze@20
_ViDeadlockCanProceed@8
_ViDeadlockCertify@8
_ViDeadlockCheckDuplicatesAmongChildren@12
_ViDeadlockCheckDuplicatesAmongRoots@8
_ViDeadlockCheckStackLimits@0
_ViDeadlockDatabaseHashIndex@4
_ViDeadlockDetectionApplySettings@0
_ViDeadlockDetectionLock@4
_ViDeadlockDetectionTryConvertSharedToExclusive@0
_ViDeadlockDetectionUnlock@4
_ViDeadlockEmptyDatabase@0
_ViDeadlockForgetResourceHistory@16
_ViDeadlockFree@8
_ViDeadlockKernelVerifierLookasideAllocate@12
_ViDeadlockMergeNodes@12
_ViDeadlockPopulateLookasideCache@8
_ViDeadlockPreprocessOptions@24
_ViDeadlockRemoveNode@8
_ViDeadlockRemoveResource@12
_ViDeadlockRemoveThread@8
_ViDeadlockSearchResource@8
_ViDeadlockSearchThread@4
_ViDeadlockSimilarNode@12
_ViDeadlockSimilarNodes@8
_ViDeadlockTrimResources@8
_ViDeadlockUpdateChildrenCount@8
_ViDevObjAdd@4
_ViDevObjDelayFreeAvlNode@8
_ViDevObjRemove@4
_ViDriverReApplyVerifierForAll@4
_ViErrorDisableBreak@4
_ViErrorDisplayDescription@4
_ViErrorFinishReport@16
_ViErrorIsBreakDisabled@4
_ViExAcquireFastMutexCommon@8
_ViExCheckAPCLevelOrBelow@12
_ViExCheckAPCsDisabled@8
_ViExReleaseFastMutexCommon@4
_ViExTryToAcquireFastMutexCommon@8
_ViFaultsAddAllApps@8
_ViFaultsAddAllTags@8
_ViFaultsAddAppNoDuplicates@8
_ViFaultsAddTagNoDuplicates@8
_ViFaultsGetBaseImageName@8
_ViFaultsInitializeAppsList@0
_ViFaultsInitializeTagsList@0
_ViFaultsInjectionNotification@4
_ViFaultsIsAppTarget@4
_ViFaultsIsCurrentAppTarget@0
_ViFaultsIsTagPresentInList@4
_ViFaultsIsTagTarget@4
_ViFaultsRemoveAllApps@0
_ViFaultsRemoveAllTags@0
_ViFaultsTracesInitialize@0
_ViFaultsTracesLog@4
_ViFilterAddDevice@8
_ViFilterDeviceUsageNotificationCompletion@12
_ViFilterDispatchGeneric@8
_ViFilterDispatchPnp@8
_ViFilterDispatchPower@8
_ViFilterDriverEntry@8
_ViFilterGenericCompletionRoutine@12
_ViFilterIsDeviceExcluded@4
_ViFilterRemoveNotificationCompletion@12
_ViFilterStartCompletionRoutine@12
_ViFindMappedRegisterInFile@12
_ViFindTriageDriverTargets@8
_ViFindTriageRule@12
_ViFlushDoubleBuffer@20
_ViFlushZeroMapRegisterBaseWcbs@4
_ViFreeContextTable@4
_ViFreeMapRegisterFile@8
_ViFreeMapRegistersToFile@12
_ViFreeToContiguousMemory@12
_ViFreeTrackedPool@16
_ViGenericAddDevice@8
_ViGenericCleanup@8
_ViGenericClose@8
_ViGenericCreate@8
_ViGenericCreateMailslot@8
_ViGenericCreateNamedPipe@8
_ViGenericDeviceChange@8
_ViGenericDeviceControl@8
_ViGenericDirectoryControl@8
_ViGenericDriverEntry@8
_ViGenericDriverStartIo@8
_ViGenericDriverUnload@4
_ViGenericFileSystemControl@8
_ViGenericFlushBuffers@8
_ViGenericInternalDeviceControl@8
_ViGenericLockControl@8
_ViGenericPnp@8
_ViGenericPower@8
_ViGenericQueryEa@8
_ViGenericQueryInformation@8
_ViGenericQueryQuota@8
_ViGenericQuerySecurity@8
_ViGenericQueryVolumeInformation@8
_ViGenericRead@8
_ViGenericSetEa@8
_ViGenericSetInformation@8
_ViGenericSetQuota@8
_ViGenericSetSecurity@8
_ViGenericSetVolumeInformation@8
_ViGenericShutdown@8
_ViGenericSystemControl@8
_ViGenericWrite@8
_ViGetAdapterInformationInternal@8
_ViGetMapRegisterFile@4
_ViGetMdlBufferSa@8
_ViGetRealDmaOperation@8
_ViGrowPoolAllocation@4
_ViHalApplySettings@0
_ViHalFreeDomainCommonBuffer@4
_ViHalPreprocessOptions@24
_ViHalTrackDomainCommonBuffer@4
_ViHasBufferBeenTouched@12
_ViHookDmaAdapter@16
_ViInitSystemPhase0@4
_ViInitSystemPhase1@0
_ViInitializeLocalSystemDescriptor@0
_ViInitializePadding@16
_ViIoCallbackSnapState@0
_ViIrpAllocateLockedPacket@12
_ViIrpCheckKernelAddressForIrp@12
_ViIrpDatabaseAcquireLockExclusive@4
_ViIrpDatabaseAcquireLockShared@4
_ViIrpDatabaseFindPointer@4
_ViIrpDatabaseReleaseLockExclusive@4
_ViIrpDatabaseReleaseLockShared@4
_ViIrpLogExposeWmiCallback@4
_ViIrpSynchronousCompletionRoutine@12
_ViIsActiveChannelWcb@8
_ViIsBTSSupported@0
_ViIsDriverSuspectForVerifier@4
_ViIsThreadInsidePagingCodePaths@0
_ViKeInjectStatusAlerted@4
_ViKeLowerIrqlSanityChecks@8
_ViKeObjectAcquired@16
_ViKeRaiseIrqlSanityChecks@8
_ViLookasideAdd@4
_ViLookasideDelayFreeAvlNode@8
_ViLookasideDelete@4
_ViLookasideTrackList@8
_ViLookasideTrackListEx@8
_ViLookupThunkArray@12
_ViLowerIrql@4
_ViMakeVerifierSettings@8
_ViMapDoubleBuffer@20
_ViMmMapLockedPagesSanityChecks@8
_ViMmValidateIrql@4
_ViPacketFree@4
_ViPacketNotificationCallback@12
_ViPendingCompleteAfterWait@4
_ViPendingCompleteAtDPC@16
_ViPendingDelayCompletion@20
_ViPendingQueuePassiveLevelCompletion@4
_ViPendingWorkerThread@4
_ViPnpVerifyMinorWasProcessedProperly@24
_ViPoolDelayFreeTrimThreadRoutine@4
_ViPoolLogStackCallout@4
_ViPoolLogStackTrace@8
_ViPostPoolAllocation@8
_ViQueryObjectContext@12
_ViRaiseIrqlToDpcLevel@0
_ViRandomEx@4
_ViReleaseDmaAdapter@4
_ViRemLockDelayFreeAvlNode@8
_ViRemLockDeleteFirstTreeNode@8
_ViRemLockFindSurrogate@4
_ViRemoveChannelWcb@12
_ViResourceAcquireSanityChecks@12
_ViResourceDelayFreeNode@8
_ViRtlReplaceStringBuffer@12
_ViScatterGatherCallback@16
_ViSettingsEnableKernelHandleChecking@4
_ViSettingsIoCheckForChanges@4
_ViSettingsMiscellaneousCheckForChanges@12
_ViSetupBTSPerProcNoEnable@0
_ViShutdownScheduleWatchdog@0
_ViShutdownWatchdogExecuteDpc@16
_ViSpecialAllocateCommonBuffer@24
_ViSpecialFreeCommonBuffer@16
_ViSuspectDriversLookupEntry@4
_ViSwap@12
_ViTagBuffer@12
_ViTargetAddCountersCallback@8
_ViTargetAddToCounter@16
_ViTargetDelayFreeAvlNode@8
_ViTargetDriversAllocateVerifiedData@4
_ViTargetFreeContiguousMemory@8
_ViTargetFreeContiguousMemoryCallback@8
_ViTargetFreeContiguousMemoryFromNode@8
_ViTargetIncrementCounter@8
_ViTargetRemovingCheckContiguousMemory@8
_ViTargetRemovingCheckEtwWmi@8
_ViTargetTrackContiguousMemory@12
_ViTargetUpdateTreeAllowed@0
_ViTargetWMIDeregister@8
_ViTargetWMIDeregisterCallback@8
_ViTargetWMIRegister@8
_ViThunkAdjustExportAddressIfHooked@16
_ViThunkApplyMandatoryThunksCurrentSession@8
_ViThunkApplyThunksCurrentSession@8
_ViThunkCreateSharedExportInformation@20
_ViThunkCreateThunkTable@12
_ViThunkFindAllExportAddresses@16
_ViThunkFindAllSpecialTables@8
_ViThunkFindExportAddress@12
_ViThunkFindNextSpecialTable@12
_ViThunkFreeSharedThunksArray@4
_ViThunkIsExportAddressShared@12
_ViThunkRecoverPristines@4
_ViThunkRemoveImportEntry@8
_ViThunkReplaceAllSharedExports@12
_ViThunkReplaceAllThunkedImports@16
_ViThunkReplaceImportEntry@8
_ViThunkReplaceImportIfThunkedOrderDependent@12
_ViThunkReplaceImportIfThunkedRegular@8
_ViThunkReplacePristine@12
_ViThunkReplaceSharedExports@12
_ViThunkReplaceSpecialPristine@4
_ViThunkSnapSharedExportByName@12
_ViThunkSnapSharedExports@24
_ViTriageSameDriversFromDump@8
_ViValidateTriageRules@8
_ViWdBeforeCallDriver@12
_ViWdBeforeCancelIrp@4
_ViWdFlushIrpList@0
_ViWdInsertSortIrp@4
_ViWdIrpBeforeCompletionRoutine@4
_ViWdIrpTimedOut@4
_ViWdIrpTimerDpcRoutine@16
_ViXdvBindXdvDDIWrappers@4
_ViXdvBindXdvDriverEntryWrappers@4
_ViXdvDriverLoadImage@4
_ViXdvGetFuncAddress@12
_ViXdvSearchAllThunkArrays@8
_ViXdvSearchAndReplaceThunkArray@16
_ViXdvSearchAndReplaceThunkArrayOrderDependent@12
_ViZwCheckApcRequirement@4
_ViZwCheckObjectAttributes@8
_ViZwCheckUnicodeString@8
_ViZwCheckVirtualAddress@8
_ViZwShouldCheck@0
_VmAccessFault@20
_VmCreateMemoryRange@20
_VmDeleteMemoryRange@20
_VmFlushTb@12
_VmValidateMemoryRangeParameters@20
_VmpFlushTb@16
_VmpInsertMemoryRange@12
_VmpProcessFlushEntire@4
_VmpProcessInvalidateSlat@12
_VmpProcessMemoryRangeCompareGpn@8
_VmpProcessMemoryRangeCompareGpnRange@8
_VmpProcessMemoryRangeCompareVpn@8
_VmpProcessMemoryRangeCompareVpnRange@8
_VmpProcessUpdateSlat@16
_VmpRemoveMemoryRange@12
_VslExchangeEntropy@4
_VslRetrieveMailbox@24
_WMIInitialize@8
_WRITE_REGISTER_BUFFER_UCHAR@12
_WRITE_REGISTER_BUFFER_ULONG@12
_WRITE_REGISTER_BUFFER_USHORT@12
_WRITE_REGISTER_UCHAR@8
_WRITE_REGISTER_ULONG@8
_WRITE_REGISTER_USHORT@8
_WRMSR@12
_WdiDispatchControl@4
_WdiUpdateSem@0
_WdipAccessCheck@0
_WdipSemActivateInstance@4
_WdipSemAddContextEventToScenario@8
_WdipSemAddEndEventToScenario@8
_WdipSemAddScenarioToTable@4
_WdipSemAllocatePool@4
_WdipSemBuildScenarioInstance@8
_WdipSemCaptureState@8
_WdipSemCleanStart@0
_WdipSemCleanupGroupPolicy@0
_WdipSemClearEnabledInstanceTable@0
_WdipSemClearFrequentScenarioTable@0
_WdipSemDeleteTransitionalInstance@4
_WdipSemDeleteValueFromRegistry@8
_WdipSemDisableAllProviders@0
_WdipSemDisableContextProvider@8
_WdipSemDisableContextProviders@8
_WdipSemDisableScenario@12
_WdipSemEnableAllProviders@0
_WdipSemEnableContextProvider@4
_WdipSemEnableContextProviders@4
_WdipSemEnableDisableTrace@28
_WdipSemEnableScenario@12
_WdipSemEnableSemProvider@0
_WdipSemEndScenario@12
_WdipSemFastAllocate@8
_WdipSemFreeInflightScenarioTable@4
_WdipSemFreePool@0
_WdipSemFreeScenario@4
_WdipSemGetGuidKey@8
_WdipSemGetLoggerDroppedEventCount@8
_WdipSemGetLoggerIds@0
_WdipSemInitialize@0
_WdipSemInitializeGlobalState@0
_WdipSemInitializePool@0
_WdipSemLoadConfigInfo@0
_WdipSemLoadGroupPolicy@0
_WdipSemLoadLocalGroupPolicy@4
_WdipSemLoadNextContextProvider@12
_WdipSemLoadNextEndEvent@12
_WdipSemLoadNextScenario@12
_WdipSemLoadScenarioTable@0
_WdipSemLogInflightLimitExceededInformation@12
_WdipSemLogTimeoutInformation@12
_WdipSemMarkInstanceForDeletion@4
_WdipSemMarkNextTimedOutInstanceForDeletion@4
_WdipSemMergeEvents@8
_WdipSemMergeScenarios@8
_WdipSemOpenRegistryKey@12
_WdipSemQueryEnabledInstanceTable@4
_WdipSemQueryInflightScenarioTable@12
_WdipSemQueryProviderTable@4
_WdipSemQueryScenarioTable@8
_WdipSemQueryValueFromRegistry@24
_WdipSemReserveInstanceTableEntry@8
_WdipSemRollBackProviderTable@4
_WdipSemShutdown@0
_WdipSemSqmAddToStream@12
_WdipSemSqmEnabled@0
_WdipSemSqmIncrementDword@8
_WdipSemSqmInit@0
_WdipSemSqmLogInflightLimitExceededDataPoints@0
_WdipSemSqmLogTimeoutDataPoints@8
_WdipSemStartScenario@12
_WdipSemStartTimeoutCheck@0
_WdipSemUpdate@0
_WdipSemUpdateFrequentScenarioTable@4
_WdipSemUpdateInflightScenarioTable@16
_WdipSemUpdateProviderEntriesForScenario@4
_WdipSemUpdateProviderEntryForEvent@8
_WdipSemUpdateProviderTableWithEvent@4
_WdipSemUpdateProviderTableWithScenario@4
_WdipSemValidateEndEvent@12
_WdipSemWriteEvent@24
_WdipSemWriteInflightLimitExceededEvent@16
_WdipSemWriteMisconfigEvent@12
_WdipSemWriteProviderLimitExceededEvent@4
_WdipSemWriteScenarioLimitExceededEvent@12
_WdipSemWriteSemActionsEvent@8
_WdipSemWriteSemFailureEvent@20
_WdipSemWriteTimeoutEvent@12
_WdipStartEndScenario@16
_WdipTimeoutCheckRoutine@4
_WdipTimeoutDpcRoutine@16
_WheaAddErrorSource@8
_WheaAttemptPhysicalPageOffline@12
_WheaConfigureErrorSource@8
_WheaCrashDumpInitializationComplete@0
_WheaGetErrPacketFromErrRecord@4
_WheaGetErrorSource@4
_WheaInitialize@8
_WheaInitializeProcessor@8
_WheaInitializeRecordHeader@4
_WheaPersistOfflinedPage@4
_WheaReportHwError@4
_WheaWmiDispatch@24
_WheapAddErrorSource@8
_WheapAddSectionFromGenericErrorData@24
_WheapAddToDumpFile@8
_WheapAllocErrorRecord@8
_WheapApplyPolicyChanges@0
_WheapApplyThresholdChecks@8
_WheapAttemptArchitecturalErrorRecovery@4
_WheapAttemptErrorRecovery@4
_WheapAttemptPhysicalPageOffline@12
_WheapAttemptPhysicalPageOfflineWorker@4
_WheapCheckForAndReportErrorsFromPreviousSession@0
_WheapCommitPolicy@0
_WheapCompressErrorRecord@8
_WheapCountBadPageExtents@8
_WheapCreateLiveTriageDump@12
_WheapCreatePerProcessorInfo@0
_WheapCreateRecordFromGenericErrorData@20
_WheapCreateTriageDumpFromPreviousSession@4
_WheapDefaultErrSrcCorrect@8
_WheapDefaultErrSrcCreateRecord@20
_WheapDefaultErrSrcInitialize@12
_WheapDefaultErrSrcRecover@8
_WheapEtwEnableCallback@36
_WheapFreeErrorRecord@4
_WheapGenerateETWEvents@4
_WheapGetAllPolicyBufferSize@0
_WheapGetAllPolicyValues@12
_WheapGetErrorSource@8
_WheapGetErrorThresholdInformation@12
_WheapGetPolicyValue@8
_WheapGetPreallocatedErrorRecord@4
_WheapGetTimestamp@4
_WheapInitializeDeferredErrorSources@4
_WheapInitializeErrorRecordWrapper@12
_WheapInitializeErrorSource@4
_WheapInitializeErrorSourceTable@8
_WheapInitializeEventing@0
_WheapInitializeWorkQueue@8
_WheapInsertTriageDataBlock@12
_WheapIsPageInList@12
_WheapIsSqmLoggerRegistered@0
_WheapIsSqmLoggerRunning@0
_WheapLoadPolicy@0
_WheapLogInitEvent@0
_WheapLogPageOfflineAttemptEvent@24
_WheapPfaMemoryCheck@8
_WheapPfaReset@0
_WheapPfaRetireExpiredMemoryEntries@8
_WheapPlatformDirectedMemoryOffline@8
_WheapPredictiveFailureAnalysis@4
_WheapProcessWorkQueueItem@8
_WheapQueryPshedForErrorSources@8
_WheapReportBootError@4
_WheapReportPersistedErrorRecord@4
_WheapSetDefaultErrorSourceConfiguration@0
_WheapSetPolicyValue@8
_WheapSortBadPages@8
_WheapSqmAddToMemoryOfflineStream@8
_WheapSqmAddToStream@12
_WheapSqmCollectPshedPluginTelemetry@0
_WheapSqmCollectWheaOscTelemetry@0
_WheapSqmCollectWheaPolicyTelemetry@0
_WheapSqmDwordCommon@16
_WheapSqmIncrementDword@8
_WheapSqmSetDword@8
_WheapSqmWaitDpcRoutine@16
_WheapSqmWaitWorkerRoutine@4
_WheapWmiExecuteErrorInjectionMethod@20
_WheapWmiExecuteErrorSourceMethod@20
_WheapWmiExecuteMethod@16
_WheapWmiExecutePolicyManagementMethod@20
_WheapWorkQueueAddItem@8
_WheapWorkQueueDpcRoutine@16
_WheapWorkQueueWorkerRoutine@4
_WheapWriteTriageDump@8
_Win7PsGetVersion@16
_Win7RtlGetVersion@4
_Win81PsGetVersion@16
_Win81RtlGetVersion@4
_Win8PsGetVersion@16
_Win8RtlGetVersion@4
_WmiQueryTraceInformation@20
_WmiQueryTraceProviderCount@4
_WmiSetNetworkNotify@4
_WmiTraceMessage
_WmiTraceMessageVa@24
_WmiTraceRundownNotify@8
_WmiVerifierCopyEvent@4
_WmiVerifierTakeEventOwnership@4
_WmipAddDataSource@20
_WmipAddMofResource@20
_WmipAddProviderIdToPIList@20
_WmipAllocDataSource@0
_WmipAllocEntry@4
_WmipAllocGuidEntry@0
_WmipAllocRegEntry@8
_WmipAllocateSingleInstanceWnode@28
_WmipBuildInstanceSet@20
_WmipBuildTraceDeviceList@12
_WmipCachePtrs@20
_WmipClearIrpObjectList@4
_WmipCompleteGuidIrpWithError@4
_WmipCopyFromEventQueues@28
_WmipCountedToSz@4
_WmipCreateGuidObject@16
_WmipDSCleanup@4
_WmipDeleteMethod@4
_WmipDereferenceEvent@4
_WmipDeregisterDevice@4
_WmipDeregisterRegEntry@4
_WmipDetermineInstanceBaseIndex@12
_WmipDisableCollectOrEvent@8
_WmipDisableCollectionForRemovedGuid@8
_WmipDoDisableRequest@12
_WmipDoFindRegEntryByDevice@4
_WmipDriverEntry@8
_WmipEnableCollectOrEvent@12
_WmipEnableCollectionForNewGuid@8
_WmipEnumerateGuids@16
_WmipEnumerateMofResources@12
_WmipEventNotification@4
_WmipFindDSByProviderId@4
_WmipFindGEByGuid@8
_WmipFindGuid@20
_WmipFindISInDSByGuid@8
_WmipFindISinGEbyName@12
_WmipFindMRByNames@8
_WmipFindRegEntryByDevice@4
_WmipFindSMBiosStructure@16
_WmipFindSysIdTable@12
_WmipFirmwareTableHandler
_WmipForwardWmiIrp@24
_WmipFreeTraceDeviceList@8
_WmipGECleanup@4
_WmipGenerateBinaryMofNotification@8
_WmipGenerateMofResourceNotification@16
_WmipGenerateRegistrationNotification@8
_WmipGetFilePDO@12
_WmipGetGuidObjectInstanceInfo@16
_WmipGetGuidPropertiesFromGuidEntry@8
_WmipGetGuidSecurityDescriptor@12
_WmipGetSMBiosEventlog@8
_WmipGetSMBiosFromLoaderBlock@4
_WmipGetSMBiosTableData@12
_WmipGetSysIds@16
_WmipHexStringToDword@16
_WmipISCleanup@4
_WmipIncludeStaticNames@8
_WmipInitializeAllocs@0
_WmipInitializeDataStructs@0
_WmipInitializeRegistration@4
_WmipInitializeSecurity@0
_WmipInsertMofResource@8
_WmipInsertStaticNames@12
_WmipIoControl@8
_WmipIsEqualInstanceSets@8
_WmipIsNumber@4
_WmipIsQuerySetGuid@4
_WmipLegacyEtwCallback@16
_WmipLegacyEtwWorker@4
_WmipLinkDataSourceToList@12
_WmipLinkInstanceSetToGuidEntry@12
_WmipMRCleanup@4
_WmipMangleInstanceName@16
_WmipNotificationIrpCancel@8
_WmipOpenBlock@20
_WmipOpenCloseCleanup@8
_WmipOpenGuidObject@16
_WmipParseSysIdTable@28
_WmipPrepareForWnodeAD@20
_WmipPrepareWnodeSI@24
_WmipProbeAndCaptureGuidObjectAttributes@16
_WmipProbeWmiOpenGuidBlock@28
_WmipProbeWnodeAllData@12
_WmipProbeWnodeMethodItem@12
_WmipProbeWnodeSingleInstance@16
_WmipProbeWnodeSingleItem@8
_WmipProbeWnodeWorker@36
_WmipProcessEvent@12
_WmipProcessLegacyEtwCallback@8
_WmipProcessLegacyEtwRegister@8
_WmipProcessLegacyEtwUnregister@4
_WmipProcessWmiRegInfo@16
_WmipQueryAllData@24
_WmipQueryAllDataMultiple@32
_WmipQueryGuidInfo@4
_WmipQuerySetExecuteSI@28
_WmipQuerySingleMultiple@36
_WmipQueryWmiDataBlock@32
_WmipQueryWmiRegInfo@16
_WmipQueueLegacyEtwWork@12
_WmipQueueNotification@12
_WmipQueueRegWork@8
_WmipRawSMBiosTableHandler
_WmipReceiveNotifications@12
_WmipReferenceEntry@4
_WmipRegisterDevice@8
_WmipRegisterEtwProvider@8
_WmipRegisterFirmwareProviders@0
_WmipRegisterOrUpdateDS@8
_WmipRegistrationWorker@4
_WmipReleaseCollectionEnabled@4
_WmipRemoveDS@4
_WmipSDRegistryQueryRoutine@24
_WmipSecurityMethod@36
_WmipSendDisableRequest@8
_WmipSendEnableDisableRequest@12
_WmipSendEnableRequest@8
_WmipSendGuidUpdateNotifications@12
_WmipSendWmiIrp@24
_WmipSendWmiIrpToTraceDeviceList@20
_WmipSetTraceNotify@8
_WmipStaticInstanceNameSize@4
_WmipSystemControl@8
_WmipTranslateFileHandle@8
_WmipTranslatePDOInstanceNames@16
_WmipUnlinkInstanceSetFromGuidEntry@4
_WmipUnreferenceEntry@8
_WmipUnreferenceRegEntry@4
_WmipUnregisterEtwProvider@4
_WmipUpdateAddGuid@20
_WmipUpdateDataSource@12
_WmipUpdateDeviceStackSize@4
_WmipUpdateModifyGuid@20
_WmipUpdateRegistration@4
_WmipUuidFromString@8
_WmipValidateWmiRegInfoString@16
_WmipWaitForCollectionEnabled@4
_WmipWmiIrpCompletion@12
_WmipWriteWnodeToObject@12
_WriteAMDMsr@12
_XIPDispatch@12
_XRestoreSHelper@12
_XSaveCHelper@12
_XSaveSHelper@12
_XdvExAllocatePoolInternal@24
_XdvExInitializeLookasideListExInternal@40
_XdvExInitializeNPagedLookasideListInternal@36
_XdvExInitializePagedLookasideListInternal@36
_XdvIoAllocateIrp@20
_XdvIoAllocateMdl@28
_XdvIoAllocateWorkItem@12
_XdvIoBuildDeviceIoControlRequest@44
_XdvIoBuildSynchronousFsdRequest@36
_XdvIopBuildAsynchronousFsdRequest@32
_XpressBuildHuffmanDecodingTable@8
_XpressBuildHuffmanEncodings@4
_XpressDecode@24
_XpressDecodeClose@12
_XpressDecodeCreate@8
_XpressDoHuffmanPass@20
_ZwAcceptConnectPort@24
_ZwAccessCheck@32
_ZwAccessCheckAndAuditAlarm@44
_ZwAccessCheckByType@44
_ZwAccessCheckByTypeAndAuditAlarm@64
_ZwAccessCheckByTypeResultList@44
_ZwAccessCheckByTypeResultListAndAuditAlarm@64
_ZwAccessCheckByTypeResultListAndAuditAlarmByHandle@68
_ZwAddAtom@12
_ZwAddAtomEx@16
_ZwAddBootEntry@8
_ZwAddDriverEntry@8
_ZwAdjustGroupsToken@24
_ZwAdjustPrivilegesToken@24
_ZwAdjustTokenClaimsAndDeviceGroups@64
_ZwAlertResumeThread@8
_ZwAlertThread@4
_ZwAlertThreadByThreadId@4
_ZwAllocateLocallyUniqueId@4
_ZwAllocateReserveObject@12
_ZwAllocateUserPhysicalPages@12
_ZwAllocateUuids@16
_ZwAllocateVirtualMemory@24
_ZwAlpcAcceptConnectPort@36
_ZwAlpcCancelMessage@12
_ZwAlpcConnectPort@44
_ZwAlpcConnectPortEx@44
_ZwAlpcCreatePort@12
_ZwAlpcCreatePortSection@24
_ZwAlpcCreateResourceReserve@16
_ZwAlpcCreateSectionView@12
_ZwAlpcCreateSecurityContext@12
_ZwAlpcDeletePortSection@12
_ZwAlpcDeleteResourceReserve@12
_ZwAlpcDeleteSectionView@12
_ZwAlpcDeleteSecurityContext@12
_ZwAlpcDisconnectPort@8
_ZwAlpcImpersonateClientContainerOfPort@12
_ZwAlpcImpersonateClientOfPort@12
_ZwAlpcOpenSenderProcess@24
_ZwAlpcOpenSenderThread@24
_ZwAlpcQueryInformation@20
_ZwAlpcQueryInformationMessage@24
_ZwAlpcRevokeSecurityContext@12
_ZwAlpcSendWaitReceivePort@32
_ZwAlpcSetInformation@16
_ZwApphelpCacheControl@8
_ZwAreMappedFilesTheSame@8
_ZwAssignProcessToJobObject@8
_ZwAssociateWaitCompletionPacket@32
_ZwCallbackReturn@12
_ZwCancelIoFile@8
_ZwCancelIoFileEx@12
_ZwCancelSynchronousIoFile@12
_ZwCancelTimer2@8
_ZwCancelTimer@8
_ZwCancelWaitCompletionPacket@8
_ZwClearEvent@4
_ZwClose@4
_ZwCloseObjectAuditAlarm@12
_ZwCommitComplete@8
_ZwCommitEnlistment@8
_ZwCommitTransaction@8
_ZwCompactKeys@8
_ZwCompareObjects@8
_ZwCompareTokens@12
_ZwCompleteConnectPort@4
_ZwCompressKey@4
_ZwConnectPort@32
_ZwContinue@8
_ZwCreateDebugObject@16
_ZwCreateDirectoryObject@12
_ZwCreateDirectoryObjectEx@20
_ZwCreateEnlistment@32
_ZwCreateEvent@20
_ZwCreateEventPair@12
_ZwCreateFile@44
_ZwCreateIRTimer@8
_ZwCreateIoCompletion@16
_ZwCreateJobObject@12
_ZwCreateJobSet@12
_ZwCreateKey@28
_ZwCreateKeyTransacted@32
_ZwCreateKeyedEvent@16
_ZwCreateLowBoxToken@36
_ZwCreateMailslotFile@32
_ZwCreateMutant@16
_ZwCreateNamedPipeFile@56
_ZwCreatePagingFile@16
_ZwCreatePartition@20
_ZwCreatePort@20
_ZwCreatePrivateNamespace@16
_ZwCreateProcess@32
_ZwCreateProcessEx@36
_ZwCreateProfile@36
_ZwCreateProfileEx@40
_ZwCreateResourceManager@28
_ZwCreateSection@28
_ZwCreateSemaphore@20
_ZwCreateSymbolicLinkObject@16
_ZwCreateThread@32
_ZwCreateThreadEx@44
_ZwCreateTimer2@20
_ZwCreateTimer@16
_ZwCreateToken@52
_ZwCreateTokenEx@68
_ZwCreateTransaction@40
_ZwCreateTransactionManager@24
_ZwCreateUserProcess@44
_ZwCreateWaitCompletionPacket@12
_ZwCreateWaitablePort@20
_ZwCreateWnfStateName@28
_ZwCreateWorkerFactory@40
_ZwDebugActiveProcess@8
_ZwDebugContinue@12
_ZwDelayExecution@8
_ZwDeleteAtom@4
_ZwDeleteBootEntry@4
_ZwDeleteDriverEntry@4
_ZwDeleteFile@4
_ZwDeleteKey@4
_ZwDeleteObjectAuditAlarm@12
_ZwDeletePrivateNamespace@4
_ZwDeleteValueKey@8
_ZwDeleteWnfStateData@8
_ZwDeleteWnfStateName@4
_ZwDeviceIoControlFile@40
_ZwDisableLastKnownGood@0
_ZwDisplayString@4
_ZwDrawText@4
_ZwDuplicateObject@28
_ZwDuplicateToken@24
_ZwEnableLastKnownGood@0
_ZwEnumerateBootEntries@8
_ZwEnumerateDriverEntries@8
_ZwEnumerateKey@24
_ZwEnumerateSystemEnvironmentValuesEx@12
_ZwEnumerateTransactionObject@20
_ZwEnumerateValueKey@24
_ZwExtendSection@8
_ZwFilterBootOption@20
_ZwFilterToken@24
_ZwFilterTokenEx@56
_ZwFindAtom@12
_ZwFlushBuffersFile@8
_ZwFlushBuffersFileEx@20
_ZwFlushInstallUILanguage@8
_ZwFlushInstructionCache@12
_ZwFlushKey@4
_ZwFlushProcessWriteBuffers@0
_ZwFlushVirtualMemory@16
_ZwFlushWriteBuffer@0
_ZwFreeUserPhysicalPages@12
_ZwFreeVirtualMemory@16
_ZwFreezeRegistry@4
_ZwFreezeTransactions@8
_ZwFsControlFile@40
_ZwGetCachedSigningLevel@24
_ZwGetCompleteWnfStateSubscription@24
_ZwGetContextThread@8
_ZwGetCurrentProcessorNumber@0
_ZwGetCurrentProcessorNumberEx@4
_ZwGetDevicePowerState@8
_ZwGetMUIRegistryInfo@12
_ZwGetNextProcess@20
_ZwGetNextThread@24
_ZwGetNlsSectionPtr@20
_ZwGetNotificationResourceManager@28
_ZwGetWriteWatch@28
_ZwImpersonateAnonymousToken@4
_ZwImpersonateClientOfPort@8
_ZwImpersonateThread@12
_ZwInitializeNlsFiles@12
_ZwInitializeRegistry@4
_ZwInitiatePowerAction@16
_ZwIsProcessInJob@8
_ZwIsSystemResumeAutomatic@0
_ZwIsUILanguageComitted@0
_ZwListenPort@8
_ZwLoadDriver@4
_ZwLoadKey2@12
_ZwLoadKey@8
_ZwLoadKeyEx@32
_ZwLockFile@40
_ZwLockProductActivationKeys@8
_ZwLockRegistryKey@4
_ZwLockVirtualMemory@16
_ZwMakePermanentObject@4
_ZwMakeTemporaryObject@4
_ZwManagePartition@20
_ZwMapCMFModule@24
_ZwMapUserPhysicalPages@12
_ZwMapUserPhysicalPagesScatter@12
_ZwMapViewOfSection@40
_ZwModifyBootEntry@4
_ZwModifyDriverEntry@4
_ZwNotifyChangeDirectoryFile@36
_ZwNotifyChangeKey@40
_ZwNotifyChangeMultipleKeys@48
_ZwNotifyChangeSession@32
_ZwOpenDirectoryObject@12
_ZwOpenEnlistment@20
_ZwOpenEvent@12
_ZwOpenEventPair@12
_ZwOpenFile@24
_ZwOpenIoCompletion@12
_ZwOpenJobObject@12
_ZwOpenKey@12
_ZwOpenKeyEx@16
_ZwOpenKeyTransacted@16
_ZwOpenKeyTransactedEx@20
_ZwOpenKeyedEvent@12
_ZwOpenMutant@12
_ZwOpenObjectAuditAlarm@48
_ZwOpenPartition@12
_ZwOpenPrivateNamespace@16
_ZwOpenProcess@16
_ZwOpenProcessToken@12
_ZwOpenProcessTokenEx@16
_ZwOpenResourceManager@20
_ZwOpenSection@12
_ZwOpenSemaphore@12
_ZwOpenSession@12
_ZwOpenSymbolicLinkObject@12
_ZwOpenThread@16
_ZwOpenThreadToken@16
_ZwOpenThreadTokenEx@20
_ZwOpenTimer@12
_ZwOpenTransaction@20
_ZwOpenTransactionManager@24
_ZwPlugPlayControl@12
_ZwPowerInformation@20
_ZwPrePrepareComplete@8
_ZwPrePrepareEnlistment@8
_ZwPrepareComplete@8
_ZwPrepareEnlistment@8
_ZwPrivilegeCheck@12
_ZwPrivilegeObjectAuditAlarm@24
_ZwPrivilegedServiceAuditAlarm@20
_ZwPropagationComplete@16
_ZwPropagationFailed@12
_ZwProtectVirtualMemory@20
_ZwPulseEvent@8
_ZwQueryAttributesFile@8
_ZwQueryBootEntryOrder@8
_ZwQueryBootOptions@8
_ZwQueryDebugFilterState@8
_ZwQueryDefaultLocale@8
_ZwQueryDefaultUILanguage@4
_ZwQueryDirectoryFile@44
_ZwQueryDirectoryObject@28
_ZwQueryDriverEntryOrder@8
_ZwQueryEaFile@36
_ZwQueryEvent@20
_ZwQueryFullAttributesFile@8
_ZwQueryInformationAtom@20
_ZwQueryInformationEnlistment@20
_ZwQueryInformationFile@20
_ZwQueryInformationJobObject@20
_ZwQueryInformationPort@20
_ZwQueryInformationProcess@20
_ZwQueryInformationResourceManager@20
_ZwQueryInformationThread@20
_ZwQueryInformationToken@20
_ZwQueryInformationTransaction@20
_ZwQueryInformationTransactionManager@20
_ZwQueryInformationWorkerFactory@20
_ZwQueryInstallUILanguage@4
_ZwQueryIntervalProfile@8
_ZwQueryIoCompletion@20
_ZwQueryKey@20
_ZwQueryLicenseValue@20
_ZwQueryMultipleValueKey@24
_ZwQueryMutant@20
_ZwQueryObject@20
_ZwQueryOpenSubKeys@8
_ZwQueryOpenSubKeysEx@16
_ZwQueryPerformanceCounter@8
_ZwQueryPortInformationProcess@0
_ZwQueryQuotaInformationFile@36
_ZwQuerySection@20
_ZwQuerySecurityAttributesToken@24
_ZwQuerySecurityObject@20
_ZwQuerySemaphore@20
_ZwQuerySymbolicLinkObject@12
_ZwQuerySystemEnvironmentValue@16
_ZwQuerySystemEnvironmentValueEx@20
_ZwQuerySystemInformation@16
_ZwQuerySystemInformationEx@24
_ZwQuerySystemTime@4
_ZwQueryTimer@20
_ZwQueryTimerResolution@12
_ZwQueryValueKey@24
_ZwQueryVirtualMemory@24
_ZwQueryVolumeInformationFile@20
_ZwQueryWnfStateData@24
_ZwQueryWnfStateNameInformation@20
_ZwQueueApcThread@20
_ZwQueueApcThreadEx@24
_ZwRaiseException@12
_ZwRaiseHardError@24
_ZwReadFile@36
_ZwReadFileScatter@36
_ZwReadOnlyEnlistment@8
_ZwReadRequestData@24
_ZwReadVirtualMemory@20
_ZwRecoverEnlistment@8
_ZwRecoverResourceManager@4
_ZwRecoverTransactionManager@4
_ZwRegisterProtocolAddressInformation@20
_ZwRegisterThreadTerminatePort@4
_ZwReleaseKeyedEvent@16
_ZwReleaseMutant@8
_ZwReleaseSemaphore@12
_ZwReleaseWorkerFactoryWorker@4
_ZwRemoveIoCompletion@20
_ZwRemoveIoCompletionEx@24
_ZwRemoveProcessDebug@8
_ZwRenameKey@8
_ZwRenameTransactionManager@8
_ZwReplaceKey@12
_ZwReplacePartitionUnit@12
_ZwReplyPort@8
_ZwReplyWaitReceivePort@16
_ZwReplyWaitReceivePortEx@20
_ZwReplyWaitReplyPort@8
_ZwRequestPort@8
_ZwRequestWaitReplyPort@12
_ZwResetEvent@8
_ZwResetWriteWatch@12
_ZwRestoreKey@12
_ZwResumeProcess@4
_ZwResumeThread@8
_ZwRevertContainerImpersonation@0
_ZwRollbackComplete@8
_ZwRollbackEnlistment@8
_ZwRollbackTransaction@8
_ZwRollforwardTransactionManager@8
_ZwSaveKey@8
_ZwSaveKeyEx@12
_ZwSaveMergedKeys@12
_ZwSecureConnectPort@36
_ZwSerializeBoot@0
_ZwSetBootEntryOrder@8
_ZwSetBootOptions@8
_ZwSetCachedSigningLevel@20
_ZwSetContextThread@8
_ZwSetDebugFilterState@12
_ZwSetDefaultHardErrorPort@4
_ZwSetDefaultLocale@8
_ZwSetDefaultUILanguage@4
_ZwSetDriverEntryOrder@8
_ZwSetEaFile@16
_ZwSetEvent@8
_ZwSetEventBoostPriority@4
_ZwSetHighEventPair@4
_ZwSetHighWaitLowEventPair@4
_ZwSetIRTimer@8
_ZwSetInformationDebugObject@20
_ZwSetInformationEnlistment@16
_ZwSetInformationFile@20
_ZwSetInformationJobObject@16
_ZwSetInformationKey@16
_ZwSetInformationObject@16
_ZwSetInformationProcess@16
_ZwSetInformationResourceManager@16
_ZwSetInformationSymbolicLink@16
_ZwSetInformationThread@16
_ZwSetInformationToken@16
_ZwSetInformationTransaction@16
_ZwSetInformationTransactionManager@16
_ZwSetInformationVirtualMemory@24
_ZwSetInformationWorkerFactory@16
_ZwSetIntervalProfile@8
_ZwSetIoCompletion@20
_ZwSetIoCompletionEx@24
_ZwSetLdtEntries@24
_ZwSetLowEventPair@4
_ZwSetLowWaitHighEventPair@4
_ZwSetQuotaInformationFile@16
_ZwSetSecurityObject@12
_ZwSetSystemEnvironmentValue@8
_ZwSetSystemEnvironmentValueEx@20
_ZwSetSystemInformation@12
_ZwSetSystemPowerState@12
_ZwSetSystemTime@8
_ZwSetThreadExecutionState@8
_ZwSetTimer2@16
_ZwSetTimer@28
_ZwSetTimerEx@16
_ZwSetTimerResolution@12
_ZwSetUuidSeed@4
_ZwSetValueKey@24
_ZwSetVolumeInformationFile@20
_ZwSetWnfProcessNotificationEvent@4
_ZwShutdownSystem@4
_ZwShutdownWorkerFactory@8
_ZwSignalAndWaitForSingleObject@16
_ZwSinglePhaseReject@8
_ZwStartProfile@4
_ZwStopProfile@4
_ZwSubscribeWnfStateChange@16
_ZwSuspendProcess@4
_ZwSuspendThread@8
_ZwSystemDebugControl@24
_ZwTerminateJobObject@8
_ZwTerminateProcess@8
_ZwTerminateThread@8
_ZwTestAlert@0
_ZwThawRegistry@0
_ZwThawTransactions@0
_ZwTraceControl@24
_ZwTraceEvent@16
_ZwTranslateFilePath@16
_ZwUmsThreadYield@4
_ZwUnloadDriver@4
_ZwUnloadKey2@8
_ZwUnloadKey@4
_ZwUnloadKeyEx@8
_ZwUnlockFile@20
_ZwUnlockVirtualMemory@16
_ZwUnmapViewOfSection@8
_ZwUnmapViewOfSectionEx@12
_ZwUnsubscribeWnfStateChange@4
_ZwUpdateWnfStateData@28
_ZwVdmControl@8
_ZwWaitForAlertByThreadId@8
_ZwWaitForDebugEvent@16
_ZwWaitForKeyedEvent@16
_ZwWaitForMultipleObjects32@20
_ZwWaitForMultipleObjects@20
_ZwWaitForSingleObject@12
_ZwWaitForWorkViaWorkerFactory@20
_ZwWaitHighEventPair@4
_ZwWaitLowEventPair@4
_ZwWorkerFactoryWorkerReady@4
_ZwWriteFile@36
_ZwWriteFileGather@36
_ZwWriteRequestData@24
_ZwWriteVirtualMemory@20
_ZwYieldExecution@0
__87except
__CIcos
__CIcos_default
__CIsin
__CIsin_default
__CIsqrt
__CmAddDeviceToContainer@20
__CmAddDeviceToContainerWorker@20
__CmClassFilterCallback@16
__CmClassSubkeyCallback@16
__CmContainerListGenericObjectCallback@16
__CmCreateDevice@24
__CmCreateDeviceContainer@24
__CmCreateDeviceContainerWorker@24
__CmCreateDeviceInterface@24
__CmCreateDeviceInterfaceWorker@24
__CmCreateDeviceWorker@24
__CmCreateInstallerClass@24
__CmCreateInstallerClassWorker@24
__CmCreateInterfaceClass@24
__CmCreateInterfaceClassWorker@24
__CmCreateOrdinalInstanceKey@24
__CmDeleteCommonClassRegKey@20
__CmDeleteCommonClassRegKeyWorker@20
__CmDeleteDevice@12
__CmDeleteDeviceContainer@12
__CmDeleteDeviceContainerRegKey@20
__CmDeleteDeviceContainerRegKeyWorker@20
__CmDeleteDeviceContainerWorker@12
__CmDeleteDeviceInterface@12
__CmDeleteDeviceInterfaceMappedPropertyFromRegValue@16
__CmDeleteDeviceInterfaceRegKey@20
__CmDeleteDeviceInterfaceRegKeyWorker@20
__CmDeleteDeviceInterfaceWorker@12
__CmDeleteDeviceMappedPropertyForAllDriverKeyRegValues@8
__CmDeleteDeviceMappedPropertyFromDriverKeyRegValue@12
__CmDeleteDeviceMappedPropertyFromInstanceKeyRegValue@16
__CmDeleteDeviceRegKey@20
__CmDeleteDeviceRegKeyWorker@20
__CmDeleteDeviceWorker@12
__CmDeleteInstallerClass@12
__CmDeleteInstallerClassMappedPropertyFromCoInstallers@12
__CmDeleteInstallerClassMappedPropertyFromRegValue@16
__CmDeleteInstallerClassRegKey@20
__CmDeleteInstallerClassWorker@12
__CmDeleteInterfaceClass@12
__CmDeleteInterfaceClassMappedPropertyFromRegValue@16
__CmDeleteInterfaceClassRegKey@20
__CmDeleteInterfaceClassWorker@12
__CmDeviceClassesSubkeyCallback@16
__CmEnumDevicesInContainerWithCallback@24
__CmEnumDevicesInContainerWithCallbackWorker@24
__CmEnumSubkeyCallback@16
__CmGetCommonClassRegKeyPath@32
__CmGetContainerBooleanProperty@32
__CmGetContainerBooleanPropertyCallback@12
__CmGetDeviceChildren@16
__CmGetDeviceContainerIdFromBase@20
__CmGetDeviceContainerMappedProperty@36
__CmGetDeviceContainerMappedPropertyKeys@28
__CmGetDeviceContainerMappedPropertyLocales@28
__CmGetDeviceContainerRegKeyPath@32
__CmGetDeviceControlKeyPath@32
__CmGetDeviceHardwareKeyPath@32
__CmGetDeviceInstanceKeyPath@32
__CmGetDeviceInterfaceClassGuid@12
__CmGetDeviceInterfaceClassGuidString@16
__CmGetDeviceInterfaceMappedProperty@36
__CmGetDeviceInterfaceMappedPropertyFromComposite@32
__CmGetDeviceInterfaceMappedPropertyFromRegValue@32
__CmGetDeviceInterfaceMappedPropertyKeys@28
__CmGetDeviceInterfaceMappedPropertyLocales@28
__CmGetDeviceInterfaceName@32
__CmGetDeviceInterfacePathFormat@12
__CmGetDeviceInterfaceReferenceString@20
__CmGetDeviceInterfaceRegKeyPath@32
__CmGetDeviceInterfaceSubkeyPath@28
__CmGetDeviceInterfaceSymbolicLinkName@20
__CmGetDeviceLogConfKeyPath@32
__CmGetDeviceMappedProperty@36
__CmGetDeviceMappedPropertyFromComposite@32
__CmGetDeviceMappedPropertyFromInstanceKeyRegValue@32
__CmGetDeviceMappedPropertyFromRegProp@32
__CmGetDeviceMappedPropertyKeys@28
__CmGetDeviceMappedPropertyLocales@28
__CmGetDeviceParent@16
__CmGetDeviceRegKeyPath@32
__CmGetDeviceRegKeySecurityDescriptor@12
__CmGetDeviceRegProp@32
__CmGetDeviceRegPropWorker@32
__CmGetDeviceRelationsList@28
__CmGetDeviceSiblings@16
__CmGetDeviceSoftwareKey@20
__CmGetDeviceSoftwareKeyPath@32
__CmGetDeviceStatus@28
__CmGetDevicesInBaseContainerList@16
__CmGetInstallerClassMappedProperty@36
__CmGetInstallerClassMappedPropertyFromCoInstallers@28
__CmGetInstallerClassMappedPropertyFromComposite@32
__CmGetInstallerClassMappedPropertyFromRegProp@32
__CmGetInstallerClassMappedPropertyFromRegValue@32
__CmGetInstallerClassMappedPropertyKeys@28
__CmGetInstallerClassMappedPropertyLocales@28
__CmGetInstallerClassRegProp@32
__CmGetInstallerClassRegPropWorker@32
__CmGetInterfaceClassMappedProperty@36
__CmGetInterfaceClassMappedPropertyFromComposite@32
__CmGetInterfaceClassMappedPropertyFromRegValue@32
__CmGetInterfaceClassMappedPropertyKeys@28
__CmGetInterfaceClassMappedPropertyLocales@28
__CmGetMatchingCommonClassList@32
__CmGetMatchingCommonClassListWorker@32
__CmGetMatchingDeviceContainerList@28
__CmGetMatchingDeviceContainerListWorker@28
__CmGetMatchingDeviceInterfaceList@28
__CmGetMatchingDeviceInterfaceListWorker@28
__CmGetMatchingDeviceList@28
__CmGetMatchingDeviceListForSubkey@32
__CmGetMatchingDeviceListWorker@28
__CmGetMatchingFilteredDeviceInterfaceList@40
__CmGetMatchingFilteredDeviceInterfaceListWorker@40
__CmGetMatchingFilteredDeviceList@36
__CmGetMatchingFilteredDeviceListWorker@36
__CmGetMatchingInstallerClassList@28
__CmGetMatchingInterfaceClassList@28
__CmIsDeviceInContainer@28
__CmIsDeviceInterfaceEnabled@16
__CmIsDevicePresent@12
__CmIsDeviceRegPropWritable@8
__CmIsDeviceSafeRemovalRequired@12
__CmIsInstallerClassRegPropWritable@8
__CmIsLocalMachineContainer@8
__CmIsRootDevice@4
__CmIsRootEnumeratedDevice@4
__CmMapCmObjectTypeToPnpObjectType@4
__CmMapPropertyKeyToRegProp@8
__CmMapRegPropToPropertyKey@8
__CmMatchLastKnownParentCallback@16
__CmMoveBaseContainer@16
__CmOpenCommonClassRegKey@32
__CmOpenCommonClassRegKeyWorker@32
__CmOpenDeviceContainerRegKey@32
__CmOpenDeviceContainerRegKeyWorker@32
__CmOpenDeviceInterfaceRegKey@32
__CmOpenDeviceInterfaceRegKeyWorker@32
__CmOpenDeviceRegKey@32
__CmOpenDeviceRegKeyWorker@32
__CmOpenInstallerClassRegKey@32
__CmOpenInterfaceClassRegKey@32
__CmRaiseCreateEvent@16
__CmRaiseDeleteEvent@12
__CmRaisePropertyChangeEvent@20
__CmRemoveDeviceFromContainer@20
__CmRemoveDeviceFromContainerWorker@20
__CmServiceFilterCallback@16
__CmSetDeviceContainerMappedProperty@32
__CmSetDeviceInterfaceMappedProperty@32
__CmSetDeviceInterfaceMappedPropertyFromRegValue@28
__CmSetDeviceInterfacePathFormat@12
__CmSetDeviceMappedProperty@32
__CmSetDeviceMappedPropertyFromDriverKeyRegValue@24
__CmSetDeviceMappedPropertyFromInstanceKeyRegValue@28
__CmSetDeviceMappedPropertyFromRegProp@28
__CmSetDeviceRegProp@32
__CmSetDeviceRegPropWorker@32
__CmSetInstallerClassMappedProperty@32
__CmSetInstallerClassMappedPropertyFromCoInstallers@24
__CmSetInstallerClassMappedPropertyFromRegProp@28
__CmSetInstallerClassMappedPropertyFromRegValue@28
__CmSetInstallerClassRegProp@32
__CmSetInstallerClassRegPropWorker@32
__CmSetInterfaceClassMappedProperty@32
__CmSetInterfaceClassMappedPropertyFromRegValue@28
__CmValidateDeviceContainerName@8
__CmValidateDeviceInterfaceName@8
__CmValidateDeviceName@8
__CmValidateInstallerClassName@8
__CmValidateInterfaceClassName@8
__FinalExceptionHandler@16
__GetBaseTypeSize@4
__IsFixedSizeType@4
__IsNeutralLocale@4
__MapCmClassPropertyToRegType@4
__MapCmClassPropertyToRegValue@8
__MapCmDevicePropertyToNtProperty@4
__MapCmDevicePropertyToRegType@4
__MapCmDevicePropertyToRegValue@8
__MapCmRelationTypeToNtRelationType@4
__MmTlgWrite@24
__NLG_Call
__NLG_Notify
__NLG_Notify1
__NtPlugPlayGetDeviceProperty@28
__NtPlugPlayGetDeviceRelatedDevice@28
__NtPlugPlayGetDeviceRelationsList@28
__NtPlugPlayGetDeviceStatus@24
__ObReferenceObjectByHandle@24
__PnpCmMatchCallbackRoutine@16
__PnpContainerRaiseDevicesChangedEvent@8
__PnpCreateObject@28
__PnpCreateObjectDispatch@28
__PnpCtxCloseMachine@4
__PnpCtxGetCachedContextBaseKey@12
__PnpCtxGetNtPlugPlayRoutine@12
__PnpCtxGetObjectContext@12
__PnpCtxGetObjectDispatchCallback@12
__PnpCtxInternalEnumKeyCallback@16
__PnpCtxOpenContextBaseKey@20
__PnpCtxOpenMachine@28
__PnpCtxRegCloseKey@8
__PnpCtxRegCopyTree@20
__PnpCtxRegCreateKey@32
__PnpCtxRegCreateTree@32
__PnpCtxRegDeleteKey@12
__PnpCtxRegDeletePath@16
__PnpCtxRegDeleteTree@12
__PnpCtxRegEnumKey@20
__PnpCtxRegEnumKeyWithCallback@16
__PnpCtxRegOpenCurrentUserKey@16
__PnpCtxRegOpenKey@24
__PnpCtxRegQueryValue@24
__PnpCtxRegQueryValueIndirect@28
__PnpCtxRegSetValue@24
__PnpCtxSetNtPlugPlayRoutine@12
__PnpDeleteObject@16
__PnpDeleteObjectDispatch@16
__PnpDeletePropertyWorker@32
__PnpDeviceRaisePropertyChangeEventWorker@24
__PnpDispatchDevice@20
__PnpDispatchDeviceContainer@20
__PnpDispatchDeviceInterface@20
__PnpDispatchInstallerClass@20
__PnpDispatchInterfaceClass@20
__PnpGetEnumSecurityDescriptor@4
__PnpGetGenericObjectList@32
__PnpGetGenericStoreProperty@36
__PnpGetGenericStorePropertyKeys@32
__PnpGetGenericStorePropertyLocales@28
__PnpGetMappedPropertyDispatch@44
__PnpGetMappedPropertyKeysDispatch@40
__PnpGetMappedPropertyLocalesDispatch@36
__PnpGetObjectList@32
__PnpGetObjectListDispatch@32
__PnpGetObjectProperty@44
__PnpGetObjectPropertyKeys@40
__PnpGetObjectPropertyKeysWorker@40
__PnpGetObjectPropertyLocales@36
__PnpGetObjectPropertyLocalesWorker@36
__PnpGetObjectPropertyWorker@44
__PnpGetPropertiesSecurityDescriptor@4
__PnpHasDerivedKeys@12
__PnpInstallerClassRaisePropertyChangeEventWorker@24
__PnpInterfaceClassRaisePropertyChangeEventWorker@24
__PnpInterfaceRaisePropertyChangeEventWorker@24
__PnpIsNullGuidString@4
__PnpIsValidGuidString@4
__PnpMapCmStatusToDispatchStatus@4
__PnpMultiSzAppend@12
__PnpMultiSzDeleteString@8
__PnpMultiSzGetLen@4
__PnpNotifyDerivedKeys@32
__PnpObjectListCallback@16
__PnpObjectRaiseCreateEvent@16
__PnpObjectRaiseDeleteEvent@12
__PnpObjectRaisePropertyChangeEvent@24
__PnpOpenObjectRegKey@32
__PnpOpenObjectRegKeyDispatch@32
__PnpOpenPropertiesKey@28
__PnpParseIndirectInfString@20
__PnpParseIndirectResourceString@24
__PnpRaiseNtPlugPlayDevicePropertyChangeEvent@12
__PnpRegQueryValueIndirect@28
__PnpSetGenericStoreProperty@32
__PnpSetMappedPropertyDispatch@40
__PnpSetObjectProperty@40
__PnpSetObjectPropertyWorker@40
__PnpSetPropertyWorker@32
__PnpStringFromGuid@12
__PnpUpdateInterfacesCallback@16
__PnpValidateObjectName@16
__PnpValidateObjectNameDispatch@16
__PnpValidatePropertyData@12
__RegRtlCopyTreeInternal@28
__RegRtlCreateKeyTransacted@36
__RegRtlCreateTreeTransacted@36
__RegRtlDeleteKeyTransacted@12
__RegRtlDeletePathInternal@20
__RegRtlDeleteTreeInternal@16
__RegRtlEnumKey@16
__RegRtlEnumKeyWithCallback@12
__RegRtlEnumValue@28
__RegRtlIsPredefinedKey@4
__RegRtlOpenKeyTransacted@24
__RegRtlOpenPredefinedKey@8
__RegRtlQueryInfoKey@24
__RegRtlQueryValue@20
__RegRtlSetValue@20
__RtlEnlargedIntegerMultiply@8
__RtlEnlargedUnsignedDivide@16
__RtlEnlargedUnsignedMultiply@8
__RtlMuiRegAddLIPParent@16
__RtlpMuiRegAddBaseLanguage@20
__RtlpMuiRegAddNeutralLanguage@12
__RtlpMuiRegInitAnyLanguage@16
__RtlpMuiRegInitLIPLanguage@12
__RtlpMuiRegInitPartialLanguage@12
__RtlpMuiRegLoadInstalled@16
__RtlpMuiRegPopulateBaseLanguages@20
__RtlpMuiRegSerializeRegistryInfo@12
__RtlpMuiRegValidateAndGetInstallFallbackBase@20
__RtlpMuiRegValidateInstalled@4
__RtlpMuiRegValidateLIPLanguage@8
__RtlpMuiRegValidatePartialLanguage@8
__RtlpRemovePendingDeleteLanguages@8
__SEH_epilog4
__SEH_epilog4_GS
__SEH_prolog4
__SEH_prolog4_GS
__SysCtxCloseMachine@4
__SysCtxGetCachedContextBaseKey@12
__SysCtxInternalEnumSubkeyCallback@12
__SysCtxOpenControlSet@16
__SysCtxOpenMachine@28
__SysCtxRegCreateKey@36
__SysCtxRegCreateTree@36
__SysCtxRegOpenCurrentUserKey@16
__SysCtxRegOpenKey@24
__TlgCreateSid@8
__TlgCreateSz@8
__TlgCreateWsz@8
__TlgEnableCallback@36
__TlgKeywordOn@12
__TlgWrite@24
__ValidateEH3RN
___RtlConvertLongToLargeInteger@4
___RtlConvertUlongToLargeInteger@4
___ascii_memicmp
___ascii_stricmp
___ascii_strnicmp
___isascii
___pctype_func
___report_gsfailure
___report_rangecheckfailure
__abnormal_termination
__alldiv
__alldvrm
__allmul
__alloca_probe
__alloca_probe_16
__allrem
__allshl
__allshr
__atoi64
__aulldiv
__aulldvrm
__aullrem
__aullshr
__checkTOS_withFB
__check_overflow_exit
__check_range_exit
__chkstk
__clrfp
__convertTOStoQNaN
__ctrlfp
__decomp
__except_handler2
__except_handler3
__except_handler4
__fast_exit
__fgetwc_nolock
__filbuf_s
__filwbuf_s
__finite
__fload_withFB
__flsbuf
__flsbuf_s
__flswbuf
__fputwc_nolock
__get_printf_count_output
__global_unwind2
__handle_exc
__i64toa_s
__i64tow_s
__input_s
__invalid_parameter
__iswctype_l
__itoa
__itoa_s
__itow
__itow_s
__load_CW
__local_unwind2
__local_unwind4
__ltoa_s
__ltow_s
__makepath_s
__math_exit
__matherr
__mbstrlen
__memicmp
__output_l
__output_s
__purecall
__raise_exc
__raise_exc_ex
__safecrt_mbtowc
__safecrt_wctomb_s
__seh_longjmp_unwind4@4
__seh_longjmp_unwind@4
__set_errno_from_matherr
__set_exp
__set_statfp
__sinput_s
__snprintf
__snprintf_s
__snscanf_s
__snwprintf
__snwprintf_s
__snwscanf_s
__soutput_s
__splitpath_s
__startOneArgErrorHandling
__startTwoArgErrorHandling
__statfp
__stricmp
__strlwr
__strnicmp
__strnset
__strnset_s
__strrev
__strset
__strset_s
__strtoi64
__strtoui64
__strupr
__swinput_s
__swoutput_s
__swprintf
__trandisp1
__trandisp2
__twoToTOS
__ui64toa_s
__ui64tow_s
__ultoa_s
__ultow
__ultow_s
__ungetc_nolock
__ungetwc_nolock
__vsnprintf
__vsnprintf_l
__vsnprintf_s
__vsnwprintf
__vsnwprintf_l
__vsnwprintf_s
__vsprintf_l
__vswprintf
__vswprintf_l
__wchartodigit
__wcsicmp
__wcsistr
__wcslwr
__wcslwr_s
__wcsnicmp
__wcsnset
__wcsnset_s
__wcsrev
__wcsset_s
__wcstoi64
__wcsupr
__wctomb_s_l
__winput_s
__wmakepath_s
__woutput_l
__woutput_s
__wsplitpath_s
__wtoi
__wtol
_adapt@12
_atoi
_atol
_bsearch
_bsearch_s
_cos
_decode_digit@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsAddLogContainer@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsCloseLogFileObject@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsCreateLogFile@44
_ext_ms_win_fs_clfs_l1_1_0_ClfsCreateMarshallingArea@32
_ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteLogByPointer@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteMarshallingArea@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsFlushToLsn@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsGetLogFileInformation@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnContainer@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnDifference@20
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnEqual@8
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnInvalid@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnLess@8
_ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtDeregisterManagedClient@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtInstallPolicy@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtRegisterManagedClient@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsReadLogRecord@36
_ext_ms_win_fs_clfs_l1_1_0_ClfsReadNextLogRecord@32
_ext_ms_win_fs_clfs_l1_1_0_ClfsReadRestartArea@20
_ext_ms_win_fs_clfs_l1_1_0_ClfsRemoveLogContainer@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsReserveAndAppendLog@36
_ext_ms_win_fs_clfs_l1_1_0_ClfsTerminateReadLog@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsWriteRestartArea@28
_ext_ms_win_ntos_clipsp_l1_1_0_ClipSpInitialize@8
_ext_ms_win_ntos_clipsp_l1_1_0_ClipSpUninitialize@4
_ext_ms_win_ntos_kcminitcfg_l1_1_0_CmCompleteInitMachineConfig@4
_ext_ms_win_ntos_kcminitcfg_l1_1_0_CmSetInitMachineConfig@4
_ext_ms_win_ntos_ksecurity_l1_1_1_AppContainerPrivilegesEnabledExt@20
_ext_ms_win_ntos_ksecurity_l1_1_1_QueryUpdateFileEaAllowedExt@4
_ext_ms_win_ntos_ksigningpolicy_l1_1_0_SeQuerySigningPolicyExt@28
_ext_ms_win_ntos_ksr_l1_1_0_KsrCleanupPageDatabase@4
_ext_ms_win_ntos_ksr_l1_1_0_KsrInitPageDatabase@8
_ext_ms_win_ntos_ksr_l1_1_0_KsrInitSystem@16
_ext_ms_win_ntos_tm_l1_1_0_NtCommitComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtCommitEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtCommitTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_NtCreateEnlistment@32
_ext_ms_win_ntos_tm_l1_1_0_NtCreateResourceManager@28
_ext_ms_win_ntos_tm_l1_1_0_NtCreateTransaction@40
_ext_ms_win_ntos_tm_l1_1_0_NtCreateTransactionManager@24
_ext_ms_win_ntos_tm_l1_1_0_NtEnumerateTransactionObject@20
_ext_ms_win_ntos_tm_l1_1_0_NtFreezeTransactions@8
_ext_ms_win_ntos_tm_l1_1_0_NtGetNotificationResourceManager@28
_ext_ms_win_ntos_tm_l1_1_0_NtOpenEnlistment@20
_ext_ms_win_ntos_tm_l1_1_0_NtOpenResourceManager@20
_ext_ms_win_ntos_tm_l1_1_0_NtOpenTransaction@20
_ext_ms_win_ntos_tm_l1_1_0_NtOpenTransactionManager@24
_ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtPrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtPrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtPropagationComplete@16
_ext_ms_win_ntos_tm_l1_1_0_NtPropagationFailed@12
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationEnlistment@20
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationResourceManager@20
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransaction@20
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransactionManager@20
_ext_ms_win_ntos_tm_l1_1_0_NtReadOnlyEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtRecoverEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtRecoverResourceManager@4
_ext_ms_win_ntos_tm_l1_1_0_NtRecoverTransactionManager@4
_ext_ms_win_ntos_tm_l1_1_0_NtRegisterProtocolAddressInformation@20
_ext_ms_win_ntos_tm_l1_1_0_NtRenameTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollbackComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollbackEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollbackTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollforwardTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationEnlistment@16
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationResourceManager@16
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransaction@16
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransactionManager@16
_ext_ms_win_ntos_tm_l1_1_0_NtSinglePhaseReject@8
_ext_ms_win_ntos_tm_l1_1_0_NtThawTransactions@0
_ext_ms_win_ntos_tm_l1_1_0_TmCancelPropagationRequest@4
_ext_ms_win_ntos_tm_l1_1_0_TmCommitComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmCommitEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmCommitTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_TmCreateEnlistment@36
_ext_ms_win_ntos_tm_l1_1_0_TmCurrentTransaction@4
_ext_ms_win_ntos_tm_l1_1_0_TmDereferenceEnlistmentKey@8
_ext_ms_win_ntos_tm_l1_1_0_TmEnableCallbacks@12
_ext_ms_win_ntos_tm_l1_1_0_TmEndPropagationRequest@4
_ext_ms_win_ntos_tm_l1_1_0_TmFreezeTransactions@12
_ext_ms_win_ntos_tm_l1_1_0_TmGetTransactionId@8
_ext_ms_win_ntos_tm_l1_1_0_TmInitSystem@16
_ext_ms_win_ntos_tm_l1_1_0_TmInitSystemPhase2@0
_ext_ms_win_ntos_tm_l1_1_0_TmInitializeTransactionManager@16
_ext_ms_win_ntos_tm_l1_1_0_TmIsKTMCommitCoordinator@4
_ext_ms_win_ntos_tm_l1_1_0_TmIsTransactionActive@4
_ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmPrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmPrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmPropagationComplete@16
_ext_ms_win_ntos_tm_l1_1_0_TmPropagationFailed@12
_ext_ms_win_ntos_tm_l1_1_0_TmReadOnlyEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRecoverEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRecoverResourceManager@4
_ext_ms_win_ntos_tm_l1_1_0_TmRecoverTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_TmReferenceEnlistmentKey@8
_ext_ms_win_ntos_tm_l1_1_0_TmRenameTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_TmRequestOutcomeEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRollbackComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmRollbackEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRollbackTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_TmSetCurrentTransaction@4
_ext_ms_win_ntos_tm_l1_1_0_TmShutdownSystem@0
_ext_ms_win_ntos_tm_l1_1_0_TmSinglePhaseReject@8
_ext_ms_win_ntos_tm_l1_1_0_TmThawTransactions@0
_ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationLoad@0
_ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationUnload@0
_ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInitialization@4
_ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCancelReport@4
_ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCloseHandle@4
_ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCreateReport@12
_ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelInitSystem@0
_ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelOpenDumpFile@8
_ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelSubmitReport@8
_isdigit
_islower
_isprint
_isspace
_isupper
_iswalnum
_iswctype
_iswdigit
_iswspace
_isxdigit
_mbstowcs
_mbtowc
_memchr
_memcmp
_memcpy
_memcpy_s
_memmove
_memmove_s
_memset
_pIoQueryBusDescription@24
_pIoQueryDeviceDescription@24
_punycode_decode@32
_punycode_encode@24
_qsort
_rand
_regValue@8
_sin
_sprintf
_sprintf_s
_srand
_sscanf_s
_strcat
_strcat_s
_strchr
_strcmp
_strcpy
_strcpy_s
_strlen
_strncat
_strncat_s
_strncmp
_strncpy
_strncpy_s
_strnlen
_strrchr
_strspn
_strstr
_strtok_s
_strtol
_strtolX
_strtoul
_swprintf
_swprintf_s
_swscanf_s
_tcpxsum@12
_tolower
_toupper
_towlower
_towupper
_vDbgPrintEx@16
_vDbgPrintExWithPrefix@20
_vDbgPrintExWithPrefixInternal@24
_vsprintf
_vsprintf_s
_vswprintf_s
_wcscat
_wcscat_s
_wcschr
_wcscmp
_wcscpy
_wcscpy_s
_wcscspn
_wcslen
_wcsncat
_wcsncat_s
_wcsncmp
_wcsncpy
_wcsncpy_s
_wcsnlen
_wcspbrk
_wcsrchr
_wcsspn
_wcsstr
_wcstol
_wcstolX
_wcstombs
_wcstoul
_wcstoxq
_wctomb
_wctomb_s
_xHalAcpiAoacCapable@0
_xHalAcpiGetMultiNode@0
_xHalAddInterruptRemapping@24
_xHalAllocateGsivForSecondaryInterrupt@12
_xHalAllocateMapRegisters@16
_xHalAllocateMessageTarget@32
_xHalAllocatePmcCounterSet@16
_xHalAssignSlotResources@32
_xHalClockTimerActivate@4
_xHalClockTimerArm@16
_xHalClockTimerInitialize@0
_xHalClockTimerStop@0
_xHalCollectPmcCounters@8
_xHalConnectThermalInterrupt@4
_xHalConvertAuxiliaryCounterToPerformanceCounter@16
_xHalConvertPerformanceCounterToAuxiliaryCounter@16
_xHalDmaCheckAdapterToken@4
_xHalDmaFreeCrashDumpRegisters@4
_xHalDmaLinkDeviceObjectByToken@8
_xHalDpGetInterruptReplayState@8
_xHalDpMaskLevelTriggeredInterrupts@0
_xHalDpReplaceBegin@8
_xHalDpReplaceControl@8
_xHalDpReplaceEnd@4
_xHalDpReplaceTarget@4
_xHalDpReplayInterrupts@4
_xHalDpUnmaskLevelTriggeredInterrupts@0
_xHalEndMirroring@4
_xHalEndOfBoot@0
_xHalEnumerateUnmaskedInterrupts@12
_xHalFlushAndInvalidatePageExternalCache@8
_xHalFlushExternalCache@4
_xHalFlushIoBuffersExternalCache@8
_xHalFlushIoRectangleExternalCache@24
_xHalFreeMessageTarget@12
_xHalFreePmcCounterSet@4
_xHalGetClockConfiguration@4
_xHalGetInterruptTranslator@28
_xHalGetInterruptVector@24
_xHalGetProcessorId@8
_xHalGetVectorInput@20
_xHalHaltSystem@0
_xHalInitPnpDriver@0
_xHalInitPowerManagement@8
_xHalInterruptGetHighestPriorityInterrupt@8
_xHalInterruptSetDestination@12
_xHalInterruptVectorDataToGsiv@8
_xHalIommuDereferenceAsid@4
_xHalIommuDevicePowerChange@12
_xHalIommuDisableDevicePasid@8
_xHalIommuEnableDevicePasid@8
_xHalIommuFaultRoutine@4
_xHalIommuFlushAllPasid@12
_xHalIommuFlushTb@12
_xHalIommuFreeLibraryContext@4
_xHalIommuGetConfiguration@16
_xHalIommuGetLibraryContext@12
_xHalIommuMapDevice@16
_xHalIommuProcessPageRequestQueue@4
_xHalIommuReferenceAsid@4
_xHalIommuRegisterDispatchTable@4
_xHalIommuServicePageFault@12
_xHalIommuSetAddressSpace@8
_xHalIommuSupportEnabled@0
_xHalIommuUnmapDevice@8
_xHalIsEFIRuntimeActive@0
_xHalLoadMicrocode@4
_xHalLocateHiberRanges@4
_xHalMaskInterrupt@8
_xHalMirrorPhysicalMemory@16
_xHalMirrorVerify@16
_xHalNotifyProcessorFreeze@8
_xHalPciEarlyRestore@4
_xHalPciLateRestore@0
_xHalPciMarkHiberPhase@0
_xHalPciMultiStageResumeCapable@0
_xHalPostMicrocodeUpdate@0
_xHalPowerEarlyRestore@4
_xHalPowerSetRebootHandler@4
_xHalPrepareForBugcheck@4
_xHalPrepareProcessorForIdle@4
_xHalProcessorFreeze@0
_xHalProcessorHalt@12
_xHalProcessorOff@0
_xHalProcessorOn@4
_xHalQueryAuxiliaryCounterFrequency@4
_xHalQueryBusSlots@16
_xHalQueryCapsuleCapabilities@16
_xHalQueryIoPortAccessSupported@0
_xHalQueryProcessorRestartEntryPoint@4
_xHalQuerySystemInformation@16
_xHalQueryWakeTime@8
_xHalReadWheaPhysicalMemory@16
_xHalRegisterBusHandler@32
_xHalRegisterLogRoutine@4
_xHalRemoveInterruptRemapping@24
_xHalReportIdleStateUsage@8
_xHalRequestInterrupt@4
_xHalRestoreHvEnlightenment@0
_xHalResumeProcessorFromIdle@0
_xHalSaveAndDisableHvEnlightenment@0
_xHalSecondaryInterruptQueryPrimaryInformation@8
_xHalSetSystemInformation@12
_xHalSetWakeAlarm@16
_xHalStartMirroring@0
_xHalStopLegacyUsbInterrupts@4
_xHalTimerOnlyClockInterruptPending@0
_xHalTimerQueryCycleCounter@4
_xHalTimerWatchdogGeneratedLastReset@0
_xHalTimerWatchdogResetCountdown@4
_xHalTimerWatchdogStart@0
_xHalTimerWatchdogStop@0
_xHalTimerWatchdogTriggerSystemReset@4
_xHalTranslateBusAddress@24
_xHalTscSynchronization@8
_xHalUnloadMicrocode@0
_xHalUnmaskInterrupt@8
_xHalUpdateCapsule@16
_xHalVectorToIDTEntry@4
_xHalVectorToIDTEntryEx@4
_xHalWheaInitProcessorGenericSection@8
_xHalWriteWheaPhysicalMemory@16
_xHalpIsInterruptTypeSecondary@8
_xKdCheckPowerButton@0
_xKdEnumerateDebuggingDevices@12
_xKdGetAcpiTablePhase0@8
_xKdMapPhysicalMemory64@16
_xKdReleaseIntegratedDeviceForDebugging@4
_xKdReleasePciDeviceForDebugging@4
_xKdSetupIntegratedDeviceForDebugging@8
_xKdSetupPciDeviceForDebugging@8
_xKdUnmapVirtualAddress@12
vdmDebugPoint
*/
